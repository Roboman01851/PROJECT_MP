
PROJECT_MP.elf:     file format elf32-littlenios2
PROJECT_MP.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000230

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x0002c488 memsz 0x0002c488 flags r-x
    LOAD off    0x0002d4a8 vaddr 0x0402c4a8 paddr 0x0403be88 align 2**12
         filesz 0x0000f9e0 memsz 0x0000f9e0 flags rw-
    LOAD off    0x0003d868 vaddr 0x0404b868 paddr 0x0404b868 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0002a768  04000230  04000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001b10  0402a998  0402a998  0002b998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000f9e0  0402c4a8  0403be88  0002d4a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  0404b868  0404b868  0003d868  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  0404b9c8  0404b9c8  0003ce88  2**0
                  CONTENTS
  7 .VGA_PIXEL_RAM 00000000  08000000  08000000  0003ce88  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0003ce88  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f80  00000000  00000000  0003ceb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00026c49  00000000  00000000  0003de30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009967  00000000  00000000  00064a79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e13a  00000000  00000000  0006e3e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002824  00000000  00000000  0007c51c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004049  00000000  00000000  0007ed40  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017a78  00000000  00000000  00082d89  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0009a804  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001928  00000000  00000000  0009a818  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0009fcda  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0009fcdd  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0009fce2  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0009fce3  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0009fce4  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0009fce8  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0009fcec  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0009fcf0  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0009fcfb  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0009fd06  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000f  00000000  00000000  0009fd11  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000004c  00000000  00000000  0009fd20  2**0
                  CONTENTS, READONLY
 30 .jdi          00003eda  00000000  00000000  0009fd6c  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000bbc18  00000000  00000000  000a3c46  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000230 l    d  .text	00000000 .text
0402a998 l    d  .rodata	00000000 .rodata
0402c4a8 l    d  .rwdata	00000000 .rwdata
0404b868 l    d  .bss	00000000 .bss
0404b9c8 l    d  .SDRAM	00000000 .SDRAM
08000000 l    d  .VGA_PIXEL_RAM	00000000 .VGA_PIXEL_RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../PROJECT_MP_bsp//obj/HAL/src/crt0.o
04000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 PROJECTMP.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0402c1be l     O .rodata	00000010 zeroes.4404
0401b8e4 l     F .text	000000bc __sbprintf
0402c1ce l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0401baf4 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0401d64c l     F .text	00000008 __fp_unlock
0401d660 l     F .text	0000019c __sinit.part.1
0401d7fc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0403a2a8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0403a6ec l     O .rwdata	00000020 lc_ctype_charset
0403a6cc l     O .rwdata	00000020 lc_message_charset
0403a70c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0402c200 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
04020a60 l     F .text	000000fc __sprint_r.part.0
0402c324 l     O .rodata	00000010 zeroes.4349
0402209c l     F .text	000000bc __sbprintf
0402c334 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
04026014 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
04026128 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
04026154 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
04026248 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
04026330 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0402641c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
040265f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0403be30 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0402686c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
040269a8 l     F .text	00000034 alt_dev_reg
0403acf4 l     O .rwdata	00001060 USB_BLASTER
0403bd54 l     O .rwdata	00000028 altera_hostfs
0403bd7c l     O .rwdata	00000030 altera_ro_zipfs
0403bdac l     O .rwdata	00000054 VGA_PIXEL_DMA
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04026e88 l     F .text	0000020c altera_avalon_jtag_uart_irq
04027094 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
0403be34 l     O .rwdata	00000009 hcinfo.2538
0403be40 l     O .rwdata	0000000a hcinfo.2551
0403be4c l     O .rwdata	00000009 hcinfo.2560
0403be58 l     O .rwdata	0000000a hcinfo.2573
0403be64 l     O .rwdata	0000000a hcinfo.2586
0403be70 l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 altera_ro_zipfs.c
04027b50 l     F .text	00000074 read_word
04027bc4 l     F .text	00000054 read_word_inc
04027c18 l     F .text	00000044 read_half_word
04027c5c l     F .text	00000054 read_half_word_inc
04027cb0 l     F .text	00000120 check_file_header
04027f04 l     F .text	000000a4 check_directory_table
04027fa8 l     F .text	000000ac find_directory_entry
04028054 l     F .text	00000178 find_file_entry_by_name
040281cc l     F .text	0000019c find_file_entry
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
040297b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04029d20 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
04029e80 l     F .text	0000003c alt_get_errno
04029ebc l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0404b89c g     O .bss	00000004 alt_instruction_exception_handler
040200a4 g     F .text	00000074 _mprec_log10
04020190 g     F .text	0000008c __any_on
04022650 g     F .text	00000054 _isatty_r
0402c20c g     O .rodata	00000028 __mprec_tinytens
040312a8 g     O .rwdata	00000600 D
04026534 g     F .text	0000007c alt_main
04034ea8 g     O .rwdata	00000600 N
04029028 g     F .text	0000026c alt_up_pixel_buffer_dma_draw_vline
04019404 g     F .text	000000c0 _puts_r
0404b8c8 g     O .bss	00000100 alt_irq
040226a4 g     F .text	00000060 _lseek_r
0403be88 g       *ABS*	00000000 __flash_rwdata_start
040249ec g     F .text	00000088 .hidden __eqdf2
0404b9c8 g       *ABS*	00000000 __alt_heap_start
040193c8 g     F .text	0000003c printf
040228bc g     F .text	0000009c _wcrtomb_r
04020920 g     F .text	0000005c __sseek
0401d9ac g     F .text	00000010 __sinit
04022764 g     F .text	00000140 __swbuf_r
0401e480 g     F .text	0000007c _setlocale_r
0401d804 g     F .text	00000078 __sfmoreglue
040265d4 g     F .text	00000024 __malloc_unlock
040276cc g     F .text	0000011c alt_hostfs_open
0401f008 g     F .text	0000015c memmove
0401d994 g     F .text	00000018 _cleanup
0402d0a8 g     O .rwdata	00000600 two
0401f164 g     F .text	000000a8 _Balloc
04028728 g     F .text	000001a8 alt_up_pixel_buffer_dma_draw
04024a74 g     F .text	000000dc .hidden __gtdf2
0402a2a8 g     F .text	00000024 altera_nios2_gen2_irq_init
040286ec g     F .text	0000003c alt_up_pixel_buffer_dma_open_dev
04000000 g     F .entry	0000000c __reset
04000020 g       *ABS*	00000000 __flash_exceptions_start
040225f4 g     F .text	0000005c _fstat_r
0404b880 g     O .bss	00000004 errno
0402089c g     F .text	00000008 __seofread
0404b888 g     O .bss	00000004 alt_argv
04043e00 g       *ABS*	00000000 _gp
040288d0 g     F .text	0000005c alt_up_pixel_buffer_dma_change_back_buffer_address
0403ab74 g     O .rwdata	00000180 alt_fd_list
04027904 g     F .text	00000068 alt_hostfs_seek
04029950 g     F .text	00000090 alt_find_dev
040300a8 g     O .rwdata	00000600 A
04019128 g     F .text	00000148 memcpy
04033ca8 g     O .rwdata	00000600 K
0401d654 g     F .text	0000000c _cleanup_r
04025e2c g     F .text	000000dc .hidden __floatsidf
040299e0 g     F .text	00000080 alt_fs_reg
04029e04 g     F .text	0000007c alt_io_redirect
04024b50 g     F .text	000000f4 .hidden __ltdf2
0402a998 g       *ABS*	00000000 __DTOR_END__
040194c4 g     F .text	00000014 puts
0402a498 g     F .text	0000009c alt_exception_cause_generated_bad_addr
04028368 g     F .text	00000090 alt_ro_zipfs_open
04020780 g     F .text	00000074 __fpclassifyd
04020000 g     F .text	000000a4 __ratio
04022080 g     F .text	0000001c __vfiprintf_internal
0402898c g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0402728c g     F .text	0000021c altera_avalon_jtag_uart_read
04019398 g     F .text	00000030 _printf_r
04019044 g     F .text	00000064 .hidden __udivsi3
04026284 g     F .text	000000ac isatty
0402c25c g     O .rodata	000000c8 __mprec_tens
040360a8 g     O .rwdata	00000600 Q
04028df8 g     F .text	00000230 alt_up_pixel_buffer_dma_draw_hline
0401e4fc g     F .text	0000000c __locale_charset
0404b87c g     O .bss	00000004 __malloc_top_pad
0403be08 g     O .rwdata	00000004 __mb_cur_max
0401e52c g     F .text	0000000c _localeconv_r
0401f598 g     F .text	0000003c __i2b
0401de30 g     F .text	000004c8 __sfvwrite_r
040207f4 g     F .text	00000054 _sbrk_r
0402935c g     F .text	000000c0 helper_plot_pixel
0402782c g     F .text	0000006c alt_hostfs_read
04022704 g     F .text	00000060 _read_r
0403be28 g     O .rwdata	00000004 alt_max_fd
040222e8 g     F .text	000000f0 _fclose_r
04039ca8 g     O .rwdata	00000600 square
0401d61c g     F .text	00000030 fflush
0404b878 g     O .bss	00000004 __malloc_max_sbrked_mem
040390a8 g     O .rwdata	00000600 Y
04023770 g     F .text	000008ac .hidden __adddf3
0401fda8 g     F .text	0000010c __b2d
040289c0 g     F .text	0000013c alt_up_pixel_buffer_dma_clear_screen
040231ac g     F .text	000005c4 .hidden __umoddi3
04026458 g     F .text	000000dc lseek
0403be00 g     O .rwdata	00000004 _global_impure_ptr
0402021c g     F .text	00000564 _realloc_r
0404b9c8 g       *ABS*	00000000 __bss_end
04029c30 g     F .text	000000f0 alt_iic_isr_register
04028afc g     F .text	000002fc alt_up_pixel_buffer_dma_draw_box
0402a1a0 g     F .text	00000108 alt_tick
04022bb0 g     F .text	000005fc .hidden __udivdi3
04022550 g     F .text	00000024 _fputwc_r
0402c234 g     O .rodata	00000028 __mprec_bigtens
0401f37c g     F .text	00000104 __s2b
04025f08 g     F .text	000000a8 .hidden __floatunsidf
0401fae8 g     F .text	00000060 __mcmp
0401d9cc g     F .text	00000018 __fp_lock_all
040372a8 g     O .rwdata	00000600 T
04029be4 g     F .text	0000004c alt_ic_irq_enabled
04036ca8 g     O .rwdata	00000600 S
0400026c g     F .text	00000048 Delay_Loading
0402a104 g     F .text	0000009c alt_alarm_stop
0402faa8 g     O .rwdata	00000600 nine
0404b890 g     O .bss	00000004 alt_irq_active
040284e0 g     F .text	0000013c alt_ro_zipfs_seek
040277e8 g     F .text	00000044 alt_hostfs_close
040000fc g     F .exceptions	000000d4 alt_irq_handler
0403ab4c g     O .rwdata	00000028 alt_dev_null
04029790 g     F .text	00000020 alt_dcache_flush_all
0401f480 g     F .text	00000068 __hi0bits
04029294 g     F .text	000000c8 alt_up_pixel_buffer_dma_draw_rectangle
040306a8 g     O .rwdata	00000600 B
04025dac g     F .text	00000080 .hidden __fixdfsi
0403be88 g       *ABS*	00000000 __ram_rwdata_end
0403be20 g     O .rwdata	00000008 alt_dev_list
040268a8 g     F .text	00000100 write
040336a8 g     O .rwdata	00000600 J
0402941c g     F .text	00000248 alt_up_pixel_buffer_dma_draw_line
0402c4a8 g       *ABS*	00000000 __ram_rodata_end
04026190 g     F .text	000000b8 fstat
04000000 g       *ABS*	00000000 __alt_mem_SDRAM
04024b50 g     F .text	000000f4 .hidden __ledf2
0401f860 g     F .text	00000140 __pow5mult
04020b74 g     F .text	0000150c ___vfiprintf_internal_r
0404b870 g     O .bss	00000004 __nlocale_changed
040190a8 g     F .text	00000058 .hidden __umodsi3
040002fc g     F .text	00000048 Delay_Medium
0404b9c8 g       *ABS*	00000000 end
04030ca8 g     O .rwdata	00000600 C
04037ea8 g     O .rwdata	00000600 V
04026dc8 g     F .text	000000c0 altera_avalon_jtag_uart_init
040001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0402a998 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
04025fb0 g     F .text	00000064 .hidden __clzsi2
040274a8 g     F .text	00000224 altera_avalon_jtag_uart_write
0401d9bc g     F .text	00000004 __sfp_lock_acquire
0401ef24 g     F .text	000000e4 memchr
040195ec g     F .text	000022dc ___vfprintf_internal_r
0401db20 g     F .text	00000310 _free_r
0401e508 g     F .text	00000010 __locale_mb_cur_max
0402a7e4 g     F .text	00000180 __call_exitprocs
0404b86c g     O .bss	00000004 __mlocale_changed
0403be0c g     O .rwdata	00000004 __malloc_sbrk_base
04000230 g     F .text	0000003c _start
0404b894 g     O .bss	00000004 _alt_tick_rate
040194f0 g     F .text	00000064 rand
0401f9a0 g     F .text	00000148 __lshift
0404b898 g     O .bss	00000004 _alt_nticks
04026634 g     F .text	00000104 read
04026a14 g     F .text	00000250 alt_sys_init
0402a6cc g     F .text	00000118 __register_exitproc
0402a5fc g     F .text	000000d0 strncmp
0401f5d4 g     F .text	0000028c __multiply
04027134 g     F .text	00000068 altera_avalon_jtag_uart_close
04019100 g     F .text	00000028 .hidden __mulsi3
0402c4a8 g       *ABS*	00000000 __ram_rwdata_start
0402a998 g       *ABS*	00000000 __ram_rodata_start
0404b8a0 g     O .bss	00000028 __malloc_current_mallinfo
0401feb4 g     F .text	0000014c __d2b
040324a8 g     O .rwdata	00000600 G
04026c64 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0402a3d4 g     F .text	000000c4 alt_get_fd
0402eea8 g     O .rwdata	00000600 seven
040221b8 g     F .text	00000054 _close_r
040354a8 g     O .rwdata	00000600 O
0402a580 g     F .text	0000007c memcmp
04026d24 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0404b9c8 g       *ABS*	00000000 __alt_stack_base
04026d74 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0401b9a0 g     F .text	00000154 __swsetup_r
0402401c g     F .text	000009d0 .hidden __divdf3
0401d87c g     F .text	00000118 __sfp
040384a8 g     O .rwdata	00000600 W
04020118 g     F .text	00000078 __copybits
0403a744 g     O .rwdata	00000408 __malloc_av_
0401d9c8 g     F .text	00000004 __sinit_lock_release
04024c44 g     F .text	0000086c .hidden __muldf3
04020848 g     F .text	00000054 __sread
0402a2cc g     F .text	00000108 alt_find_file
040297ec g     F .text	000000a4 alt_dev_llist_insert
040265b0 g     F .text	00000024 __malloc_lock
040267bc g     F .text	000000b0 sbrk
04000344 g     F .text	00000044 Delay_Short
0401d5c0 g     F .text	0000005c _fflush_r
0402220c g     F .text	000000dc _calloc_r
0404b868 g       *ABS*	00000000 __bss_start
04019270 g     F .text	00000128 memset
040005d4 g     F .text	00018978 main
0404b88c g     O .bss	00000004 alt_envp
0404b874 g     O .bss	00000004 __malloc_max_total_mem
0402892c g     F .text	00000060 alt_up_pixel_buffer_dma_swap_buffers
04026cc4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
040228a4 g     F .text	00000018 __swbuf
040194d8 g     F .text	00000018 srand
0402e8a8 g     O .rwdata	00000600 six
0402097c g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
040223d8 g     F .text	00000014 fclose
04032aa8 g     O .rwdata	00000600 H
0401bd1c g     F .text	00001688 _dtoa_r
0401e718 g     F .text	0000080c _malloc_r
04022a18 g     F .text	00000030 __ascii_wctomb
0403be2c g     O .rwdata	00000004 alt_errno
040002b4 g     F .text	00000048 Delay_Long
0401e2f8 g     F .text	000000c4 _fwalk
040004cc g     F .text	00000108 draw1
04018f4c g     F .text	00000084 .hidden __divsi3
040283f8 g     F .text	000000e8 alt_ro_zipfs_read
0401d9fc g     F .text	00000124 _malloc_trim_r
0402a998 g       *ABS*	00000000 __CTOR_END__
040342a8 g     O .rwdata	00000600 L
04028694 g     F .text	00000058 alt_ro_zipfs_check_valid
04020984 g     F .text	000000dc strcmp
0402a998 g       *ABS*	00000000 __flash_rodata_start
0402a998 g       *ABS*	00000000 __DTOR_LIST__
040249ec g     F .text	00000088 .hidden __nedf2
0402861c g     F .text	00000078 alt_ro_zipfs_fstat
040269dc g     F .text	00000038 alt_irq_init
04026738 g     F .text	00000084 alt_release_fd
0402c344 g     O .rodata	00000100 .hidden __clz_tab
0404b868 g     O .bss	00000004 _PathLocale
040366a8 g     O .rwdata	00000600 R
0402a534 g     F .text	00000014 atexit
0402c4a8 g     O .rwdata	00000600 zero
04022158 g     F .text	00000060 _write_r
0401e538 g     F .text	00000018 setlocale
0403be04 g     O .rwdata	00000004 _impure_ptr
0404b884 g     O .bss	00000004 alt_argc
040396a8 g     O .rwdata	00000600 Z
0401d3a4 g     F .text	0000021c __sflush_r
040298f0 g     F .text	00000060 _do_dtors
0401e524 g     F .text	00000008 __locale_cjk_lang
0402caa8 g     O .rwdata	00000600 one
04000020 g       .exceptions	00000000 alt_irq_entry
0401fd44 g     F .text	00000064 __ulp
0401d9e4 g     F .text	00000018 __fp_unlock_all
0403be18 g     O .rwdata	00000008 alt_fs_list
04027898 g     F .text	0000006c alt_hostfs_write
040318a8 g     O .rwdata	00000600 E
040330a8 g     O .rwdata	00000600 I
04000020 g       *ABS*	00000000 __ram_exceptions_start
0401e550 g     F .text	0000000c localeconv
04000388 g     F .text	00000040 Delay_Pulse
040348a8 g     O .rwdata	00000600 M
04029a80 g     F .text	00000050 alt_ic_isr_register
0403be88 g       *ABS*	00000000 _edata
0404b9c8 g       *ABS*	00000000 _end
040223ec g     F .text	00000164 __fputwc
04000230 g       *ABS*	00000000 __ram_exceptions_end
0402719c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
040378a8 g     O .rwdata	00000600 U
04029b58 g     F .text	0000008c alt_ic_irq_disable
040208a4 g     F .text	0000007c __swrite
0403be10 g     O .rwdata	00000004 __malloc_trim_threshold
0401e518 g     F .text	0000000c __locale_msgcharset
0402a548 g     F .text	00000038 exit
0401e3bc g     F .text	000000c4 _fwalk_reent
0401fb48 g     F .text	000001fc __mdiff
04018fd0 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
0401d9c0 g     F .text	00000004 __sfp_lock_release
040003c8 g     F .text	00000104 draw
0402f4a8 g     O .rwdata	00000600 eight
0402a964 g     F .text	00000034 _exit
04029664 g     F .text	0000012c alt_alarm_start
04022aa4 g     F .text	0000010c .hidden __muldi3
0401e55c g     F .text	000001bc __smakebuf_r
08000000 g       *ABS*	00000000 __alt_mem_VGA_PIXEL_RAM
04019554 g     F .text	00000098 strlen
04029fa8 g     F .text	0000015c open
04024a74 g     F .text	000000dc .hidden __gedf2
0402d6a8 g     O .rwdata	00000600 three
0403be14 g     O .rwdata	00000004 __wctomb
0402e2a8 g     O .rwdata	00000600 five
04020b5c g     F .text	00000018 __sprint_r
04029a60 g     F .text	00000020 alt_icache_flush_all
0403be7c g     O .rwdata	00000004 alt_priority_mask
04029ad0 g     F .text	00000088 alt_ic_irq_enable
0401b8c8 g     F .text	0000001c __vfprintf_internal
04022a48 g     F .text	0000005c _wctomb_r
040254b0 g     F .text	000008fc .hidden __subdf3
0401f4e8 g     F .text	000000b0 __lo0bits
0403be80 g     O .rwdata	00000008 alt_alarm_list
0402dca8 g     O .rwdata	00000600 four
04029890 g     F .text	00000060 _do_ctors
04031ea8 g     O .rwdata	00000600 F
04035aa8 g     O .rwdata	00000600 P
04022958 g     F .text	000000c0 wcrtomb
04026050 g     F .text	000000d8 close
04026398 g     F .text	00000084 alt_load
04022574 g     F .text	00000080 fputwc
04038aa8 g     O .rwdata	00000600 X
0401d9c4 g     F .text	00000004 __sinit_lock_acquire
0401f234 g     F .text	00000148 __multadd
0401f20c g     F .text	00000028 _Bfree
0402796c g     F .text	000001e4 alt_hostfs_fstat
04027dd0 g     F .text	00000134 check_directory_header



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000004:	08408c14 	ori	at,at,560
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	00810174 	movhi	r2,1029
 4000140:	10ae3204 	addi	r2,r2,-18232
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	00810174 	movhi	r2,1029
 4000158:	10ae3204 	addi	r2,r2,-18232
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40001e4:	00bfffc4 	movi	r2,-1
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 40001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40001f0:	d09ea717 	ldw	r2,31388(gp)
 40001f4:	10000726 	beq	r2,zero,4000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40001f8:	d09ea717 	ldw	r2,31388(gp)
 40001fc:	e0fffd17 	ldw	r3,-12(fp)
 4000200:	e1bffe17 	ldw	r6,-8(fp)
 4000204:	e17fff17 	ldw	r5,-4(fp)
 4000208:	1809883a 	mov	r4,r3
 400020c:	103ee83a 	callr	r2
 4000210:	00000206 	br	400021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4000218:	0005883a 	mov	r2,zero
}
 400021c:	e037883a 	mov	sp,fp
 4000220:	dfc00117 	ldw	ra,4(sp)
 4000224:	df000017 	ldw	fp,0(sp)
 4000228:	dec00204 	addi	sp,sp,8
 400022c:	f800283a 	ret

Disassembly of section .text:

04000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000230:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000238:	06810134 	movhi	gp,1028
    ori gp, gp, %lo(_gp)
 400023c:	d68f8014 	ori	gp,gp,15872
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000240:	00810134 	movhi	r2,1028
    ori r2, r2, %lo(__bss_start)
 4000244:	10ae1a14 	ori	r2,r2,47208

    movhi r3, %hi(__bss_end)
 4000248:	00c10134 	movhi	r3,1028
    ori r3, r3, %lo(__bss_end)
 400024c:	18ee7214 	ori	r3,r3,47560

    beq r2, r3, 1f
 4000250:	10c00326 	beq	r2,r3,4000260 <_start+0x30>

0:
    stw zero, (r2)
 4000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400025c:	10fffd36 	bltu	r2,r3,4000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000260:	40263980 	call	4026398 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000264:	40265340 	call	4026534 <alt_main>

04000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000268:	003fff06 	br	4000268 <__alt_data_end+0xfc000268>

0400026c <Delay_Loading>:
#include "COLOR_08.h"
#include "letters.h"



void Delay_Loading () {int d = 0; for (d = 0; d <  5000000; d++);}
 400026c:	defffe04 	addi	sp,sp,-8
 4000270:	df000115 	stw	fp,4(sp)
 4000274:	df000104 	addi	fp,sp,4
 4000278:	e03fff15 	stw	zero,-4(fp)
 400027c:	e03fff15 	stw	zero,-4(fp)
 4000280:	00000306 	br	4000290 <Delay_Loading+0x24>
 4000284:	e0bfff17 	ldw	r2,-4(fp)
 4000288:	10800044 	addi	r2,r2,1
 400028c:	e0bfff15 	stw	r2,-4(fp)
 4000290:	e0ffff17 	ldw	r3,-4(fp)
 4000294:	00801334 	movhi	r2,76
 4000298:	1092cfc4 	addi	r2,r2,19263
 400029c:	10fff90e 	bge	r2,r3,4000284 <__alt_data_end+0xfc000284>
 40002a0:	0001883a 	nop
 40002a4:	e037883a 	mov	sp,fp
 40002a8:	df000017 	ldw	fp,0(sp)
 40002ac:	dec00104 	addi	sp,sp,4
 40002b0:	f800283a 	ret

040002b4 <Delay_Long>:
void Delay_Long    () {int d = 0; for (d = 0; d <   500000; d++);}
 40002b4:	defffe04 	addi	sp,sp,-8
 40002b8:	df000115 	stw	fp,4(sp)
 40002bc:	df000104 	addi	fp,sp,4
 40002c0:	e03fff15 	stw	zero,-4(fp)
 40002c4:	e03fff15 	stw	zero,-4(fp)
 40002c8:	00000306 	br	40002d8 <Delay_Long+0x24>
 40002cc:	e0bfff17 	ldw	r2,-4(fp)
 40002d0:	10800044 	addi	r2,r2,1
 40002d4:	e0bfff15 	stw	r2,-4(fp)
 40002d8:	e0ffff17 	ldw	r3,-4(fp)
 40002dc:	00800234 	movhi	r2,8
 40002e0:	10a847c4 	addi	r2,r2,-24289
 40002e4:	10fff90e 	bge	r2,r3,40002cc <__alt_data_end+0xfc0002cc>
 40002e8:	0001883a 	nop
 40002ec:	e037883a 	mov	sp,fp
 40002f0:	df000017 	ldw	fp,0(sp)
 40002f4:	dec00104 	addi	sp,sp,4
 40002f8:	f800283a 	ret

040002fc <Delay_Medium>:
void Delay_Medium  () {int d = 0; for (d = 0; d <   150000; d++);}
 40002fc:	defffe04 	addi	sp,sp,-8
 4000300:	df000115 	stw	fp,4(sp)
 4000304:	df000104 	addi	fp,sp,4
 4000308:	e03fff15 	stw	zero,-4(fp)
 400030c:	e03fff15 	stw	zero,-4(fp)
 4000310:	00000306 	br	4000320 <Delay_Medium+0x24>
 4000314:	e0bfff17 	ldw	r2,-4(fp)
 4000318:	10800044 	addi	r2,r2,1
 400031c:	e0bfff15 	stw	r2,-4(fp)
 4000320:	e0ffff17 	ldw	r3,-4(fp)
 4000324:	008000b4 	movhi	r2,2
 4000328:	10927bc4 	addi	r2,r2,18927
 400032c:	10fff90e 	bge	r2,r3,4000314 <__alt_data_end+0xfc000314>
 4000330:	0001883a 	nop
 4000334:	e037883a 	mov	sp,fp
 4000338:	df000017 	ldw	fp,0(sp)
 400033c:	dec00104 	addi	sp,sp,4
 4000340:	f800283a 	ret

04000344 <Delay_Short>:
void Delay_Short   () {int d = 0; for (d = 0; d <     5000; d++);}
 4000344:	defffe04 	addi	sp,sp,-8
 4000348:	df000115 	stw	fp,4(sp)
 400034c:	df000104 	addi	fp,sp,4
 4000350:	e03fff15 	stw	zero,-4(fp)
 4000354:	e03fff15 	stw	zero,-4(fp)
 4000358:	00000306 	br	4000368 <Delay_Short+0x24>
 400035c:	e0bfff17 	ldw	r2,-4(fp)
 4000360:	10800044 	addi	r2,r2,1
 4000364:	e0bfff15 	stw	r2,-4(fp)
 4000368:	e0bfff17 	ldw	r2,-4(fp)
 400036c:	1084e210 	cmplti	r2,r2,5000
 4000370:	103ffa1e 	bne	r2,zero,400035c <__alt_data_end+0xfc00035c>
 4000374:	0001883a 	nop
 4000378:	e037883a 	mov	sp,fp
 400037c:	df000017 	ldw	fp,0(sp)
 4000380:	dec00104 	addi	sp,sp,4
 4000384:	f800283a 	ret

04000388 <Delay_Pulse>:
void Delay_Pulse   () {int d = 0; for (d = 0; d <        1; d++);}
 4000388:	defffe04 	addi	sp,sp,-8
 400038c:	df000115 	stw	fp,4(sp)
 4000390:	df000104 	addi	fp,sp,4
 4000394:	e03fff15 	stw	zero,-4(fp)
 4000398:	e03fff15 	stw	zero,-4(fp)
 400039c:	00000306 	br	40003ac <Delay_Pulse+0x24>
 40003a0:	e0bfff17 	ldw	r2,-4(fp)
 40003a4:	10800044 	addi	r2,r2,1
 40003a8:	e0bfff15 	stw	r2,-4(fp)
 40003ac:	e0bfff17 	ldw	r2,-4(fp)
 40003b0:	00bffb0e 	bge	zero,r2,40003a0 <__alt_data_end+0xfc0003a0>
 40003b4:	0001883a 	nop
 40003b8:	e037883a 	mov	sp,fp
 40003bc:	df000017 	ldw	fp,0(sp)
 40003c0:	dec00104 	addi	sp,sp,4
 40003c4:	f800283a 	ret

040003c8 <draw>:


void draw(int dd[24][16], int color, int x_offset, int y_offset)
{
 40003c8:	defff504 	addi	sp,sp,-44
 40003cc:	dfc00a15 	stw	ra,40(sp)
 40003d0:	df000915 	stw	fp,36(sp)
 40003d4:	dc400815 	stw	r17,32(sp)
 40003d8:	dc000715 	stw	r16,28(sp)
 40003dc:	df000904 	addi	fp,sp,36
 40003e0:	e13ffa15 	stw	r4,-24(fp)
 40003e4:	e17ffb15 	stw	r5,-20(fp)
 40003e8:	e1bffc15 	stw	r6,-16(fp)
 40003ec:	e1fffd15 	stw	r7,-12(fp)
alt_up_pixel_buffer_dma_dev* hPB = alt_up_pixel_buffer_dma_open_dev (VGA_PIXEL_DMA_NAME);
 40003f0:	010100f4 	movhi	r4,1027
 40003f4:	212a6604 	addi	r4,r4,-22120
 40003f8:	40286ec0 	call	40286ec <alt_up_pixel_buffer_dma_open_dev>
 40003fc:	e0bff915 	stw	r2,-28(fp)

int vertical, horizontal;

for (vertical=0; vertical<24; vertical++)
 4000400:	e03ff715 	stw	zero,-36(fp)
 4000404:	00002606 	br	40004a0 <draw+0xd8>
{
for (horizontal=0; horizontal<16; horizontal++)
 4000408:	e03ff815 	stw	zero,-32(fp)
 400040c:	00001e06 	br	4000488 <draw+0xc0>
{
if (dd[vertical][horizontal] > 0)
 4000410:	e0bff717 	ldw	r2,-36(fp)
 4000414:	100491ba 	slli	r2,r2,6
 4000418:	e0fffa17 	ldw	r3,-24(fp)
 400041c:	1887883a 	add	r3,r3,r2
 4000420:	e0bff817 	ldw	r2,-32(fp)
 4000424:	1085883a 	add	r2,r2,r2
 4000428:	1085883a 	add	r2,r2,r2
 400042c:	1885883a 	add	r2,r3,r2
 4000430:	10800017 	ldw	r2,0(r2)
 4000434:	0080110e 	bge	zero,r2,400047c <draw+0xb4>
{
alt_up_pixel_buffer_dma_draw (hPB, color, horizontal+x_offset*16, vertical+y_offset*24);
 4000438:	e43ffb17 	ldw	r16,-20(fp)
 400043c:	e0bffc17 	ldw	r2,-16(fp)
 4000440:	1006913a 	slli	r3,r2,4
 4000444:	e0bff817 	ldw	r2,-32(fp)
 4000448:	1885883a 	add	r2,r3,r2
 400044c:	1023883a 	mov	r17,r2
 4000450:	01400604 	movi	r5,24
 4000454:	e13ffd17 	ldw	r4,-12(fp)
 4000458:	40191000 	call	4019100 <__mulsi3>
 400045c:	1007883a 	mov	r3,r2
 4000460:	e0bff717 	ldw	r2,-36(fp)
 4000464:	1885883a 	add	r2,r3,r2
 4000468:	100f883a 	mov	r7,r2
 400046c:	880d883a 	mov	r6,r17
 4000470:	800b883a 	mov	r5,r16
 4000474:	e13ff917 	ldw	r4,-28(fp)
 4000478:	40287280 	call	4028728 <alt_up_pixel_buffer_dma_draw>

int vertical, horizontal;

for (vertical=0; vertical<24; vertical++)
{
for (horizontal=0; horizontal<16; horizontal++)
 400047c:	e0bff817 	ldw	r2,-32(fp)
 4000480:	10800044 	addi	r2,r2,1
 4000484:	e0bff815 	stw	r2,-32(fp)
 4000488:	e0bff817 	ldw	r2,-32(fp)
 400048c:	10800410 	cmplti	r2,r2,16
 4000490:	103fdf1e 	bne	r2,zero,4000410 <__alt_data_end+0xfc000410>
{
alt_up_pixel_buffer_dma_dev* hPB = alt_up_pixel_buffer_dma_open_dev (VGA_PIXEL_DMA_NAME);

int vertical, horizontal;

for (vertical=0; vertical<24; vertical++)
 4000494:	e0bff717 	ldw	r2,-36(fp)
 4000498:	10800044 	addi	r2,r2,1
 400049c:	e0bff715 	stw	r2,-36(fp)
 40004a0:	e0bff717 	ldw	r2,-36(fp)
 40004a4:	10800610 	cmplti	r2,r2,24
 40004a8:	103fd71e 	bne	r2,zero,4000408 <__alt_data_end+0xfc000408>
{
alt_up_pixel_buffer_dma_draw (hPB, color, horizontal+x_offset*16, vertical+y_offset*24);
}
}
}
}
 40004ac:	0001883a 	nop
 40004b0:	e6fffe04 	addi	sp,fp,-8
 40004b4:	dfc00317 	ldw	ra,12(sp)
 40004b8:	df000217 	ldw	fp,8(sp)
 40004bc:	dc400117 	ldw	r17,4(sp)
 40004c0:	dc000017 	ldw	r16,0(sp)
 40004c4:	dec00404 	addi	sp,sp,16
 40004c8:	f800283a 	ret

040004cc <draw1>:

void draw1(int bb[12][8], int color, int x_offset, int y_offset)
{
 40004cc:	defff504 	addi	sp,sp,-44
 40004d0:	dfc00a15 	stw	ra,40(sp)
 40004d4:	df000915 	stw	fp,36(sp)
 40004d8:	dc400815 	stw	r17,32(sp)
 40004dc:	dc000715 	stw	r16,28(sp)
 40004e0:	df000904 	addi	fp,sp,36
 40004e4:	e13ffa15 	stw	r4,-24(fp)
 40004e8:	e17ffb15 	stw	r5,-20(fp)
 40004ec:	e1bffc15 	stw	r6,-16(fp)
 40004f0:	e1fffd15 	stw	r7,-12(fp)
alt_up_pixel_buffer_dma_dev* hPB = alt_up_pixel_buffer_dma_open_dev (VGA_PIXEL_DMA_NAME);
 40004f4:	010100f4 	movhi	r4,1027
 40004f8:	212a6604 	addi	r4,r4,-22120
 40004fc:	40286ec0 	call	40286ec <alt_up_pixel_buffer_dma_open_dev>
 4000500:	e0bff915 	stw	r2,-28(fp)

int vert;
int hori;

for (vert=0; vert<12; vert++)
 4000504:	e03ff715 	stw	zero,-36(fp)
 4000508:	00002706 	br	40005a8 <draw1+0xdc>
{
for (hori=0; hori<8; hori++)
 400050c:	e03ff815 	stw	zero,-32(fp)
 4000510:	00001f06 	br	4000590 <draw1+0xc4>
{
if (bb[vert][hori] == 1 )
 4000514:	e0bff717 	ldw	r2,-36(fp)
 4000518:	1004917a 	slli	r2,r2,5
 400051c:	e0fffa17 	ldw	r3,-24(fp)
 4000520:	1887883a 	add	r3,r3,r2
 4000524:	e0bff817 	ldw	r2,-32(fp)
 4000528:	1085883a 	add	r2,r2,r2
 400052c:	1085883a 	add	r2,r2,r2
 4000530:	1885883a 	add	r2,r3,r2
 4000534:	10800017 	ldw	r2,0(r2)
 4000538:	10800058 	cmpnei	r2,r2,1
 400053c:	1000111e 	bne	r2,zero,4000584 <draw1+0xb8>
{
alt_up_pixel_buffer_dma_draw (hPB, color, hori+x_offset*8, vert+y_offset*12);
 4000540:	e43ffb17 	ldw	r16,-20(fp)
 4000544:	e0bffc17 	ldw	r2,-16(fp)
 4000548:	100690fa 	slli	r3,r2,3
 400054c:	e0bff817 	ldw	r2,-32(fp)
 4000550:	1885883a 	add	r2,r3,r2
 4000554:	1023883a 	mov	r17,r2
 4000558:	01400304 	movi	r5,12
 400055c:	e13ffd17 	ldw	r4,-12(fp)
 4000560:	40191000 	call	4019100 <__mulsi3>
 4000564:	1007883a 	mov	r3,r2
 4000568:	e0bff717 	ldw	r2,-36(fp)
 400056c:	1885883a 	add	r2,r3,r2
 4000570:	100f883a 	mov	r7,r2
 4000574:	880d883a 	mov	r6,r17
 4000578:	800b883a 	mov	r5,r16
 400057c:	e13ff917 	ldw	r4,-28(fp)
 4000580:	40287280 	call	4028728 <alt_up_pixel_buffer_dma_draw>
int vert;
int hori;

for (vert=0; vert<12; vert++)
{
for (hori=0; hori<8; hori++)
 4000584:	e0bff817 	ldw	r2,-32(fp)
 4000588:	10800044 	addi	r2,r2,1
 400058c:	e0bff815 	stw	r2,-32(fp)
 4000590:	e0bff817 	ldw	r2,-32(fp)
 4000594:	10800210 	cmplti	r2,r2,8
 4000598:	103fde1e 	bne	r2,zero,4000514 <__alt_data_end+0xfc000514>
alt_up_pixel_buffer_dma_dev* hPB = alt_up_pixel_buffer_dma_open_dev (VGA_PIXEL_DMA_NAME);

int vert;
int hori;

for (vert=0; vert<12; vert++)
 400059c:	e0bff717 	ldw	r2,-36(fp)
 40005a0:	10800044 	addi	r2,r2,1
 40005a4:	e0bff715 	stw	r2,-36(fp)
 40005a8:	e0bff717 	ldw	r2,-36(fp)
 40005ac:	10800310 	cmplti	r2,r2,12
 40005b0:	103fd61e 	bne	r2,zero,400050c <__alt_data_end+0xfc00050c>
{
alt_up_pixel_buffer_dma_draw (hPB, color, hori+x_offset*8, vert+y_offset*12);
}
}
}
}
 40005b4:	0001883a 	nop
 40005b8:	e6fffe04 	addi	sp,fp,-8
 40005bc:	dfc00317 	ldw	ra,12(sp)
 40005c0:	df000217 	ldw	fp,8(sp)
 40005c4:	dc400117 	ldw	r17,4(sp)
 40005c8:	dc000017 	ldw	r16,0(sp)
 40005cc:	dec00404 	addi	sp,sp,16
 40005d0:	f800283a 	ret

040005d4 <main>:

int main ()
{
 40005d4:	def7bf04 	addi	sp,sp,-8452
 40005d8:	dfc84015 	stw	ra,8448(sp)
 40005dc:	df083f15 	stw	fp,8444(sp)
 40005e0:	dc483e15 	stw	r17,8440(sp)
 40005e4:	dc083d15 	stw	r16,8436(sp)
 40005e8:	df083f04 	addi	fp,sp,8444

int x=0;
 40005ec:	e037c115 	stw	zero,-8444(fp)
int y=0;
 40005f0:	e037c215 	stw	zero,-8440(fp)
int z;
int square[24][16]=    {{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
 40005f4:	e0b7de04 	addi	r2,fp,-8328
 40005f8:	00c18004 	movi	r3,1536
 40005fc:	180d883a 	mov	r6,r3
 4000600:	000b883a 	mov	r5,zero
 4000604:	1009883a 	mov	r4,r2
 4000608:	40192700 	call	4019270 <memset>
 400060c:	00800044 	movi	r2,1
 4000610:	e0b7de15 	stw	r2,-8328(fp)
 4000614:	00800044 	movi	r2,1
 4000618:	e0b7df15 	stw	r2,-8324(fp)
 400061c:	00800044 	movi	r2,1
 4000620:	e0b7e015 	stw	r2,-8320(fp)
 4000624:	00800044 	movi	r2,1
 4000628:	e0b7e115 	stw	r2,-8316(fp)
 400062c:	00800044 	movi	r2,1
 4000630:	e0b7e215 	stw	r2,-8312(fp)
 4000634:	00800044 	movi	r2,1
 4000638:	e0b7e315 	stw	r2,-8308(fp)
 400063c:	00800044 	movi	r2,1
 4000640:	e0b7e415 	stw	r2,-8304(fp)
 4000644:	00800044 	movi	r2,1
 4000648:	e0b7e515 	stw	r2,-8300(fp)
 400064c:	00800044 	movi	r2,1
 4000650:	e0b7e615 	stw	r2,-8296(fp)
 4000654:	00800044 	movi	r2,1
 4000658:	e0b7e715 	stw	r2,-8292(fp)
 400065c:	00800044 	movi	r2,1
 4000660:	e0b7e815 	stw	r2,-8288(fp)
 4000664:	00800044 	movi	r2,1
 4000668:	e0b7e915 	stw	r2,-8284(fp)
 400066c:	00800044 	movi	r2,1
 4000670:	e0b7ea15 	stw	r2,-8280(fp)
 4000674:	00800044 	movi	r2,1
 4000678:	e0b7eb15 	stw	r2,-8276(fp)
 400067c:	00800044 	movi	r2,1
 4000680:	e0b7ec15 	stw	r2,-8272(fp)
 4000684:	00800044 	movi	r2,1
 4000688:	e0b7ed15 	stw	r2,-8268(fp)
 400068c:	00800044 	movi	r2,1
 4000690:	e0b7ee15 	stw	r2,-8264(fp)
 4000694:	00800044 	movi	r2,1
 4000698:	e0b7fd15 	stw	r2,-8204(fp)
 400069c:	00800044 	movi	r2,1
 40006a0:	e0b7fe15 	stw	r2,-8200(fp)
 40006a4:	00800044 	movi	r2,1
 40006a8:	e0b80d15 	stw	r2,-8140(fp)
 40006ac:	00800044 	movi	r2,1
 40006b0:	e0b80e15 	stw	r2,-8136(fp)
 40006b4:	00800044 	movi	r2,1
 40006b8:	e0b81d15 	stw	r2,-8076(fp)
 40006bc:	00800044 	movi	r2,1
 40006c0:	e0b81e15 	stw	r2,-8072(fp)
 40006c4:	00800044 	movi	r2,1
 40006c8:	e0b82d15 	stw	r2,-8012(fp)
 40006cc:	00800044 	movi	r2,1
 40006d0:	e0b82e15 	stw	r2,-8008(fp)
 40006d4:	00800044 	movi	r2,1
 40006d8:	e0b83d15 	stw	r2,-7948(fp)
 40006dc:	00800044 	movi	r2,1
 40006e0:	e0b83e15 	stw	r2,-7944(fp)
 40006e4:	00800044 	movi	r2,1
 40006e8:	e0b84d15 	stw	r2,-7884(fp)
 40006ec:	00800044 	movi	r2,1
 40006f0:	e0b84e15 	stw	r2,-7880(fp)
 40006f4:	00800044 	movi	r2,1
 40006f8:	e0b85d15 	stw	r2,-7820(fp)
 40006fc:	00800044 	movi	r2,1
 4000700:	e0b85e15 	stw	r2,-7816(fp)
 4000704:	00800044 	movi	r2,1
 4000708:	e0b86d15 	stw	r2,-7756(fp)
 400070c:	00800044 	movi	r2,1
 4000710:	e0b86e15 	stw	r2,-7752(fp)
 4000714:	00800044 	movi	r2,1
 4000718:	e0b87d15 	stw	r2,-7692(fp)
 400071c:	00800044 	movi	r2,1
 4000720:	e0b87e15 	stw	r2,-7688(fp)
 4000724:	00800044 	movi	r2,1
 4000728:	e0b88d15 	stw	r2,-7628(fp)
 400072c:	00800044 	movi	r2,1
 4000730:	e0b88e15 	stw	r2,-7624(fp)
 4000734:	00800044 	movi	r2,1
 4000738:	e0b89d15 	stw	r2,-7564(fp)
 400073c:	00800044 	movi	r2,1
 4000740:	e0b89e15 	stw	r2,-7560(fp)
 4000744:	00800044 	movi	r2,1
 4000748:	e0b8ad15 	stw	r2,-7500(fp)
 400074c:	00800044 	movi	r2,1
 4000750:	e0b8ae15 	stw	r2,-7496(fp)
 4000754:	00800044 	movi	r2,1
 4000758:	e0b8bd15 	stw	r2,-7436(fp)
 400075c:	00800044 	movi	r2,1
 4000760:	e0b8be15 	stw	r2,-7432(fp)
 4000764:	00800044 	movi	r2,1
 4000768:	e0b8cd15 	stw	r2,-7372(fp)
 400076c:	00800044 	movi	r2,1
 4000770:	e0b8ce15 	stw	r2,-7368(fp)
 4000774:	00800044 	movi	r2,1
 4000778:	e0b8dd15 	stw	r2,-7308(fp)
 400077c:	00800044 	movi	r2,1
 4000780:	e0b8de15 	stw	r2,-7304(fp)
 4000784:	00800044 	movi	r2,1
 4000788:	e0b8ed15 	stw	r2,-7244(fp)
 400078c:	00800044 	movi	r2,1
 4000790:	e0b8ee15 	stw	r2,-7240(fp)
 4000794:	00800044 	movi	r2,1
 4000798:	e0b8fd15 	stw	r2,-7180(fp)
 400079c:	00800044 	movi	r2,1
 40007a0:	e0b8fe15 	stw	r2,-7176(fp)
 40007a4:	00800044 	movi	r2,1
 40007a8:	e0b90d15 	stw	r2,-7116(fp)
 40007ac:	00800044 	movi	r2,1
 40007b0:	e0b90e15 	stw	r2,-7112(fp)
 40007b4:	00800044 	movi	r2,1
 40007b8:	e0b91d15 	stw	r2,-7052(fp)
 40007bc:	00800044 	movi	r2,1
 40007c0:	e0b91e15 	stw	r2,-7048(fp)
 40007c4:	00800044 	movi	r2,1
 40007c8:	e0b92d15 	stw	r2,-6988(fp)
 40007cc:	00800044 	movi	r2,1
 40007d0:	e0b92e15 	stw	r2,-6984(fp)
 40007d4:	00800044 	movi	r2,1
 40007d8:	e0b93d15 	stw	r2,-6924(fp)
 40007dc:	00800044 	movi	r2,1
 40007e0:	e0b93e15 	stw	r2,-6920(fp)
 40007e4:	00800044 	movi	r2,1
 40007e8:	e0b94d15 	stw	r2,-6860(fp)
 40007ec:	00800044 	movi	r2,1
 40007f0:	e0b94e15 	stw	r2,-6856(fp)
 40007f4:	00800044 	movi	r2,1
 40007f8:	e0b94f15 	stw	r2,-6852(fp)
 40007fc:	00800044 	movi	r2,1
 4000800:	e0b95015 	stw	r2,-6848(fp)
 4000804:	00800044 	movi	r2,1
 4000808:	e0b95115 	stw	r2,-6844(fp)
 400080c:	00800044 	movi	r2,1
 4000810:	e0b95215 	stw	r2,-6840(fp)
 4000814:	00800044 	movi	r2,1
 4000818:	e0b95315 	stw	r2,-6836(fp)
 400081c:	00800044 	movi	r2,1
 4000820:	e0b95415 	stw	r2,-6832(fp)
 4000824:	00800044 	movi	r2,1
 4000828:	e0b95515 	stw	r2,-6828(fp)
 400082c:	00800044 	movi	r2,1
 4000830:	e0b95615 	stw	r2,-6824(fp)
 4000834:	00800044 	movi	r2,1
 4000838:	e0b95715 	stw	r2,-6820(fp)
 400083c:	00800044 	movi	r2,1
 4000840:	e0b95815 	stw	r2,-6816(fp)
 4000844:	00800044 	movi	r2,1
 4000848:	e0b95915 	stw	r2,-6812(fp)
 400084c:	00800044 	movi	r2,1
 4000850:	e0b95a15 	stw	r2,-6808(fp)
 4000854:	00800044 	movi	r2,1
 4000858:	e0b95b15 	stw	r2,-6804(fp)
 400085c:	00800044 	movi	r2,1
 4000860:	e0b95c15 	stw	r2,-6800(fp)
 4000864:	00800044 	movi	r2,1
 4000868:	e0b95d15 	stw	r2,-6796(fp)
					  , {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}
					  , {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}
					  , {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}
					  , {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}
					  , {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}};//images/square.png//square.png
	int white[24][16]= {{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
 400086c:	008100f4 	movhi	r2,1027
 4000870:	10aa7e04 	addi	r2,r2,-22024
 4000874:	e0f95e04 	addi	r3,fp,-6792
 4000878:	1009883a 	mov	r4,r2
 400087c:	00818004 	movi	r2,1536
 4000880:	100d883a 	mov	r6,r2
 4000884:	200b883a 	mov	r5,r4
 4000888:	1809883a 	mov	r4,r3
 400088c:	40191280 	call	4019128 <memcpy>
					  , {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
					  , {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
					  , {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}};//images/square.png//square.png


	int dig_col[12][8]={{0,0,0,0,0,0,0,0}
 4000890:	e0bade04 	addi	r2,fp,-5256
 4000894:	00c06004 	movi	r3,384
 4000898:	180d883a 	mov	r6,r3
 400089c:	000b883a 	mov	r5,zero
 40008a0:	1009883a 	mov	r4,r2
 40008a4:	40192700 	call	4019270 <memset>
 40008a8:	00800044 	movi	r2,1
 40008ac:	e0baf115 	stw	r2,-5180(fp)
 40008b0:	00800044 	movi	r2,1
 40008b4:	e0baf215 	stw	r2,-5176(fp)
 40008b8:	00800044 	movi	r2,1
 40008bc:	e0baf915 	stw	r2,-5148(fp)
 40008c0:	00800044 	movi	r2,1
 40008c4:	e0bafa15 	stw	r2,-5144(fp)
 40008c8:	00800044 	movi	r2,1
 40008cc:	e0bb2115 	stw	r2,-4988(fp)
 40008d0:	00800044 	movi	r2,1
 40008d4:	e0bb2215 	stw	r2,-4984(fp)
 40008d8:	00800044 	movi	r2,1
 40008dc:	e0bb2915 	stw	r2,-4956(fp)
 40008e0:	00800044 	movi	r2,1
 40008e4:	e0bb2a15 	stw	r2,-4952(fp)
					   ,{0,0,0,1,1,0,0,0}
					   ,{0,0,0,1,1,0,0,0}
					   ,{0,0,0,0,0,0,0,0}
					   ,{0,0,0,0,0,0,0,0}};

	int dig_zero[12][8]={{0,0,0,0,0,0,0,0}
 40008e8:	008100f4 	movhi	r2,1027
 40008ec:	10abfe04 	addi	r2,r2,-20488
 40008f0:	e0fb3e04 	addi	r3,fp,-4872
 40008f4:	1009883a 	mov	r4,r2
 40008f8:	00806004 	movi	r2,384
 40008fc:	100d883a 	mov	r6,r2
 4000900:	200b883a 	mov	r5,r4
 4000904:	1809883a 	mov	r4,r3
 4000908:	40191280 	call	4019128 <memcpy>
					    ,{0,1,1,0,0,1,1,0}
					    ,{0,1,1,1,1,1,1,0}
					    ,{0,1,1,1,1,1,1,0}
					    ,{0,0,0,0,0,0,0,0}};

	int dig_one[12][8]={{0,0,0,0,0,0,0,0}
 400090c:	e0bb9e04 	addi	r2,fp,-4488
 4000910:	00c06004 	movi	r3,384
 4000914:	180d883a 	mov	r6,r3
 4000918:	000b883a 	mov	r5,zero
 400091c:	1009883a 	mov	r4,r2
 4000920:	40192700 	call	4019270 <memset>
 4000924:	00800044 	movi	r2,1
 4000928:	e0bba915 	stw	r2,-4444(fp)
 400092c:	00800044 	movi	r2,1
 4000930:	e0bbaa15 	stw	r2,-4440(fp)
 4000934:	00800044 	movi	r2,1
 4000938:	e0bbb115 	stw	r2,-4412(fp)
 400093c:	00800044 	movi	r2,1
 4000940:	e0bbb215 	stw	r2,-4408(fp)
 4000944:	00800044 	movi	r2,1
 4000948:	e0bbb915 	stw	r2,-4380(fp)
 400094c:	00800044 	movi	r2,1
 4000950:	e0bbba15 	stw	r2,-4376(fp)
 4000954:	00800044 	movi	r2,1
 4000958:	e0bbc115 	stw	r2,-4348(fp)
 400095c:	00800044 	movi	r2,1
 4000960:	e0bbc215 	stw	r2,-4344(fp)
 4000964:	00800044 	movi	r2,1
 4000968:	e0bbc915 	stw	r2,-4316(fp)
 400096c:	00800044 	movi	r2,1
 4000970:	e0bbca15 	stw	r2,-4312(fp)
 4000974:	00800044 	movi	r2,1
 4000978:	e0bbd115 	stw	r2,-4284(fp)
 400097c:	00800044 	movi	r2,1
 4000980:	e0bbd215 	stw	r2,-4280(fp)
 4000984:	00800044 	movi	r2,1
 4000988:	e0bbd915 	stw	r2,-4252(fp)
 400098c:	00800044 	movi	r2,1
 4000990:	e0bbda15 	stw	r2,-4248(fp)
 4000994:	00800044 	movi	r2,1
 4000998:	e0bbe115 	stw	r2,-4220(fp)
 400099c:	00800044 	movi	r2,1
 40009a0:	e0bbe215 	stw	r2,-4216(fp)
 40009a4:	00800044 	movi	r2,1
 40009a8:	e0bbe915 	stw	r2,-4188(fp)
 40009ac:	00800044 	movi	r2,1
 40009b0:	e0bbea15 	stw	r2,-4184(fp)
 40009b4:	00800044 	movi	r2,1
 40009b8:	e0bbf115 	stw	r2,-4156(fp)
 40009bc:	00800044 	movi	r2,1
 40009c0:	e0bbf215 	stw	r2,-4152(fp)
					   ,{0,0,0,1,1,0,0,0}
					   ,{0,0,0,1,1,0,0,0}
					   ,{0,0,0,1,1,0,0,0}
					   ,{0,0,0,0,0,0,0,0}};

	int dig_two[12][8]={{0,0,0,0,0,0,0,0}
 40009c4:	008100f4 	movhi	r2,1027
 40009c8:	10ac5e04 	addi	r2,r2,-20104
 40009cc:	e0fbfe04 	addi	r3,fp,-4104
 40009d0:	1009883a 	mov	r4,r2
 40009d4:	00806004 	movi	r2,384
 40009d8:	100d883a 	mov	r6,r2
 40009dc:	200b883a 	mov	r5,r4
 40009e0:	1809883a 	mov	r4,r3
 40009e4:	40191280 	call	4019128 <memcpy>
					   ,{0,1,1,0,0,0,0,0}
					   ,{0,1,1,1,1,1,1,0}
					   ,{0,1,1,1,1,1,1,0}
					   ,{0,0,0,0,0,0,0,0}};

	int dig_three[12][8]={{0,0,0,0,0,0,0,0}
 40009e8:	008100f4 	movhi	r2,1027
 40009ec:	10acbe04 	addi	r2,r2,-19720
 40009f0:	e0fc5e04 	addi	r3,fp,-3720
 40009f4:	1009883a 	mov	r4,r2
 40009f8:	00806004 	movi	r2,384
 40009fc:	100d883a 	mov	r6,r2
 4000a00:	200b883a 	mov	r5,r4
 4000a04:	1809883a 	mov	r4,r3
 4000a08:	40191280 	call	4019128 <memcpy>
					     ,{0,0,0,0,0,1,1,0}
					     ,{0,1,1,1,1,1,1,0}
					     ,{0,1,1,1,1,1,1,0}
					     ,{0,0,0,0,0,0,0,0}};

	int dig_four[12][8]={{0,0,0,0,0,0,0,0}
 4000a0c:	008100f4 	movhi	r2,1027
 4000a10:	10ad1e04 	addi	r2,r2,-19336
 4000a14:	e0fcbe04 	addi	r3,fp,-3336
 4000a18:	1009883a 	mov	r4,r2
 4000a1c:	00806004 	movi	r2,384
 4000a20:	100d883a 	mov	r6,r2
 4000a24:	200b883a 	mov	r5,r4
 4000a28:	1809883a 	mov	r4,r3
 4000a2c:	40191280 	call	4019128 <memcpy>
					    ,{0,0,0,0,0,1,1,0}
					    ,{0,0,0,0,0,1,1,0}
					    ,{0,0,0,0,0,1,1,0}
					    ,{0,0,0,0,0,0,0,0}};

	int dig_five[12][8]={{0,0,0,0,0,0,0,0}
 4000a30:	008100f4 	movhi	r2,1027
 4000a34:	10ad7e04 	addi	r2,r2,-18952
 4000a38:	e0fd1e04 	addi	r3,fp,-2952
 4000a3c:	1009883a 	mov	r4,r2
 4000a40:	00806004 	movi	r2,384
 4000a44:	100d883a 	mov	r6,r2
 4000a48:	200b883a 	mov	r5,r4
 4000a4c:	1809883a 	mov	r4,r3
 4000a50:	40191280 	call	4019128 <memcpy>
					    ,{0,0,0,0,0,1,1,0}
					    ,{0,1,1,1,1,1,1,0}
					    ,{0,1,1,1,1,1,1,0}
					    ,{0,0,0,0,0,0,0,0}};

	int dig_six[12][8]={{0,0,0,0,0,0,0,0}
 4000a54:	008100f4 	movhi	r2,1027
 4000a58:	10adde04 	addi	r2,r2,-18568
 4000a5c:	e0fd7e04 	addi	r3,fp,-2568
 4000a60:	1009883a 	mov	r4,r2
 4000a64:	00806004 	movi	r2,384
 4000a68:	100d883a 	mov	r6,r2
 4000a6c:	200b883a 	mov	r5,r4
 4000a70:	1809883a 	mov	r4,r3
 4000a74:	40191280 	call	4019128 <memcpy>
					   ,{0,1,1,0,0,1,1,0}
					   ,{0,1,1,1,1,1,1,0}
					   ,{0,1,1,1,1,1,1,0}
					   ,{0,0,0,0,0,0,0,0}};

	int dig_seven[12][8]={{0,0,0,0,0,0,0,0}
 4000a78:	008100f4 	movhi	r2,1027
 4000a7c:	10ae3e04 	addi	r2,r2,-18184
 4000a80:	e0fdde04 	addi	r3,fp,-2184
 4000a84:	1009883a 	mov	r4,r2
 4000a88:	00806004 	movi	r2,384
 4000a8c:	100d883a 	mov	r6,r2
 4000a90:	200b883a 	mov	r5,r4
 4000a94:	1809883a 	mov	r4,r3
 4000a98:	40191280 	call	4019128 <memcpy>
					     ,{0,0,0,0,0,1,1,0}
					     ,{0,0,0,0,0,1,1,0}
					     ,{0,0,0,0,0,1,1,0}
					     ,{0,0,0,0,0,0,0,0}};

	int dig_eight[12][8]={{0,0,0,0,0,0,0,0}
 4000a9c:	008100f4 	movhi	r2,1027
 4000aa0:	10ae9e04 	addi	r2,r2,-17800
 4000aa4:	e0fe3e04 	addi	r3,fp,-1800
 4000aa8:	1009883a 	mov	r4,r2
 4000aac:	00806004 	movi	r2,384
 4000ab0:	100d883a 	mov	r6,r2
 4000ab4:	200b883a 	mov	r5,r4
 4000ab8:	1809883a 	mov	r4,r3
 4000abc:	40191280 	call	4019128 <memcpy>
					     ,{0,1,1,0,0,1,1,0}
					     ,{0,1,1,1,1,1,1,0}
					     ,{0,1,1,1,1,1,1,0}
					     ,{0,0,0,0,0,0,0,0}};

	int dig_nine[12][8]={{0,0,0,0,0,0,0,0}
 4000ac0:	008100f4 	movhi	r2,1027
 4000ac4:	10aefe04 	addi	r2,r2,-17416
 4000ac8:	e0fe9e04 	addi	r3,fp,-1416
 4000acc:	1009883a 	mov	r4,r2
 4000ad0:	00806004 	movi	r2,384
 4000ad4:	100d883a 	mov	r6,r2
 4000ad8:	200b883a 	mov	r5,r4
 4000adc:	1809883a 	mov	r4,r3
 4000ae0:	40191280 	call	4019128 <memcpy>
					    ,{0,0,0,0,0,1,1,0}
					    ,{0,1,1,1,1,1,1,0}
					    ,{0,1,1,1,1,1,1,0}
					    ,{0,0,0,0,0,0,0,0}};

	int dig_blank[12][8]={{1,1,1,1,1,1,1,1}
 4000ae4:	008100f4 	movhi	r2,1027
 4000ae8:	10af5e04 	addi	r2,r2,-17032
 4000aec:	e0fefe04 	addi	r3,fp,-1032
 4000af0:	1009883a 	mov	r4,r2
 4000af4:	00806004 	movi	r2,384
 4000af8:	100d883a 	mov	r6,r2
 4000afc:	200b883a 	mov	r5,r4
 4000b00:	1809883a 	mov	r4,r3
 4000b04:	40191280 	call	4019128 <memcpy>
					     ,{1,1,1,1,1,1,1,1}
					     ,{1,1,1,1,1,1,1,1}
					     ,{1,1,1,1,1,1,1,1}
					     ,{1,1,1,1,1,1,1,1}};

alt_up_pixel_buffer_dma_dev* hPB = alt_up_pixel_buffer_dma_open_dev (VGA_PIXEL_DMA_NAME);
 4000b08:	010100f4 	movhi	r4,1027
 4000b0c:	212a6604 	addi	r4,r4,-22120
 4000b10:	40286ec0 	call	40286ec <alt_up_pixel_buffer_dma_open_dev>
 4000b14:	e0b7c815 	stw	r2,-8416(fp)

    if (hPB == NULL)
 4000b18:	e0b7c817 	ldw	r2,-8416(fp)
 4000b1c:	1000041e 	bne	r2,zero,4000b30 <main+0x55c>
    {
printf ("No VGA system in present\n");
 4000b20:	010100f4 	movhi	r4,1027
 4000b24:	212a6b04 	addi	r4,r4,-22100
 4000b28:	40194c40 	call	40194c4 <puts>
while (1);
 4000b2c:	003fff06 	br	4000b2c <__alt_data_end+0xfc000b2c>
    }
    else
    {
alt_up_pixel_buffer_dma_clear_screen (hPB, 0);
 4000b30:	000b883a 	mov	r5,zero
 4000b34:	e137c817 	ldw	r4,-8416(fp)
 4000b38:	40289c00 	call	40289c0 <alt_up_pixel_buffer_dma_clear_screen>
alt_up_pixel_buffer_dma_clear_screen (hPB, 1);
 4000b3c:	01400044 	movi	r5,1
 4000b40:	e137c817 	ldw	r4,-8416(fp)
 4000b44:	40289c00 	call	40289c0 <alt_up_pixel_buffer_dma_clear_screen>
    }

Delay_Long ();
 4000b48:	40002b40 	call	40002b4 <Delay_Long>
srand (IORD_ALTERA_AVALON_PIO_DATA (SWITCH_BASE));
 4000b4c:	008200b4 	movhi	r2,2050
 4000b50:	10843804 	addi	r2,r2,4320
 4000b54:	10800037 	ldwio	r2,0(r2)
 4000b58:	1009883a 	mov	r4,r2
 4000b5c:	40194d80 	call	40194d8 <srand>
draw(S, COLOR08_BLUE, 0, 0);
 4000b60:	000f883a 	mov	r7,zero
 4000b64:	000d883a 	mov	r6,zero
 4000b68:	014000c4 	movi	r5,3
 4000b6c:	010100f4 	movhi	r4,1027
 4000b70:	211b2a04 	addi	r4,r4,27816
 4000b74:	40003c80 	call	40003c8 <draw>
draw(C, COLOR08_BLUE, 1, 0);
 4000b78:	000f883a 	mov	r7,zero
 4000b7c:	01800044 	movi	r6,1
 4000b80:	014000c4 	movi	r5,3
 4000b84:	010100f4 	movhi	r4,1027
 4000b88:	21032a04 	addi	r4,r4,3240
 4000b8c:	40003c80 	call	40003c8 <draw>
draw(O, COLOR08_BLUE, 2, 0);
 4000b90:	000f883a 	mov	r7,zero
 4000b94:	01800084 	movi	r6,2
 4000b98:	014000c4 	movi	r5,3
 4000b9c:	010100f4 	movhi	r4,1027
 4000ba0:	21152a04 	addi	r4,r4,21672
 4000ba4:	40003c80 	call	40003c8 <draw>
draw(R, COLOR08_BLUE, 3, 0);
 4000ba8:	000f883a 	mov	r7,zero
 4000bac:	018000c4 	movi	r6,3
 4000bb0:	014000c4 	movi	r5,3
 4000bb4:	010100f4 	movhi	r4,1027
 4000bb8:	2119aa04 	addi	r4,r4,26280
 4000bbc:	40003c80 	call	40003c8 <draw>
draw(E, COLOR08_BLUE, 4, 0);
 4000bc0:	000f883a 	mov	r7,zero
 4000bc4:	01800104 	movi	r6,4
 4000bc8:	014000c4 	movi	r5,3
 4000bcc:	010100f4 	movhi	r4,1027
 4000bd0:	21062a04 	addi	r4,r4,6312
 4000bd4:	40003c80 	call	40003c8 <draw>
draw(zero, COLOR08_WHITE, 5, 0);//x000
 4000bd8:	000f883a 	mov	r7,zero
 4000bdc:	01800144 	movi	r6,5
 4000be0:	01403fc4 	movi	r5,255
 4000be4:	010100f4 	movhi	r4,1027
 4000be8:	21312a04 	addi	r4,r4,-15192
 4000bec:	40003c80 	call	40003c8 <draw>
draw(zero, COLOR08_WHITE, 6, 0);//0x00
 4000bf0:	000f883a 	mov	r7,zero
 4000bf4:	01800184 	movi	r6,6
 4000bf8:	01403fc4 	movi	r5,255
 4000bfc:	010100f4 	movhi	r4,1027
 4000c00:	21312a04 	addi	r4,r4,-15192
 4000c04:	40003c80 	call	40003c8 <draw>
draw(zero, COLOR08_WHITE, 7, 0);//00x0
 4000c08:	000f883a 	mov	r7,zero
 4000c0c:	018001c4 	movi	r6,7
 4000c10:	01403fc4 	movi	r5,255
 4000c14:	010100f4 	movhi	r4,1027
 4000c18:	21312a04 	addi	r4,r4,-15192
 4000c1c:	40003c80 	call	40003c8 <draw>
draw(zero, COLOR08_WHITE, 8, 0);//000x
 4000c20:	000f883a 	mov	r7,zero
 4000c24:	01800204 	movi	r6,8
 4000c28:	01403fc4 	movi	r5,255
 4000c2c:	010100f4 	movhi	r4,1027
 4000c30:	21312a04 	addi	r4,r4,-15192
 4000c34:	40003c80 	call	40003c8 <draw>
draw(M, COLOR08_GOLD, 8, 1);
 4000c38:	01c00044 	movi	r7,1
 4000c3c:	01800204 	movi	r6,8
 4000c40:	01403e04 	movi	r5,248
 4000c44:	010100f4 	movhi	r4,1027
 4000c48:	21122a04 	addi	r4,r4,18600
 4000c4c:	40003c80 	call	40003c8 <draw>
draw(P, COLOR08_GOLD, 9, 1);
 4000c50:	01c00044 	movi	r7,1
 4000c54:	01800244 	movi	r6,9
 4000c58:	01403e04 	movi	r5,248
 4000c5c:	010100f4 	movhi	r4,1027
 4000c60:	2116aa04 	addi	r4,r4,23208
 4000c64:	40003c80 	call	40003c8 <draw>
draw(X, COLOR08_GOLD, 0, 1);
 4000c68:	01c00044 	movi	r7,1
 4000c6c:	000d883a 	mov	r6,zero
 4000c70:	01403e04 	movi	r5,248
 4000c74:	01010134 	movhi	r4,1028
 4000c78:	2122aa04 	addi	r4,r4,-30040
 4000c7c:	40003c80 	call	40003c8 <draw>
draw(zero, COLOR08_GRAY, 1, 1);
 4000c80:	01c00044 	movi	r7,1
 4000c84:	01800044 	movi	r6,1
 4000c88:	01402484 	movi	r5,146
 4000c8c:	010100f4 	movhi	r4,1027
 4000c90:	21312a04 	addi	r4,r4,-15192
 4000c94:	40003c80 	call	40003c8 <draw>
draw(zero, COLOR08_GRAY, 2, 1);
 4000c98:	01c00044 	movi	r7,1
 4000c9c:	01800084 	movi	r6,2
 4000ca0:	01402484 	movi	r5,146
 4000ca4:	010100f4 	movhi	r4,1027
 4000ca8:	21312a04 	addi	r4,r4,-15192
 4000cac:	40003c80 	call	40003c8 <draw>
draw(Y, COLOR08_GOLD, 17, 1);
 4000cb0:	01c00044 	movi	r7,1
 4000cb4:	01800444 	movi	r6,17
 4000cb8:	01403e04 	movi	r5,248
 4000cbc:	01010134 	movhi	r4,1028
 4000cc0:	21242a04 	addi	r4,r4,-28504
 4000cc4:	40003c80 	call	40003c8 <draw>
draw(zero, COLOR08_GRAY, 18, 1);
 4000cc8:	01c00044 	movi	r7,1
 4000ccc:	01800484 	movi	r6,18
 4000cd0:	01402484 	movi	r5,146
 4000cd4:	010100f4 	movhi	r4,1027
 4000cd8:	21312a04 	addi	r4,r4,-15192
 4000cdc:	40003c80 	call	40003c8 <draw>
draw(zero, COLOR08_GRAY, 19, 1);
 4000ce0:	01c00044 	movi	r7,1
 4000ce4:	018004c4 	movi	r6,19
 4000ce8:	01402484 	movi	r5,146
 4000cec:	010100f4 	movhi	r4,1027
 4000cf0:	21312a04 	addi	r4,r4,-15192
 4000cf4:	40003c80 	call	40003c8 <draw>
draw(L, COLOR08_RED, 13, 0);
 4000cf8:	000f883a 	mov	r7,zero
 4000cfc:	01800344 	movi	r6,13
 4000d00:	01403804 	movi	r5,224
 4000d04:	010100f4 	movhi	r4,1027
 4000d08:	2110aa04 	addi	r4,r4,17064
 4000d0c:	40003c80 	call	40003c8 <draw>
draw(O, COLOR08_RED, 14, 0);
 4000d10:	000f883a 	mov	r7,zero
 4000d14:	01800384 	movi	r6,14
 4000d18:	01403804 	movi	r5,224
 4000d1c:	010100f4 	movhi	r4,1027
 4000d20:	21152a04 	addi	r4,r4,21672
 4000d24:	40003c80 	call	40003c8 <draw>
draw(A, COLOR08_RED, 15, 0);
 4000d28:	000f883a 	mov	r7,zero
 4000d2c:	018003c4 	movi	r6,15
 4000d30:	01403804 	movi	r5,224
 4000d34:	010100f4 	movhi	r4,1027
 4000d38:	21002a04 	addi	r4,r4,168
 4000d3c:	40003c80 	call	40003c8 <draw>
draw(D, COLOR08_RED, 16, 0);
 4000d40:	000f883a 	mov	r7,zero
 4000d44:	01800404 	movi	r6,16
 4000d48:	01403804 	movi	r5,224
 4000d4c:	010100f4 	movhi	r4,1027
 4000d50:	2104aa04 	addi	r4,r4,4776
 4000d54:	40003c80 	call	40003c8 <draw>
draw(I, COLOR08_RED, 17, 0);
 4000d58:	000f883a 	mov	r7,zero
 4000d5c:	01800444 	movi	r6,17
 4000d60:	01403804 	movi	r5,224
 4000d64:	010100f4 	movhi	r4,1027
 4000d68:	210c2a04 	addi	r4,r4,12456
 4000d6c:	40003c80 	call	40003c8 <draw>
draw(N, COLOR08_RED, 18, 0);
 4000d70:	000f883a 	mov	r7,zero
 4000d74:	01800484 	movi	r6,18
 4000d78:	01403804 	movi	r5,224
 4000d7c:	010100f4 	movhi	r4,1027
 4000d80:	2113aa04 	addi	r4,r4,20136
 4000d84:	40003c80 	call	40003c8 <draw>
draw(G, COLOR08_RED, 19, 0);
 4000d88:	000f883a 	mov	r7,zero
 4000d8c:	018004c4 	movi	r6,19
 4000d90:	01403804 	movi	r5,224
 4000d94:	010100f4 	movhi	r4,1027
 4000d98:	21092a04 	addi	r4,r4,9384
 4000d9c:	40003c80 	call	40003c8 <draw>
		Delay_Loading ();
 4000da0:	400026c0 	call	400026c <Delay_Loading>
		IOWR_ALTERA_AVALON_PIO_DATA (DIGITAL_CLOCK_RESET_BASE, 1);
 4000da4:	00c00044 	movi	r3,1
 4000da8:	008200b4 	movhi	r2,2050
 4000dac:	10840c04 	addi	r2,r2,4144
 4000db0:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA (DIGITAL_CLOCK_RESET_BASE, 0);
 4000db4:	0007883a 	mov	r3,zero
 4000db8:	008200b4 	movhi	r2,2050
 4000dbc:	10840c04 	addi	r2,r2,4144
 4000dc0:	10c00035 	stwio	r3,0(r2)
		draw(L, COLOR08_BLACK, 13, 0);
 4000dc4:	000f883a 	mov	r7,zero
 4000dc8:	01800344 	movi	r6,13
 4000dcc:	000b883a 	mov	r5,zero
 4000dd0:	010100f4 	movhi	r4,1027
 4000dd4:	2110aa04 	addi	r4,r4,17064
 4000dd8:	40003c80 	call	40003c8 <draw>
		draw(O, COLOR08_BLACK, 14, 0);
 4000ddc:	000f883a 	mov	r7,zero
 4000de0:	01800384 	movi	r6,14
 4000de4:	000b883a 	mov	r5,zero
 4000de8:	010100f4 	movhi	r4,1027
 4000dec:	21152a04 	addi	r4,r4,21672
 4000df0:	40003c80 	call	40003c8 <draw>
		draw(A, COLOR08_BLACK, 15, 0);
 4000df4:	000f883a 	mov	r7,zero
 4000df8:	018003c4 	movi	r6,15
 4000dfc:	000b883a 	mov	r5,zero
 4000e00:	010100f4 	movhi	r4,1027
 4000e04:	21002a04 	addi	r4,r4,168
 4000e08:	40003c80 	call	40003c8 <draw>
		draw(D, COLOR08_BLACK, 16, 0);
 4000e0c:	000f883a 	mov	r7,zero
 4000e10:	01800404 	movi	r6,16
 4000e14:	000b883a 	mov	r5,zero
 4000e18:	010100f4 	movhi	r4,1027
 4000e1c:	2104aa04 	addi	r4,r4,4776
 4000e20:	40003c80 	call	40003c8 <draw>
		draw(I, COLOR08_BLACK, 17, 0);
 4000e24:	000f883a 	mov	r7,zero
 4000e28:	01800444 	movi	r6,17
 4000e2c:	000b883a 	mov	r5,zero
 4000e30:	010100f4 	movhi	r4,1027
 4000e34:	210c2a04 	addi	r4,r4,12456
 4000e38:	40003c80 	call	40003c8 <draw>
		draw(N, COLOR08_BLACK, 18, 0);
 4000e3c:	000f883a 	mov	r7,zero
 4000e40:	01800484 	movi	r6,18
 4000e44:	000b883a 	mov	r5,zero
 4000e48:	010100f4 	movhi	r4,1027
 4000e4c:	2113aa04 	addi	r4,r4,20136
 4000e50:	40003c80 	call	40003c8 <draw>
		draw(G, COLOR08_BLACK, 19, 0);
 4000e54:	000f883a 	mov	r7,zero
 4000e58:	018004c4 	movi	r6,19
 4000e5c:	000b883a 	mov	r5,zero
 4000e60:	010100f4 	movhi	r4,1027
 4000e64:	21092a04 	addi	r4,r4,9384
 4000e68:	40003c80 	call	40003c8 <draw>



	draw1(dig_zero, COLOR08_RED, 29, 0);
 4000e6c:	e0bb3e04 	addi	r2,fp,-4872
 4000e70:	000f883a 	mov	r7,zero
 4000e74:	01800744 	movi	r6,29
 4000e78:	01403804 	movi	r5,224
 4000e7c:	1009883a 	mov	r4,r2
 4000e80:	40004cc0 	call	40004cc <draw1>
	draw1(dig_zero, COLOR08_RED, 30, 0);
 4000e84:	e0bb3e04 	addi	r2,fp,-4872
 4000e88:	000f883a 	mov	r7,zero
 4000e8c:	01800784 	movi	r6,30
 4000e90:	01403804 	movi	r5,224
 4000e94:	1009883a 	mov	r4,r2
 4000e98:	40004cc0 	call	40004cc <draw1>
	draw1(dig_col, COLOR08_RED, 31, 0);
 4000e9c:	e0bade04 	addi	r2,fp,-5256
 4000ea0:	000f883a 	mov	r7,zero
 4000ea4:	018007c4 	movi	r6,31
 4000ea8:	01403804 	movi	r5,224
 4000eac:	1009883a 	mov	r4,r2
 4000eb0:	40004cc0 	call	40004cc <draw1>
	draw1(dig_zero, COLOR08_RED, 32, 0);
 4000eb4:	e0bb3e04 	addi	r2,fp,-4872
 4000eb8:	000f883a 	mov	r7,zero
 4000ebc:	01800804 	movi	r6,32
 4000ec0:	01403804 	movi	r5,224
 4000ec4:	1009883a 	mov	r4,r2
 4000ec8:	40004cc0 	call	40004cc <draw1>
	draw1(dig_zero, COLOR08_RED, 33, 0);
 4000ecc:	e0bb3e04 	addi	r2,fp,-4872
 4000ed0:	000f883a 	mov	r7,zero
 4000ed4:	01800844 	movi	r6,33
 4000ed8:	01403804 	movi	r5,224
 4000edc:	1009883a 	mov	r4,r2
 4000ee0:	40004cc0 	call	40004cc <draw1>
	draw1(dig_col, COLOR08_RED, 34, 0);
 4000ee4:	e0bade04 	addi	r2,fp,-5256
 4000ee8:	000f883a 	mov	r7,zero
 4000eec:	01800884 	movi	r6,34
 4000ef0:	01403804 	movi	r5,224
 4000ef4:	1009883a 	mov	r4,r2
 4000ef8:	40004cc0 	call	40004cc <draw1>
	draw1(dig_zero, COLOR08_RED, 35, 0);
 4000efc:	e0bb3e04 	addi	r2,fp,-4872
 4000f00:	000f883a 	mov	r7,zero
 4000f04:	018008c4 	movi	r6,35
 4000f08:	01403804 	movi	r5,224
 4000f0c:	1009883a 	mov	r4,r2
 4000f10:	40004cc0 	call	40004cc <draw1>
	draw1(dig_zero, COLOR08_RED, 36, 0);
 4000f14:	e0bb3e04 	addi	r2,fp,-4872
 4000f18:	000f883a 	mov	r7,zero
 4000f1c:	01800904 	movi	r6,36
 4000f20:	01403804 	movi	r5,224
 4000f24:	1009883a 	mov	r4,r2
 4000f28:	40004cc0 	call	40004cc <draw1>
	draw1(dig_col, COLOR08_RED, 37, 0);
 4000f2c:	e0bade04 	addi	r2,fp,-5256
 4000f30:	000f883a 	mov	r7,zero
 4000f34:	01800944 	movi	r6,37
 4000f38:	01403804 	movi	r5,224
 4000f3c:	1009883a 	mov	r4,r2
 4000f40:	40004cc0 	call	40004cc <draw1>
	draw1(dig_zero, COLOR08_RED, 38, 0);
 4000f44:	e0bb3e04 	addi	r2,fp,-4872
 4000f48:	000f883a 	mov	r7,zero
 4000f4c:	01800984 	movi	r6,38
 4000f50:	01403804 	movi	r5,224
 4000f54:	1009883a 	mov	r4,r2
 4000f58:	40004cc0 	call	40004cc <draw1>
	draw1(dig_zero, COLOR08_RED, 39, 0);
 4000f5c:	e0bb3e04 	addi	r2,fp,-4872
 4000f60:	000f883a 	mov	r7,zero
 4000f64:	018009c4 	movi	r6,39
 4000f68:	01403804 	movi	r5,224
 4000f6c:	1009883a 	mov	r4,r2
 4000f70:	40004cc0 	call	40004cc <draw1>
	IOWR_ALTERA_AVALON_PIO_DATA (DIGITAL_CLOCK_RESET_BASE, 1);
 4000f74:	00c00044 	movi	r3,1
 4000f78:	008200b4 	movhi	r2,2050
 4000f7c:	10840c04 	addi	r2,r2,4144
 4000f80:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA (DIGITAL_CLOCK_RESET_BASE, 0);
 4000f84:	0007883a 	mov	r3,zero
 4000f88:	008200b4 	movhi	r2,2050
 4000f8c:	10840c04 	addi	r2,r2,4144
 4000f90:	10c00035 	stwio	r3,0(r2)
int nn;
int gameboard [8][20]={
 4000f94:	008100f4 	movhi	r2,1027
 4000f98:	10afbe04 	addi	r2,r2,-16648
 4000f9c:	e0ff5e04 	addi	r3,fp,-648
 4000fa0:	1009883a 	mov	r4,r2
 4000fa4:	0080a004 	movi	r2,640
 4000fa8:	100d883a 	mov	r6,r2
 4000fac:	200b883a 	mov	r5,r4
 4000fb0:	1809883a 	mov	r4,r3
 4000fb4:	40191280 	call	4019128 <memcpy>
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
};
int k = 5;
 4000fb8:	00800144 	movi	r2,5
 4000fbc:	e0b7c915 	stw	r2,-8412(fp)
for (y=2; y<10; y++)
 4000fc0:	00800084 	movi	r2,2
 4000fc4:	e0b7c215 	stw	r2,-8440(fp)
 4000fc8:	00007806 	br	40011ac <main+0xbd8>
{
for (x=0; x<20; x++)
 4000fcc:	e037c115 	stw	zero,-8444(fp)
 4000fd0:	00007006 	br	4001194 <main+0xbc0>
{
nn = rand()%k;
 4000fd4:	40194f00 	call	40194f0 <rand>
 4000fd8:	e177c917 	ldw	r5,-8412(fp)
 4000fdc:	1009883a 	mov	r4,r2
 4000fe0:	4018fd00 	call	4018fd0 <__modsi3>
 4000fe4:	e0b7ca15 	stw	r2,-8408(fp)
gameboard [y-2][x] =nn;
 4000fe8:	e0b7c217 	ldw	r2,-8440(fp)
 4000fec:	10bfff84 	addi	r2,r2,-2
 4000ff0:	01400504 	movi	r5,20
 4000ff4:	1009883a 	mov	r4,r2
 4000ff8:	40191000 	call	4019100 <__mulsi3>
 4000ffc:	1007883a 	mov	r3,r2
 4001000:	e0b7c117 	ldw	r2,-8444(fp)
 4001004:	1885883a 	add	r2,r3,r2
 4001008:	1085883a 	add	r2,r2,r2
 400100c:	1085883a 	add	r2,r2,r2
 4001010:	e0f7c104 	addi	r3,fp,-8444
 4001014:	1885883a 	add	r2,r3,r2
 4001018:	10879d04 	addi	r2,r2,7796
 400101c:	e0f7ca17 	ldw	r3,-8408(fp)
 4001020:	10c00015 	stw	r3,0(r2)
if (nn == 0)
 4001024:	e0b7ca17 	ldw	r2,-8408(fp)
 4001028:	1000061e 	bne	r2,zero,4001044 <main+0xa70>
{
	draw(zero, COLOR08_CYAN, x, y);
 400102c:	e1f7c217 	ldw	r7,-8440(fp)
 4001030:	e1b7c117 	ldw	r6,-8444(fp)
 4001034:	014007c4 	movi	r5,31
 4001038:	010100f4 	movhi	r4,1027
 400103c:	21312a04 	addi	r4,r4,-15192
 4001040:	40003c80 	call	40003c8 <draw>
}
if (nn == 1)
 4001044:	e0b7ca17 	ldw	r2,-8408(fp)
 4001048:	10800058 	cmpnei	r2,r2,1
 400104c:	1000061e 	bne	r2,zero,4001068 <main+0xa94>
{
	draw(one, COLOR08_GREEN , x, y);
 4001050:	e1f7c217 	ldw	r7,-8440(fp)
 4001054:	e1b7c117 	ldw	r6,-8444(fp)
 4001058:	01400404 	movi	r5,16
 400105c:	010100f4 	movhi	r4,1027
 4001060:	2132aa04 	addi	r4,r4,-13656
 4001064:	40003c80 	call	40003c8 <draw>
}
if (nn == 2)
 4001068:	e0b7ca17 	ldw	r2,-8408(fp)
 400106c:	10800098 	cmpnei	r2,r2,2
 4001070:	1000061e 	bne	r2,zero,400108c <main+0xab8>
{
	draw(two, COLOR08_MAGENTA , x, y);
 4001074:	e1f7c217 	ldw	r7,-8440(fp)
 4001078:	e1b7c117 	ldw	r6,-8444(fp)
 400107c:	014038c4 	movi	r5,227
 4001080:	010100f4 	movhi	r4,1027
 4001084:	21342a04 	addi	r4,r4,-12120
 4001088:	40003c80 	call	40003c8 <draw>
}
if (nn == 3)
 400108c:	e0b7ca17 	ldw	r2,-8408(fp)
 4001090:	108000d8 	cmpnei	r2,r2,3
 4001094:	1000061e 	bne	r2,zero,40010b0 <main+0xadc>
{
	draw(three, COLOR08_PURPLE, x, y);
 4001098:	e1f7c217 	ldw	r7,-8440(fp)
 400109c:	e1b7c117 	ldw	r6,-8444(fp)
 40010a0:	01402084 	movi	r5,130
 40010a4:	010100f4 	movhi	r4,1027
 40010a8:	2135aa04 	addi	r4,r4,-10584
 40010ac:	40003c80 	call	40003c8 <draw>
}
if (nn == 4)
 40010b0:	e0b7ca17 	ldw	r2,-8408(fp)
 40010b4:	10800118 	cmpnei	r2,r2,4
 40010b8:	1000061e 	bne	r2,zero,40010d4 <main+0xb00>
{
	draw(four, COLOR08_GOLD, x, y);
 40010bc:	e1f7c217 	ldw	r7,-8440(fp)
 40010c0:	e1b7c117 	ldw	r6,-8444(fp)
 40010c4:	01403e04 	movi	r5,248
 40010c8:	010100f4 	movhi	r4,1027
 40010cc:	21372a04 	addi	r4,r4,-9048
 40010d0:	40003c80 	call	40003c8 <draw>
}
if (nn == 5)
 40010d4:	e0b7ca17 	ldw	r2,-8408(fp)
 40010d8:	10800158 	cmpnei	r2,r2,5
 40010dc:	1000061e 	bne	r2,zero,40010f8 <main+0xb24>
{
	draw(five, COLOR08_ORANGE, x, y);
 40010e0:	e1f7c217 	ldw	r7,-8440(fp)
 40010e4:	e1b7c117 	ldw	r6,-8444(fp)
 40010e8:	01403d04 	movi	r5,244
 40010ec:	010100f4 	movhi	r4,1027
 40010f0:	2138aa04 	addi	r4,r4,-7512
 40010f4:	40003c80 	call	40003c8 <draw>
}
if (nn == 6)
 40010f8:	e0b7ca17 	ldw	r2,-8408(fp)
 40010fc:	10800198 	cmpnei	r2,r2,6
 4001100:	1000061e 	bne	r2,zero,400111c <main+0xb48>
{
	draw(six, COLOR08_ROYALBLUE, x, y);
 4001104:	e1f7c217 	ldw	r7,-8440(fp)
 4001108:	e1b7c117 	ldw	r6,-8444(fp)
 400110c:	014013c4 	movi	r5,79
 4001110:	010100f4 	movhi	r4,1027
 4001114:	213a2a04 	addi	r4,r4,-5976
 4001118:	40003c80 	call	40003c8 <draw>
}
if (nn == 7)
 400111c:	e0b7ca17 	ldw	r2,-8408(fp)
 4001120:	108001d8 	cmpnei	r2,r2,7
 4001124:	1000061e 	bne	r2,zero,4001140 <main+0xb6c>
{
	draw(seven, COLOR08_CRIMSON, x, y);
 4001128:	e1f7c217 	ldw	r7,-8440(fp)
 400112c:	e1b7c117 	ldw	r6,-8444(fp)
 4001130:	01403004 	movi	r5,192
 4001134:	010100f4 	movhi	r4,1027
 4001138:	213baa04 	addi	r4,r4,-4440
 400113c:	40003c80 	call	40003c8 <draw>
}
if (nn == 8)
 4001140:	e0b7ca17 	ldw	r2,-8408(fp)
 4001144:	10800218 	cmpnei	r2,r2,8
 4001148:	1000061e 	bne	r2,zero,4001164 <main+0xb90>
{
	draw(eight, COLOR08_BLUE, x, y);
 400114c:	e1f7c217 	ldw	r7,-8440(fp)
 4001150:	e1b7c117 	ldw	r6,-8444(fp)
 4001154:	014000c4 	movi	r5,3
 4001158:	010100f4 	movhi	r4,1027
 400115c:	213d2a04 	addi	r4,r4,-2904
 4001160:	40003c80 	call	40003c8 <draw>
}
if (nn == 9)
 4001164:	e0b7ca17 	ldw	r2,-8408(fp)
 4001168:	10800258 	cmpnei	r2,r2,9
 400116c:	1000061e 	bne	r2,zero,4001188 <main+0xbb4>
{
	draw(nine, COLOR08_INDIGO, x, y);
 4001170:	e1f7c217 	ldw	r7,-8440(fp)
 4001174:	e1b7c117 	ldw	r6,-8444(fp)
 4001178:	01400884 	movi	r5,34
 400117c:	010100f4 	movhi	r4,1027
 4001180:	213eaa04 	addi	r4,r4,-1368
 4001184:	40003c80 	call	40003c8 <draw>
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
};
int k = 5;
for (y=2; y<10; y++)
{
for (x=0; x<20; x++)
 4001188:	e0b7c117 	ldw	r2,-8444(fp)
 400118c:	10800044 	addi	r2,r2,1
 4001190:	e0b7c115 	stw	r2,-8444(fp)
 4001194:	e0b7c117 	ldw	r2,-8444(fp)
 4001198:	10800510 	cmplti	r2,r2,20
 400119c:	103f8d1e 	bne	r2,zero,4000fd4 <__alt_data_end+0xfc000fd4>
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
};
int k = 5;
for (y=2; y<10; y++)
 40011a0:	e0b7c217 	ldw	r2,-8440(fp)
 40011a4:	10800044 	addi	r2,r2,1
 40011a8:	e0b7c215 	stw	r2,-8440(fp)
 40011ac:	e0b7c217 	ldw	r2,-8440(fp)
 40011b0:	10800290 	cmplti	r2,r2,10
 40011b4:	103f851e 	bne	r2,zero,4000fcc <__alt_data_end+0xfc000fcc>
}

}

}
int sec=0;
 40011b8:	e037cb15 	stw	zero,-8404(fp)
int min=0;
 40011bc:	e037cc15 	stw	zero,-8400(fp)
int hour=0;
 40011c0:	e037cd15 	stw	zero,-8396(fp)
int day=0;
 40011c4:	e037ce15 	stw	zero,-8392(fp)

int sec_a=0;
 40011c8:	e037cf15 	stw	zero,-8388(fp)
int sec_b=0;
 40011cc:	e037d015 	stw	zero,-8384(fp)

int min_a=0;
 40011d0:	e037d115 	stw	zero,-8380(fp)
int min_b=0;
 40011d4:	e037d215 	stw	zero,-8376(fp)

int hour_a=0;
 40011d8:	e037d315 	stw	zero,-8372(fp)
int hour_b=0;
 40011dc:	e037d415 	stw	zero,-8368(fp)

int day_a=0;
 40011e0:	e037d515 	stw	zero,-8364(fp)
int day_b=0;
 40011e4:	e037d615 	stw	zero,-8360(fp)

int ct=0;
 40011e8:	e037c415 	stw	zero,-8432(fp)
int q=1000000;
 40011ec:	008003f4 	movhi	r2,15
 40011f0:	10909004 	addi	r2,r2,16960
 40011f4:	e0b7d715 	stw	r2,-8356(fp)
int f;
int t,w,r;
int button;
int clk=0;
 40011f8:	e037c615 	stw	zero,-8424(fp)
int pause=0;
 40011fc:	e037c715 	stw	zero,-8420(fp)
int key1;

int time=600;//amount of seconds till game over
 4001200:	00809604 	movi	r2,600
 4001204:	e0b7d815 	stw	r2,-8352(fp)
	printf("%u \n",IORD_ALTERA_AVALON_PIO_DATA(DIGITAL_CLOCK_BASE));
}
*/
//right

for(f=0;f<100000;f++)
 4001208:	e037c515 	stw	zero,-8428(fp)
 400120c:	4018f181 	jmpi	4018f18 <main+0x18944>
{
q=ct;
 4001210:	e0b7c417 	ldw	r2,-8432(fp)
 4001214:	e0b7d715 	stw	r2,-8356(fp)
	for(x=0;x<18;)
 4001218:	e037c115 	stw	zero,-8444(fp)
 400121c:	40157701 	jmpi	4015770 <main+0x1519c>
{
	for(y=0;y<8;)
 4001220:	e037c215 	stw	zero,-8440(fp)
 4001224:	40157601 	jmpi	4015760 <main+0x1518c>
	{
		printf("clk: %i \n",clk);
 4001228:	e177c617 	ldw	r5,-8424(fp)
 400122c:	010100f4 	movhi	r4,1027
 4001230:	212a7204 	addi	r4,r4,-22072
 4001234:	40193c80 	call	40193c8 <printf>
		if(clk==time)
 4001238:	e0f7c617 	ldw	r3,-8424(fp)
 400123c:	e0b7d817 	ldw	r2,-8352(fp)
 4001240:	1880691e 	bne	r3,r2,40013e8 <main+0xe14>
		{
			draw(white, COLOR08_BLACK, 11, 0);
 4001244:	e0b95e04 	addi	r2,fp,-6792
 4001248:	000f883a 	mov	r7,zero
 400124c:	018002c4 	movi	r6,11
 4001250:	000b883a 	mov	r5,zero
 4001254:	1009883a 	mov	r4,r2
 4001258:	40003c80 	call	40003c8 <draw>
			draw(G, COLOR08_RED, 11, 0);
 400125c:	000f883a 	mov	r7,zero
 4001260:	018002c4 	movi	r6,11
 4001264:	01403804 	movi	r5,224
 4001268:	010100f4 	movhi	r4,1027
 400126c:	21092a04 	addi	r4,r4,9384
 4001270:	40003c80 	call	40003c8 <draw>
			draw(white, COLOR08_BLACK, 12, 0);
 4001274:	e0b95e04 	addi	r2,fp,-6792
 4001278:	000f883a 	mov	r7,zero
 400127c:	01800304 	movi	r6,12
 4001280:	000b883a 	mov	r5,zero
 4001284:	1009883a 	mov	r4,r2
 4001288:	40003c80 	call	40003c8 <draw>
			draw(A, COLOR08_RED, 12, 0);
 400128c:	000f883a 	mov	r7,zero
 4001290:	01800304 	movi	r6,12
 4001294:	01403804 	movi	r5,224
 4001298:	010100f4 	movhi	r4,1027
 400129c:	21002a04 	addi	r4,r4,168
 40012a0:	40003c80 	call	40003c8 <draw>
			draw(white, COLOR08_BLACK, 13, 0);
 40012a4:	e0b95e04 	addi	r2,fp,-6792
 40012a8:	000f883a 	mov	r7,zero
 40012ac:	01800344 	movi	r6,13
 40012b0:	000b883a 	mov	r5,zero
 40012b4:	1009883a 	mov	r4,r2
 40012b8:	40003c80 	call	40003c8 <draw>
			draw(M, COLOR08_RED, 13, 0);
 40012bc:	000f883a 	mov	r7,zero
 40012c0:	01800344 	movi	r6,13
 40012c4:	01403804 	movi	r5,224
 40012c8:	010100f4 	movhi	r4,1027
 40012cc:	21122a04 	addi	r4,r4,18600
 40012d0:	40003c80 	call	40003c8 <draw>
			draw(white, COLOR08_BLACK, 14, 0);
 40012d4:	e0b95e04 	addi	r2,fp,-6792
 40012d8:	000f883a 	mov	r7,zero
 40012dc:	01800384 	movi	r6,14
 40012e0:	000b883a 	mov	r5,zero
 40012e4:	1009883a 	mov	r4,r2
 40012e8:	40003c80 	call	40003c8 <draw>
			draw(E, COLOR08_RED, 14, 0);
 40012ec:	000f883a 	mov	r7,zero
 40012f0:	01800384 	movi	r6,14
 40012f4:	01403804 	movi	r5,224
 40012f8:	010100f4 	movhi	r4,1027
 40012fc:	21062a04 	addi	r4,r4,6312
 4001300:	40003c80 	call	40003c8 <draw>

			draw(white, COLOR08_BLACK, 15, 0);
 4001304:	e0b95e04 	addi	r2,fp,-6792
 4001308:	000f883a 	mov	r7,zero
 400130c:	018003c4 	movi	r6,15
 4001310:	000b883a 	mov	r5,zero
 4001314:	1009883a 	mov	r4,r2
 4001318:	40003c80 	call	40003c8 <draw>

			draw(white, COLOR08_BLACK, 16, 0);
 400131c:	e0b95e04 	addi	r2,fp,-6792
 4001320:	000f883a 	mov	r7,zero
 4001324:	01800404 	movi	r6,16
 4001328:	000b883a 	mov	r5,zero
 400132c:	1009883a 	mov	r4,r2
 4001330:	40003c80 	call	40003c8 <draw>
			draw(O, COLOR08_RED, 16, 0);
 4001334:	000f883a 	mov	r7,zero
 4001338:	01800404 	movi	r6,16
 400133c:	01403804 	movi	r5,224
 4001340:	010100f4 	movhi	r4,1027
 4001344:	21152a04 	addi	r4,r4,21672
 4001348:	40003c80 	call	40003c8 <draw>
			draw(white, COLOR08_BLACK, 17, 0);
 400134c:	e0b95e04 	addi	r2,fp,-6792
 4001350:	000f883a 	mov	r7,zero
 4001354:	01800444 	movi	r6,17
 4001358:	000b883a 	mov	r5,zero
 400135c:	1009883a 	mov	r4,r2
 4001360:	40003c80 	call	40003c8 <draw>
			draw(V, COLOR08_RED, 17, 0);
 4001364:	000f883a 	mov	r7,zero
 4001368:	01800444 	movi	r6,17
 400136c:	01403804 	movi	r5,224
 4001370:	010100f4 	movhi	r4,1027
 4001374:	211faa04 	addi	r4,r4,32424
 4001378:	40003c80 	call	40003c8 <draw>
			draw(white, COLOR08_BLACK, 18, 0);
 400137c:	e0b95e04 	addi	r2,fp,-6792
 4001380:	000f883a 	mov	r7,zero
 4001384:	01800484 	movi	r6,18
 4001388:	000b883a 	mov	r5,zero
 400138c:	1009883a 	mov	r4,r2
 4001390:	40003c80 	call	40003c8 <draw>
			draw(E, COLOR08_RED, 18, 0);
 4001394:	000f883a 	mov	r7,zero
 4001398:	01800484 	movi	r6,18
 400139c:	01403804 	movi	r5,224
 40013a0:	010100f4 	movhi	r4,1027
 40013a4:	21062a04 	addi	r4,r4,6312
 40013a8:	40003c80 	call	40003c8 <draw>
			draw(white, COLOR08_BLACK, 19, 0);
 40013ac:	e0b95e04 	addi	r2,fp,-6792
 40013b0:	000f883a 	mov	r7,zero
 40013b4:	018004c4 	movi	r6,19
 40013b8:	000b883a 	mov	r5,zero
 40013bc:	1009883a 	mov	r4,r2
 40013c0:	40003c80 	call	40003c8 <draw>
			draw(R, COLOR08_RED, 19, 0);
 40013c4:	000f883a 	mov	r7,zero
 40013c8:	018004c4 	movi	r6,19
 40013cc:	01403804 	movi	r5,224
 40013d0:	010100f4 	movhi	r4,1027
 40013d4:	2119aa04 	addi	r4,r4,26280
 40013d8:	40003c80 	call	40003c8 <draw>
			clk=time+1;
 40013dc:	e0b7d817 	ldw	r2,-8352(fp)
 40013e0:	10800044 	addi	r2,r2,1
 40013e4:	e0b7c615 	stw	r2,-8424(fp)
		}


		if(clk < time)
 40013e8:	e0f7c617 	ldw	r3,-8424(fp)
 40013ec:	e0b7d817 	ldw	r2,-8352(fp)
 40013f0:	18800116 	blt	r3,r2,40013f8 <main+0xe24>
 40013f4:	40157601 	jmpi	4015760 <main+0x1518c>
		{
		key1=IORD_ALTERA_AVALON_PIO_DATA(KEY1_BASE);
 40013f8:	008200b4 	movhi	r2,2050
 40013fc:	10840804 	addi	r2,r2,4128
 4001400:	10800037 	ldwio	r2,0(r2)
 4001404:	e0b7d915 	stw	r2,-8348(fp)

		if(key1==0)
 4001408:	e0b7d917 	ldw	r2,-8348(fp)
 400140c:	1000041e 	bne	r2,zero,4001420 <main+0xe4c>
		{
			pause++;
 4001410:	e0b7c717 	ldw	r2,-8420(fp)
 4001414:	10800044 	addi	r2,r2,1
 4001418:	e0b7c715 	stw	r2,-8420(fp)
			Delay_Short();
 400141c:	40003440 	call	4000344 <Delay_Short>
		}

		if(pause%2==0)
 4001420:	e0b7c717 	ldw	r2,-8420(fp)
 4001424:	1080004c 	andi	r2,r2,1
 4001428:	1000041e 	bne	r2,zero,400143c <main+0xe68>
		{
			IOWR_ALTERA_AVALON_PIO_DATA (DIGITAL_CLOCK_PAUSE_BASE, 1);
 400142c:	00c00044 	movi	r3,1
 4001430:	008200b4 	movhi	r2,2050
 4001434:	10841004 	addi	r2,r2,4160
 4001438:	10c00035 	stwio	r3,0(r2)
			//printf("not paused \n");

		}
		if(pause%2==1)
 400143c:	e0f7c717 	ldw	r3,-8420(fp)
 4001440:	00a00034 	movhi	r2,32768
 4001444:	10800044 	addi	r2,r2,1
 4001448:	1884703a 	and	r2,r3,r2
 400144c:	1000040e 	bge	r2,zero,4001460 <main+0xe8c>
 4001450:	10bfffc4 	addi	r2,r2,-1
 4001454:	00ffff84 	movi	r3,-2
 4001458:	10c4b03a 	or	r2,r2,r3
 400145c:	10800044 	addi	r2,r2,1
 4001460:	10800058 	cmpnei	r2,r2,1
 4001464:	1000041e 	bne	r2,zero,4001478 <main+0xea4>
		{
			IOWR_ALTERA_AVALON_PIO_DATA (DIGITAL_CLOCK_PAUSE_BASE, 0);
 4001468:	0007883a 	mov	r3,zero
 400146c:	008200b4 	movhi	r2,2050
 4001470:	10841004 	addi	r2,r2,4160
 4001474:	10c00035 	stwio	r3,0(r2)
		{
			printf("not pressed \n");
		}
		*/

		if(y==0)//top
 4001478:	e0b7c217 	ldw	r2,-8440(fp)
 400147c:	1000081e 	bne	r2,zero,40014a0 <main+0xecc>
		{
		draw(square, COLOR08_RED, x,y+2);
 4001480:	e0b7c217 	ldw	r2,-8440(fp)
 4001484:	10c00084 	addi	r3,r2,2
 4001488:	e0b7de04 	addi	r2,fp,-8328
 400148c:	180f883a 	mov	r7,r3
 4001490:	e1b7c117 	ldw	r6,-8444(fp)
 4001494:	01403804 	movi	r5,224
 4001498:	1009883a 	mov	r4,r2
 400149c:	40003c80 	call	40003c8 <draw>
		}

		if(y==7)//bottom
 40014a0:	e0b7c217 	ldw	r2,-8440(fp)
 40014a4:	108001d8 	cmpnei	r2,r2,7
 40014a8:	1000081e 	bne	r2,zero,40014cc <main+0xef8>
		{
		draw(square, COLOR08_RED, x,y+2);
 40014ac:	e0b7c217 	ldw	r2,-8440(fp)
 40014b0:	10c00084 	addi	r3,r2,2
 40014b4:	e0b7de04 	addi	r2,fp,-8328
 40014b8:	180f883a 	mov	r7,r3
 40014bc:	e1b7c117 	ldw	r6,-8444(fp)
 40014c0:	01403804 	movi	r5,224
 40014c4:	1009883a 	mov	r4,r2
 40014c8:	40003c80 	call	40003c8 <draw>
		}

		if(x==0)//left
 40014cc:	e0b7c117 	ldw	r2,-8444(fp)
 40014d0:	1000081e 	bne	r2,zero,40014f4 <main+0xf20>
		{
		draw(square, COLOR08_RED, x,y+2);
 40014d4:	e0b7c217 	ldw	r2,-8440(fp)
 40014d8:	10c00084 	addi	r3,r2,2
 40014dc:	e0b7de04 	addi	r2,fp,-8328
 40014e0:	180f883a 	mov	r7,r3
 40014e4:	e1b7c117 	ldw	r6,-8444(fp)
 40014e8:	01403804 	movi	r5,224
 40014ec:	1009883a 	mov	r4,r2
 40014f0:	40003c80 	call	40003c8 <draw>
		}

		if(x==19)//right
 40014f4:	e0b7c117 	ldw	r2,-8444(fp)
 40014f8:	108004d8 	cmpnei	r2,r2,19
 40014fc:	1000081e 	bne	r2,zero,4001520 <main+0xf4c>
		{
		draw(square, COLOR08_RED, x,y+2);
 4001500:	e0b7c217 	ldw	r2,-8440(fp)
 4001504:	10c00084 	addi	r3,r2,2
 4001508:	e0b7de04 	addi	r2,fp,-8328
 400150c:	180f883a 	mov	r7,r3
 4001510:	e1b7c117 	ldw	r6,-8444(fp)
 4001514:	01403804 	movi	r5,224
 4001518:	1009883a 	mov	r4,r2
 400151c:	40003c80 	call	40003c8 <draw>
		}


		if(x>0 && x<19 )//middle
 4001520:	e0b7c117 	ldw	r2,-8444(fp)
 4001524:	0080100e 	bge	zero,r2,4001568 <main+0xf94>
 4001528:	e0b7c117 	ldw	r2,-8444(fp)
 400152c:	108004c8 	cmpgei	r2,r2,19
 4001530:	10000d1e 	bne	r2,zero,4001568 <main+0xf94>
		{
			if(y>0 && y<7)
 4001534:	e0b7c217 	ldw	r2,-8440(fp)
 4001538:	00800b0e 	bge	zero,r2,4001568 <main+0xf94>
 400153c:	e0b7c217 	ldw	r2,-8440(fp)
 4001540:	108001c8 	cmpgei	r2,r2,7
 4001544:	1000081e 	bne	r2,zero,4001568 <main+0xf94>
			{
				draw(square, COLOR08_WHITE, x,y+2);
 4001548:	e0b7c217 	ldw	r2,-8440(fp)
 400154c:	10c00084 	addi	r3,r2,2
 4001550:	e0b7de04 	addi	r2,fp,-8328
 4001554:	180f883a 	mov	r7,r3
 4001558:	e1b7c117 	ldw	r6,-8444(fp)
 400155c:	01403fc4 	movi	r5,255
 4001560:	1009883a 	mov	r4,r2
 4001564:	40003c80 	call	40003c8 <draw>
			}
		}
		IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 0);
 4001568:	0007883a 	mov	r3,zero
 400156c:	008200b4 	movhi	r2,2050
 4001570:	10841804 	addi	r2,r2,4192
 4001574:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4001578:	00c00044 	movi	r3,1
 400157c:	008200b4 	movhi	r2,2050
 4001580:	10841804 	addi	r2,r2,4192
 4001584:	10c00035 	stwio	r3,0(r2)
		Delay_Pulse();
 4001588:	40003880 	call	4000388 <Delay_Pulse>
		button=IORD_ALTERA_AVALON_PIO_DATA(KEY_UDLRM_ENCODER_BASE);
 400158c:	008200b4 	movhi	r2,2050
 4001590:	10841c04 	addi	r2,r2,4208
 4001594:	10800037 	ldwio	r2,0(r2)
 4001598:	e0b7da15 	stw	r2,-8344(fp)

		IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 0);
 400159c:	0007883a 	mov	r3,zero
 40015a0:	008200b4 	movhi	r2,2050
 40015a4:	10841804 	addi	r2,r2,4192
 40015a8:	10c00035 	stwio	r3,0(r2)

		if(button==0 || button==1 || button==2 || button==3 || button==4 || button==5 || button==6)
 40015ac:	e0b7da17 	ldw	r2,-8344(fp)
 40015b0:	10001226 	beq	r2,zero,40015fc <main+0x1028>
 40015b4:	e0b7da17 	ldw	r2,-8344(fp)
 40015b8:	10800060 	cmpeqi	r2,r2,1
 40015bc:	10000f1e 	bne	r2,zero,40015fc <main+0x1028>
 40015c0:	e0b7da17 	ldw	r2,-8344(fp)
 40015c4:	108000a0 	cmpeqi	r2,r2,2
 40015c8:	10000c1e 	bne	r2,zero,40015fc <main+0x1028>
 40015cc:	e0b7da17 	ldw	r2,-8344(fp)
 40015d0:	108000e0 	cmpeqi	r2,r2,3
 40015d4:	1000091e 	bne	r2,zero,40015fc <main+0x1028>
 40015d8:	e0b7da17 	ldw	r2,-8344(fp)
 40015dc:	10800120 	cmpeqi	r2,r2,4
 40015e0:	1000061e 	bne	r2,zero,40015fc <main+0x1028>
 40015e4:	e0b7da17 	ldw	r2,-8344(fp)
 40015e8:	10800160 	cmpeqi	r2,r2,5
 40015ec:	1000031e 	bne	r2,zero,40015fc <main+0x1028>
 40015f0:	e0b7da17 	ldw	r2,-8344(fp)
 40015f4:	10800198 	cmpnei	r2,r2,6
 40015f8:	1004f21e 	bne	r2,zero,40029c4 <main+0x23f0>
		{
			clk = IORD_ALTERA_AVALON_PIO_DATA(DIGITAL_CLOCK_BASE);
 40015fc:	008200b4 	movhi	r2,2050
 4001600:	10841404 	addi	r2,r2,4176
 4001604:	10800037 	ldwio	r2,0(r2)
 4001608:	e0b7c615 	stw	r2,-8424(fp)

			sec = clk%60;
 400160c:	e0b7c617 	ldw	r2,-8424(fp)
 4001610:	01400f04 	movi	r5,60
 4001614:	1009883a 	mov	r4,r2
 4001618:	4018fd00 	call	4018fd0 <__modsi3>
 400161c:	e0b7cb15 	stw	r2,-8404(fp)
			min = (clk/60)%60;
 4001620:	e0b7c617 	ldw	r2,-8424(fp)
 4001624:	01400f04 	movi	r5,60
 4001628:	1009883a 	mov	r4,r2
 400162c:	4018f4c0 	call	4018f4c <__divsi3>
 4001630:	01400f04 	movi	r5,60
 4001634:	1009883a 	mov	r4,r2
 4001638:	4018fd00 	call	4018fd0 <__modsi3>
 400163c:	e0b7cc15 	stw	r2,-8400(fp)
			hour = ((clk/60)/60)%24;
 4001640:	e0b7c617 	ldw	r2,-8424(fp)
 4001644:	01438404 	movi	r5,3600
 4001648:	1009883a 	mov	r4,r2
 400164c:	4018f4c0 	call	4018f4c <__divsi3>
 4001650:	01400604 	movi	r5,24
 4001654:	1009883a 	mov	r4,r2
 4001658:	4018fd00 	call	4018fd0 <__modsi3>
 400165c:	e0b7cd15 	stw	r2,-8396(fp)
			day =  (((clk/60)/60)/24)%100;
 4001660:	e0b7c617 	ldw	r2,-8424(fp)
 4001664:	01400074 	movhi	r5,1
 4001668:	29546004 	addi	r5,r5,20864
 400166c:	1009883a 	mov	r4,r2
 4001670:	4018f4c0 	call	4018f4c <__divsi3>
 4001674:	01401904 	movi	r5,100
 4001678:	1009883a 	mov	r4,r2
 400167c:	4018fd00 	call	4018fd0 <__modsi3>
 4001680:	e0b7ce15 	stw	r2,-8392(fp)
			sec_a = sec/10;
 4001684:	e0b7cb17 	ldw	r2,-8404(fp)
 4001688:	01400284 	movi	r5,10
 400168c:	1009883a 	mov	r4,r2
 4001690:	4018f4c0 	call	4018f4c <__divsi3>
 4001694:	e0b7cf15 	stw	r2,-8388(fp)
			sec_b = sec%10;
 4001698:	e0b7cb17 	ldw	r2,-8404(fp)
 400169c:	01400284 	movi	r5,10
 40016a0:	1009883a 	mov	r4,r2
 40016a4:	4018fd00 	call	4018fd0 <__modsi3>
 40016a8:	e0b7d015 	stw	r2,-8384(fp)
			min_a = min/10;
 40016ac:	e0b7cc17 	ldw	r2,-8400(fp)
 40016b0:	01400284 	movi	r5,10
 40016b4:	1009883a 	mov	r4,r2
 40016b8:	4018f4c0 	call	4018f4c <__divsi3>
 40016bc:	e0b7d115 	stw	r2,-8380(fp)
			min_b = min%10;
 40016c0:	e0b7cc17 	ldw	r2,-8400(fp)
 40016c4:	01400284 	movi	r5,10
 40016c8:	1009883a 	mov	r4,r2
 40016cc:	4018fd00 	call	4018fd0 <__modsi3>
 40016d0:	e0b7d215 	stw	r2,-8376(fp)
			hour_a = hour/10;
 40016d4:	e0b7cd17 	ldw	r2,-8396(fp)
 40016d8:	01400284 	movi	r5,10
 40016dc:	1009883a 	mov	r4,r2
 40016e0:	4018f4c0 	call	4018f4c <__divsi3>
 40016e4:	e0b7d315 	stw	r2,-8372(fp)
			hour_b = hour%10;
 40016e8:	e0b7cd17 	ldw	r2,-8396(fp)
 40016ec:	01400284 	movi	r5,10
 40016f0:	1009883a 	mov	r4,r2
 40016f4:	4018fd00 	call	4018fd0 <__modsi3>
 40016f8:	e0b7d415 	stw	r2,-8368(fp)
			day_a = day/10;
 40016fc:	e0b7ce17 	ldw	r2,-8392(fp)
 4001700:	01400284 	movi	r5,10
 4001704:	1009883a 	mov	r4,r2
 4001708:	4018f4c0 	call	4018f4c <__divsi3>
 400170c:	e0b7d515 	stw	r2,-8364(fp)
			day_b = day%10;
 4001710:	e0b7ce17 	ldw	r2,-8392(fp)
 4001714:	01400284 	movi	r5,10
 4001718:	1009883a 	mov	r4,r2
 400171c:	4018fd00 	call	4018fd0 <__modsi3>
 4001720:	e0b7d615 	stw	r2,-8360(fp)
			printf("%i:",day);
			printf("%i:",hour);
			printf("%i:",min);
			printf("%i\n",sec);
	*/
			if(sec_b == 0)
 4001724:	e0b7d017 	ldw	r2,-8384(fp)
 4001728:	10000c1e 	bne	r2,zero,400175c <main+0x1188>
			{
				draw1(dig_blank, COLOR08_BLACK, 39, 0);
 400172c:	e0befe04 	addi	r2,fp,-1032
 4001730:	000f883a 	mov	r7,zero
 4001734:	018009c4 	movi	r6,39
 4001738:	000b883a 	mov	r5,zero
 400173c:	1009883a 	mov	r4,r2
 4001740:	40004cc0 	call	40004cc <draw1>
				draw1(dig_zero, COLOR08_RED, 39, 0);
 4001744:	e0bb3e04 	addi	r2,fp,-4872
 4001748:	000f883a 	mov	r7,zero
 400174c:	018009c4 	movi	r6,39
 4001750:	01403804 	movi	r5,224
 4001754:	1009883a 	mov	r4,r2
 4001758:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_b == 1)
 400175c:	e0b7d017 	ldw	r2,-8384(fp)
 4001760:	10800058 	cmpnei	r2,r2,1
 4001764:	10000c1e 	bne	r2,zero,4001798 <main+0x11c4>
			{
				draw1(dig_blank, COLOR08_BLACK, 39, 0);
 4001768:	e0befe04 	addi	r2,fp,-1032
 400176c:	000f883a 	mov	r7,zero
 4001770:	018009c4 	movi	r6,39
 4001774:	000b883a 	mov	r5,zero
 4001778:	1009883a 	mov	r4,r2
 400177c:	40004cc0 	call	40004cc <draw1>
				draw1(dig_one, COLOR08_RED, 39, 0);
 4001780:	e0bb9e04 	addi	r2,fp,-4488
 4001784:	000f883a 	mov	r7,zero
 4001788:	018009c4 	movi	r6,39
 400178c:	01403804 	movi	r5,224
 4001790:	1009883a 	mov	r4,r2
 4001794:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_b == 2)
 4001798:	e0b7d017 	ldw	r2,-8384(fp)
 400179c:	10800098 	cmpnei	r2,r2,2
 40017a0:	10000c1e 	bne	r2,zero,40017d4 <main+0x1200>
			{
				draw1(dig_blank, COLOR08_BLACK, 39, 0);
 40017a4:	e0befe04 	addi	r2,fp,-1032
 40017a8:	000f883a 	mov	r7,zero
 40017ac:	018009c4 	movi	r6,39
 40017b0:	000b883a 	mov	r5,zero
 40017b4:	1009883a 	mov	r4,r2
 40017b8:	40004cc0 	call	40004cc <draw1>
				draw1(dig_two, COLOR08_RED, 39, 0);
 40017bc:	e0bbfe04 	addi	r2,fp,-4104
 40017c0:	000f883a 	mov	r7,zero
 40017c4:	018009c4 	movi	r6,39
 40017c8:	01403804 	movi	r5,224
 40017cc:	1009883a 	mov	r4,r2
 40017d0:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_b == 3)
 40017d4:	e0b7d017 	ldw	r2,-8384(fp)
 40017d8:	108000d8 	cmpnei	r2,r2,3
 40017dc:	10000c1e 	bne	r2,zero,4001810 <main+0x123c>
			{
				draw1(dig_blank, COLOR08_BLACK, 39, 0);
 40017e0:	e0befe04 	addi	r2,fp,-1032
 40017e4:	000f883a 	mov	r7,zero
 40017e8:	018009c4 	movi	r6,39
 40017ec:	000b883a 	mov	r5,zero
 40017f0:	1009883a 	mov	r4,r2
 40017f4:	40004cc0 	call	40004cc <draw1>
				draw1(dig_three, COLOR08_RED, 39, 0);
 40017f8:	e0bc5e04 	addi	r2,fp,-3720
 40017fc:	000f883a 	mov	r7,zero
 4001800:	018009c4 	movi	r6,39
 4001804:	01403804 	movi	r5,224
 4001808:	1009883a 	mov	r4,r2
 400180c:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_b == 4)
 4001810:	e0b7d017 	ldw	r2,-8384(fp)
 4001814:	10800118 	cmpnei	r2,r2,4
 4001818:	10000c1e 	bne	r2,zero,400184c <main+0x1278>
			{
				draw1(dig_blank, COLOR08_BLACK, 39, 0);
 400181c:	e0befe04 	addi	r2,fp,-1032
 4001820:	000f883a 	mov	r7,zero
 4001824:	018009c4 	movi	r6,39
 4001828:	000b883a 	mov	r5,zero
 400182c:	1009883a 	mov	r4,r2
 4001830:	40004cc0 	call	40004cc <draw1>
				draw1(dig_four, COLOR08_RED, 39, 0);
 4001834:	e0bcbe04 	addi	r2,fp,-3336
 4001838:	000f883a 	mov	r7,zero
 400183c:	018009c4 	movi	r6,39
 4001840:	01403804 	movi	r5,224
 4001844:	1009883a 	mov	r4,r2
 4001848:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_b == 5)
 400184c:	e0b7d017 	ldw	r2,-8384(fp)
 4001850:	10800158 	cmpnei	r2,r2,5
 4001854:	10000c1e 	bne	r2,zero,4001888 <main+0x12b4>
			{
				draw1(dig_blank, COLOR08_BLACK, 39, 0);
 4001858:	e0befe04 	addi	r2,fp,-1032
 400185c:	000f883a 	mov	r7,zero
 4001860:	018009c4 	movi	r6,39
 4001864:	000b883a 	mov	r5,zero
 4001868:	1009883a 	mov	r4,r2
 400186c:	40004cc0 	call	40004cc <draw1>
				draw1(dig_five, COLOR08_RED, 39, 0);
 4001870:	e0bd1e04 	addi	r2,fp,-2952
 4001874:	000f883a 	mov	r7,zero
 4001878:	018009c4 	movi	r6,39
 400187c:	01403804 	movi	r5,224
 4001880:	1009883a 	mov	r4,r2
 4001884:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_b == 6)
 4001888:	e0b7d017 	ldw	r2,-8384(fp)
 400188c:	10800198 	cmpnei	r2,r2,6
 4001890:	10000c1e 	bne	r2,zero,40018c4 <main+0x12f0>
			{
				draw1(dig_blank, COLOR08_BLACK, 39, 0);
 4001894:	e0befe04 	addi	r2,fp,-1032
 4001898:	000f883a 	mov	r7,zero
 400189c:	018009c4 	movi	r6,39
 40018a0:	000b883a 	mov	r5,zero
 40018a4:	1009883a 	mov	r4,r2
 40018a8:	40004cc0 	call	40004cc <draw1>
				draw1(dig_six, COLOR08_RED, 39, 0);
 40018ac:	e0bd7e04 	addi	r2,fp,-2568
 40018b0:	000f883a 	mov	r7,zero
 40018b4:	018009c4 	movi	r6,39
 40018b8:	01403804 	movi	r5,224
 40018bc:	1009883a 	mov	r4,r2
 40018c0:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_b == 7)
 40018c4:	e0b7d017 	ldw	r2,-8384(fp)
 40018c8:	108001d8 	cmpnei	r2,r2,7
 40018cc:	10000c1e 	bne	r2,zero,4001900 <main+0x132c>
			{
				draw1(dig_blank, COLOR08_BLACK, 39, 0);
 40018d0:	e0befe04 	addi	r2,fp,-1032
 40018d4:	000f883a 	mov	r7,zero
 40018d8:	018009c4 	movi	r6,39
 40018dc:	000b883a 	mov	r5,zero
 40018e0:	1009883a 	mov	r4,r2
 40018e4:	40004cc0 	call	40004cc <draw1>
				draw1(dig_seven, COLOR08_RED, 39, 0);
 40018e8:	e0bdde04 	addi	r2,fp,-2184
 40018ec:	000f883a 	mov	r7,zero
 40018f0:	018009c4 	movi	r6,39
 40018f4:	01403804 	movi	r5,224
 40018f8:	1009883a 	mov	r4,r2
 40018fc:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_b == 8)
 4001900:	e0b7d017 	ldw	r2,-8384(fp)
 4001904:	10800218 	cmpnei	r2,r2,8
 4001908:	10000c1e 	bne	r2,zero,400193c <main+0x1368>
			{
				draw1(dig_blank, COLOR08_BLACK, 39, 0);
 400190c:	e0befe04 	addi	r2,fp,-1032
 4001910:	000f883a 	mov	r7,zero
 4001914:	018009c4 	movi	r6,39
 4001918:	000b883a 	mov	r5,zero
 400191c:	1009883a 	mov	r4,r2
 4001920:	40004cc0 	call	40004cc <draw1>
				draw1(dig_eight, COLOR08_RED, 39, 0);
 4001924:	e0be3e04 	addi	r2,fp,-1800
 4001928:	000f883a 	mov	r7,zero
 400192c:	018009c4 	movi	r6,39
 4001930:	01403804 	movi	r5,224
 4001934:	1009883a 	mov	r4,r2
 4001938:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_b == 9)
 400193c:	e0b7d017 	ldw	r2,-8384(fp)
 4001940:	10800258 	cmpnei	r2,r2,9
 4001944:	10000c1e 	bne	r2,zero,4001978 <main+0x13a4>
			{
				draw1(dig_blank, COLOR08_BLACK, 39, 0);
 4001948:	e0befe04 	addi	r2,fp,-1032
 400194c:	000f883a 	mov	r7,zero
 4001950:	018009c4 	movi	r6,39
 4001954:	000b883a 	mov	r5,zero
 4001958:	1009883a 	mov	r4,r2
 400195c:	40004cc0 	call	40004cc <draw1>
				draw1(dig_nine, COLOR08_RED, 39, 0);
 4001960:	e0be9e04 	addi	r2,fp,-1416
 4001964:	000f883a 	mov	r7,zero
 4001968:	018009c4 	movi	r6,39
 400196c:	01403804 	movi	r5,224
 4001970:	1009883a 	mov	r4,r2
 4001974:	40004cc0 	call	40004cc <draw1>
			}




			if(sec_a == 0)
 4001978:	e0b7cf17 	ldw	r2,-8388(fp)
 400197c:	10000c1e 	bne	r2,zero,40019b0 <main+0x13dc>
			{
				draw1(dig_blank, COLOR08_BLACK, 38, 0);
 4001980:	e0befe04 	addi	r2,fp,-1032
 4001984:	000f883a 	mov	r7,zero
 4001988:	01800984 	movi	r6,38
 400198c:	000b883a 	mov	r5,zero
 4001990:	1009883a 	mov	r4,r2
 4001994:	40004cc0 	call	40004cc <draw1>
				draw1(dig_zero, COLOR08_RED, 38, 0);
 4001998:	e0bb3e04 	addi	r2,fp,-4872
 400199c:	000f883a 	mov	r7,zero
 40019a0:	01800984 	movi	r6,38
 40019a4:	01403804 	movi	r5,224
 40019a8:	1009883a 	mov	r4,r2
 40019ac:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_a == 1)
 40019b0:	e0b7cf17 	ldw	r2,-8388(fp)
 40019b4:	10800058 	cmpnei	r2,r2,1
 40019b8:	10000c1e 	bne	r2,zero,40019ec <main+0x1418>
			{
				draw1(dig_blank, COLOR08_BLACK, 38, 0);
 40019bc:	e0befe04 	addi	r2,fp,-1032
 40019c0:	000f883a 	mov	r7,zero
 40019c4:	01800984 	movi	r6,38
 40019c8:	000b883a 	mov	r5,zero
 40019cc:	1009883a 	mov	r4,r2
 40019d0:	40004cc0 	call	40004cc <draw1>
				draw1(dig_one, COLOR08_RED, 38, 0);
 40019d4:	e0bb9e04 	addi	r2,fp,-4488
 40019d8:	000f883a 	mov	r7,zero
 40019dc:	01800984 	movi	r6,38
 40019e0:	01403804 	movi	r5,224
 40019e4:	1009883a 	mov	r4,r2
 40019e8:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_a == 2)
 40019ec:	e0b7cf17 	ldw	r2,-8388(fp)
 40019f0:	10800098 	cmpnei	r2,r2,2
 40019f4:	10000c1e 	bne	r2,zero,4001a28 <main+0x1454>
			{
				draw1(dig_blank, COLOR08_BLACK, 38, 0);
 40019f8:	e0befe04 	addi	r2,fp,-1032
 40019fc:	000f883a 	mov	r7,zero
 4001a00:	01800984 	movi	r6,38
 4001a04:	000b883a 	mov	r5,zero
 4001a08:	1009883a 	mov	r4,r2
 4001a0c:	40004cc0 	call	40004cc <draw1>
				draw1(dig_two, COLOR08_RED, 38, 0);
 4001a10:	e0bbfe04 	addi	r2,fp,-4104
 4001a14:	000f883a 	mov	r7,zero
 4001a18:	01800984 	movi	r6,38
 4001a1c:	01403804 	movi	r5,224
 4001a20:	1009883a 	mov	r4,r2
 4001a24:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_a == 3)
 4001a28:	e0b7cf17 	ldw	r2,-8388(fp)
 4001a2c:	108000d8 	cmpnei	r2,r2,3
 4001a30:	10000c1e 	bne	r2,zero,4001a64 <main+0x1490>
			{
				draw1(dig_blank, COLOR08_BLACK, 38, 0);
 4001a34:	e0befe04 	addi	r2,fp,-1032
 4001a38:	000f883a 	mov	r7,zero
 4001a3c:	01800984 	movi	r6,38
 4001a40:	000b883a 	mov	r5,zero
 4001a44:	1009883a 	mov	r4,r2
 4001a48:	40004cc0 	call	40004cc <draw1>
				draw1(dig_three, COLOR08_RED, 38, 0);
 4001a4c:	e0bc5e04 	addi	r2,fp,-3720
 4001a50:	000f883a 	mov	r7,zero
 4001a54:	01800984 	movi	r6,38
 4001a58:	01403804 	movi	r5,224
 4001a5c:	1009883a 	mov	r4,r2
 4001a60:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_a == 4)
 4001a64:	e0b7cf17 	ldw	r2,-8388(fp)
 4001a68:	10800118 	cmpnei	r2,r2,4
 4001a6c:	10000c1e 	bne	r2,zero,4001aa0 <main+0x14cc>
			{
				draw1(dig_blank, COLOR08_BLACK, 38, 0);
 4001a70:	e0befe04 	addi	r2,fp,-1032
 4001a74:	000f883a 	mov	r7,zero
 4001a78:	01800984 	movi	r6,38
 4001a7c:	000b883a 	mov	r5,zero
 4001a80:	1009883a 	mov	r4,r2
 4001a84:	40004cc0 	call	40004cc <draw1>
				draw1(dig_four, COLOR08_RED, 38, 0);
 4001a88:	e0bcbe04 	addi	r2,fp,-3336
 4001a8c:	000f883a 	mov	r7,zero
 4001a90:	01800984 	movi	r6,38
 4001a94:	01403804 	movi	r5,224
 4001a98:	1009883a 	mov	r4,r2
 4001a9c:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_a == 5)
 4001aa0:	e0b7cf17 	ldw	r2,-8388(fp)
 4001aa4:	10800158 	cmpnei	r2,r2,5
 4001aa8:	10000c1e 	bne	r2,zero,4001adc <main+0x1508>
			{
				draw1(dig_blank, COLOR08_BLACK, 38, 0);
 4001aac:	e0befe04 	addi	r2,fp,-1032
 4001ab0:	000f883a 	mov	r7,zero
 4001ab4:	01800984 	movi	r6,38
 4001ab8:	000b883a 	mov	r5,zero
 4001abc:	1009883a 	mov	r4,r2
 4001ac0:	40004cc0 	call	40004cc <draw1>
				draw1(dig_five, COLOR08_RED, 38, 0);
 4001ac4:	e0bd1e04 	addi	r2,fp,-2952
 4001ac8:	000f883a 	mov	r7,zero
 4001acc:	01800984 	movi	r6,38
 4001ad0:	01403804 	movi	r5,224
 4001ad4:	1009883a 	mov	r4,r2
 4001ad8:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_a == 6)
 4001adc:	e0b7cf17 	ldw	r2,-8388(fp)
 4001ae0:	10800198 	cmpnei	r2,r2,6
 4001ae4:	10000c1e 	bne	r2,zero,4001b18 <main+0x1544>
			{
				draw1(dig_blank, COLOR08_BLACK, 38, 0);
 4001ae8:	e0befe04 	addi	r2,fp,-1032
 4001aec:	000f883a 	mov	r7,zero
 4001af0:	01800984 	movi	r6,38
 4001af4:	000b883a 	mov	r5,zero
 4001af8:	1009883a 	mov	r4,r2
 4001afc:	40004cc0 	call	40004cc <draw1>
				draw1(dig_six, COLOR08_RED, 38, 0);
 4001b00:	e0bd7e04 	addi	r2,fp,-2568
 4001b04:	000f883a 	mov	r7,zero
 4001b08:	01800984 	movi	r6,38
 4001b0c:	01403804 	movi	r5,224
 4001b10:	1009883a 	mov	r4,r2
 4001b14:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_a == 7)
 4001b18:	e0b7cf17 	ldw	r2,-8388(fp)
 4001b1c:	108001d8 	cmpnei	r2,r2,7
 4001b20:	10000c1e 	bne	r2,zero,4001b54 <main+0x1580>
			{
				draw1(dig_blank, COLOR08_BLACK, 38, 0);
 4001b24:	e0befe04 	addi	r2,fp,-1032
 4001b28:	000f883a 	mov	r7,zero
 4001b2c:	01800984 	movi	r6,38
 4001b30:	000b883a 	mov	r5,zero
 4001b34:	1009883a 	mov	r4,r2
 4001b38:	40004cc0 	call	40004cc <draw1>
				draw1(dig_seven, COLOR08_RED, 38, 0);
 4001b3c:	e0bdde04 	addi	r2,fp,-2184
 4001b40:	000f883a 	mov	r7,zero
 4001b44:	01800984 	movi	r6,38
 4001b48:	01403804 	movi	r5,224
 4001b4c:	1009883a 	mov	r4,r2
 4001b50:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_a == 8)
 4001b54:	e0b7cf17 	ldw	r2,-8388(fp)
 4001b58:	10800218 	cmpnei	r2,r2,8
 4001b5c:	10000c1e 	bne	r2,zero,4001b90 <main+0x15bc>
			{
				draw1(dig_blank, COLOR08_BLACK, 38, 0);
 4001b60:	e0befe04 	addi	r2,fp,-1032
 4001b64:	000f883a 	mov	r7,zero
 4001b68:	01800984 	movi	r6,38
 4001b6c:	000b883a 	mov	r5,zero
 4001b70:	1009883a 	mov	r4,r2
 4001b74:	40004cc0 	call	40004cc <draw1>
				draw1(dig_eight, COLOR08_RED, 38, 0);
 4001b78:	e0be3e04 	addi	r2,fp,-1800
 4001b7c:	000f883a 	mov	r7,zero
 4001b80:	01800984 	movi	r6,38
 4001b84:	01403804 	movi	r5,224
 4001b88:	1009883a 	mov	r4,r2
 4001b8c:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_a == 9)
 4001b90:	e0b7cf17 	ldw	r2,-8388(fp)
 4001b94:	10800258 	cmpnei	r2,r2,9
 4001b98:	10000c1e 	bne	r2,zero,4001bcc <main+0x15f8>
			{
				draw1(dig_blank, COLOR08_BLACK, 38, 0);
 4001b9c:	e0befe04 	addi	r2,fp,-1032
 4001ba0:	000f883a 	mov	r7,zero
 4001ba4:	01800984 	movi	r6,38
 4001ba8:	000b883a 	mov	r5,zero
 4001bac:	1009883a 	mov	r4,r2
 4001bb0:	40004cc0 	call	40004cc <draw1>
				draw1(dig_nine, COLOR08_RED, 38, 0);
 4001bb4:	e0be9e04 	addi	r2,fp,-1416
 4001bb8:	000f883a 	mov	r7,zero
 4001bbc:	01800984 	movi	r6,38
 4001bc0:	01403804 	movi	r5,224
 4001bc4:	1009883a 	mov	r4,r2
 4001bc8:	40004cc0 	call	40004cc <draw1>
			}


			if(min_b == 0)
 4001bcc:	e0b7d217 	ldw	r2,-8376(fp)
 4001bd0:	10000c1e 	bne	r2,zero,4001c04 <main+0x1630>
			{
				draw1(dig_blank, COLOR08_BLACK, 36, 0);
 4001bd4:	e0befe04 	addi	r2,fp,-1032
 4001bd8:	000f883a 	mov	r7,zero
 4001bdc:	01800904 	movi	r6,36
 4001be0:	000b883a 	mov	r5,zero
 4001be4:	1009883a 	mov	r4,r2
 4001be8:	40004cc0 	call	40004cc <draw1>
				draw1(dig_zero, COLOR08_RED, 36, 0);
 4001bec:	e0bb3e04 	addi	r2,fp,-4872
 4001bf0:	000f883a 	mov	r7,zero
 4001bf4:	01800904 	movi	r6,36
 4001bf8:	01403804 	movi	r5,224
 4001bfc:	1009883a 	mov	r4,r2
 4001c00:	40004cc0 	call	40004cc <draw1>
			}
			if(min_b == 1)
 4001c04:	e0b7d217 	ldw	r2,-8376(fp)
 4001c08:	10800058 	cmpnei	r2,r2,1
 4001c0c:	10000c1e 	bne	r2,zero,4001c40 <main+0x166c>
			{
				draw1(dig_blank, COLOR08_BLACK, 36, 0);
 4001c10:	e0befe04 	addi	r2,fp,-1032
 4001c14:	000f883a 	mov	r7,zero
 4001c18:	01800904 	movi	r6,36
 4001c1c:	000b883a 	mov	r5,zero
 4001c20:	1009883a 	mov	r4,r2
 4001c24:	40004cc0 	call	40004cc <draw1>
				draw1(dig_one, COLOR08_RED, 36, 0);
 4001c28:	e0bb9e04 	addi	r2,fp,-4488
 4001c2c:	000f883a 	mov	r7,zero
 4001c30:	01800904 	movi	r6,36
 4001c34:	01403804 	movi	r5,224
 4001c38:	1009883a 	mov	r4,r2
 4001c3c:	40004cc0 	call	40004cc <draw1>
			}
			if(min_b == 2)
 4001c40:	e0b7d217 	ldw	r2,-8376(fp)
 4001c44:	10800098 	cmpnei	r2,r2,2
 4001c48:	10000c1e 	bne	r2,zero,4001c7c <main+0x16a8>
			{
				draw1(dig_blank, COLOR08_BLACK, 36, 0);
 4001c4c:	e0befe04 	addi	r2,fp,-1032
 4001c50:	000f883a 	mov	r7,zero
 4001c54:	01800904 	movi	r6,36
 4001c58:	000b883a 	mov	r5,zero
 4001c5c:	1009883a 	mov	r4,r2
 4001c60:	40004cc0 	call	40004cc <draw1>
				draw1(dig_two, COLOR08_RED, 36, 0);
 4001c64:	e0bbfe04 	addi	r2,fp,-4104
 4001c68:	000f883a 	mov	r7,zero
 4001c6c:	01800904 	movi	r6,36
 4001c70:	01403804 	movi	r5,224
 4001c74:	1009883a 	mov	r4,r2
 4001c78:	40004cc0 	call	40004cc <draw1>
			}
			if(min_b == 3)
 4001c7c:	e0b7d217 	ldw	r2,-8376(fp)
 4001c80:	108000d8 	cmpnei	r2,r2,3
 4001c84:	10000c1e 	bne	r2,zero,4001cb8 <main+0x16e4>
			{
				draw1(dig_blank, COLOR08_BLACK, 36, 0);
 4001c88:	e0befe04 	addi	r2,fp,-1032
 4001c8c:	000f883a 	mov	r7,zero
 4001c90:	01800904 	movi	r6,36
 4001c94:	000b883a 	mov	r5,zero
 4001c98:	1009883a 	mov	r4,r2
 4001c9c:	40004cc0 	call	40004cc <draw1>
				draw1(dig_three, COLOR08_RED, 36, 0);
 4001ca0:	e0bc5e04 	addi	r2,fp,-3720
 4001ca4:	000f883a 	mov	r7,zero
 4001ca8:	01800904 	movi	r6,36
 4001cac:	01403804 	movi	r5,224
 4001cb0:	1009883a 	mov	r4,r2
 4001cb4:	40004cc0 	call	40004cc <draw1>
			}
			if(min_b == 4)
 4001cb8:	e0b7d217 	ldw	r2,-8376(fp)
 4001cbc:	10800118 	cmpnei	r2,r2,4
 4001cc0:	10000c1e 	bne	r2,zero,4001cf4 <main+0x1720>
			{
				draw1(dig_blank, COLOR08_BLACK, 36, 0);
 4001cc4:	e0befe04 	addi	r2,fp,-1032
 4001cc8:	000f883a 	mov	r7,zero
 4001ccc:	01800904 	movi	r6,36
 4001cd0:	000b883a 	mov	r5,zero
 4001cd4:	1009883a 	mov	r4,r2
 4001cd8:	40004cc0 	call	40004cc <draw1>
				draw1(dig_four, COLOR08_RED, 36, 0);
 4001cdc:	e0bcbe04 	addi	r2,fp,-3336
 4001ce0:	000f883a 	mov	r7,zero
 4001ce4:	01800904 	movi	r6,36
 4001ce8:	01403804 	movi	r5,224
 4001cec:	1009883a 	mov	r4,r2
 4001cf0:	40004cc0 	call	40004cc <draw1>
			}
			if(min_b == 5)
 4001cf4:	e0b7d217 	ldw	r2,-8376(fp)
 4001cf8:	10800158 	cmpnei	r2,r2,5
 4001cfc:	10000c1e 	bne	r2,zero,4001d30 <main+0x175c>
			{
				draw1(dig_blank, COLOR08_BLACK, 36, 0);
 4001d00:	e0befe04 	addi	r2,fp,-1032
 4001d04:	000f883a 	mov	r7,zero
 4001d08:	01800904 	movi	r6,36
 4001d0c:	000b883a 	mov	r5,zero
 4001d10:	1009883a 	mov	r4,r2
 4001d14:	40004cc0 	call	40004cc <draw1>
				draw1(dig_five, COLOR08_RED, 36, 0);
 4001d18:	e0bd1e04 	addi	r2,fp,-2952
 4001d1c:	000f883a 	mov	r7,zero
 4001d20:	01800904 	movi	r6,36
 4001d24:	01403804 	movi	r5,224
 4001d28:	1009883a 	mov	r4,r2
 4001d2c:	40004cc0 	call	40004cc <draw1>
			}
			if(min_b == 6)
 4001d30:	e0b7d217 	ldw	r2,-8376(fp)
 4001d34:	10800198 	cmpnei	r2,r2,6
 4001d38:	10000c1e 	bne	r2,zero,4001d6c <main+0x1798>
			{
				draw1(dig_blank, COLOR08_BLACK, 36, 0);
 4001d3c:	e0befe04 	addi	r2,fp,-1032
 4001d40:	000f883a 	mov	r7,zero
 4001d44:	01800904 	movi	r6,36
 4001d48:	000b883a 	mov	r5,zero
 4001d4c:	1009883a 	mov	r4,r2
 4001d50:	40004cc0 	call	40004cc <draw1>
				draw1(dig_six, COLOR08_RED, 36, 0);
 4001d54:	e0bd7e04 	addi	r2,fp,-2568
 4001d58:	000f883a 	mov	r7,zero
 4001d5c:	01800904 	movi	r6,36
 4001d60:	01403804 	movi	r5,224
 4001d64:	1009883a 	mov	r4,r2
 4001d68:	40004cc0 	call	40004cc <draw1>
			}
			if(min_b == 7)
 4001d6c:	e0b7d217 	ldw	r2,-8376(fp)
 4001d70:	108001d8 	cmpnei	r2,r2,7
 4001d74:	10000c1e 	bne	r2,zero,4001da8 <main+0x17d4>
			{
				draw1(dig_blank, COLOR08_BLACK, 36, 0);
 4001d78:	e0befe04 	addi	r2,fp,-1032
 4001d7c:	000f883a 	mov	r7,zero
 4001d80:	01800904 	movi	r6,36
 4001d84:	000b883a 	mov	r5,zero
 4001d88:	1009883a 	mov	r4,r2
 4001d8c:	40004cc0 	call	40004cc <draw1>
				draw1(dig_seven, COLOR08_RED, 36, 0);
 4001d90:	e0bdde04 	addi	r2,fp,-2184
 4001d94:	000f883a 	mov	r7,zero
 4001d98:	01800904 	movi	r6,36
 4001d9c:	01403804 	movi	r5,224
 4001da0:	1009883a 	mov	r4,r2
 4001da4:	40004cc0 	call	40004cc <draw1>
			}
			if(min_b == 8)
 4001da8:	e0b7d217 	ldw	r2,-8376(fp)
 4001dac:	10800218 	cmpnei	r2,r2,8
 4001db0:	10000c1e 	bne	r2,zero,4001de4 <main+0x1810>
			{
				draw1(dig_blank, COLOR08_BLACK, 36, 0);
 4001db4:	e0befe04 	addi	r2,fp,-1032
 4001db8:	000f883a 	mov	r7,zero
 4001dbc:	01800904 	movi	r6,36
 4001dc0:	000b883a 	mov	r5,zero
 4001dc4:	1009883a 	mov	r4,r2
 4001dc8:	40004cc0 	call	40004cc <draw1>
				draw1(dig_eight, COLOR08_RED, 36, 0);
 4001dcc:	e0be3e04 	addi	r2,fp,-1800
 4001dd0:	000f883a 	mov	r7,zero
 4001dd4:	01800904 	movi	r6,36
 4001dd8:	01403804 	movi	r5,224
 4001ddc:	1009883a 	mov	r4,r2
 4001de0:	40004cc0 	call	40004cc <draw1>
			}
			if(min_b == 9)
 4001de4:	e0b7d217 	ldw	r2,-8376(fp)
 4001de8:	10800258 	cmpnei	r2,r2,9
 4001dec:	10000c1e 	bne	r2,zero,4001e20 <main+0x184c>
			{
				draw1(dig_blank, COLOR08_BLACK, 36, 0);
 4001df0:	e0befe04 	addi	r2,fp,-1032
 4001df4:	000f883a 	mov	r7,zero
 4001df8:	01800904 	movi	r6,36
 4001dfc:	000b883a 	mov	r5,zero
 4001e00:	1009883a 	mov	r4,r2
 4001e04:	40004cc0 	call	40004cc <draw1>
				draw1(dig_nine, COLOR08_RED, 36, 0);
 4001e08:	e0be9e04 	addi	r2,fp,-1416
 4001e0c:	000f883a 	mov	r7,zero
 4001e10:	01800904 	movi	r6,36
 4001e14:	01403804 	movi	r5,224
 4001e18:	1009883a 	mov	r4,r2
 4001e1c:	40004cc0 	call	40004cc <draw1>
			}




			if(min_a == 0)
 4001e20:	e0b7d117 	ldw	r2,-8380(fp)
 4001e24:	10000c1e 	bne	r2,zero,4001e58 <main+0x1884>
			{
				draw1(dig_blank, COLOR08_BLACK, 35, 0);
 4001e28:	e0befe04 	addi	r2,fp,-1032
 4001e2c:	000f883a 	mov	r7,zero
 4001e30:	018008c4 	movi	r6,35
 4001e34:	000b883a 	mov	r5,zero
 4001e38:	1009883a 	mov	r4,r2
 4001e3c:	40004cc0 	call	40004cc <draw1>
				draw1(dig_zero, COLOR08_RED, 35, 0);
 4001e40:	e0bb3e04 	addi	r2,fp,-4872
 4001e44:	000f883a 	mov	r7,zero
 4001e48:	018008c4 	movi	r6,35
 4001e4c:	01403804 	movi	r5,224
 4001e50:	1009883a 	mov	r4,r2
 4001e54:	40004cc0 	call	40004cc <draw1>
			}
			if(min_a == 1)
 4001e58:	e0b7d117 	ldw	r2,-8380(fp)
 4001e5c:	10800058 	cmpnei	r2,r2,1
 4001e60:	10000c1e 	bne	r2,zero,4001e94 <main+0x18c0>
			{
				draw1(dig_blank, COLOR08_BLACK, 35, 0);
 4001e64:	e0befe04 	addi	r2,fp,-1032
 4001e68:	000f883a 	mov	r7,zero
 4001e6c:	018008c4 	movi	r6,35
 4001e70:	000b883a 	mov	r5,zero
 4001e74:	1009883a 	mov	r4,r2
 4001e78:	40004cc0 	call	40004cc <draw1>
				draw1(dig_one, COLOR08_RED, 35, 0);
 4001e7c:	e0bb9e04 	addi	r2,fp,-4488
 4001e80:	000f883a 	mov	r7,zero
 4001e84:	018008c4 	movi	r6,35
 4001e88:	01403804 	movi	r5,224
 4001e8c:	1009883a 	mov	r4,r2
 4001e90:	40004cc0 	call	40004cc <draw1>
			}
			if(min_a == 2)
 4001e94:	e0b7d117 	ldw	r2,-8380(fp)
 4001e98:	10800098 	cmpnei	r2,r2,2
 4001e9c:	10000c1e 	bne	r2,zero,4001ed0 <main+0x18fc>
			{
				draw1(dig_blank, COLOR08_BLACK, 35, 0);
 4001ea0:	e0befe04 	addi	r2,fp,-1032
 4001ea4:	000f883a 	mov	r7,zero
 4001ea8:	018008c4 	movi	r6,35
 4001eac:	000b883a 	mov	r5,zero
 4001eb0:	1009883a 	mov	r4,r2
 4001eb4:	40004cc0 	call	40004cc <draw1>
				draw1(dig_two, COLOR08_RED, 35, 0);
 4001eb8:	e0bbfe04 	addi	r2,fp,-4104
 4001ebc:	000f883a 	mov	r7,zero
 4001ec0:	018008c4 	movi	r6,35
 4001ec4:	01403804 	movi	r5,224
 4001ec8:	1009883a 	mov	r4,r2
 4001ecc:	40004cc0 	call	40004cc <draw1>
			}
			if(min_a == 3)
 4001ed0:	e0b7d117 	ldw	r2,-8380(fp)
 4001ed4:	108000d8 	cmpnei	r2,r2,3
 4001ed8:	10000c1e 	bne	r2,zero,4001f0c <main+0x1938>
			{
				draw1(dig_blank, COLOR08_BLACK, 35, 0);
 4001edc:	e0befe04 	addi	r2,fp,-1032
 4001ee0:	000f883a 	mov	r7,zero
 4001ee4:	018008c4 	movi	r6,35
 4001ee8:	000b883a 	mov	r5,zero
 4001eec:	1009883a 	mov	r4,r2
 4001ef0:	40004cc0 	call	40004cc <draw1>
				draw1(dig_three, COLOR08_RED, 35, 0);
 4001ef4:	e0bc5e04 	addi	r2,fp,-3720
 4001ef8:	000f883a 	mov	r7,zero
 4001efc:	018008c4 	movi	r6,35
 4001f00:	01403804 	movi	r5,224
 4001f04:	1009883a 	mov	r4,r2
 4001f08:	40004cc0 	call	40004cc <draw1>
			}
			if(min_a == 4)
 4001f0c:	e0b7d117 	ldw	r2,-8380(fp)
 4001f10:	10800118 	cmpnei	r2,r2,4
 4001f14:	10000c1e 	bne	r2,zero,4001f48 <main+0x1974>
			{
				draw1(dig_blank, COLOR08_BLACK, 35, 0);
 4001f18:	e0befe04 	addi	r2,fp,-1032
 4001f1c:	000f883a 	mov	r7,zero
 4001f20:	018008c4 	movi	r6,35
 4001f24:	000b883a 	mov	r5,zero
 4001f28:	1009883a 	mov	r4,r2
 4001f2c:	40004cc0 	call	40004cc <draw1>
				draw1(dig_four, COLOR08_RED, 35, 0);
 4001f30:	e0bcbe04 	addi	r2,fp,-3336
 4001f34:	000f883a 	mov	r7,zero
 4001f38:	018008c4 	movi	r6,35
 4001f3c:	01403804 	movi	r5,224
 4001f40:	1009883a 	mov	r4,r2
 4001f44:	40004cc0 	call	40004cc <draw1>
			}
			if(min_a == 5)
 4001f48:	e0b7d117 	ldw	r2,-8380(fp)
 4001f4c:	10800158 	cmpnei	r2,r2,5
 4001f50:	10000c1e 	bne	r2,zero,4001f84 <main+0x19b0>
			{
				draw1(dig_blank, COLOR08_BLACK, 35, 0);
 4001f54:	e0befe04 	addi	r2,fp,-1032
 4001f58:	000f883a 	mov	r7,zero
 4001f5c:	018008c4 	movi	r6,35
 4001f60:	000b883a 	mov	r5,zero
 4001f64:	1009883a 	mov	r4,r2
 4001f68:	40004cc0 	call	40004cc <draw1>
				draw1(dig_five, COLOR08_RED, 35, 0);
 4001f6c:	e0bd1e04 	addi	r2,fp,-2952
 4001f70:	000f883a 	mov	r7,zero
 4001f74:	018008c4 	movi	r6,35
 4001f78:	01403804 	movi	r5,224
 4001f7c:	1009883a 	mov	r4,r2
 4001f80:	40004cc0 	call	40004cc <draw1>
			}
			if(min_a == 6)
 4001f84:	e0b7d117 	ldw	r2,-8380(fp)
 4001f88:	10800198 	cmpnei	r2,r2,6
 4001f8c:	10000c1e 	bne	r2,zero,4001fc0 <main+0x19ec>
			{
				draw1(dig_blank, COLOR08_BLACK, 35, 0);
 4001f90:	e0befe04 	addi	r2,fp,-1032
 4001f94:	000f883a 	mov	r7,zero
 4001f98:	018008c4 	movi	r6,35
 4001f9c:	000b883a 	mov	r5,zero
 4001fa0:	1009883a 	mov	r4,r2
 4001fa4:	40004cc0 	call	40004cc <draw1>
				draw1(dig_six, COLOR08_RED, 35, 0);
 4001fa8:	e0bd7e04 	addi	r2,fp,-2568
 4001fac:	000f883a 	mov	r7,zero
 4001fb0:	018008c4 	movi	r6,35
 4001fb4:	01403804 	movi	r5,224
 4001fb8:	1009883a 	mov	r4,r2
 4001fbc:	40004cc0 	call	40004cc <draw1>
			}
			if(min_a == 7)
 4001fc0:	e0b7d117 	ldw	r2,-8380(fp)
 4001fc4:	108001d8 	cmpnei	r2,r2,7
 4001fc8:	10000c1e 	bne	r2,zero,4001ffc <main+0x1a28>
			{
				draw1(dig_blank, COLOR08_BLACK, 35, 0);
 4001fcc:	e0befe04 	addi	r2,fp,-1032
 4001fd0:	000f883a 	mov	r7,zero
 4001fd4:	018008c4 	movi	r6,35
 4001fd8:	000b883a 	mov	r5,zero
 4001fdc:	1009883a 	mov	r4,r2
 4001fe0:	40004cc0 	call	40004cc <draw1>
				draw1(dig_seven, COLOR08_RED, 35, 0);
 4001fe4:	e0bdde04 	addi	r2,fp,-2184
 4001fe8:	000f883a 	mov	r7,zero
 4001fec:	018008c4 	movi	r6,35
 4001ff0:	01403804 	movi	r5,224
 4001ff4:	1009883a 	mov	r4,r2
 4001ff8:	40004cc0 	call	40004cc <draw1>
			}
			if(min_a == 8)
 4001ffc:	e0b7d117 	ldw	r2,-8380(fp)
 4002000:	10800218 	cmpnei	r2,r2,8
 4002004:	10000c1e 	bne	r2,zero,4002038 <main+0x1a64>
			{
				draw1(dig_blank, COLOR08_BLACK, 35, 0);
 4002008:	e0befe04 	addi	r2,fp,-1032
 400200c:	000f883a 	mov	r7,zero
 4002010:	018008c4 	movi	r6,35
 4002014:	000b883a 	mov	r5,zero
 4002018:	1009883a 	mov	r4,r2
 400201c:	40004cc0 	call	40004cc <draw1>
				draw1(dig_eight, COLOR08_RED, 35, 0);
 4002020:	e0be3e04 	addi	r2,fp,-1800
 4002024:	000f883a 	mov	r7,zero
 4002028:	018008c4 	movi	r6,35
 400202c:	01403804 	movi	r5,224
 4002030:	1009883a 	mov	r4,r2
 4002034:	40004cc0 	call	40004cc <draw1>
			}
			if(min_a == 9)
 4002038:	e0b7d117 	ldw	r2,-8380(fp)
 400203c:	10800258 	cmpnei	r2,r2,9
 4002040:	10000c1e 	bne	r2,zero,4002074 <main+0x1aa0>
			{
				draw1(dig_blank, COLOR08_BLACK, 35, 0);
 4002044:	e0befe04 	addi	r2,fp,-1032
 4002048:	000f883a 	mov	r7,zero
 400204c:	018008c4 	movi	r6,35
 4002050:	000b883a 	mov	r5,zero
 4002054:	1009883a 	mov	r4,r2
 4002058:	40004cc0 	call	40004cc <draw1>
				draw1(dig_nine, COLOR08_RED, 35, 0);
 400205c:	e0be9e04 	addi	r2,fp,-1416
 4002060:	000f883a 	mov	r7,zero
 4002064:	018008c4 	movi	r6,35
 4002068:	01403804 	movi	r5,224
 400206c:	1009883a 	mov	r4,r2
 4002070:	40004cc0 	call	40004cc <draw1>
			}

			if(hour_b == 0)
 4002074:	e0b7d417 	ldw	r2,-8368(fp)
 4002078:	10000c1e 	bne	r2,zero,40020ac <main+0x1ad8>
			{
				draw1(dig_blank, COLOR08_BLACK, 33, 0);
 400207c:	e0befe04 	addi	r2,fp,-1032
 4002080:	000f883a 	mov	r7,zero
 4002084:	01800844 	movi	r6,33
 4002088:	000b883a 	mov	r5,zero
 400208c:	1009883a 	mov	r4,r2
 4002090:	40004cc0 	call	40004cc <draw1>
				draw1(dig_zero, COLOR08_RED, 33, 0);
 4002094:	e0bb3e04 	addi	r2,fp,-4872
 4002098:	000f883a 	mov	r7,zero
 400209c:	01800844 	movi	r6,33
 40020a0:	01403804 	movi	r5,224
 40020a4:	1009883a 	mov	r4,r2
 40020a8:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_b == 1)
 40020ac:	e0b7d417 	ldw	r2,-8368(fp)
 40020b0:	10800058 	cmpnei	r2,r2,1
 40020b4:	10000c1e 	bne	r2,zero,40020e8 <main+0x1b14>
			{
				draw1(dig_blank, COLOR08_BLACK, 33, 0);
 40020b8:	e0befe04 	addi	r2,fp,-1032
 40020bc:	000f883a 	mov	r7,zero
 40020c0:	01800844 	movi	r6,33
 40020c4:	000b883a 	mov	r5,zero
 40020c8:	1009883a 	mov	r4,r2
 40020cc:	40004cc0 	call	40004cc <draw1>
				draw1(dig_one, COLOR08_RED, 33, 0);
 40020d0:	e0bb9e04 	addi	r2,fp,-4488
 40020d4:	000f883a 	mov	r7,zero
 40020d8:	01800844 	movi	r6,33
 40020dc:	01403804 	movi	r5,224
 40020e0:	1009883a 	mov	r4,r2
 40020e4:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_b == 2)
 40020e8:	e0b7d417 	ldw	r2,-8368(fp)
 40020ec:	10800098 	cmpnei	r2,r2,2
 40020f0:	10000c1e 	bne	r2,zero,4002124 <main+0x1b50>
			{
				draw1(dig_blank, COLOR08_BLACK, 33, 0);
 40020f4:	e0befe04 	addi	r2,fp,-1032
 40020f8:	000f883a 	mov	r7,zero
 40020fc:	01800844 	movi	r6,33
 4002100:	000b883a 	mov	r5,zero
 4002104:	1009883a 	mov	r4,r2
 4002108:	40004cc0 	call	40004cc <draw1>
				draw1(dig_two, COLOR08_RED, 33, 0);
 400210c:	e0bbfe04 	addi	r2,fp,-4104
 4002110:	000f883a 	mov	r7,zero
 4002114:	01800844 	movi	r6,33
 4002118:	01403804 	movi	r5,224
 400211c:	1009883a 	mov	r4,r2
 4002120:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_b == 3)
 4002124:	e0b7d417 	ldw	r2,-8368(fp)
 4002128:	108000d8 	cmpnei	r2,r2,3
 400212c:	10000c1e 	bne	r2,zero,4002160 <main+0x1b8c>
			{
				draw1(dig_blank, COLOR08_BLACK, 33, 0);
 4002130:	e0befe04 	addi	r2,fp,-1032
 4002134:	000f883a 	mov	r7,zero
 4002138:	01800844 	movi	r6,33
 400213c:	000b883a 	mov	r5,zero
 4002140:	1009883a 	mov	r4,r2
 4002144:	40004cc0 	call	40004cc <draw1>
				draw1(dig_three, COLOR08_RED, 33, 0);
 4002148:	e0bc5e04 	addi	r2,fp,-3720
 400214c:	000f883a 	mov	r7,zero
 4002150:	01800844 	movi	r6,33
 4002154:	01403804 	movi	r5,224
 4002158:	1009883a 	mov	r4,r2
 400215c:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_b == 4)
 4002160:	e0b7d417 	ldw	r2,-8368(fp)
 4002164:	10800118 	cmpnei	r2,r2,4
 4002168:	10000c1e 	bne	r2,zero,400219c <main+0x1bc8>
			{
				draw1(dig_blank, COLOR08_BLACK, 33, 0);
 400216c:	e0befe04 	addi	r2,fp,-1032
 4002170:	000f883a 	mov	r7,zero
 4002174:	01800844 	movi	r6,33
 4002178:	000b883a 	mov	r5,zero
 400217c:	1009883a 	mov	r4,r2
 4002180:	40004cc0 	call	40004cc <draw1>
				draw1(dig_four, COLOR08_RED, 33, 0);
 4002184:	e0bcbe04 	addi	r2,fp,-3336
 4002188:	000f883a 	mov	r7,zero
 400218c:	01800844 	movi	r6,33
 4002190:	01403804 	movi	r5,224
 4002194:	1009883a 	mov	r4,r2
 4002198:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_b == 5)
 400219c:	e0b7d417 	ldw	r2,-8368(fp)
 40021a0:	10800158 	cmpnei	r2,r2,5
 40021a4:	10000c1e 	bne	r2,zero,40021d8 <main+0x1c04>
			{
				draw1(dig_blank, COLOR08_BLACK, 33, 0);
 40021a8:	e0befe04 	addi	r2,fp,-1032
 40021ac:	000f883a 	mov	r7,zero
 40021b0:	01800844 	movi	r6,33
 40021b4:	000b883a 	mov	r5,zero
 40021b8:	1009883a 	mov	r4,r2
 40021bc:	40004cc0 	call	40004cc <draw1>
				draw1(dig_five, COLOR08_RED, 33, 0);
 40021c0:	e0bd1e04 	addi	r2,fp,-2952
 40021c4:	000f883a 	mov	r7,zero
 40021c8:	01800844 	movi	r6,33
 40021cc:	01403804 	movi	r5,224
 40021d0:	1009883a 	mov	r4,r2
 40021d4:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_b == 6)
 40021d8:	e0b7d417 	ldw	r2,-8368(fp)
 40021dc:	10800198 	cmpnei	r2,r2,6
 40021e0:	10000c1e 	bne	r2,zero,4002214 <main+0x1c40>
			{
				draw1(dig_blank, COLOR08_BLACK, 33, 0);
 40021e4:	e0befe04 	addi	r2,fp,-1032
 40021e8:	000f883a 	mov	r7,zero
 40021ec:	01800844 	movi	r6,33
 40021f0:	000b883a 	mov	r5,zero
 40021f4:	1009883a 	mov	r4,r2
 40021f8:	40004cc0 	call	40004cc <draw1>
				draw1(dig_six, COLOR08_RED, 33, 0);
 40021fc:	e0bd7e04 	addi	r2,fp,-2568
 4002200:	000f883a 	mov	r7,zero
 4002204:	01800844 	movi	r6,33
 4002208:	01403804 	movi	r5,224
 400220c:	1009883a 	mov	r4,r2
 4002210:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_b == 7)
 4002214:	e0b7d417 	ldw	r2,-8368(fp)
 4002218:	108001d8 	cmpnei	r2,r2,7
 400221c:	10000c1e 	bne	r2,zero,4002250 <main+0x1c7c>
			{
				draw1(dig_blank, COLOR08_BLACK, 33, 0);
 4002220:	e0befe04 	addi	r2,fp,-1032
 4002224:	000f883a 	mov	r7,zero
 4002228:	01800844 	movi	r6,33
 400222c:	000b883a 	mov	r5,zero
 4002230:	1009883a 	mov	r4,r2
 4002234:	40004cc0 	call	40004cc <draw1>
				draw1(dig_seven, COLOR08_RED, 33, 0);
 4002238:	e0bdde04 	addi	r2,fp,-2184
 400223c:	000f883a 	mov	r7,zero
 4002240:	01800844 	movi	r6,33
 4002244:	01403804 	movi	r5,224
 4002248:	1009883a 	mov	r4,r2
 400224c:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_b == 8)
 4002250:	e0b7d417 	ldw	r2,-8368(fp)
 4002254:	10800218 	cmpnei	r2,r2,8
 4002258:	10000c1e 	bne	r2,zero,400228c <main+0x1cb8>
			{
				draw1(dig_blank, COLOR08_BLACK, 33, 0);
 400225c:	e0befe04 	addi	r2,fp,-1032
 4002260:	000f883a 	mov	r7,zero
 4002264:	01800844 	movi	r6,33
 4002268:	000b883a 	mov	r5,zero
 400226c:	1009883a 	mov	r4,r2
 4002270:	40004cc0 	call	40004cc <draw1>
				draw1(dig_eight, COLOR08_RED, 33, 0);
 4002274:	e0be3e04 	addi	r2,fp,-1800
 4002278:	000f883a 	mov	r7,zero
 400227c:	01800844 	movi	r6,33
 4002280:	01403804 	movi	r5,224
 4002284:	1009883a 	mov	r4,r2
 4002288:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_b == 9)
 400228c:	e0b7d417 	ldw	r2,-8368(fp)
 4002290:	10800258 	cmpnei	r2,r2,9
 4002294:	10000c1e 	bne	r2,zero,40022c8 <main+0x1cf4>
			{
				draw1(dig_blank, COLOR08_BLACK, 33, 0);
 4002298:	e0befe04 	addi	r2,fp,-1032
 400229c:	000f883a 	mov	r7,zero
 40022a0:	01800844 	movi	r6,33
 40022a4:	000b883a 	mov	r5,zero
 40022a8:	1009883a 	mov	r4,r2
 40022ac:	40004cc0 	call	40004cc <draw1>
				draw1(dig_nine, COLOR08_RED, 33, 0);
 40022b0:	e0be9e04 	addi	r2,fp,-1416
 40022b4:	000f883a 	mov	r7,zero
 40022b8:	01800844 	movi	r6,33
 40022bc:	01403804 	movi	r5,224
 40022c0:	1009883a 	mov	r4,r2
 40022c4:	40004cc0 	call	40004cc <draw1>
			}




			if(hour_a == 0)
 40022c8:	e0b7d317 	ldw	r2,-8372(fp)
 40022cc:	10000c1e 	bne	r2,zero,4002300 <main+0x1d2c>
			{
				draw1(dig_blank, COLOR08_BLACK, 32, 0);
 40022d0:	e0befe04 	addi	r2,fp,-1032
 40022d4:	000f883a 	mov	r7,zero
 40022d8:	01800804 	movi	r6,32
 40022dc:	000b883a 	mov	r5,zero
 40022e0:	1009883a 	mov	r4,r2
 40022e4:	40004cc0 	call	40004cc <draw1>
				draw1(dig_zero, COLOR08_RED, 32, 0);
 40022e8:	e0bb3e04 	addi	r2,fp,-4872
 40022ec:	000f883a 	mov	r7,zero
 40022f0:	01800804 	movi	r6,32
 40022f4:	01403804 	movi	r5,224
 40022f8:	1009883a 	mov	r4,r2
 40022fc:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_a == 1)
 4002300:	e0b7d317 	ldw	r2,-8372(fp)
 4002304:	10800058 	cmpnei	r2,r2,1
 4002308:	10000c1e 	bne	r2,zero,400233c <main+0x1d68>
			{
				draw1(dig_blank, COLOR08_BLACK, 32, 0);
 400230c:	e0befe04 	addi	r2,fp,-1032
 4002310:	000f883a 	mov	r7,zero
 4002314:	01800804 	movi	r6,32
 4002318:	000b883a 	mov	r5,zero
 400231c:	1009883a 	mov	r4,r2
 4002320:	40004cc0 	call	40004cc <draw1>
				draw1(dig_one, COLOR08_RED, 32, 0);
 4002324:	e0bb9e04 	addi	r2,fp,-4488
 4002328:	000f883a 	mov	r7,zero
 400232c:	01800804 	movi	r6,32
 4002330:	01403804 	movi	r5,224
 4002334:	1009883a 	mov	r4,r2
 4002338:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_a == 2)
 400233c:	e0b7d317 	ldw	r2,-8372(fp)
 4002340:	10800098 	cmpnei	r2,r2,2
 4002344:	10000c1e 	bne	r2,zero,4002378 <main+0x1da4>
			{
				draw1(dig_blank, COLOR08_BLACK, 32, 0);
 4002348:	e0befe04 	addi	r2,fp,-1032
 400234c:	000f883a 	mov	r7,zero
 4002350:	01800804 	movi	r6,32
 4002354:	000b883a 	mov	r5,zero
 4002358:	1009883a 	mov	r4,r2
 400235c:	40004cc0 	call	40004cc <draw1>
				draw1(dig_two, COLOR08_RED, 32, 0);
 4002360:	e0bbfe04 	addi	r2,fp,-4104
 4002364:	000f883a 	mov	r7,zero
 4002368:	01800804 	movi	r6,32
 400236c:	01403804 	movi	r5,224
 4002370:	1009883a 	mov	r4,r2
 4002374:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_a == 3)
 4002378:	e0b7d317 	ldw	r2,-8372(fp)
 400237c:	108000d8 	cmpnei	r2,r2,3
 4002380:	10000c1e 	bne	r2,zero,40023b4 <main+0x1de0>
			{
				draw1(dig_blank, COLOR08_BLACK, 32, 0);
 4002384:	e0befe04 	addi	r2,fp,-1032
 4002388:	000f883a 	mov	r7,zero
 400238c:	01800804 	movi	r6,32
 4002390:	000b883a 	mov	r5,zero
 4002394:	1009883a 	mov	r4,r2
 4002398:	40004cc0 	call	40004cc <draw1>
				draw1(dig_three, COLOR08_RED, 32, 0);
 400239c:	e0bc5e04 	addi	r2,fp,-3720
 40023a0:	000f883a 	mov	r7,zero
 40023a4:	01800804 	movi	r6,32
 40023a8:	01403804 	movi	r5,224
 40023ac:	1009883a 	mov	r4,r2
 40023b0:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_a == 4)
 40023b4:	e0b7d317 	ldw	r2,-8372(fp)
 40023b8:	10800118 	cmpnei	r2,r2,4
 40023bc:	10000c1e 	bne	r2,zero,40023f0 <main+0x1e1c>
			{
				draw1(dig_blank, COLOR08_BLACK, 32, 0);
 40023c0:	e0befe04 	addi	r2,fp,-1032
 40023c4:	000f883a 	mov	r7,zero
 40023c8:	01800804 	movi	r6,32
 40023cc:	000b883a 	mov	r5,zero
 40023d0:	1009883a 	mov	r4,r2
 40023d4:	40004cc0 	call	40004cc <draw1>
				draw1(dig_four, COLOR08_RED, 32, 0);
 40023d8:	e0bcbe04 	addi	r2,fp,-3336
 40023dc:	000f883a 	mov	r7,zero
 40023e0:	01800804 	movi	r6,32
 40023e4:	01403804 	movi	r5,224
 40023e8:	1009883a 	mov	r4,r2
 40023ec:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_a == 5)
 40023f0:	e0b7d317 	ldw	r2,-8372(fp)
 40023f4:	10800158 	cmpnei	r2,r2,5
 40023f8:	10000c1e 	bne	r2,zero,400242c <main+0x1e58>
			{
				draw1(dig_blank, COLOR08_BLACK, 32, 0);
 40023fc:	e0befe04 	addi	r2,fp,-1032
 4002400:	000f883a 	mov	r7,zero
 4002404:	01800804 	movi	r6,32
 4002408:	000b883a 	mov	r5,zero
 400240c:	1009883a 	mov	r4,r2
 4002410:	40004cc0 	call	40004cc <draw1>
				draw1(dig_five, COLOR08_RED, 32, 0);
 4002414:	e0bd1e04 	addi	r2,fp,-2952
 4002418:	000f883a 	mov	r7,zero
 400241c:	01800804 	movi	r6,32
 4002420:	01403804 	movi	r5,224
 4002424:	1009883a 	mov	r4,r2
 4002428:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_a == 6)
 400242c:	e0b7d317 	ldw	r2,-8372(fp)
 4002430:	10800198 	cmpnei	r2,r2,6
 4002434:	10000c1e 	bne	r2,zero,4002468 <main+0x1e94>
			{
				draw1(dig_blank, COLOR08_BLACK, 32, 0);
 4002438:	e0befe04 	addi	r2,fp,-1032
 400243c:	000f883a 	mov	r7,zero
 4002440:	01800804 	movi	r6,32
 4002444:	000b883a 	mov	r5,zero
 4002448:	1009883a 	mov	r4,r2
 400244c:	40004cc0 	call	40004cc <draw1>
				draw1(dig_six, COLOR08_RED, 32, 0);
 4002450:	e0bd7e04 	addi	r2,fp,-2568
 4002454:	000f883a 	mov	r7,zero
 4002458:	01800804 	movi	r6,32
 400245c:	01403804 	movi	r5,224
 4002460:	1009883a 	mov	r4,r2
 4002464:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_a == 7)
 4002468:	e0b7d317 	ldw	r2,-8372(fp)
 400246c:	108001d8 	cmpnei	r2,r2,7
 4002470:	10000c1e 	bne	r2,zero,40024a4 <main+0x1ed0>
			{
				draw1(dig_blank, COLOR08_BLACK, 32, 0);
 4002474:	e0befe04 	addi	r2,fp,-1032
 4002478:	000f883a 	mov	r7,zero
 400247c:	01800804 	movi	r6,32
 4002480:	000b883a 	mov	r5,zero
 4002484:	1009883a 	mov	r4,r2
 4002488:	40004cc0 	call	40004cc <draw1>
				draw1(dig_seven, COLOR08_RED, 32, 0);
 400248c:	e0bdde04 	addi	r2,fp,-2184
 4002490:	000f883a 	mov	r7,zero
 4002494:	01800804 	movi	r6,32
 4002498:	01403804 	movi	r5,224
 400249c:	1009883a 	mov	r4,r2
 40024a0:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_a == 8)
 40024a4:	e0b7d317 	ldw	r2,-8372(fp)
 40024a8:	10800218 	cmpnei	r2,r2,8
 40024ac:	10000c1e 	bne	r2,zero,40024e0 <main+0x1f0c>
			{
				draw1(dig_blank, COLOR08_BLACK, 32, 0);
 40024b0:	e0befe04 	addi	r2,fp,-1032
 40024b4:	000f883a 	mov	r7,zero
 40024b8:	01800804 	movi	r6,32
 40024bc:	000b883a 	mov	r5,zero
 40024c0:	1009883a 	mov	r4,r2
 40024c4:	40004cc0 	call	40004cc <draw1>
				draw1(dig_eight, COLOR08_RED, 32, 0);
 40024c8:	e0be3e04 	addi	r2,fp,-1800
 40024cc:	000f883a 	mov	r7,zero
 40024d0:	01800804 	movi	r6,32
 40024d4:	01403804 	movi	r5,224
 40024d8:	1009883a 	mov	r4,r2
 40024dc:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_a == 9)
 40024e0:	e0b7d317 	ldw	r2,-8372(fp)
 40024e4:	10800258 	cmpnei	r2,r2,9
 40024e8:	10000c1e 	bne	r2,zero,400251c <main+0x1f48>
			{
				draw1(dig_blank, COLOR08_BLACK, 32, 0);
 40024ec:	e0befe04 	addi	r2,fp,-1032
 40024f0:	000f883a 	mov	r7,zero
 40024f4:	01800804 	movi	r6,32
 40024f8:	000b883a 	mov	r5,zero
 40024fc:	1009883a 	mov	r4,r2
 4002500:	40004cc0 	call	40004cc <draw1>
				draw1(dig_nine, COLOR08_RED, 32, 0);
 4002504:	e0be9e04 	addi	r2,fp,-1416
 4002508:	000f883a 	mov	r7,zero
 400250c:	01800804 	movi	r6,32
 4002510:	01403804 	movi	r5,224
 4002514:	1009883a 	mov	r4,r2
 4002518:	40004cc0 	call	40004cc <draw1>
			}

			if(day_b == 0)
 400251c:	e0b7d617 	ldw	r2,-8360(fp)
 4002520:	10000c1e 	bne	r2,zero,4002554 <main+0x1f80>
			{
				draw1(dig_blank, COLOR08_BLACK, 30, 0);
 4002524:	e0befe04 	addi	r2,fp,-1032
 4002528:	000f883a 	mov	r7,zero
 400252c:	01800784 	movi	r6,30
 4002530:	000b883a 	mov	r5,zero
 4002534:	1009883a 	mov	r4,r2
 4002538:	40004cc0 	call	40004cc <draw1>
				draw1(dig_zero, COLOR08_RED, 30, 0);
 400253c:	e0bb3e04 	addi	r2,fp,-4872
 4002540:	000f883a 	mov	r7,zero
 4002544:	01800784 	movi	r6,30
 4002548:	01403804 	movi	r5,224
 400254c:	1009883a 	mov	r4,r2
 4002550:	40004cc0 	call	40004cc <draw1>
			}
			if(day_b == 1)
 4002554:	e0b7d617 	ldw	r2,-8360(fp)
 4002558:	10800058 	cmpnei	r2,r2,1
 400255c:	10000c1e 	bne	r2,zero,4002590 <main+0x1fbc>
			{
				draw1(dig_blank, COLOR08_BLACK, 30, 0);
 4002560:	e0befe04 	addi	r2,fp,-1032
 4002564:	000f883a 	mov	r7,zero
 4002568:	01800784 	movi	r6,30
 400256c:	000b883a 	mov	r5,zero
 4002570:	1009883a 	mov	r4,r2
 4002574:	40004cc0 	call	40004cc <draw1>
				draw1(dig_one, COLOR08_RED, 30, 0);
 4002578:	e0bb9e04 	addi	r2,fp,-4488
 400257c:	000f883a 	mov	r7,zero
 4002580:	01800784 	movi	r6,30
 4002584:	01403804 	movi	r5,224
 4002588:	1009883a 	mov	r4,r2
 400258c:	40004cc0 	call	40004cc <draw1>
			}
			if(day_b == 2)
 4002590:	e0b7d617 	ldw	r2,-8360(fp)
 4002594:	10800098 	cmpnei	r2,r2,2
 4002598:	10000c1e 	bne	r2,zero,40025cc <main+0x1ff8>
			{
				draw1(dig_blank, COLOR08_BLACK, 30, 0);
 400259c:	e0befe04 	addi	r2,fp,-1032
 40025a0:	000f883a 	mov	r7,zero
 40025a4:	01800784 	movi	r6,30
 40025a8:	000b883a 	mov	r5,zero
 40025ac:	1009883a 	mov	r4,r2
 40025b0:	40004cc0 	call	40004cc <draw1>
				draw1(dig_two, COLOR08_RED, 30, 0);
 40025b4:	e0bbfe04 	addi	r2,fp,-4104
 40025b8:	000f883a 	mov	r7,zero
 40025bc:	01800784 	movi	r6,30
 40025c0:	01403804 	movi	r5,224
 40025c4:	1009883a 	mov	r4,r2
 40025c8:	40004cc0 	call	40004cc <draw1>
			}
			if(day_b == 3)
 40025cc:	e0b7d617 	ldw	r2,-8360(fp)
 40025d0:	108000d8 	cmpnei	r2,r2,3
 40025d4:	10000c1e 	bne	r2,zero,4002608 <main+0x2034>
			{
				draw1(dig_blank, COLOR08_BLACK, 30, 0);
 40025d8:	e0befe04 	addi	r2,fp,-1032
 40025dc:	000f883a 	mov	r7,zero
 40025e0:	01800784 	movi	r6,30
 40025e4:	000b883a 	mov	r5,zero
 40025e8:	1009883a 	mov	r4,r2
 40025ec:	40004cc0 	call	40004cc <draw1>
				draw1(dig_three, COLOR08_RED, 30, 0);
 40025f0:	e0bc5e04 	addi	r2,fp,-3720
 40025f4:	000f883a 	mov	r7,zero
 40025f8:	01800784 	movi	r6,30
 40025fc:	01403804 	movi	r5,224
 4002600:	1009883a 	mov	r4,r2
 4002604:	40004cc0 	call	40004cc <draw1>
			}
			if(day_b == 4)
 4002608:	e0b7d617 	ldw	r2,-8360(fp)
 400260c:	10800118 	cmpnei	r2,r2,4
 4002610:	10000c1e 	bne	r2,zero,4002644 <main+0x2070>
			{
				draw1(dig_blank, COLOR08_BLACK, 30, 0);
 4002614:	e0befe04 	addi	r2,fp,-1032
 4002618:	000f883a 	mov	r7,zero
 400261c:	01800784 	movi	r6,30
 4002620:	000b883a 	mov	r5,zero
 4002624:	1009883a 	mov	r4,r2
 4002628:	40004cc0 	call	40004cc <draw1>
				draw1(dig_four, COLOR08_RED, 30, 0);
 400262c:	e0bcbe04 	addi	r2,fp,-3336
 4002630:	000f883a 	mov	r7,zero
 4002634:	01800784 	movi	r6,30
 4002638:	01403804 	movi	r5,224
 400263c:	1009883a 	mov	r4,r2
 4002640:	40004cc0 	call	40004cc <draw1>
			}
			if(day_b == 5)
 4002644:	e0b7d617 	ldw	r2,-8360(fp)
 4002648:	10800158 	cmpnei	r2,r2,5
 400264c:	10000c1e 	bne	r2,zero,4002680 <main+0x20ac>
			{
				draw1(dig_blank, COLOR08_BLACK, 30, 0);
 4002650:	e0befe04 	addi	r2,fp,-1032
 4002654:	000f883a 	mov	r7,zero
 4002658:	01800784 	movi	r6,30
 400265c:	000b883a 	mov	r5,zero
 4002660:	1009883a 	mov	r4,r2
 4002664:	40004cc0 	call	40004cc <draw1>
				draw1(dig_five, COLOR08_RED, 30, 0);
 4002668:	e0bd1e04 	addi	r2,fp,-2952
 400266c:	000f883a 	mov	r7,zero
 4002670:	01800784 	movi	r6,30
 4002674:	01403804 	movi	r5,224
 4002678:	1009883a 	mov	r4,r2
 400267c:	40004cc0 	call	40004cc <draw1>
			}
			if(day_b == 6)
 4002680:	e0b7d617 	ldw	r2,-8360(fp)
 4002684:	10800198 	cmpnei	r2,r2,6
 4002688:	10000c1e 	bne	r2,zero,40026bc <main+0x20e8>
			{
				draw1(dig_blank, COLOR08_BLACK, 30, 0);
 400268c:	e0befe04 	addi	r2,fp,-1032
 4002690:	000f883a 	mov	r7,zero
 4002694:	01800784 	movi	r6,30
 4002698:	000b883a 	mov	r5,zero
 400269c:	1009883a 	mov	r4,r2
 40026a0:	40004cc0 	call	40004cc <draw1>
				draw1(dig_six, COLOR08_RED, 30, 0);
 40026a4:	e0bd7e04 	addi	r2,fp,-2568
 40026a8:	000f883a 	mov	r7,zero
 40026ac:	01800784 	movi	r6,30
 40026b0:	01403804 	movi	r5,224
 40026b4:	1009883a 	mov	r4,r2
 40026b8:	40004cc0 	call	40004cc <draw1>
			}
			if(day_b == 7)
 40026bc:	e0b7d617 	ldw	r2,-8360(fp)
 40026c0:	108001d8 	cmpnei	r2,r2,7
 40026c4:	10000c1e 	bne	r2,zero,40026f8 <main+0x2124>
			{
				draw1(dig_blank, COLOR08_BLACK, 30, 0);
 40026c8:	e0befe04 	addi	r2,fp,-1032
 40026cc:	000f883a 	mov	r7,zero
 40026d0:	01800784 	movi	r6,30
 40026d4:	000b883a 	mov	r5,zero
 40026d8:	1009883a 	mov	r4,r2
 40026dc:	40004cc0 	call	40004cc <draw1>
				draw1(dig_seven, COLOR08_RED, 30, 0);
 40026e0:	e0bdde04 	addi	r2,fp,-2184
 40026e4:	000f883a 	mov	r7,zero
 40026e8:	01800784 	movi	r6,30
 40026ec:	01403804 	movi	r5,224
 40026f0:	1009883a 	mov	r4,r2
 40026f4:	40004cc0 	call	40004cc <draw1>
			}
			if(day_b == 8)
 40026f8:	e0b7d617 	ldw	r2,-8360(fp)
 40026fc:	10800218 	cmpnei	r2,r2,8
 4002700:	10000c1e 	bne	r2,zero,4002734 <main+0x2160>
			{
				draw1(dig_blank, COLOR08_BLACK, 30, 0);
 4002704:	e0befe04 	addi	r2,fp,-1032
 4002708:	000f883a 	mov	r7,zero
 400270c:	01800784 	movi	r6,30
 4002710:	000b883a 	mov	r5,zero
 4002714:	1009883a 	mov	r4,r2
 4002718:	40004cc0 	call	40004cc <draw1>
				draw1(dig_eight, COLOR08_RED, 30, 0);
 400271c:	e0be3e04 	addi	r2,fp,-1800
 4002720:	000f883a 	mov	r7,zero
 4002724:	01800784 	movi	r6,30
 4002728:	01403804 	movi	r5,224
 400272c:	1009883a 	mov	r4,r2
 4002730:	40004cc0 	call	40004cc <draw1>
			}
			if(day_b == 9)
 4002734:	e0b7d617 	ldw	r2,-8360(fp)
 4002738:	10800258 	cmpnei	r2,r2,9
 400273c:	10000c1e 	bne	r2,zero,4002770 <main+0x219c>
			{
				draw1(dig_blank, COLOR08_BLACK, 30, 0);
 4002740:	e0befe04 	addi	r2,fp,-1032
 4002744:	000f883a 	mov	r7,zero
 4002748:	01800784 	movi	r6,30
 400274c:	000b883a 	mov	r5,zero
 4002750:	1009883a 	mov	r4,r2
 4002754:	40004cc0 	call	40004cc <draw1>
				draw1(dig_nine, COLOR08_RED, 30, 0);
 4002758:	e0be9e04 	addi	r2,fp,-1416
 400275c:	000f883a 	mov	r7,zero
 4002760:	01800784 	movi	r6,30
 4002764:	01403804 	movi	r5,224
 4002768:	1009883a 	mov	r4,r2
 400276c:	40004cc0 	call	40004cc <draw1>
			}




			if(day_a == 0)
 4002770:	e0b7d517 	ldw	r2,-8364(fp)
 4002774:	10000c1e 	bne	r2,zero,40027a8 <main+0x21d4>
			{
				draw1(dig_blank, COLOR08_BLACK, 29, 0);
 4002778:	e0befe04 	addi	r2,fp,-1032
 400277c:	000f883a 	mov	r7,zero
 4002780:	01800744 	movi	r6,29
 4002784:	000b883a 	mov	r5,zero
 4002788:	1009883a 	mov	r4,r2
 400278c:	40004cc0 	call	40004cc <draw1>
				draw1(dig_zero, COLOR08_RED, 29, 0);
 4002790:	e0bb3e04 	addi	r2,fp,-4872
 4002794:	000f883a 	mov	r7,zero
 4002798:	01800744 	movi	r6,29
 400279c:	01403804 	movi	r5,224
 40027a0:	1009883a 	mov	r4,r2
 40027a4:	40004cc0 	call	40004cc <draw1>
			}
			if(day_a == 1)
 40027a8:	e0b7d517 	ldw	r2,-8364(fp)
 40027ac:	10800058 	cmpnei	r2,r2,1
 40027b0:	10000c1e 	bne	r2,zero,40027e4 <main+0x2210>
			{
				draw1(dig_blank, COLOR08_BLACK, 29, 0);
 40027b4:	e0befe04 	addi	r2,fp,-1032
 40027b8:	000f883a 	mov	r7,zero
 40027bc:	01800744 	movi	r6,29
 40027c0:	000b883a 	mov	r5,zero
 40027c4:	1009883a 	mov	r4,r2
 40027c8:	40004cc0 	call	40004cc <draw1>
				draw1(dig_one, COLOR08_RED, 29, 0);
 40027cc:	e0bb9e04 	addi	r2,fp,-4488
 40027d0:	000f883a 	mov	r7,zero
 40027d4:	01800744 	movi	r6,29
 40027d8:	01403804 	movi	r5,224
 40027dc:	1009883a 	mov	r4,r2
 40027e0:	40004cc0 	call	40004cc <draw1>
			}
			if(day_a == 2)
 40027e4:	e0b7d517 	ldw	r2,-8364(fp)
 40027e8:	10800098 	cmpnei	r2,r2,2
 40027ec:	10000c1e 	bne	r2,zero,4002820 <main+0x224c>
			{
				draw1(dig_blank, COLOR08_BLACK, 29, 0);
 40027f0:	e0befe04 	addi	r2,fp,-1032
 40027f4:	000f883a 	mov	r7,zero
 40027f8:	01800744 	movi	r6,29
 40027fc:	000b883a 	mov	r5,zero
 4002800:	1009883a 	mov	r4,r2
 4002804:	40004cc0 	call	40004cc <draw1>
				draw1(dig_two, COLOR08_RED, 29, 0);
 4002808:	e0bbfe04 	addi	r2,fp,-4104
 400280c:	000f883a 	mov	r7,zero
 4002810:	01800744 	movi	r6,29
 4002814:	01403804 	movi	r5,224
 4002818:	1009883a 	mov	r4,r2
 400281c:	40004cc0 	call	40004cc <draw1>
			}
			if(day_a == 3)
 4002820:	e0b7d517 	ldw	r2,-8364(fp)
 4002824:	108000d8 	cmpnei	r2,r2,3
 4002828:	10000c1e 	bne	r2,zero,400285c <main+0x2288>
			{
				draw1(dig_blank, COLOR08_BLACK, 29, 0);
 400282c:	e0befe04 	addi	r2,fp,-1032
 4002830:	000f883a 	mov	r7,zero
 4002834:	01800744 	movi	r6,29
 4002838:	000b883a 	mov	r5,zero
 400283c:	1009883a 	mov	r4,r2
 4002840:	40004cc0 	call	40004cc <draw1>
				draw1(dig_three, COLOR08_RED, 29, 0);
 4002844:	e0bc5e04 	addi	r2,fp,-3720
 4002848:	000f883a 	mov	r7,zero
 400284c:	01800744 	movi	r6,29
 4002850:	01403804 	movi	r5,224
 4002854:	1009883a 	mov	r4,r2
 4002858:	40004cc0 	call	40004cc <draw1>
			}
			if(day_a == 4)
 400285c:	e0b7d517 	ldw	r2,-8364(fp)
 4002860:	10800118 	cmpnei	r2,r2,4
 4002864:	10000c1e 	bne	r2,zero,4002898 <main+0x22c4>
			{
				draw1(dig_blank, COLOR08_BLACK, 29, 0);
 4002868:	e0befe04 	addi	r2,fp,-1032
 400286c:	000f883a 	mov	r7,zero
 4002870:	01800744 	movi	r6,29
 4002874:	000b883a 	mov	r5,zero
 4002878:	1009883a 	mov	r4,r2
 400287c:	40004cc0 	call	40004cc <draw1>
				draw1(dig_four, COLOR08_RED, 29, 0);
 4002880:	e0bcbe04 	addi	r2,fp,-3336
 4002884:	000f883a 	mov	r7,zero
 4002888:	01800744 	movi	r6,29
 400288c:	01403804 	movi	r5,224
 4002890:	1009883a 	mov	r4,r2
 4002894:	40004cc0 	call	40004cc <draw1>
			}
			if(day_a == 5)
 4002898:	e0b7d517 	ldw	r2,-8364(fp)
 400289c:	10800158 	cmpnei	r2,r2,5
 40028a0:	10000c1e 	bne	r2,zero,40028d4 <main+0x2300>
			{
				draw1(dig_blank, COLOR08_BLACK, 29, 0);
 40028a4:	e0befe04 	addi	r2,fp,-1032
 40028a8:	000f883a 	mov	r7,zero
 40028ac:	01800744 	movi	r6,29
 40028b0:	000b883a 	mov	r5,zero
 40028b4:	1009883a 	mov	r4,r2
 40028b8:	40004cc0 	call	40004cc <draw1>
				draw1(dig_five, COLOR08_RED, 29, 0);
 40028bc:	e0bd1e04 	addi	r2,fp,-2952
 40028c0:	000f883a 	mov	r7,zero
 40028c4:	01800744 	movi	r6,29
 40028c8:	01403804 	movi	r5,224
 40028cc:	1009883a 	mov	r4,r2
 40028d0:	40004cc0 	call	40004cc <draw1>
			}
			if(day_a == 6)
 40028d4:	e0b7d517 	ldw	r2,-8364(fp)
 40028d8:	10800198 	cmpnei	r2,r2,6
 40028dc:	10000c1e 	bne	r2,zero,4002910 <main+0x233c>
			{
				draw1(dig_blank, COLOR08_BLACK, 29, 0);
 40028e0:	e0befe04 	addi	r2,fp,-1032
 40028e4:	000f883a 	mov	r7,zero
 40028e8:	01800744 	movi	r6,29
 40028ec:	000b883a 	mov	r5,zero
 40028f0:	1009883a 	mov	r4,r2
 40028f4:	40004cc0 	call	40004cc <draw1>
				draw1(dig_six, COLOR08_RED, 29, 0);
 40028f8:	e0bd7e04 	addi	r2,fp,-2568
 40028fc:	000f883a 	mov	r7,zero
 4002900:	01800744 	movi	r6,29
 4002904:	01403804 	movi	r5,224
 4002908:	1009883a 	mov	r4,r2
 400290c:	40004cc0 	call	40004cc <draw1>
			}
			if(day_a == 7)
 4002910:	e0b7d517 	ldw	r2,-8364(fp)
 4002914:	108001d8 	cmpnei	r2,r2,7
 4002918:	10000c1e 	bne	r2,zero,400294c <main+0x2378>
			{
				draw1(dig_blank, COLOR08_BLACK, 29, 0);
 400291c:	e0befe04 	addi	r2,fp,-1032
 4002920:	000f883a 	mov	r7,zero
 4002924:	01800744 	movi	r6,29
 4002928:	000b883a 	mov	r5,zero
 400292c:	1009883a 	mov	r4,r2
 4002930:	40004cc0 	call	40004cc <draw1>
				draw1(dig_seven, COLOR08_RED, 29, 0);
 4002934:	e0bdde04 	addi	r2,fp,-2184
 4002938:	000f883a 	mov	r7,zero
 400293c:	01800744 	movi	r6,29
 4002940:	01403804 	movi	r5,224
 4002944:	1009883a 	mov	r4,r2
 4002948:	40004cc0 	call	40004cc <draw1>
			}
			if(day_a == 8)
 400294c:	e0b7d517 	ldw	r2,-8364(fp)
 4002950:	10800218 	cmpnei	r2,r2,8
 4002954:	10000c1e 	bne	r2,zero,4002988 <main+0x23b4>
			{
				draw1(dig_blank, COLOR08_BLACK, 29, 0);
 4002958:	e0befe04 	addi	r2,fp,-1032
 400295c:	000f883a 	mov	r7,zero
 4002960:	01800744 	movi	r6,29
 4002964:	000b883a 	mov	r5,zero
 4002968:	1009883a 	mov	r4,r2
 400296c:	40004cc0 	call	40004cc <draw1>
				draw1(dig_eight, COLOR08_RED, 29, 0);
 4002970:	e0be3e04 	addi	r2,fp,-1800
 4002974:	000f883a 	mov	r7,zero
 4002978:	01800744 	movi	r6,29
 400297c:	01403804 	movi	r5,224
 4002980:	1009883a 	mov	r4,r2
 4002984:	40004cc0 	call	40004cc <draw1>
			}
			if(day_a == 9)
 4002988:	e0b7d517 	ldw	r2,-8364(fp)
 400298c:	10800258 	cmpnei	r2,r2,9
 4002990:	10000c1e 	bne	r2,zero,40029c4 <main+0x23f0>
			{
				draw1(dig_blank, COLOR08_BLACK, 29, 0);
 4002994:	e0befe04 	addi	r2,fp,-1032
 4002998:	000f883a 	mov	r7,zero
 400299c:	01800744 	movi	r6,29
 40029a0:	000b883a 	mov	r5,zero
 40029a4:	1009883a 	mov	r4,r2
 40029a8:	40004cc0 	call	40004cc <draw1>
				draw1(dig_nine, COLOR08_RED, 29, 0);
 40029ac:	e0be9e04 	addi	r2,fp,-1416
 40029b0:	000f883a 	mov	r7,zero
 40029b4:	01800744 	movi	r6,29
 40029b8:	01403804 	movi	r5,224
 40029bc:	1009883a 	mov	r4,r2
 40029c0:	40004cc0 	call	40004cc <draw1>
			}

		}
		if(button==1 && y>0)//up
 40029c4:	e0b7da17 	ldw	r2,-8344(fp)
 40029c8:	10800058 	cmpnei	r2,r2,1
 40029cc:	1000b71e 	bne	r2,zero,4002cac <main+0x26d8>
 40029d0:	e0b7c217 	ldw	r2,-8440(fp)
 40029d4:	0080b50e 	bge	zero,r2,4002cac <main+0x26d8>
		{
			y--;
 40029d8:	e0b7c217 	ldw	r2,-8440(fp)
 40029dc:	10bfffc4 	addi	r2,r2,-1
 40029e0:	e0b7c215 	stw	r2,-8440(fp)
			draw(square, COLOR08_BLACK, x,y+3);
 40029e4:	e0b7c217 	ldw	r2,-8440(fp)
 40029e8:	10c000c4 	addi	r3,r2,3
 40029ec:	e0b7de04 	addi	r2,fp,-8328
 40029f0:	180f883a 	mov	r7,r3
 40029f4:	e1b7c117 	ldw	r6,-8444(fp)
 40029f8:	000b883a 	mov	r5,zero
 40029fc:	1009883a 	mov	r4,r2
 4002a00:	40003c80 	call	40003c8 <draw>
			printf("x: %i , y: %i , number %i \n", x, y, gameboard[y][x]);
 4002a04:	e0b7c217 	ldw	r2,-8440(fp)
 4002a08:	01400504 	movi	r5,20
 4002a0c:	1009883a 	mov	r4,r2
 4002a10:	40191000 	call	4019100 <__mulsi3>
 4002a14:	1007883a 	mov	r3,r2
 4002a18:	e0b7c117 	ldw	r2,-8444(fp)
 4002a1c:	1885883a 	add	r2,r3,r2
 4002a20:	1085883a 	add	r2,r2,r2
 4002a24:	1085883a 	add	r2,r2,r2
 4002a28:	e0f7c104 	addi	r3,fp,-8444
 4002a2c:	1885883a 	add	r2,r3,r2
 4002a30:	10879d04 	addi	r2,r2,7796
 4002a34:	10800017 	ldw	r2,0(r2)
 4002a38:	100f883a 	mov	r7,r2
 4002a3c:	e1b7c217 	ldw	r6,-8440(fp)
 4002a40:	e177c117 	ldw	r5,-8444(fp)
 4002a44:	010100f4 	movhi	r4,1027
 4002a48:	212a7504 	addi	r4,r4,-22060
 4002a4c:	40193c80 	call	40193c8 <printf>

			//y chords
			if(y==0)//0
 4002a50:	e0b7c217 	ldw	r2,-8440(fp)
 4002a54:	1000101e 	bne	r2,zero,4002a98 <main+0x24c4>
			{
				draw(white, COLOR08_BLACK, 19,1 );
 4002a58:	e0b95e04 	addi	r2,fp,-6792
 4002a5c:	01c00044 	movi	r7,1
 4002a60:	018004c4 	movi	r6,19
 4002a64:	000b883a 	mov	r5,zero
 4002a68:	1009883a 	mov	r4,r2
 4002a6c:	40003c80 	call	40003c8 <draw>
				draw(zero, COLOR08_GRAY, 19,1 );
 4002a70:	01c00044 	movi	r7,1
 4002a74:	018004c4 	movi	r6,19
 4002a78:	01402484 	movi	r5,146
 4002a7c:	010100f4 	movhi	r4,1027
 4002a80:	21312a04 	addi	r4,r4,-15192
 4002a84:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4002a88:	00c00044 	movi	r3,1
 4002a8c:	008200b4 	movhi	r2,2050
 4002a90:	10841804 	addi	r2,r2,4192
 4002a94:	10c00035 	stwio	r3,0(r2)
			}

			if(y==1)//1
 4002a98:	e0b7c217 	ldw	r2,-8440(fp)
 4002a9c:	10800058 	cmpnei	r2,r2,1
 4002aa0:	1000101e 	bne	r2,zero,4002ae4 <main+0x2510>
			{
				draw(white, COLOR08_BLACK, 19,1 );
 4002aa4:	e0b95e04 	addi	r2,fp,-6792
 4002aa8:	01c00044 	movi	r7,1
 4002aac:	018004c4 	movi	r6,19
 4002ab0:	000b883a 	mov	r5,zero
 4002ab4:	1009883a 	mov	r4,r2
 4002ab8:	40003c80 	call	40003c8 <draw>
				draw(one, COLOR08_GRAY, 19,1 );
 4002abc:	01c00044 	movi	r7,1
 4002ac0:	018004c4 	movi	r6,19
 4002ac4:	01402484 	movi	r5,146
 4002ac8:	010100f4 	movhi	r4,1027
 4002acc:	2132aa04 	addi	r4,r4,-13656
 4002ad0:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4002ad4:	00c00044 	movi	r3,1
 4002ad8:	008200b4 	movhi	r2,2050
 4002adc:	10841804 	addi	r2,r2,4192
 4002ae0:	10c00035 	stwio	r3,0(r2)
			}

			if(y==2)//2
 4002ae4:	e0b7c217 	ldw	r2,-8440(fp)
 4002ae8:	10800098 	cmpnei	r2,r2,2
 4002aec:	1000101e 	bne	r2,zero,4002b30 <main+0x255c>
			{
				draw(white, COLOR08_BLACK, 19,1 );
 4002af0:	e0b95e04 	addi	r2,fp,-6792
 4002af4:	01c00044 	movi	r7,1
 4002af8:	018004c4 	movi	r6,19
 4002afc:	000b883a 	mov	r5,zero
 4002b00:	1009883a 	mov	r4,r2
 4002b04:	40003c80 	call	40003c8 <draw>
				draw(two, COLOR08_GRAY, 19,1 );
 4002b08:	01c00044 	movi	r7,1
 4002b0c:	018004c4 	movi	r6,19
 4002b10:	01402484 	movi	r5,146
 4002b14:	010100f4 	movhi	r4,1027
 4002b18:	21342a04 	addi	r4,r4,-12120
 4002b1c:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4002b20:	00c00044 	movi	r3,1
 4002b24:	008200b4 	movhi	r2,2050
 4002b28:	10841804 	addi	r2,r2,4192
 4002b2c:	10c00035 	stwio	r3,0(r2)
			}

			if(y==3)//3
 4002b30:	e0b7c217 	ldw	r2,-8440(fp)
 4002b34:	108000d8 	cmpnei	r2,r2,3
 4002b38:	1000101e 	bne	r2,zero,4002b7c <main+0x25a8>
			{
				draw(white, COLOR08_BLACK, 19,1 );
 4002b3c:	e0b95e04 	addi	r2,fp,-6792
 4002b40:	01c00044 	movi	r7,1
 4002b44:	018004c4 	movi	r6,19
 4002b48:	000b883a 	mov	r5,zero
 4002b4c:	1009883a 	mov	r4,r2
 4002b50:	40003c80 	call	40003c8 <draw>
				draw(three, COLOR08_GRAY, 19,1 );
 4002b54:	01c00044 	movi	r7,1
 4002b58:	018004c4 	movi	r6,19
 4002b5c:	01402484 	movi	r5,146
 4002b60:	010100f4 	movhi	r4,1027
 4002b64:	2135aa04 	addi	r4,r4,-10584
 4002b68:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4002b6c:	00c00044 	movi	r3,1
 4002b70:	008200b4 	movhi	r2,2050
 4002b74:	10841804 	addi	r2,r2,4192
 4002b78:	10c00035 	stwio	r3,0(r2)
			}

			if(y==4)//4
 4002b7c:	e0b7c217 	ldw	r2,-8440(fp)
 4002b80:	10800118 	cmpnei	r2,r2,4
 4002b84:	1000101e 	bne	r2,zero,4002bc8 <main+0x25f4>
			{
				draw(white, COLOR08_BLACK, 19,1 );
 4002b88:	e0b95e04 	addi	r2,fp,-6792
 4002b8c:	01c00044 	movi	r7,1
 4002b90:	018004c4 	movi	r6,19
 4002b94:	000b883a 	mov	r5,zero
 4002b98:	1009883a 	mov	r4,r2
 4002b9c:	40003c80 	call	40003c8 <draw>
				draw(four, COLOR08_GRAY, 19,1 );
 4002ba0:	01c00044 	movi	r7,1
 4002ba4:	018004c4 	movi	r6,19
 4002ba8:	01402484 	movi	r5,146
 4002bac:	010100f4 	movhi	r4,1027
 4002bb0:	21372a04 	addi	r4,r4,-9048
 4002bb4:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4002bb8:	00c00044 	movi	r3,1
 4002bbc:	008200b4 	movhi	r2,2050
 4002bc0:	10841804 	addi	r2,r2,4192
 4002bc4:	10c00035 	stwio	r3,0(r2)
			}

			if(y==5)//5
 4002bc8:	e0b7c217 	ldw	r2,-8440(fp)
 4002bcc:	10800158 	cmpnei	r2,r2,5
 4002bd0:	1000101e 	bne	r2,zero,4002c14 <main+0x2640>
			{
				draw(white, COLOR08_BLACK, 19,1 );
 4002bd4:	e0b95e04 	addi	r2,fp,-6792
 4002bd8:	01c00044 	movi	r7,1
 4002bdc:	018004c4 	movi	r6,19
 4002be0:	000b883a 	mov	r5,zero
 4002be4:	1009883a 	mov	r4,r2
 4002be8:	40003c80 	call	40003c8 <draw>
				draw(five, COLOR08_GRAY, 19,1 );
 4002bec:	01c00044 	movi	r7,1
 4002bf0:	018004c4 	movi	r6,19
 4002bf4:	01402484 	movi	r5,146
 4002bf8:	010100f4 	movhi	r4,1027
 4002bfc:	2138aa04 	addi	r4,r4,-7512
 4002c00:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4002c04:	00c00044 	movi	r3,1
 4002c08:	008200b4 	movhi	r2,2050
 4002c0c:	10841804 	addi	r2,r2,4192
 4002c10:	10c00035 	stwio	r3,0(r2)
			}

			if(y==6)//6
 4002c14:	e0b7c217 	ldw	r2,-8440(fp)
 4002c18:	10800198 	cmpnei	r2,r2,6
 4002c1c:	1000101e 	bne	r2,zero,4002c60 <main+0x268c>
			{
				draw(white, COLOR08_BLACK, 19,1 );
 4002c20:	e0b95e04 	addi	r2,fp,-6792
 4002c24:	01c00044 	movi	r7,1
 4002c28:	018004c4 	movi	r6,19
 4002c2c:	000b883a 	mov	r5,zero
 4002c30:	1009883a 	mov	r4,r2
 4002c34:	40003c80 	call	40003c8 <draw>
				draw(six, COLOR08_GRAY, 19,1 );
 4002c38:	01c00044 	movi	r7,1
 4002c3c:	018004c4 	movi	r6,19
 4002c40:	01402484 	movi	r5,146
 4002c44:	010100f4 	movhi	r4,1027
 4002c48:	213a2a04 	addi	r4,r4,-5976
 4002c4c:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4002c50:	00c00044 	movi	r3,1
 4002c54:	008200b4 	movhi	r2,2050
 4002c58:	10841804 	addi	r2,r2,4192
 4002c5c:	10c00035 	stwio	r3,0(r2)
			}

			if(y==7)//7
 4002c60:	e0b7c217 	ldw	r2,-8440(fp)
 4002c64:	108001d8 	cmpnei	r2,r2,7
 4002c68:	1000101e 	bne	r2,zero,4002cac <main+0x26d8>
			{
				draw(white, COLOR08_BLACK, 19,1 );
 4002c6c:	e0b95e04 	addi	r2,fp,-6792
 4002c70:	01c00044 	movi	r7,1
 4002c74:	018004c4 	movi	r6,19
 4002c78:	000b883a 	mov	r5,zero
 4002c7c:	1009883a 	mov	r4,r2
 4002c80:	40003c80 	call	40003c8 <draw>
				draw(seven, COLOR08_GRAY, 19,1 );
 4002c84:	01c00044 	movi	r7,1
 4002c88:	018004c4 	movi	r6,19
 4002c8c:	01402484 	movi	r5,146
 4002c90:	010100f4 	movhi	r4,1027
 4002c94:	213baa04 	addi	r4,r4,-4440
 4002c98:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4002c9c:	00c00044 	movi	r3,1
 4002ca0:	008200b4 	movhi	r2,2050
 4002ca4:	10841804 	addi	r2,r2,4192
 4002ca8:	10c00035 	stwio	r3,0(r2)



		}

		if(button==2 && y<7)//down
 4002cac:	e0b7da17 	ldw	r2,-8344(fp)
 4002cb0:	10800098 	cmpnei	r2,r2,2
 4002cb4:	1000b81e 	bne	r2,zero,4002f98 <main+0x29c4>
 4002cb8:	e0b7c217 	ldw	r2,-8440(fp)
 4002cbc:	108001c8 	cmpgei	r2,r2,7
 4002cc0:	1000b51e 	bne	r2,zero,4002f98 <main+0x29c4>
		{
			y++;
 4002cc4:	e0b7c217 	ldw	r2,-8440(fp)
 4002cc8:	10800044 	addi	r2,r2,1
 4002ccc:	e0b7c215 	stw	r2,-8440(fp)
			draw(square, COLOR08_BLACK, x,y+1);
 4002cd0:	e0b7c217 	ldw	r2,-8440(fp)
 4002cd4:	10c00044 	addi	r3,r2,1
 4002cd8:	e0b7de04 	addi	r2,fp,-8328
 4002cdc:	180f883a 	mov	r7,r3
 4002ce0:	e1b7c117 	ldw	r6,-8444(fp)
 4002ce4:	000b883a 	mov	r5,zero
 4002ce8:	1009883a 	mov	r4,r2
 4002cec:	40003c80 	call	40003c8 <draw>
			printf("x: %i , y: %i , number %i \n", x, y, gameboard[y][x]);
 4002cf0:	e0b7c217 	ldw	r2,-8440(fp)
 4002cf4:	01400504 	movi	r5,20
 4002cf8:	1009883a 	mov	r4,r2
 4002cfc:	40191000 	call	4019100 <__mulsi3>
 4002d00:	1007883a 	mov	r3,r2
 4002d04:	e0b7c117 	ldw	r2,-8444(fp)
 4002d08:	1885883a 	add	r2,r3,r2
 4002d0c:	1085883a 	add	r2,r2,r2
 4002d10:	1085883a 	add	r2,r2,r2
 4002d14:	e0f7c104 	addi	r3,fp,-8444
 4002d18:	1885883a 	add	r2,r3,r2
 4002d1c:	10879d04 	addi	r2,r2,7796
 4002d20:	10800017 	ldw	r2,0(r2)
 4002d24:	100f883a 	mov	r7,r2
 4002d28:	e1b7c217 	ldw	r6,-8440(fp)
 4002d2c:	e177c117 	ldw	r5,-8444(fp)
 4002d30:	010100f4 	movhi	r4,1027
 4002d34:	212a7504 	addi	r4,r4,-22060
 4002d38:	40193c80 	call	40193c8 <printf>

			//y chords
			if(y==0)//0
 4002d3c:	e0b7c217 	ldw	r2,-8440(fp)
 4002d40:	1000101e 	bne	r2,zero,4002d84 <main+0x27b0>
			{
				draw(white, COLOR08_BLACK, 19,1 );
 4002d44:	e0b95e04 	addi	r2,fp,-6792
 4002d48:	01c00044 	movi	r7,1
 4002d4c:	018004c4 	movi	r6,19
 4002d50:	000b883a 	mov	r5,zero
 4002d54:	1009883a 	mov	r4,r2
 4002d58:	40003c80 	call	40003c8 <draw>
				draw(zero, COLOR08_GRAY, 19,1 );
 4002d5c:	01c00044 	movi	r7,1
 4002d60:	018004c4 	movi	r6,19
 4002d64:	01402484 	movi	r5,146
 4002d68:	010100f4 	movhi	r4,1027
 4002d6c:	21312a04 	addi	r4,r4,-15192
 4002d70:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4002d74:	00c00044 	movi	r3,1
 4002d78:	008200b4 	movhi	r2,2050
 4002d7c:	10841804 	addi	r2,r2,4192
 4002d80:	10c00035 	stwio	r3,0(r2)
			}

			if(y==1)//1
 4002d84:	e0b7c217 	ldw	r2,-8440(fp)
 4002d88:	10800058 	cmpnei	r2,r2,1
 4002d8c:	1000101e 	bne	r2,zero,4002dd0 <main+0x27fc>
			{
				draw(white, COLOR08_BLACK, 19,1 );
 4002d90:	e0b95e04 	addi	r2,fp,-6792
 4002d94:	01c00044 	movi	r7,1
 4002d98:	018004c4 	movi	r6,19
 4002d9c:	000b883a 	mov	r5,zero
 4002da0:	1009883a 	mov	r4,r2
 4002da4:	40003c80 	call	40003c8 <draw>
				draw(one, COLOR08_GRAY, 19,1 );
 4002da8:	01c00044 	movi	r7,1
 4002dac:	018004c4 	movi	r6,19
 4002db0:	01402484 	movi	r5,146
 4002db4:	010100f4 	movhi	r4,1027
 4002db8:	2132aa04 	addi	r4,r4,-13656
 4002dbc:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4002dc0:	00c00044 	movi	r3,1
 4002dc4:	008200b4 	movhi	r2,2050
 4002dc8:	10841804 	addi	r2,r2,4192
 4002dcc:	10c00035 	stwio	r3,0(r2)
			}

			if(y==2)//2
 4002dd0:	e0b7c217 	ldw	r2,-8440(fp)
 4002dd4:	10800098 	cmpnei	r2,r2,2
 4002dd8:	1000101e 	bne	r2,zero,4002e1c <main+0x2848>
			{
				draw(white, COLOR08_BLACK, 19,1 );
 4002ddc:	e0b95e04 	addi	r2,fp,-6792
 4002de0:	01c00044 	movi	r7,1
 4002de4:	018004c4 	movi	r6,19
 4002de8:	000b883a 	mov	r5,zero
 4002dec:	1009883a 	mov	r4,r2
 4002df0:	40003c80 	call	40003c8 <draw>
				draw(two, COLOR08_GRAY, 19,1 );
 4002df4:	01c00044 	movi	r7,1
 4002df8:	018004c4 	movi	r6,19
 4002dfc:	01402484 	movi	r5,146
 4002e00:	010100f4 	movhi	r4,1027
 4002e04:	21342a04 	addi	r4,r4,-12120
 4002e08:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4002e0c:	00c00044 	movi	r3,1
 4002e10:	008200b4 	movhi	r2,2050
 4002e14:	10841804 	addi	r2,r2,4192
 4002e18:	10c00035 	stwio	r3,0(r2)
			}

			if(y==3)//3
 4002e1c:	e0b7c217 	ldw	r2,-8440(fp)
 4002e20:	108000d8 	cmpnei	r2,r2,3
 4002e24:	1000101e 	bne	r2,zero,4002e68 <main+0x2894>
			{
				draw(white, COLOR08_BLACK, 19,1 );
 4002e28:	e0b95e04 	addi	r2,fp,-6792
 4002e2c:	01c00044 	movi	r7,1
 4002e30:	018004c4 	movi	r6,19
 4002e34:	000b883a 	mov	r5,zero
 4002e38:	1009883a 	mov	r4,r2
 4002e3c:	40003c80 	call	40003c8 <draw>
				draw(three, COLOR08_GRAY, 19,1 );
 4002e40:	01c00044 	movi	r7,1
 4002e44:	018004c4 	movi	r6,19
 4002e48:	01402484 	movi	r5,146
 4002e4c:	010100f4 	movhi	r4,1027
 4002e50:	2135aa04 	addi	r4,r4,-10584
 4002e54:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4002e58:	00c00044 	movi	r3,1
 4002e5c:	008200b4 	movhi	r2,2050
 4002e60:	10841804 	addi	r2,r2,4192
 4002e64:	10c00035 	stwio	r3,0(r2)
			}

			if(y==4)//4
 4002e68:	e0b7c217 	ldw	r2,-8440(fp)
 4002e6c:	10800118 	cmpnei	r2,r2,4
 4002e70:	1000101e 	bne	r2,zero,4002eb4 <main+0x28e0>
			{
				draw(white, COLOR08_BLACK, 19,1 );
 4002e74:	e0b95e04 	addi	r2,fp,-6792
 4002e78:	01c00044 	movi	r7,1
 4002e7c:	018004c4 	movi	r6,19
 4002e80:	000b883a 	mov	r5,zero
 4002e84:	1009883a 	mov	r4,r2
 4002e88:	40003c80 	call	40003c8 <draw>
				draw(four, COLOR08_GRAY, 19,1 );
 4002e8c:	01c00044 	movi	r7,1
 4002e90:	018004c4 	movi	r6,19
 4002e94:	01402484 	movi	r5,146
 4002e98:	010100f4 	movhi	r4,1027
 4002e9c:	21372a04 	addi	r4,r4,-9048
 4002ea0:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4002ea4:	00c00044 	movi	r3,1
 4002ea8:	008200b4 	movhi	r2,2050
 4002eac:	10841804 	addi	r2,r2,4192
 4002eb0:	10c00035 	stwio	r3,0(r2)
			}

			if(y==5)//5
 4002eb4:	e0b7c217 	ldw	r2,-8440(fp)
 4002eb8:	10800158 	cmpnei	r2,r2,5
 4002ebc:	1000101e 	bne	r2,zero,4002f00 <main+0x292c>
			{
				draw(white, COLOR08_BLACK, 19,1 );
 4002ec0:	e0b95e04 	addi	r2,fp,-6792
 4002ec4:	01c00044 	movi	r7,1
 4002ec8:	018004c4 	movi	r6,19
 4002ecc:	000b883a 	mov	r5,zero
 4002ed0:	1009883a 	mov	r4,r2
 4002ed4:	40003c80 	call	40003c8 <draw>
				draw(five, COLOR08_GRAY, 19,1 );
 4002ed8:	01c00044 	movi	r7,1
 4002edc:	018004c4 	movi	r6,19
 4002ee0:	01402484 	movi	r5,146
 4002ee4:	010100f4 	movhi	r4,1027
 4002ee8:	2138aa04 	addi	r4,r4,-7512
 4002eec:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4002ef0:	00c00044 	movi	r3,1
 4002ef4:	008200b4 	movhi	r2,2050
 4002ef8:	10841804 	addi	r2,r2,4192
 4002efc:	10c00035 	stwio	r3,0(r2)
			}

			if(y==6)//6
 4002f00:	e0b7c217 	ldw	r2,-8440(fp)
 4002f04:	10800198 	cmpnei	r2,r2,6
 4002f08:	1000101e 	bne	r2,zero,4002f4c <main+0x2978>
			{
				draw(white, COLOR08_BLACK, 19,1 );
 4002f0c:	e0b95e04 	addi	r2,fp,-6792
 4002f10:	01c00044 	movi	r7,1
 4002f14:	018004c4 	movi	r6,19
 4002f18:	000b883a 	mov	r5,zero
 4002f1c:	1009883a 	mov	r4,r2
 4002f20:	40003c80 	call	40003c8 <draw>
				draw(six, COLOR08_GRAY, 19,1 );
 4002f24:	01c00044 	movi	r7,1
 4002f28:	018004c4 	movi	r6,19
 4002f2c:	01402484 	movi	r5,146
 4002f30:	010100f4 	movhi	r4,1027
 4002f34:	213a2a04 	addi	r4,r4,-5976
 4002f38:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4002f3c:	00c00044 	movi	r3,1
 4002f40:	008200b4 	movhi	r2,2050
 4002f44:	10841804 	addi	r2,r2,4192
 4002f48:	10c00035 	stwio	r3,0(r2)
			}

			if(y==7)//7
 4002f4c:	e0b7c217 	ldw	r2,-8440(fp)
 4002f50:	108001d8 	cmpnei	r2,r2,7
 4002f54:	1000101e 	bne	r2,zero,4002f98 <main+0x29c4>
			{
				draw(white, COLOR08_BLACK, 19,1 );
 4002f58:	e0b95e04 	addi	r2,fp,-6792
 4002f5c:	01c00044 	movi	r7,1
 4002f60:	018004c4 	movi	r6,19
 4002f64:	000b883a 	mov	r5,zero
 4002f68:	1009883a 	mov	r4,r2
 4002f6c:	40003c80 	call	40003c8 <draw>
				draw(seven, COLOR08_GRAY, 19,1 );
 4002f70:	01c00044 	movi	r7,1
 4002f74:	018004c4 	movi	r6,19
 4002f78:	01402484 	movi	r5,146
 4002f7c:	010100f4 	movhi	r4,1027
 4002f80:	213baa04 	addi	r4,r4,-4440
 4002f84:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4002f88:	00c00044 	movi	r3,1
 4002f8c:	008200b4 	movhi	r2,2050
 4002f90:	10841804 	addi	r2,r2,4192
 4002f94:	10c00035 	stwio	r3,0(r2)
			}

		}
		if(button==3 && x>0)//left
 4002f98:	e0b7da17 	ldw	r2,-8344(fp)
 4002f9c:	108000d8 	cmpnei	r2,r2,3
 4002fa0:	1002151e 	bne	r2,zero,40037f8 <main+0x3224>
 4002fa4:	e0b7c117 	ldw	r2,-8444(fp)
 4002fa8:	0082130e 	bge	zero,r2,40037f8 <main+0x3224>
		{
			x--;
 4002fac:	e0b7c117 	ldw	r2,-8444(fp)
 4002fb0:	10bfffc4 	addi	r2,r2,-1
 4002fb4:	e0b7c115 	stw	r2,-8444(fp)
			draw(square, COLOR08_BLACK, x+1,y+2);
 4002fb8:	e0b7c117 	ldw	r2,-8444(fp)
 4002fbc:	10c00044 	addi	r3,r2,1
 4002fc0:	e0b7c217 	ldw	r2,-8440(fp)
 4002fc4:	11000084 	addi	r4,r2,2
 4002fc8:	e0b7de04 	addi	r2,fp,-8328
 4002fcc:	200f883a 	mov	r7,r4
 4002fd0:	180d883a 	mov	r6,r3
 4002fd4:	000b883a 	mov	r5,zero
 4002fd8:	1009883a 	mov	r4,r2
 4002fdc:	40003c80 	call	40003c8 <draw>
			printf("x: %i , y: %i , number %i \n", x, y, gameboard[y][x]);
 4002fe0:	e0b7c217 	ldw	r2,-8440(fp)
 4002fe4:	01400504 	movi	r5,20
 4002fe8:	1009883a 	mov	r4,r2
 4002fec:	40191000 	call	4019100 <__mulsi3>
 4002ff0:	1007883a 	mov	r3,r2
 4002ff4:	e0b7c117 	ldw	r2,-8444(fp)
 4002ff8:	1885883a 	add	r2,r3,r2
 4002ffc:	1085883a 	add	r2,r2,r2
 4003000:	1085883a 	add	r2,r2,r2
 4003004:	e0f7c104 	addi	r3,fp,-8444
 4003008:	1885883a 	add	r2,r3,r2
 400300c:	10879d04 	addi	r2,r2,7796
 4003010:	10800017 	ldw	r2,0(r2)
 4003014:	100f883a 	mov	r7,r2
 4003018:	e1b7c217 	ldw	r6,-8440(fp)
 400301c:	e177c117 	ldw	r5,-8444(fp)
 4003020:	010100f4 	movhi	r4,1027
 4003024:	212a7504 	addi	r4,r4,-22060
 4003028:	40193c80 	call	40193c8 <printf>

			//x chords
			if(x==0)//0
 400302c:	e0b7c117 	ldw	r2,-8444(fp)
 4003030:	1000101e 	bne	r2,zero,4003074 <main+0x2aa0>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 4003034:	e0b95e04 	addi	r2,fp,-6792
 4003038:	01c00044 	movi	r7,1
 400303c:	01800084 	movi	r6,2
 4003040:	000b883a 	mov	r5,zero
 4003044:	1009883a 	mov	r4,r2
 4003048:	40003c80 	call	40003c8 <draw>
				draw(zero, COLOR08_GRAY, 2,1 );
 400304c:	01c00044 	movi	r7,1
 4003050:	01800084 	movi	r6,2
 4003054:	01402484 	movi	r5,146
 4003058:	010100f4 	movhi	r4,1027
 400305c:	21312a04 	addi	r4,r4,-15192
 4003060:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4003064:	00c00044 	movi	r3,1
 4003068:	008200b4 	movhi	r2,2050
 400306c:	10841804 	addi	r2,r2,4192
 4003070:	10c00035 	stwio	r3,0(r2)
			}

			if(x==1)//1
 4003074:	e0b7c117 	ldw	r2,-8444(fp)
 4003078:	10800058 	cmpnei	r2,r2,1
 400307c:	1000101e 	bne	r2,zero,40030c0 <main+0x2aec>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 4003080:	e0b95e04 	addi	r2,fp,-6792
 4003084:	01c00044 	movi	r7,1
 4003088:	01800084 	movi	r6,2
 400308c:	000b883a 	mov	r5,zero
 4003090:	1009883a 	mov	r4,r2
 4003094:	40003c80 	call	40003c8 <draw>
				draw(one, COLOR08_GRAY, 2,1 );
 4003098:	01c00044 	movi	r7,1
 400309c:	01800084 	movi	r6,2
 40030a0:	01402484 	movi	r5,146
 40030a4:	010100f4 	movhi	r4,1027
 40030a8:	2132aa04 	addi	r4,r4,-13656
 40030ac:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40030b0:	00c00044 	movi	r3,1
 40030b4:	008200b4 	movhi	r2,2050
 40030b8:	10841804 	addi	r2,r2,4192
 40030bc:	10c00035 	stwio	r3,0(r2)
			}

			if(x==2)//2
 40030c0:	e0b7c117 	ldw	r2,-8444(fp)
 40030c4:	10800098 	cmpnei	r2,r2,2
 40030c8:	1000101e 	bne	r2,zero,400310c <main+0x2b38>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 40030cc:	e0b95e04 	addi	r2,fp,-6792
 40030d0:	01c00044 	movi	r7,1
 40030d4:	01800084 	movi	r6,2
 40030d8:	000b883a 	mov	r5,zero
 40030dc:	1009883a 	mov	r4,r2
 40030e0:	40003c80 	call	40003c8 <draw>
				draw(two, COLOR08_GRAY, 2,1 );
 40030e4:	01c00044 	movi	r7,1
 40030e8:	01800084 	movi	r6,2
 40030ec:	01402484 	movi	r5,146
 40030f0:	010100f4 	movhi	r4,1027
 40030f4:	21342a04 	addi	r4,r4,-12120
 40030f8:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40030fc:	00c00044 	movi	r3,1
 4003100:	008200b4 	movhi	r2,2050
 4003104:	10841804 	addi	r2,r2,4192
 4003108:	10c00035 	stwio	r3,0(r2)
			}

			if(x==3)//3
 400310c:	e0b7c117 	ldw	r2,-8444(fp)
 4003110:	108000d8 	cmpnei	r2,r2,3
 4003114:	1000101e 	bne	r2,zero,4003158 <main+0x2b84>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 4003118:	e0b95e04 	addi	r2,fp,-6792
 400311c:	01c00044 	movi	r7,1
 4003120:	01800084 	movi	r6,2
 4003124:	000b883a 	mov	r5,zero
 4003128:	1009883a 	mov	r4,r2
 400312c:	40003c80 	call	40003c8 <draw>
				draw(three, COLOR08_GRAY, 2,1 );
 4003130:	01c00044 	movi	r7,1
 4003134:	01800084 	movi	r6,2
 4003138:	01402484 	movi	r5,146
 400313c:	010100f4 	movhi	r4,1027
 4003140:	2135aa04 	addi	r4,r4,-10584
 4003144:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4003148:	00c00044 	movi	r3,1
 400314c:	008200b4 	movhi	r2,2050
 4003150:	10841804 	addi	r2,r2,4192
 4003154:	10c00035 	stwio	r3,0(r2)
			}

			if(x==4)//4
 4003158:	e0b7c117 	ldw	r2,-8444(fp)
 400315c:	10800118 	cmpnei	r2,r2,4
 4003160:	1000101e 	bne	r2,zero,40031a4 <main+0x2bd0>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 4003164:	e0b95e04 	addi	r2,fp,-6792
 4003168:	01c00044 	movi	r7,1
 400316c:	01800084 	movi	r6,2
 4003170:	000b883a 	mov	r5,zero
 4003174:	1009883a 	mov	r4,r2
 4003178:	40003c80 	call	40003c8 <draw>
				draw(four, COLOR08_GRAY, 2,1 );
 400317c:	01c00044 	movi	r7,1
 4003180:	01800084 	movi	r6,2
 4003184:	01402484 	movi	r5,146
 4003188:	010100f4 	movhi	r4,1027
 400318c:	21372a04 	addi	r4,r4,-9048
 4003190:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4003194:	00c00044 	movi	r3,1
 4003198:	008200b4 	movhi	r2,2050
 400319c:	10841804 	addi	r2,r2,4192
 40031a0:	10c00035 	stwio	r3,0(r2)
			}

			if(x==5)//5
 40031a4:	e0b7c117 	ldw	r2,-8444(fp)
 40031a8:	10800158 	cmpnei	r2,r2,5
 40031ac:	1000101e 	bne	r2,zero,40031f0 <main+0x2c1c>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 40031b0:	e0b95e04 	addi	r2,fp,-6792
 40031b4:	01c00044 	movi	r7,1
 40031b8:	01800084 	movi	r6,2
 40031bc:	000b883a 	mov	r5,zero
 40031c0:	1009883a 	mov	r4,r2
 40031c4:	40003c80 	call	40003c8 <draw>
				draw(five, COLOR08_GRAY, 2,1 );
 40031c8:	01c00044 	movi	r7,1
 40031cc:	01800084 	movi	r6,2
 40031d0:	01402484 	movi	r5,146
 40031d4:	010100f4 	movhi	r4,1027
 40031d8:	2138aa04 	addi	r4,r4,-7512
 40031dc:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40031e0:	00c00044 	movi	r3,1
 40031e4:	008200b4 	movhi	r2,2050
 40031e8:	10841804 	addi	r2,r2,4192
 40031ec:	10c00035 	stwio	r3,0(r2)
			}

			if(x==6)//6
 40031f0:	e0b7c117 	ldw	r2,-8444(fp)
 40031f4:	10800198 	cmpnei	r2,r2,6
 40031f8:	1000101e 	bne	r2,zero,400323c <main+0x2c68>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 40031fc:	e0b95e04 	addi	r2,fp,-6792
 4003200:	01c00044 	movi	r7,1
 4003204:	01800084 	movi	r6,2
 4003208:	000b883a 	mov	r5,zero
 400320c:	1009883a 	mov	r4,r2
 4003210:	40003c80 	call	40003c8 <draw>
				draw(six, COLOR08_GRAY, 2,1 );
 4003214:	01c00044 	movi	r7,1
 4003218:	01800084 	movi	r6,2
 400321c:	01402484 	movi	r5,146
 4003220:	010100f4 	movhi	r4,1027
 4003224:	213a2a04 	addi	r4,r4,-5976
 4003228:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400322c:	00c00044 	movi	r3,1
 4003230:	008200b4 	movhi	r2,2050
 4003234:	10841804 	addi	r2,r2,4192
 4003238:	10c00035 	stwio	r3,0(r2)
			}

			if(x==7)//7
 400323c:	e0b7c117 	ldw	r2,-8444(fp)
 4003240:	108001d8 	cmpnei	r2,r2,7
 4003244:	1000101e 	bne	r2,zero,4003288 <main+0x2cb4>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 4003248:	e0b95e04 	addi	r2,fp,-6792
 400324c:	01c00044 	movi	r7,1
 4003250:	01800084 	movi	r6,2
 4003254:	000b883a 	mov	r5,zero
 4003258:	1009883a 	mov	r4,r2
 400325c:	40003c80 	call	40003c8 <draw>
				draw(seven, COLOR08_GRAY, 2,1 );
 4003260:	01c00044 	movi	r7,1
 4003264:	01800084 	movi	r6,2
 4003268:	01402484 	movi	r5,146
 400326c:	010100f4 	movhi	r4,1027
 4003270:	213baa04 	addi	r4,r4,-4440
 4003274:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4003278:	00c00044 	movi	r3,1
 400327c:	008200b4 	movhi	r2,2050
 4003280:	10841804 	addi	r2,r2,4192
 4003284:	10c00035 	stwio	r3,0(r2)
			}

			if(x==8)//8
 4003288:	e0b7c117 	ldw	r2,-8444(fp)
 400328c:	10800218 	cmpnei	r2,r2,8
 4003290:	1000101e 	bne	r2,zero,40032d4 <main+0x2d00>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 4003294:	e0b95e04 	addi	r2,fp,-6792
 4003298:	01c00044 	movi	r7,1
 400329c:	01800084 	movi	r6,2
 40032a0:	000b883a 	mov	r5,zero
 40032a4:	1009883a 	mov	r4,r2
 40032a8:	40003c80 	call	40003c8 <draw>
				draw(eight, COLOR08_GRAY, 2,1 );
 40032ac:	01c00044 	movi	r7,1
 40032b0:	01800084 	movi	r6,2
 40032b4:	01402484 	movi	r5,146
 40032b8:	010100f4 	movhi	r4,1027
 40032bc:	213d2a04 	addi	r4,r4,-2904
 40032c0:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40032c4:	00c00044 	movi	r3,1
 40032c8:	008200b4 	movhi	r2,2050
 40032cc:	10841804 	addi	r2,r2,4192
 40032d0:	10c00035 	stwio	r3,0(r2)
			}

			if(x==9)//9
 40032d4:	e0b7c117 	ldw	r2,-8444(fp)
 40032d8:	10800258 	cmpnei	r2,r2,9
 40032dc:	1000101e 	bne	r2,zero,4003320 <main+0x2d4c>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 40032e0:	e0b95e04 	addi	r2,fp,-6792
 40032e4:	01c00044 	movi	r7,1
 40032e8:	01800084 	movi	r6,2
 40032ec:	000b883a 	mov	r5,zero
 40032f0:	1009883a 	mov	r4,r2
 40032f4:	40003c80 	call	40003c8 <draw>
				draw(nine, COLOR08_GRAY, 2,1 );
 40032f8:	01c00044 	movi	r7,1
 40032fc:	01800084 	movi	r6,2
 4003300:	01402484 	movi	r5,146
 4003304:	010100f4 	movhi	r4,1027
 4003308:	213eaa04 	addi	r4,r4,-1368
 400330c:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4003310:	00c00044 	movi	r3,1
 4003314:	008200b4 	movhi	r2,2050
 4003318:	10841804 	addi	r2,r2,4192
 400331c:	10c00035 	stwio	r3,0(r2)
			}

			if(x==10)//10
 4003320:	e0b7c117 	ldw	r2,-8444(fp)
 4003324:	10800298 	cmpnei	r2,r2,10
 4003328:	10001c1e 	bne	r2,zero,400339c <main+0x2dc8>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 400332c:	e0b95e04 	addi	r2,fp,-6792
 4003330:	01c00044 	movi	r7,1
 4003334:	01800084 	movi	r6,2
 4003338:	000b883a 	mov	r5,zero
 400333c:	1009883a 	mov	r4,r2
 4003340:	40003c80 	call	40003c8 <draw>
				draw(white, COLOR08_BLACK, 1,1 );
 4003344:	e0b95e04 	addi	r2,fp,-6792
 4003348:	01c00044 	movi	r7,1
 400334c:	01800044 	movi	r6,1
 4003350:	000b883a 	mov	r5,zero
 4003354:	1009883a 	mov	r4,r2
 4003358:	40003c80 	call	40003c8 <draw>
				draw(zero, COLOR08_GRAY, 2,1 );
 400335c:	01c00044 	movi	r7,1
 4003360:	01800084 	movi	r6,2
 4003364:	01402484 	movi	r5,146
 4003368:	010100f4 	movhi	r4,1027
 400336c:	21312a04 	addi	r4,r4,-15192
 4003370:	40003c80 	call	40003c8 <draw>
				draw(one, COLOR08_GRAY, 1,1 );
 4003374:	01c00044 	movi	r7,1
 4003378:	01800044 	movi	r6,1
 400337c:	01402484 	movi	r5,146
 4003380:	010100f4 	movhi	r4,1027
 4003384:	2132aa04 	addi	r4,r4,-13656
 4003388:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400338c:	00c00044 	movi	r3,1
 4003390:	008200b4 	movhi	r2,2050
 4003394:	10841804 	addi	r2,r2,4192
 4003398:	10c00035 	stwio	r3,0(r2)
			}

			if(x==11)//11
 400339c:	e0b7c117 	ldw	r2,-8444(fp)
 40033a0:	108002d8 	cmpnei	r2,r2,11
 40033a4:	10001c1e 	bne	r2,zero,4003418 <main+0x2e44>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 40033a8:	e0b95e04 	addi	r2,fp,-6792
 40033ac:	01c00044 	movi	r7,1
 40033b0:	01800084 	movi	r6,2
 40033b4:	000b883a 	mov	r5,zero
 40033b8:	1009883a 	mov	r4,r2
 40033bc:	40003c80 	call	40003c8 <draw>
				draw(white, COLOR08_BLACK, 1,1 );
 40033c0:	e0b95e04 	addi	r2,fp,-6792
 40033c4:	01c00044 	movi	r7,1
 40033c8:	01800044 	movi	r6,1
 40033cc:	000b883a 	mov	r5,zero
 40033d0:	1009883a 	mov	r4,r2
 40033d4:	40003c80 	call	40003c8 <draw>
				draw(one, COLOR08_GRAY, 2,1 );
 40033d8:	01c00044 	movi	r7,1
 40033dc:	01800084 	movi	r6,2
 40033e0:	01402484 	movi	r5,146
 40033e4:	010100f4 	movhi	r4,1027
 40033e8:	2132aa04 	addi	r4,r4,-13656
 40033ec:	40003c80 	call	40003c8 <draw>
				draw(one, COLOR08_GRAY, 1,1 );
 40033f0:	01c00044 	movi	r7,1
 40033f4:	01800044 	movi	r6,1
 40033f8:	01402484 	movi	r5,146
 40033fc:	010100f4 	movhi	r4,1027
 4003400:	2132aa04 	addi	r4,r4,-13656
 4003404:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4003408:	00c00044 	movi	r3,1
 400340c:	008200b4 	movhi	r2,2050
 4003410:	10841804 	addi	r2,r2,4192
 4003414:	10c00035 	stwio	r3,0(r2)
			}

			if(x==12)//12
 4003418:	e0b7c117 	ldw	r2,-8444(fp)
 400341c:	10800318 	cmpnei	r2,r2,12
 4003420:	10001c1e 	bne	r2,zero,4003494 <main+0x2ec0>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 4003424:	e0b95e04 	addi	r2,fp,-6792
 4003428:	01c00044 	movi	r7,1
 400342c:	01800084 	movi	r6,2
 4003430:	000b883a 	mov	r5,zero
 4003434:	1009883a 	mov	r4,r2
 4003438:	40003c80 	call	40003c8 <draw>
				draw(white, COLOR08_BLACK, 1,1 );
 400343c:	e0b95e04 	addi	r2,fp,-6792
 4003440:	01c00044 	movi	r7,1
 4003444:	01800044 	movi	r6,1
 4003448:	000b883a 	mov	r5,zero
 400344c:	1009883a 	mov	r4,r2
 4003450:	40003c80 	call	40003c8 <draw>
				draw(two, COLOR08_GRAY, 2,1 );
 4003454:	01c00044 	movi	r7,1
 4003458:	01800084 	movi	r6,2
 400345c:	01402484 	movi	r5,146
 4003460:	010100f4 	movhi	r4,1027
 4003464:	21342a04 	addi	r4,r4,-12120
 4003468:	40003c80 	call	40003c8 <draw>
				draw(one, COLOR08_GRAY, 1,1 );
 400346c:	01c00044 	movi	r7,1
 4003470:	01800044 	movi	r6,1
 4003474:	01402484 	movi	r5,146
 4003478:	010100f4 	movhi	r4,1027
 400347c:	2132aa04 	addi	r4,r4,-13656
 4003480:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4003484:	00c00044 	movi	r3,1
 4003488:	008200b4 	movhi	r2,2050
 400348c:	10841804 	addi	r2,r2,4192
 4003490:	10c00035 	stwio	r3,0(r2)
			}

			if(x==13)//13
 4003494:	e0b7c117 	ldw	r2,-8444(fp)
 4003498:	10800358 	cmpnei	r2,r2,13
 400349c:	10001c1e 	bne	r2,zero,4003510 <main+0x2f3c>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 40034a0:	e0b95e04 	addi	r2,fp,-6792
 40034a4:	01c00044 	movi	r7,1
 40034a8:	01800084 	movi	r6,2
 40034ac:	000b883a 	mov	r5,zero
 40034b0:	1009883a 	mov	r4,r2
 40034b4:	40003c80 	call	40003c8 <draw>
				draw(white, COLOR08_BLACK, 1,1 );
 40034b8:	e0b95e04 	addi	r2,fp,-6792
 40034bc:	01c00044 	movi	r7,1
 40034c0:	01800044 	movi	r6,1
 40034c4:	000b883a 	mov	r5,zero
 40034c8:	1009883a 	mov	r4,r2
 40034cc:	40003c80 	call	40003c8 <draw>
				draw(three, COLOR08_GRAY, 2,1 );
 40034d0:	01c00044 	movi	r7,1
 40034d4:	01800084 	movi	r6,2
 40034d8:	01402484 	movi	r5,146
 40034dc:	010100f4 	movhi	r4,1027
 40034e0:	2135aa04 	addi	r4,r4,-10584
 40034e4:	40003c80 	call	40003c8 <draw>
				draw(one, COLOR08_GRAY, 1,1 );
 40034e8:	01c00044 	movi	r7,1
 40034ec:	01800044 	movi	r6,1
 40034f0:	01402484 	movi	r5,146
 40034f4:	010100f4 	movhi	r4,1027
 40034f8:	2132aa04 	addi	r4,r4,-13656
 40034fc:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4003500:	00c00044 	movi	r3,1
 4003504:	008200b4 	movhi	r2,2050
 4003508:	10841804 	addi	r2,r2,4192
 400350c:	10c00035 	stwio	r3,0(r2)
			}

			if(x==14)//14
 4003510:	e0b7c117 	ldw	r2,-8444(fp)
 4003514:	10800398 	cmpnei	r2,r2,14
 4003518:	10001c1e 	bne	r2,zero,400358c <main+0x2fb8>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 400351c:	e0b95e04 	addi	r2,fp,-6792
 4003520:	01c00044 	movi	r7,1
 4003524:	01800084 	movi	r6,2
 4003528:	000b883a 	mov	r5,zero
 400352c:	1009883a 	mov	r4,r2
 4003530:	40003c80 	call	40003c8 <draw>
				draw(white, COLOR08_BLACK, 1,1 );
 4003534:	e0b95e04 	addi	r2,fp,-6792
 4003538:	01c00044 	movi	r7,1
 400353c:	01800044 	movi	r6,1
 4003540:	000b883a 	mov	r5,zero
 4003544:	1009883a 	mov	r4,r2
 4003548:	40003c80 	call	40003c8 <draw>
				draw(four, COLOR08_GRAY, 2,1 );
 400354c:	01c00044 	movi	r7,1
 4003550:	01800084 	movi	r6,2
 4003554:	01402484 	movi	r5,146
 4003558:	010100f4 	movhi	r4,1027
 400355c:	21372a04 	addi	r4,r4,-9048
 4003560:	40003c80 	call	40003c8 <draw>
				draw(one, COLOR08_GRAY, 1,1 );
 4003564:	01c00044 	movi	r7,1
 4003568:	01800044 	movi	r6,1
 400356c:	01402484 	movi	r5,146
 4003570:	010100f4 	movhi	r4,1027
 4003574:	2132aa04 	addi	r4,r4,-13656
 4003578:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400357c:	00c00044 	movi	r3,1
 4003580:	008200b4 	movhi	r2,2050
 4003584:	10841804 	addi	r2,r2,4192
 4003588:	10c00035 	stwio	r3,0(r2)
			}

			if(x==15)//15
 400358c:	e0b7c117 	ldw	r2,-8444(fp)
 4003590:	108003d8 	cmpnei	r2,r2,15
 4003594:	10001c1e 	bne	r2,zero,4003608 <main+0x3034>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 4003598:	e0b95e04 	addi	r2,fp,-6792
 400359c:	01c00044 	movi	r7,1
 40035a0:	01800084 	movi	r6,2
 40035a4:	000b883a 	mov	r5,zero
 40035a8:	1009883a 	mov	r4,r2
 40035ac:	40003c80 	call	40003c8 <draw>
				draw(white, COLOR08_BLACK, 1,1 );
 40035b0:	e0b95e04 	addi	r2,fp,-6792
 40035b4:	01c00044 	movi	r7,1
 40035b8:	01800044 	movi	r6,1
 40035bc:	000b883a 	mov	r5,zero
 40035c0:	1009883a 	mov	r4,r2
 40035c4:	40003c80 	call	40003c8 <draw>
				draw(five, COLOR08_GRAY, 2,1 );
 40035c8:	01c00044 	movi	r7,1
 40035cc:	01800084 	movi	r6,2
 40035d0:	01402484 	movi	r5,146
 40035d4:	010100f4 	movhi	r4,1027
 40035d8:	2138aa04 	addi	r4,r4,-7512
 40035dc:	40003c80 	call	40003c8 <draw>
				draw(one, COLOR08_GRAY, 1,1 );
 40035e0:	01c00044 	movi	r7,1
 40035e4:	01800044 	movi	r6,1
 40035e8:	01402484 	movi	r5,146
 40035ec:	010100f4 	movhi	r4,1027
 40035f0:	2132aa04 	addi	r4,r4,-13656
 40035f4:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40035f8:	00c00044 	movi	r3,1
 40035fc:	008200b4 	movhi	r2,2050
 4003600:	10841804 	addi	r2,r2,4192
 4003604:	10c00035 	stwio	r3,0(r2)
			}

			if(x==16)//16
 4003608:	e0b7c117 	ldw	r2,-8444(fp)
 400360c:	10800418 	cmpnei	r2,r2,16
 4003610:	10001c1e 	bne	r2,zero,4003684 <main+0x30b0>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 4003614:	e0b95e04 	addi	r2,fp,-6792
 4003618:	01c00044 	movi	r7,1
 400361c:	01800084 	movi	r6,2
 4003620:	000b883a 	mov	r5,zero
 4003624:	1009883a 	mov	r4,r2
 4003628:	40003c80 	call	40003c8 <draw>
				draw(white, COLOR08_BLACK, 1,1 );
 400362c:	e0b95e04 	addi	r2,fp,-6792
 4003630:	01c00044 	movi	r7,1
 4003634:	01800044 	movi	r6,1
 4003638:	000b883a 	mov	r5,zero
 400363c:	1009883a 	mov	r4,r2
 4003640:	40003c80 	call	40003c8 <draw>
				draw(six, COLOR08_GRAY, 2,1 );
 4003644:	01c00044 	movi	r7,1
 4003648:	01800084 	movi	r6,2
 400364c:	01402484 	movi	r5,146
 4003650:	010100f4 	movhi	r4,1027
 4003654:	213a2a04 	addi	r4,r4,-5976
 4003658:	40003c80 	call	40003c8 <draw>
				draw(one, COLOR08_GRAY, 1,1 );
 400365c:	01c00044 	movi	r7,1
 4003660:	01800044 	movi	r6,1
 4003664:	01402484 	movi	r5,146
 4003668:	010100f4 	movhi	r4,1027
 400366c:	2132aa04 	addi	r4,r4,-13656
 4003670:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4003674:	00c00044 	movi	r3,1
 4003678:	008200b4 	movhi	r2,2050
 400367c:	10841804 	addi	r2,r2,4192
 4003680:	10c00035 	stwio	r3,0(r2)
			}

			if(x==17)//17
 4003684:	e0b7c117 	ldw	r2,-8444(fp)
 4003688:	10800458 	cmpnei	r2,r2,17
 400368c:	10001c1e 	bne	r2,zero,4003700 <main+0x312c>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 4003690:	e0b95e04 	addi	r2,fp,-6792
 4003694:	01c00044 	movi	r7,1
 4003698:	01800084 	movi	r6,2
 400369c:	000b883a 	mov	r5,zero
 40036a0:	1009883a 	mov	r4,r2
 40036a4:	40003c80 	call	40003c8 <draw>
				draw(white, COLOR08_BLACK, 1,1 );
 40036a8:	e0b95e04 	addi	r2,fp,-6792
 40036ac:	01c00044 	movi	r7,1
 40036b0:	01800044 	movi	r6,1
 40036b4:	000b883a 	mov	r5,zero
 40036b8:	1009883a 	mov	r4,r2
 40036bc:	40003c80 	call	40003c8 <draw>
				draw(seven, COLOR08_GRAY, 2,1 );
 40036c0:	01c00044 	movi	r7,1
 40036c4:	01800084 	movi	r6,2
 40036c8:	01402484 	movi	r5,146
 40036cc:	010100f4 	movhi	r4,1027
 40036d0:	213baa04 	addi	r4,r4,-4440
 40036d4:	40003c80 	call	40003c8 <draw>
				draw(one, COLOR08_GRAY, 1,1 );
 40036d8:	01c00044 	movi	r7,1
 40036dc:	01800044 	movi	r6,1
 40036e0:	01402484 	movi	r5,146
 40036e4:	010100f4 	movhi	r4,1027
 40036e8:	2132aa04 	addi	r4,r4,-13656
 40036ec:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40036f0:	00c00044 	movi	r3,1
 40036f4:	008200b4 	movhi	r2,2050
 40036f8:	10841804 	addi	r2,r2,4192
 40036fc:	10c00035 	stwio	r3,0(r2)
			}

			if(x==18)//18
 4003700:	e0b7c117 	ldw	r2,-8444(fp)
 4003704:	10800498 	cmpnei	r2,r2,18
 4003708:	10001c1e 	bne	r2,zero,400377c <main+0x31a8>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 400370c:	e0b95e04 	addi	r2,fp,-6792
 4003710:	01c00044 	movi	r7,1
 4003714:	01800084 	movi	r6,2
 4003718:	000b883a 	mov	r5,zero
 400371c:	1009883a 	mov	r4,r2
 4003720:	40003c80 	call	40003c8 <draw>
				draw(white, COLOR08_BLACK, 1,1 );
 4003724:	e0b95e04 	addi	r2,fp,-6792
 4003728:	01c00044 	movi	r7,1
 400372c:	01800044 	movi	r6,1
 4003730:	000b883a 	mov	r5,zero
 4003734:	1009883a 	mov	r4,r2
 4003738:	40003c80 	call	40003c8 <draw>
				draw(eight, COLOR08_GRAY, 2,1 );
 400373c:	01c00044 	movi	r7,1
 4003740:	01800084 	movi	r6,2
 4003744:	01402484 	movi	r5,146
 4003748:	010100f4 	movhi	r4,1027
 400374c:	213d2a04 	addi	r4,r4,-2904
 4003750:	40003c80 	call	40003c8 <draw>
				draw(one, COLOR08_GRAY, 1,1 );
 4003754:	01c00044 	movi	r7,1
 4003758:	01800044 	movi	r6,1
 400375c:	01402484 	movi	r5,146
 4003760:	010100f4 	movhi	r4,1027
 4003764:	2132aa04 	addi	r4,r4,-13656
 4003768:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400376c:	00c00044 	movi	r3,1
 4003770:	008200b4 	movhi	r2,2050
 4003774:	10841804 	addi	r2,r2,4192
 4003778:	10c00035 	stwio	r3,0(r2)
			}

			if(x==19)//19
 400377c:	e0b7c117 	ldw	r2,-8444(fp)
 4003780:	108004d8 	cmpnei	r2,r2,19
 4003784:	10001c1e 	bne	r2,zero,40037f8 <main+0x3224>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 4003788:	e0b95e04 	addi	r2,fp,-6792
 400378c:	01c00044 	movi	r7,1
 4003790:	01800084 	movi	r6,2
 4003794:	000b883a 	mov	r5,zero
 4003798:	1009883a 	mov	r4,r2
 400379c:	40003c80 	call	40003c8 <draw>
				draw(white, COLOR08_BLACK, 1,1 );
 40037a0:	e0b95e04 	addi	r2,fp,-6792
 40037a4:	01c00044 	movi	r7,1
 40037a8:	01800044 	movi	r6,1
 40037ac:	000b883a 	mov	r5,zero
 40037b0:	1009883a 	mov	r4,r2
 40037b4:	40003c80 	call	40003c8 <draw>
				draw(nine, COLOR08_GRAY, 2,1 );
 40037b8:	01c00044 	movi	r7,1
 40037bc:	01800084 	movi	r6,2
 40037c0:	01402484 	movi	r5,146
 40037c4:	010100f4 	movhi	r4,1027
 40037c8:	213eaa04 	addi	r4,r4,-1368
 40037cc:	40003c80 	call	40003c8 <draw>
				draw(one, COLOR08_GRAY, 1,1 );
 40037d0:	01c00044 	movi	r7,1
 40037d4:	01800044 	movi	r6,1
 40037d8:	01402484 	movi	r5,146
 40037dc:	010100f4 	movhi	r4,1027
 40037e0:	2132aa04 	addi	r4,r4,-13656
 40037e4:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40037e8:	00c00044 	movi	r3,1
 40037ec:	008200b4 	movhi	r2,2050
 40037f0:	10841804 	addi	r2,r2,4192
 40037f4:	10c00035 	stwio	r3,0(r2)
			}


		}
		if(button==4 && x<19)//right
 40037f8:	e0b7da17 	ldw	r2,-8344(fp)
 40037fc:	10800118 	cmpnei	r2,r2,4
 4003800:	1002161e 	bne	r2,zero,400405c <main+0x3a88>
 4003804:	e0b7c117 	ldw	r2,-8444(fp)
 4003808:	108004c8 	cmpgei	r2,r2,19
 400380c:	1002131e 	bne	r2,zero,400405c <main+0x3a88>
		{
			x++;
 4003810:	e0b7c117 	ldw	r2,-8444(fp)
 4003814:	10800044 	addi	r2,r2,1
 4003818:	e0b7c115 	stw	r2,-8444(fp)
			draw(square, COLOR08_BLACK, x-1,y+2);
 400381c:	e0b7c117 	ldw	r2,-8444(fp)
 4003820:	10ffffc4 	addi	r3,r2,-1
 4003824:	e0b7c217 	ldw	r2,-8440(fp)
 4003828:	11000084 	addi	r4,r2,2
 400382c:	e0b7de04 	addi	r2,fp,-8328
 4003830:	200f883a 	mov	r7,r4
 4003834:	180d883a 	mov	r6,r3
 4003838:	000b883a 	mov	r5,zero
 400383c:	1009883a 	mov	r4,r2
 4003840:	40003c80 	call	40003c8 <draw>
			printf("x: %i , y: %i , number %i \n", x, y, gameboard[y][x]);
 4003844:	e0b7c217 	ldw	r2,-8440(fp)
 4003848:	01400504 	movi	r5,20
 400384c:	1009883a 	mov	r4,r2
 4003850:	40191000 	call	4019100 <__mulsi3>
 4003854:	1007883a 	mov	r3,r2
 4003858:	e0b7c117 	ldw	r2,-8444(fp)
 400385c:	1885883a 	add	r2,r3,r2
 4003860:	1085883a 	add	r2,r2,r2
 4003864:	1085883a 	add	r2,r2,r2
 4003868:	e0f7c104 	addi	r3,fp,-8444
 400386c:	1885883a 	add	r2,r3,r2
 4003870:	10879d04 	addi	r2,r2,7796
 4003874:	10800017 	ldw	r2,0(r2)
 4003878:	100f883a 	mov	r7,r2
 400387c:	e1b7c217 	ldw	r6,-8440(fp)
 4003880:	e177c117 	ldw	r5,-8444(fp)
 4003884:	010100f4 	movhi	r4,1027
 4003888:	212a7504 	addi	r4,r4,-22060
 400388c:	40193c80 	call	40193c8 <printf>

			//x chords
			if(x==0)//0
 4003890:	e0b7c117 	ldw	r2,-8444(fp)
 4003894:	1000101e 	bne	r2,zero,40038d8 <main+0x3304>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 4003898:	e0b95e04 	addi	r2,fp,-6792
 400389c:	01c00044 	movi	r7,1
 40038a0:	01800084 	movi	r6,2
 40038a4:	000b883a 	mov	r5,zero
 40038a8:	1009883a 	mov	r4,r2
 40038ac:	40003c80 	call	40003c8 <draw>
				draw(zero, COLOR08_GRAY, 2,1 );
 40038b0:	01c00044 	movi	r7,1
 40038b4:	01800084 	movi	r6,2
 40038b8:	01402484 	movi	r5,146
 40038bc:	010100f4 	movhi	r4,1027
 40038c0:	21312a04 	addi	r4,r4,-15192
 40038c4:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40038c8:	00c00044 	movi	r3,1
 40038cc:	008200b4 	movhi	r2,2050
 40038d0:	10841804 	addi	r2,r2,4192
 40038d4:	10c00035 	stwio	r3,0(r2)

			}

			if(x==1)//1
 40038d8:	e0b7c117 	ldw	r2,-8444(fp)
 40038dc:	10800058 	cmpnei	r2,r2,1
 40038e0:	1000101e 	bne	r2,zero,4003924 <main+0x3350>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 40038e4:	e0b95e04 	addi	r2,fp,-6792
 40038e8:	01c00044 	movi	r7,1
 40038ec:	01800084 	movi	r6,2
 40038f0:	000b883a 	mov	r5,zero
 40038f4:	1009883a 	mov	r4,r2
 40038f8:	40003c80 	call	40003c8 <draw>
				draw(one, COLOR08_GRAY, 2,1 );
 40038fc:	01c00044 	movi	r7,1
 4003900:	01800084 	movi	r6,2
 4003904:	01402484 	movi	r5,146
 4003908:	010100f4 	movhi	r4,1027
 400390c:	2132aa04 	addi	r4,r4,-13656
 4003910:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4003914:	00c00044 	movi	r3,1
 4003918:	008200b4 	movhi	r2,2050
 400391c:	10841804 	addi	r2,r2,4192
 4003920:	10c00035 	stwio	r3,0(r2)
			}

			if(x==2)//2
 4003924:	e0b7c117 	ldw	r2,-8444(fp)
 4003928:	10800098 	cmpnei	r2,r2,2
 400392c:	1000101e 	bne	r2,zero,4003970 <main+0x339c>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 4003930:	e0b95e04 	addi	r2,fp,-6792
 4003934:	01c00044 	movi	r7,1
 4003938:	01800084 	movi	r6,2
 400393c:	000b883a 	mov	r5,zero
 4003940:	1009883a 	mov	r4,r2
 4003944:	40003c80 	call	40003c8 <draw>
				draw(two, COLOR08_GRAY, 2,1 );
 4003948:	01c00044 	movi	r7,1
 400394c:	01800084 	movi	r6,2
 4003950:	01402484 	movi	r5,146
 4003954:	010100f4 	movhi	r4,1027
 4003958:	21342a04 	addi	r4,r4,-12120
 400395c:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4003960:	00c00044 	movi	r3,1
 4003964:	008200b4 	movhi	r2,2050
 4003968:	10841804 	addi	r2,r2,4192
 400396c:	10c00035 	stwio	r3,0(r2)
			}

			if(x==3)//3
 4003970:	e0b7c117 	ldw	r2,-8444(fp)
 4003974:	108000d8 	cmpnei	r2,r2,3
 4003978:	1000101e 	bne	r2,zero,40039bc <main+0x33e8>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 400397c:	e0b95e04 	addi	r2,fp,-6792
 4003980:	01c00044 	movi	r7,1
 4003984:	01800084 	movi	r6,2
 4003988:	000b883a 	mov	r5,zero
 400398c:	1009883a 	mov	r4,r2
 4003990:	40003c80 	call	40003c8 <draw>
				draw(three, COLOR08_GRAY, 2,1 );
 4003994:	01c00044 	movi	r7,1
 4003998:	01800084 	movi	r6,2
 400399c:	01402484 	movi	r5,146
 40039a0:	010100f4 	movhi	r4,1027
 40039a4:	2135aa04 	addi	r4,r4,-10584
 40039a8:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40039ac:	00c00044 	movi	r3,1
 40039b0:	008200b4 	movhi	r2,2050
 40039b4:	10841804 	addi	r2,r2,4192
 40039b8:	10c00035 	stwio	r3,0(r2)
			}

			if(x==4)//4
 40039bc:	e0b7c117 	ldw	r2,-8444(fp)
 40039c0:	10800118 	cmpnei	r2,r2,4
 40039c4:	1000101e 	bne	r2,zero,4003a08 <main+0x3434>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 40039c8:	e0b95e04 	addi	r2,fp,-6792
 40039cc:	01c00044 	movi	r7,1
 40039d0:	01800084 	movi	r6,2
 40039d4:	000b883a 	mov	r5,zero
 40039d8:	1009883a 	mov	r4,r2
 40039dc:	40003c80 	call	40003c8 <draw>
				draw(four, COLOR08_GRAY, 2,1 );
 40039e0:	01c00044 	movi	r7,1
 40039e4:	01800084 	movi	r6,2
 40039e8:	01402484 	movi	r5,146
 40039ec:	010100f4 	movhi	r4,1027
 40039f0:	21372a04 	addi	r4,r4,-9048
 40039f4:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40039f8:	00c00044 	movi	r3,1
 40039fc:	008200b4 	movhi	r2,2050
 4003a00:	10841804 	addi	r2,r2,4192
 4003a04:	10c00035 	stwio	r3,0(r2)
			}

			if(x==5)//5
 4003a08:	e0b7c117 	ldw	r2,-8444(fp)
 4003a0c:	10800158 	cmpnei	r2,r2,5
 4003a10:	1000101e 	bne	r2,zero,4003a54 <main+0x3480>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 4003a14:	e0b95e04 	addi	r2,fp,-6792
 4003a18:	01c00044 	movi	r7,1
 4003a1c:	01800084 	movi	r6,2
 4003a20:	000b883a 	mov	r5,zero
 4003a24:	1009883a 	mov	r4,r2
 4003a28:	40003c80 	call	40003c8 <draw>
				draw(five, COLOR08_GRAY, 2,1 );
 4003a2c:	01c00044 	movi	r7,1
 4003a30:	01800084 	movi	r6,2
 4003a34:	01402484 	movi	r5,146
 4003a38:	010100f4 	movhi	r4,1027
 4003a3c:	2138aa04 	addi	r4,r4,-7512
 4003a40:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4003a44:	00c00044 	movi	r3,1
 4003a48:	008200b4 	movhi	r2,2050
 4003a4c:	10841804 	addi	r2,r2,4192
 4003a50:	10c00035 	stwio	r3,0(r2)
			}

			if(x==6)//6
 4003a54:	e0b7c117 	ldw	r2,-8444(fp)
 4003a58:	10800198 	cmpnei	r2,r2,6
 4003a5c:	1000101e 	bne	r2,zero,4003aa0 <main+0x34cc>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 4003a60:	e0b95e04 	addi	r2,fp,-6792
 4003a64:	01c00044 	movi	r7,1
 4003a68:	01800084 	movi	r6,2
 4003a6c:	000b883a 	mov	r5,zero
 4003a70:	1009883a 	mov	r4,r2
 4003a74:	40003c80 	call	40003c8 <draw>
				draw(six, COLOR08_GRAY, 2,1 );
 4003a78:	01c00044 	movi	r7,1
 4003a7c:	01800084 	movi	r6,2
 4003a80:	01402484 	movi	r5,146
 4003a84:	010100f4 	movhi	r4,1027
 4003a88:	213a2a04 	addi	r4,r4,-5976
 4003a8c:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4003a90:	00c00044 	movi	r3,1
 4003a94:	008200b4 	movhi	r2,2050
 4003a98:	10841804 	addi	r2,r2,4192
 4003a9c:	10c00035 	stwio	r3,0(r2)
			}

			if(x==7)//7
 4003aa0:	e0b7c117 	ldw	r2,-8444(fp)
 4003aa4:	108001d8 	cmpnei	r2,r2,7
 4003aa8:	1000101e 	bne	r2,zero,4003aec <main+0x3518>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 4003aac:	e0b95e04 	addi	r2,fp,-6792
 4003ab0:	01c00044 	movi	r7,1
 4003ab4:	01800084 	movi	r6,2
 4003ab8:	000b883a 	mov	r5,zero
 4003abc:	1009883a 	mov	r4,r2
 4003ac0:	40003c80 	call	40003c8 <draw>
				draw(seven, COLOR08_GRAY, 2,1 );
 4003ac4:	01c00044 	movi	r7,1
 4003ac8:	01800084 	movi	r6,2
 4003acc:	01402484 	movi	r5,146
 4003ad0:	010100f4 	movhi	r4,1027
 4003ad4:	213baa04 	addi	r4,r4,-4440
 4003ad8:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4003adc:	00c00044 	movi	r3,1
 4003ae0:	008200b4 	movhi	r2,2050
 4003ae4:	10841804 	addi	r2,r2,4192
 4003ae8:	10c00035 	stwio	r3,0(r2)
			}

			if(x==8)//8
 4003aec:	e0b7c117 	ldw	r2,-8444(fp)
 4003af0:	10800218 	cmpnei	r2,r2,8
 4003af4:	1000101e 	bne	r2,zero,4003b38 <main+0x3564>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 4003af8:	e0b95e04 	addi	r2,fp,-6792
 4003afc:	01c00044 	movi	r7,1
 4003b00:	01800084 	movi	r6,2
 4003b04:	000b883a 	mov	r5,zero
 4003b08:	1009883a 	mov	r4,r2
 4003b0c:	40003c80 	call	40003c8 <draw>
				draw(eight, COLOR08_GRAY, 2,1 );
 4003b10:	01c00044 	movi	r7,1
 4003b14:	01800084 	movi	r6,2
 4003b18:	01402484 	movi	r5,146
 4003b1c:	010100f4 	movhi	r4,1027
 4003b20:	213d2a04 	addi	r4,r4,-2904
 4003b24:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4003b28:	00c00044 	movi	r3,1
 4003b2c:	008200b4 	movhi	r2,2050
 4003b30:	10841804 	addi	r2,r2,4192
 4003b34:	10c00035 	stwio	r3,0(r2)
			}

			if(x==9)//9
 4003b38:	e0b7c117 	ldw	r2,-8444(fp)
 4003b3c:	10800258 	cmpnei	r2,r2,9
 4003b40:	1000101e 	bne	r2,zero,4003b84 <main+0x35b0>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 4003b44:	e0b95e04 	addi	r2,fp,-6792
 4003b48:	01c00044 	movi	r7,1
 4003b4c:	01800084 	movi	r6,2
 4003b50:	000b883a 	mov	r5,zero
 4003b54:	1009883a 	mov	r4,r2
 4003b58:	40003c80 	call	40003c8 <draw>
				draw(nine, COLOR08_GRAY, 2,1 );
 4003b5c:	01c00044 	movi	r7,1
 4003b60:	01800084 	movi	r6,2
 4003b64:	01402484 	movi	r5,146
 4003b68:	010100f4 	movhi	r4,1027
 4003b6c:	213eaa04 	addi	r4,r4,-1368
 4003b70:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4003b74:	00c00044 	movi	r3,1
 4003b78:	008200b4 	movhi	r2,2050
 4003b7c:	10841804 	addi	r2,r2,4192
 4003b80:	10c00035 	stwio	r3,0(r2)
			}

			if(x==10)//10
 4003b84:	e0b7c117 	ldw	r2,-8444(fp)
 4003b88:	10800298 	cmpnei	r2,r2,10
 4003b8c:	10001c1e 	bne	r2,zero,4003c00 <main+0x362c>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 4003b90:	e0b95e04 	addi	r2,fp,-6792
 4003b94:	01c00044 	movi	r7,1
 4003b98:	01800084 	movi	r6,2
 4003b9c:	000b883a 	mov	r5,zero
 4003ba0:	1009883a 	mov	r4,r2
 4003ba4:	40003c80 	call	40003c8 <draw>
				draw(white, COLOR08_BLACK, 1,1 );
 4003ba8:	e0b95e04 	addi	r2,fp,-6792
 4003bac:	01c00044 	movi	r7,1
 4003bb0:	01800044 	movi	r6,1
 4003bb4:	000b883a 	mov	r5,zero
 4003bb8:	1009883a 	mov	r4,r2
 4003bbc:	40003c80 	call	40003c8 <draw>
				draw(zero, COLOR08_GRAY, 2,1 );
 4003bc0:	01c00044 	movi	r7,1
 4003bc4:	01800084 	movi	r6,2
 4003bc8:	01402484 	movi	r5,146
 4003bcc:	010100f4 	movhi	r4,1027
 4003bd0:	21312a04 	addi	r4,r4,-15192
 4003bd4:	40003c80 	call	40003c8 <draw>
				draw(one, COLOR08_GRAY, 1,1 );
 4003bd8:	01c00044 	movi	r7,1
 4003bdc:	01800044 	movi	r6,1
 4003be0:	01402484 	movi	r5,146
 4003be4:	010100f4 	movhi	r4,1027
 4003be8:	2132aa04 	addi	r4,r4,-13656
 4003bec:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4003bf0:	00c00044 	movi	r3,1
 4003bf4:	008200b4 	movhi	r2,2050
 4003bf8:	10841804 	addi	r2,r2,4192
 4003bfc:	10c00035 	stwio	r3,0(r2)
			}

			if(x==11)//11
 4003c00:	e0b7c117 	ldw	r2,-8444(fp)
 4003c04:	108002d8 	cmpnei	r2,r2,11
 4003c08:	10001c1e 	bne	r2,zero,4003c7c <main+0x36a8>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 4003c0c:	e0b95e04 	addi	r2,fp,-6792
 4003c10:	01c00044 	movi	r7,1
 4003c14:	01800084 	movi	r6,2
 4003c18:	000b883a 	mov	r5,zero
 4003c1c:	1009883a 	mov	r4,r2
 4003c20:	40003c80 	call	40003c8 <draw>
				draw(white, COLOR08_BLACK, 1,1 );
 4003c24:	e0b95e04 	addi	r2,fp,-6792
 4003c28:	01c00044 	movi	r7,1
 4003c2c:	01800044 	movi	r6,1
 4003c30:	000b883a 	mov	r5,zero
 4003c34:	1009883a 	mov	r4,r2
 4003c38:	40003c80 	call	40003c8 <draw>
				draw(one, COLOR08_GRAY, 2,1 );
 4003c3c:	01c00044 	movi	r7,1
 4003c40:	01800084 	movi	r6,2
 4003c44:	01402484 	movi	r5,146
 4003c48:	010100f4 	movhi	r4,1027
 4003c4c:	2132aa04 	addi	r4,r4,-13656
 4003c50:	40003c80 	call	40003c8 <draw>
				draw(one, COLOR08_GRAY, 1,1 );
 4003c54:	01c00044 	movi	r7,1
 4003c58:	01800044 	movi	r6,1
 4003c5c:	01402484 	movi	r5,146
 4003c60:	010100f4 	movhi	r4,1027
 4003c64:	2132aa04 	addi	r4,r4,-13656
 4003c68:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4003c6c:	00c00044 	movi	r3,1
 4003c70:	008200b4 	movhi	r2,2050
 4003c74:	10841804 	addi	r2,r2,4192
 4003c78:	10c00035 	stwio	r3,0(r2)
			}

			if(x==12)//12
 4003c7c:	e0b7c117 	ldw	r2,-8444(fp)
 4003c80:	10800318 	cmpnei	r2,r2,12
 4003c84:	10001c1e 	bne	r2,zero,4003cf8 <main+0x3724>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 4003c88:	e0b95e04 	addi	r2,fp,-6792
 4003c8c:	01c00044 	movi	r7,1
 4003c90:	01800084 	movi	r6,2
 4003c94:	000b883a 	mov	r5,zero
 4003c98:	1009883a 	mov	r4,r2
 4003c9c:	40003c80 	call	40003c8 <draw>
				draw(white, COLOR08_BLACK, 1,1 );
 4003ca0:	e0b95e04 	addi	r2,fp,-6792
 4003ca4:	01c00044 	movi	r7,1
 4003ca8:	01800044 	movi	r6,1
 4003cac:	000b883a 	mov	r5,zero
 4003cb0:	1009883a 	mov	r4,r2
 4003cb4:	40003c80 	call	40003c8 <draw>
				draw(two, COLOR08_GRAY, 2,1 );
 4003cb8:	01c00044 	movi	r7,1
 4003cbc:	01800084 	movi	r6,2
 4003cc0:	01402484 	movi	r5,146
 4003cc4:	010100f4 	movhi	r4,1027
 4003cc8:	21342a04 	addi	r4,r4,-12120
 4003ccc:	40003c80 	call	40003c8 <draw>
				draw(one, COLOR08_GRAY, 1,1 );
 4003cd0:	01c00044 	movi	r7,1
 4003cd4:	01800044 	movi	r6,1
 4003cd8:	01402484 	movi	r5,146
 4003cdc:	010100f4 	movhi	r4,1027
 4003ce0:	2132aa04 	addi	r4,r4,-13656
 4003ce4:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4003ce8:	00c00044 	movi	r3,1
 4003cec:	008200b4 	movhi	r2,2050
 4003cf0:	10841804 	addi	r2,r2,4192
 4003cf4:	10c00035 	stwio	r3,0(r2)
			}

			if(x==13)//13
 4003cf8:	e0b7c117 	ldw	r2,-8444(fp)
 4003cfc:	10800358 	cmpnei	r2,r2,13
 4003d00:	10001c1e 	bne	r2,zero,4003d74 <main+0x37a0>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 4003d04:	e0b95e04 	addi	r2,fp,-6792
 4003d08:	01c00044 	movi	r7,1
 4003d0c:	01800084 	movi	r6,2
 4003d10:	000b883a 	mov	r5,zero
 4003d14:	1009883a 	mov	r4,r2
 4003d18:	40003c80 	call	40003c8 <draw>
				draw(white, COLOR08_BLACK, 1,1 );
 4003d1c:	e0b95e04 	addi	r2,fp,-6792
 4003d20:	01c00044 	movi	r7,1
 4003d24:	01800044 	movi	r6,1
 4003d28:	000b883a 	mov	r5,zero
 4003d2c:	1009883a 	mov	r4,r2
 4003d30:	40003c80 	call	40003c8 <draw>
				draw(three, COLOR08_GRAY, 2,1 );
 4003d34:	01c00044 	movi	r7,1
 4003d38:	01800084 	movi	r6,2
 4003d3c:	01402484 	movi	r5,146
 4003d40:	010100f4 	movhi	r4,1027
 4003d44:	2135aa04 	addi	r4,r4,-10584
 4003d48:	40003c80 	call	40003c8 <draw>
				draw(one, COLOR08_GRAY, 1,1 );
 4003d4c:	01c00044 	movi	r7,1
 4003d50:	01800044 	movi	r6,1
 4003d54:	01402484 	movi	r5,146
 4003d58:	010100f4 	movhi	r4,1027
 4003d5c:	2132aa04 	addi	r4,r4,-13656
 4003d60:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4003d64:	00c00044 	movi	r3,1
 4003d68:	008200b4 	movhi	r2,2050
 4003d6c:	10841804 	addi	r2,r2,4192
 4003d70:	10c00035 	stwio	r3,0(r2)
			}

			if(x==14)//14
 4003d74:	e0b7c117 	ldw	r2,-8444(fp)
 4003d78:	10800398 	cmpnei	r2,r2,14
 4003d7c:	10001c1e 	bne	r2,zero,4003df0 <main+0x381c>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 4003d80:	e0b95e04 	addi	r2,fp,-6792
 4003d84:	01c00044 	movi	r7,1
 4003d88:	01800084 	movi	r6,2
 4003d8c:	000b883a 	mov	r5,zero
 4003d90:	1009883a 	mov	r4,r2
 4003d94:	40003c80 	call	40003c8 <draw>
				draw(white, COLOR08_BLACK, 1,1 );
 4003d98:	e0b95e04 	addi	r2,fp,-6792
 4003d9c:	01c00044 	movi	r7,1
 4003da0:	01800044 	movi	r6,1
 4003da4:	000b883a 	mov	r5,zero
 4003da8:	1009883a 	mov	r4,r2
 4003dac:	40003c80 	call	40003c8 <draw>
				draw(four, COLOR08_GRAY, 2,1 );
 4003db0:	01c00044 	movi	r7,1
 4003db4:	01800084 	movi	r6,2
 4003db8:	01402484 	movi	r5,146
 4003dbc:	010100f4 	movhi	r4,1027
 4003dc0:	21372a04 	addi	r4,r4,-9048
 4003dc4:	40003c80 	call	40003c8 <draw>
				draw(one, COLOR08_GRAY, 1,1 );
 4003dc8:	01c00044 	movi	r7,1
 4003dcc:	01800044 	movi	r6,1
 4003dd0:	01402484 	movi	r5,146
 4003dd4:	010100f4 	movhi	r4,1027
 4003dd8:	2132aa04 	addi	r4,r4,-13656
 4003ddc:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4003de0:	00c00044 	movi	r3,1
 4003de4:	008200b4 	movhi	r2,2050
 4003de8:	10841804 	addi	r2,r2,4192
 4003dec:	10c00035 	stwio	r3,0(r2)
			}

			if(x==15)//15
 4003df0:	e0b7c117 	ldw	r2,-8444(fp)
 4003df4:	108003d8 	cmpnei	r2,r2,15
 4003df8:	10001c1e 	bne	r2,zero,4003e6c <main+0x3898>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 4003dfc:	e0b95e04 	addi	r2,fp,-6792
 4003e00:	01c00044 	movi	r7,1
 4003e04:	01800084 	movi	r6,2
 4003e08:	000b883a 	mov	r5,zero
 4003e0c:	1009883a 	mov	r4,r2
 4003e10:	40003c80 	call	40003c8 <draw>
				draw(white, COLOR08_BLACK, 1,1 );
 4003e14:	e0b95e04 	addi	r2,fp,-6792
 4003e18:	01c00044 	movi	r7,1
 4003e1c:	01800044 	movi	r6,1
 4003e20:	000b883a 	mov	r5,zero
 4003e24:	1009883a 	mov	r4,r2
 4003e28:	40003c80 	call	40003c8 <draw>
				draw(five, COLOR08_GRAY, 2,1 );
 4003e2c:	01c00044 	movi	r7,1
 4003e30:	01800084 	movi	r6,2
 4003e34:	01402484 	movi	r5,146
 4003e38:	010100f4 	movhi	r4,1027
 4003e3c:	2138aa04 	addi	r4,r4,-7512
 4003e40:	40003c80 	call	40003c8 <draw>
				draw(one, COLOR08_GRAY, 1,1 );
 4003e44:	01c00044 	movi	r7,1
 4003e48:	01800044 	movi	r6,1
 4003e4c:	01402484 	movi	r5,146
 4003e50:	010100f4 	movhi	r4,1027
 4003e54:	2132aa04 	addi	r4,r4,-13656
 4003e58:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4003e5c:	00c00044 	movi	r3,1
 4003e60:	008200b4 	movhi	r2,2050
 4003e64:	10841804 	addi	r2,r2,4192
 4003e68:	10c00035 	stwio	r3,0(r2)
			}

			if(x==16)//16
 4003e6c:	e0b7c117 	ldw	r2,-8444(fp)
 4003e70:	10800418 	cmpnei	r2,r2,16
 4003e74:	10001c1e 	bne	r2,zero,4003ee8 <main+0x3914>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 4003e78:	e0b95e04 	addi	r2,fp,-6792
 4003e7c:	01c00044 	movi	r7,1
 4003e80:	01800084 	movi	r6,2
 4003e84:	000b883a 	mov	r5,zero
 4003e88:	1009883a 	mov	r4,r2
 4003e8c:	40003c80 	call	40003c8 <draw>
				draw(white, COLOR08_BLACK, 1,1 );
 4003e90:	e0b95e04 	addi	r2,fp,-6792
 4003e94:	01c00044 	movi	r7,1
 4003e98:	01800044 	movi	r6,1
 4003e9c:	000b883a 	mov	r5,zero
 4003ea0:	1009883a 	mov	r4,r2
 4003ea4:	40003c80 	call	40003c8 <draw>
				draw(six, COLOR08_GRAY, 2,1 );
 4003ea8:	01c00044 	movi	r7,1
 4003eac:	01800084 	movi	r6,2
 4003eb0:	01402484 	movi	r5,146
 4003eb4:	010100f4 	movhi	r4,1027
 4003eb8:	213a2a04 	addi	r4,r4,-5976
 4003ebc:	40003c80 	call	40003c8 <draw>
				draw(one, COLOR08_GRAY, 1,1 );
 4003ec0:	01c00044 	movi	r7,1
 4003ec4:	01800044 	movi	r6,1
 4003ec8:	01402484 	movi	r5,146
 4003ecc:	010100f4 	movhi	r4,1027
 4003ed0:	2132aa04 	addi	r4,r4,-13656
 4003ed4:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4003ed8:	00c00044 	movi	r3,1
 4003edc:	008200b4 	movhi	r2,2050
 4003ee0:	10841804 	addi	r2,r2,4192
 4003ee4:	10c00035 	stwio	r3,0(r2)
			}

			if(x==17)//17
 4003ee8:	e0b7c117 	ldw	r2,-8444(fp)
 4003eec:	10800458 	cmpnei	r2,r2,17
 4003ef0:	10001c1e 	bne	r2,zero,4003f64 <main+0x3990>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 4003ef4:	e0b95e04 	addi	r2,fp,-6792
 4003ef8:	01c00044 	movi	r7,1
 4003efc:	01800084 	movi	r6,2
 4003f00:	000b883a 	mov	r5,zero
 4003f04:	1009883a 	mov	r4,r2
 4003f08:	40003c80 	call	40003c8 <draw>
				draw(white, COLOR08_BLACK, 1,1 );
 4003f0c:	e0b95e04 	addi	r2,fp,-6792
 4003f10:	01c00044 	movi	r7,1
 4003f14:	01800044 	movi	r6,1
 4003f18:	000b883a 	mov	r5,zero
 4003f1c:	1009883a 	mov	r4,r2
 4003f20:	40003c80 	call	40003c8 <draw>
				draw(seven, COLOR08_GRAY, 2,1 );
 4003f24:	01c00044 	movi	r7,1
 4003f28:	01800084 	movi	r6,2
 4003f2c:	01402484 	movi	r5,146
 4003f30:	010100f4 	movhi	r4,1027
 4003f34:	213baa04 	addi	r4,r4,-4440
 4003f38:	40003c80 	call	40003c8 <draw>
				draw(one, COLOR08_GRAY, 1,1 );
 4003f3c:	01c00044 	movi	r7,1
 4003f40:	01800044 	movi	r6,1
 4003f44:	01402484 	movi	r5,146
 4003f48:	010100f4 	movhi	r4,1027
 4003f4c:	2132aa04 	addi	r4,r4,-13656
 4003f50:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4003f54:	00c00044 	movi	r3,1
 4003f58:	008200b4 	movhi	r2,2050
 4003f5c:	10841804 	addi	r2,r2,4192
 4003f60:	10c00035 	stwio	r3,0(r2)
			}

			if(x==18)//18
 4003f64:	e0b7c117 	ldw	r2,-8444(fp)
 4003f68:	10800498 	cmpnei	r2,r2,18
 4003f6c:	10001c1e 	bne	r2,zero,4003fe0 <main+0x3a0c>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 4003f70:	e0b95e04 	addi	r2,fp,-6792
 4003f74:	01c00044 	movi	r7,1
 4003f78:	01800084 	movi	r6,2
 4003f7c:	000b883a 	mov	r5,zero
 4003f80:	1009883a 	mov	r4,r2
 4003f84:	40003c80 	call	40003c8 <draw>
				draw(white, COLOR08_BLACK, 1,1 );
 4003f88:	e0b95e04 	addi	r2,fp,-6792
 4003f8c:	01c00044 	movi	r7,1
 4003f90:	01800044 	movi	r6,1
 4003f94:	000b883a 	mov	r5,zero
 4003f98:	1009883a 	mov	r4,r2
 4003f9c:	40003c80 	call	40003c8 <draw>
				draw(eight, COLOR08_GRAY, 2,1 );
 4003fa0:	01c00044 	movi	r7,1
 4003fa4:	01800084 	movi	r6,2
 4003fa8:	01402484 	movi	r5,146
 4003fac:	010100f4 	movhi	r4,1027
 4003fb0:	213d2a04 	addi	r4,r4,-2904
 4003fb4:	40003c80 	call	40003c8 <draw>
				draw(one, COLOR08_GRAY, 1,1 );
 4003fb8:	01c00044 	movi	r7,1
 4003fbc:	01800044 	movi	r6,1
 4003fc0:	01402484 	movi	r5,146
 4003fc4:	010100f4 	movhi	r4,1027
 4003fc8:	2132aa04 	addi	r4,r4,-13656
 4003fcc:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4003fd0:	00c00044 	movi	r3,1
 4003fd4:	008200b4 	movhi	r2,2050
 4003fd8:	10841804 	addi	r2,r2,4192
 4003fdc:	10c00035 	stwio	r3,0(r2)
			}

			if(x==19)//19
 4003fe0:	e0b7c117 	ldw	r2,-8444(fp)
 4003fe4:	108004d8 	cmpnei	r2,r2,19
 4003fe8:	10001c1e 	bne	r2,zero,400405c <main+0x3a88>
			{
				draw(white, COLOR08_BLACK, 2,1 );
 4003fec:	e0b95e04 	addi	r2,fp,-6792
 4003ff0:	01c00044 	movi	r7,1
 4003ff4:	01800084 	movi	r6,2
 4003ff8:	000b883a 	mov	r5,zero
 4003ffc:	1009883a 	mov	r4,r2
 4004000:	40003c80 	call	40003c8 <draw>
				draw(white, COLOR08_BLACK, 1,1 );
 4004004:	e0b95e04 	addi	r2,fp,-6792
 4004008:	01c00044 	movi	r7,1
 400400c:	01800044 	movi	r6,1
 4004010:	000b883a 	mov	r5,zero
 4004014:	1009883a 	mov	r4,r2
 4004018:	40003c80 	call	40003c8 <draw>
				draw(nine, COLOR08_GRAY, 2,1 );
 400401c:	01c00044 	movi	r7,1
 4004020:	01800084 	movi	r6,2
 4004024:	01402484 	movi	r5,146
 4004028:	010100f4 	movhi	r4,1027
 400402c:	213eaa04 	addi	r4,r4,-1368
 4004030:	40003c80 	call	40003c8 <draw>
				draw(one, COLOR08_GRAY, 1,1 );
 4004034:	01c00044 	movi	r7,1
 4004038:	01800044 	movi	r6,1
 400403c:	01402484 	movi	r5,146
 4004040:	010100f4 	movhi	r4,1027
 4004044:	2132aa04 	addi	r4,r4,-13656
 4004048:	40003c80 	call	40003c8 <draw>
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400404c:	00c00044 	movi	r3,1
 4004050:	008200b4 	movhi	r2,2050
 4004054:	10841804 	addi	r2,r2,4192
 4004058:	10c00035 	stwio	r3,0(r2)

		}


		//gameboard select
		if(button==5)//gameboard
 400405c:	e0b7da17 	ldw	r2,-8344(fp)
 4004060:	10800158 	cmpnei	r2,r2,5
 4004064:	10000126 	beq	r2,zero,400406c <main+0x3a98>
 4004068:	4014bf01 	jmpi	4014bf0 <main+0x1461c>

		{
			if(gameboard[y][x]==0)//0
 400406c:	e0b7c217 	ldw	r2,-8440(fp)
 4004070:	01400504 	movi	r5,20
 4004074:	1009883a 	mov	r4,r2
 4004078:	40191000 	call	4019100 <__mulsi3>
 400407c:	1007883a 	mov	r3,r2
 4004080:	e0b7c117 	ldw	r2,-8444(fp)
 4004084:	1885883a 	add	r2,r3,r2
 4004088:	1085883a 	add	r2,r2,r2
 400408c:	1085883a 	add	r2,r2,r2
 4004090:	e0f7c104 	addi	r3,fp,-8444
 4004094:	1885883a 	add	r2,r3,r2
 4004098:	10879d04 	addi	r2,r2,7796
 400409c:	10800017 	ldw	r2,0(r2)
 40040a0:	1007bb1e 	bne	r2,zero,4005f90 <main+0x59bc>
						{

							//horizontal0
							if ((gameboard [y][x]==gameboard [y][x+1] && gameboard [y][x+1]== gameboard [y][x+2]) || (gameboard[y][x]==0 && gameboard[y][x+1]==-10) )//(0,0,0)
 40040a4:	e0b7c217 	ldw	r2,-8440(fp)
 40040a8:	01400504 	movi	r5,20
 40040ac:	1009883a 	mov	r4,r2
 40040b0:	40191000 	call	4019100 <__mulsi3>
 40040b4:	1007883a 	mov	r3,r2
 40040b8:	e0b7c117 	ldw	r2,-8444(fp)
 40040bc:	1885883a 	add	r2,r3,r2
 40040c0:	1085883a 	add	r2,r2,r2
 40040c4:	1085883a 	add	r2,r2,r2
 40040c8:	e0f7c104 	addi	r3,fp,-8444
 40040cc:	1885883a 	add	r2,r3,r2
 40040d0:	10879d04 	addi	r2,r2,7796
 40040d4:	14000017 	ldw	r16,0(r2)
 40040d8:	e0b7c117 	ldw	r2,-8444(fp)
 40040dc:	14400044 	addi	r17,r2,1
 40040e0:	e0b7c217 	ldw	r2,-8440(fp)
 40040e4:	01400504 	movi	r5,20
 40040e8:	1009883a 	mov	r4,r2
 40040ec:	40191000 	call	4019100 <__mulsi3>
 40040f0:	1445883a 	add	r2,r2,r17
 40040f4:	1085883a 	add	r2,r2,r2
 40040f8:	1085883a 	add	r2,r2,r2
 40040fc:	e0f7c104 	addi	r3,fp,-8444
 4004100:	1885883a 	add	r2,r3,r2
 4004104:	10879d04 	addi	r2,r2,7796
 4004108:	10800017 	ldw	r2,0(r2)
 400410c:	80801b1e 	bne	r16,r2,400417c <main+0x3ba8>
 4004110:	e0b7c117 	ldw	r2,-8444(fp)
 4004114:	14000044 	addi	r16,r2,1
 4004118:	e0b7c217 	ldw	r2,-8440(fp)
 400411c:	01400504 	movi	r5,20
 4004120:	1009883a 	mov	r4,r2
 4004124:	40191000 	call	4019100 <__mulsi3>
 4004128:	1405883a 	add	r2,r2,r16
 400412c:	1085883a 	add	r2,r2,r2
 4004130:	1085883a 	add	r2,r2,r2
 4004134:	e0f7c104 	addi	r3,fp,-8444
 4004138:	1885883a 	add	r2,r3,r2
 400413c:	10879d04 	addi	r2,r2,7796
 4004140:	14000017 	ldw	r16,0(r2)
 4004144:	e0b7c117 	ldw	r2,-8444(fp)
 4004148:	14400084 	addi	r17,r2,2
 400414c:	e0b7c217 	ldw	r2,-8440(fp)
 4004150:	01400504 	movi	r5,20
 4004154:	1009883a 	mov	r4,r2
 4004158:	40191000 	call	4019100 <__mulsi3>
 400415c:	1445883a 	add	r2,r2,r17
 4004160:	1085883a 	add	r2,r2,r2
 4004164:	1085883a 	add	r2,r2,r2
 4004168:	e0f7c104 	addi	r3,fp,-8444
 400416c:	1885883a 	add	r2,r3,r2
 4004170:	10879d04 	addi	r2,r2,7796
 4004174:	10800017 	ldw	r2,0(r2)
 4004178:	80801d26 	beq	r16,r2,40041f0 <main+0x3c1c>
 400417c:	e0b7c217 	ldw	r2,-8440(fp)
 4004180:	01400504 	movi	r5,20
 4004184:	1009883a 	mov	r4,r2
 4004188:	40191000 	call	4019100 <__mulsi3>
 400418c:	1007883a 	mov	r3,r2
 4004190:	e0b7c117 	ldw	r2,-8444(fp)
 4004194:	1885883a 	add	r2,r3,r2
 4004198:	1085883a 	add	r2,r2,r2
 400419c:	1085883a 	add	r2,r2,r2
 40041a0:	e0f7c104 	addi	r3,fp,-8444
 40041a4:	1885883a 	add	r2,r3,r2
 40041a8:	10879d04 	addi	r2,r2,7796
 40041ac:	10800017 	ldw	r2,0(r2)
 40041b0:	1000311e 	bne	r2,zero,4004278 <main+0x3ca4>
 40041b4:	e0b7c117 	ldw	r2,-8444(fp)
 40041b8:	14000044 	addi	r16,r2,1
 40041bc:	e0b7c217 	ldw	r2,-8440(fp)
 40041c0:	01400504 	movi	r5,20
 40041c4:	1009883a 	mov	r4,r2
 40041c8:	40191000 	call	4019100 <__mulsi3>
 40041cc:	1405883a 	add	r2,r2,r16
 40041d0:	1085883a 	add	r2,r2,r2
 40041d4:	1085883a 	add	r2,r2,r2
 40041d8:	e0f7c104 	addi	r3,fp,-8444
 40041dc:	1885883a 	add	r2,r3,r2
 40041e0:	10879d04 	addi	r2,r2,7796
 40041e4:	10800017 	ldw	r2,0(r2)
 40041e8:	10bffd98 	cmpnei	r2,r2,-10
 40041ec:	1000221e 	bne	r2,zero,4004278 <main+0x3ca4>
							{
								draw(white, COLOR08_WHITE, x,y+2 );
 40041f0:	e0b7c217 	ldw	r2,-8440(fp)
 40041f4:	10c00084 	addi	r3,r2,2
 40041f8:	e0b95e04 	addi	r2,fp,-6792
 40041fc:	180f883a 	mov	r7,r3
 4004200:	e1b7c117 	ldw	r6,-8444(fp)
 4004204:	01403fc4 	movi	r5,255
 4004208:	1009883a 	mov	r4,r2
 400420c:	40003c80 	call	40003c8 <draw>
								draw(zero, COLOR08_BLACK, x,y+2 );
 4004210:	e0b7c217 	ldw	r2,-8440(fp)
 4004214:	10800084 	addi	r2,r2,2
 4004218:	100f883a 	mov	r7,r2
 400421c:	e1b7c117 	ldw	r6,-8444(fp)
 4004220:	000b883a 	mov	r5,zero
 4004224:	010100f4 	movhi	r4,1027
 4004228:	21312a04 	addi	r4,r4,-15192
 400422c:	40003c80 	call	40003c8 <draw>
								gameboard[y][x]=-10;
 4004230:	e0b7c217 	ldw	r2,-8440(fp)
 4004234:	01400504 	movi	r5,20
 4004238:	1009883a 	mov	r4,r2
 400423c:	40191000 	call	4019100 <__mulsi3>
 4004240:	1007883a 	mov	r3,r2
 4004244:	e0b7c117 	ldw	r2,-8444(fp)
 4004248:	1885883a 	add	r2,r3,r2
 400424c:	1085883a 	add	r2,r2,r2
 4004250:	1085883a 	add	r2,r2,r2
 4004254:	e0f7c104 	addi	r3,fp,-8444
 4004258:	1885883a 	add	r2,r3,r2
 400425c:	10879d04 	addi	r2,r2,7796
 4004260:	00fffd84 	movi	r3,-10
 4004264:	10c00015 	stw	r3,0(r2)
								IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4004268:	00c00044 	movi	r3,1
 400426c:	008200b4 	movhi	r2,2050
 4004270:	10841804 	addi	r2,r2,4192
 4004274:	10c00035 	stwio	r3,0(r2)
							}

							if ((gameboard [y][x]==gameboard [y][x-1] && gameboard [y][x]== gameboard [y][x+1]) || (gameboard [y][x]==0 && gameboard [y][x-1]==-10) || (gameboard [y][x]==0 && gameboard [y][x+1]==-10))//(
 4004278:	e0b7c217 	ldw	r2,-8440(fp)
 400427c:	01400504 	movi	r5,20
 4004280:	1009883a 	mov	r4,r2
 4004284:	40191000 	call	4019100 <__mulsi3>
 4004288:	1007883a 	mov	r3,r2
 400428c:	e0b7c117 	ldw	r2,-8444(fp)
 4004290:	1885883a 	add	r2,r3,r2
 4004294:	1085883a 	add	r2,r2,r2
 4004298:	1085883a 	add	r2,r2,r2
 400429c:	e0f7c104 	addi	r3,fp,-8444
 40042a0:	1885883a 	add	r2,r3,r2
 40042a4:	10879d04 	addi	r2,r2,7796
 40042a8:	14000017 	ldw	r16,0(r2)
 40042ac:	e0b7c117 	ldw	r2,-8444(fp)
 40042b0:	147fffc4 	addi	r17,r2,-1
 40042b4:	e0b7c217 	ldw	r2,-8440(fp)
 40042b8:	01400504 	movi	r5,20
 40042bc:	1009883a 	mov	r4,r2
 40042c0:	40191000 	call	4019100 <__mulsi3>
 40042c4:	1445883a 	add	r2,r2,r17
 40042c8:	1085883a 	add	r2,r2,r2
 40042cc:	1085883a 	add	r2,r2,r2
 40042d0:	e0f7c104 	addi	r3,fp,-8444
 40042d4:	1885883a 	add	r2,r3,r2
 40042d8:	10879d04 	addi	r2,r2,7796
 40042dc:	10800017 	ldw	r2,0(r2)
 40042e0:	80801b1e 	bne	r16,r2,4004350 <main+0x3d7c>
 40042e4:	e0b7c217 	ldw	r2,-8440(fp)
 40042e8:	01400504 	movi	r5,20
 40042ec:	1009883a 	mov	r4,r2
 40042f0:	40191000 	call	4019100 <__mulsi3>
 40042f4:	1007883a 	mov	r3,r2
 40042f8:	e0b7c117 	ldw	r2,-8444(fp)
 40042fc:	1885883a 	add	r2,r3,r2
 4004300:	1085883a 	add	r2,r2,r2
 4004304:	1085883a 	add	r2,r2,r2
 4004308:	e0f7c104 	addi	r3,fp,-8444
 400430c:	1885883a 	add	r2,r3,r2
 4004310:	10879d04 	addi	r2,r2,7796
 4004314:	14000017 	ldw	r16,0(r2)
 4004318:	e0b7c117 	ldw	r2,-8444(fp)
 400431c:	14400044 	addi	r17,r2,1
 4004320:	e0b7c217 	ldw	r2,-8440(fp)
 4004324:	01400504 	movi	r5,20
 4004328:	1009883a 	mov	r4,r2
 400432c:	40191000 	call	4019100 <__mulsi3>
 4004330:	1445883a 	add	r2,r2,r17
 4004334:	1085883a 	add	r2,r2,r2
 4004338:	1085883a 	add	r2,r2,r2
 400433c:	e0f7c104 	addi	r3,fp,-8444
 4004340:	1885883a 	add	r2,r3,r2
 4004344:	10879d04 	addi	r2,r2,7796
 4004348:	10800017 	ldw	r2,0(r2)
 400434c:	80803a26 	beq	r16,r2,4004438 <main+0x3e64>
 4004350:	e0b7c217 	ldw	r2,-8440(fp)
 4004354:	01400504 	movi	r5,20
 4004358:	1009883a 	mov	r4,r2
 400435c:	40191000 	call	4019100 <__mulsi3>
 4004360:	1007883a 	mov	r3,r2
 4004364:	e0b7c117 	ldw	r2,-8444(fp)
 4004368:	1885883a 	add	r2,r3,r2
 400436c:	1085883a 	add	r2,r2,r2
 4004370:	1085883a 	add	r2,r2,r2
 4004374:	e0f7c104 	addi	r3,fp,-8444
 4004378:	1885883a 	add	r2,r3,r2
 400437c:	10879d04 	addi	r2,r2,7796
 4004380:	10800017 	ldw	r2,0(r2)
 4004384:	10000f1e 	bne	r2,zero,40043c4 <main+0x3df0>
 4004388:	e0b7c117 	ldw	r2,-8444(fp)
 400438c:	143fffc4 	addi	r16,r2,-1
 4004390:	e0b7c217 	ldw	r2,-8440(fp)
 4004394:	01400504 	movi	r5,20
 4004398:	1009883a 	mov	r4,r2
 400439c:	40191000 	call	4019100 <__mulsi3>
 40043a0:	1405883a 	add	r2,r2,r16
 40043a4:	1085883a 	add	r2,r2,r2
 40043a8:	1085883a 	add	r2,r2,r2
 40043ac:	e0f7c104 	addi	r3,fp,-8444
 40043b0:	1885883a 	add	r2,r3,r2
 40043b4:	10879d04 	addi	r2,r2,7796
 40043b8:	10800017 	ldw	r2,0(r2)
 40043bc:	10bffda0 	cmpeqi	r2,r2,-10
 40043c0:	10001d1e 	bne	r2,zero,4004438 <main+0x3e64>
 40043c4:	e0b7c217 	ldw	r2,-8440(fp)
 40043c8:	01400504 	movi	r5,20
 40043cc:	1009883a 	mov	r4,r2
 40043d0:	40191000 	call	4019100 <__mulsi3>
 40043d4:	1007883a 	mov	r3,r2
 40043d8:	e0b7c117 	ldw	r2,-8444(fp)
 40043dc:	1885883a 	add	r2,r3,r2
 40043e0:	1085883a 	add	r2,r2,r2
 40043e4:	1085883a 	add	r2,r2,r2
 40043e8:	e0f7c104 	addi	r3,fp,-8444
 40043ec:	1885883a 	add	r2,r3,r2
 40043f0:	10879d04 	addi	r2,r2,7796
 40043f4:	10800017 	ldw	r2,0(r2)
 40043f8:	1000311e 	bne	r2,zero,40044c0 <main+0x3eec>
 40043fc:	e0b7c117 	ldw	r2,-8444(fp)
 4004400:	14000044 	addi	r16,r2,1
 4004404:	e0b7c217 	ldw	r2,-8440(fp)
 4004408:	01400504 	movi	r5,20
 400440c:	1009883a 	mov	r4,r2
 4004410:	40191000 	call	4019100 <__mulsi3>
 4004414:	1405883a 	add	r2,r2,r16
 4004418:	1085883a 	add	r2,r2,r2
 400441c:	1085883a 	add	r2,r2,r2
 4004420:	e0f7c104 	addi	r3,fp,-8444
 4004424:	1885883a 	add	r2,r3,r2
 4004428:	10879d04 	addi	r2,r2,7796
 400442c:	10800017 	ldw	r2,0(r2)
 4004430:	10bffd98 	cmpnei	r2,r2,-10
 4004434:	1000221e 	bne	r2,zero,40044c0 <main+0x3eec>
							{
								draw(white, COLOR08_WHITE, x,y+2 );
 4004438:	e0b7c217 	ldw	r2,-8440(fp)
 400443c:	10c00084 	addi	r3,r2,2
 4004440:	e0b95e04 	addi	r2,fp,-6792
 4004444:	180f883a 	mov	r7,r3
 4004448:	e1b7c117 	ldw	r6,-8444(fp)
 400444c:	01403fc4 	movi	r5,255
 4004450:	1009883a 	mov	r4,r2
 4004454:	40003c80 	call	40003c8 <draw>
								draw(zero, COLOR08_BLACK, x,y+2 );
 4004458:	e0b7c217 	ldw	r2,-8440(fp)
 400445c:	10800084 	addi	r2,r2,2
 4004460:	100f883a 	mov	r7,r2
 4004464:	e1b7c117 	ldw	r6,-8444(fp)
 4004468:	000b883a 	mov	r5,zero
 400446c:	010100f4 	movhi	r4,1027
 4004470:	21312a04 	addi	r4,r4,-15192
 4004474:	40003c80 	call	40003c8 <draw>
								gameboard[y][x]=-10;
 4004478:	e0b7c217 	ldw	r2,-8440(fp)
 400447c:	01400504 	movi	r5,20
 4004480:	1009883a 	mov	r4,r2
 4004484:	40191000 	call	4019100 <__mulsi3>
 4004488:	1007883a 	mov	r3,r2
 400448c:	e0b7c117 	ldw	r2,-8444(fp)
 4004490:	1885883a 	add	r2,r3,r2
 4004494:	1085883a 	add	r2,r2,r2
 4004498:	1085883a 	add	r2,r2,r2
 400449c:	e0f7c104 	addi	r3,fp,-8444
 40044a0:	1885883a 	add	r2,r3,r2
 40044a4:	10879d04 	addi	r2,r2,7796
 40044a8:	00fffd84 	movi	r3,-10
 40044ac:	10c00015 	stw	r3,0(r2)
								IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40044b0:	00c00044 	movi	r3,1
 40044b4:	008200b4 	movhi	r2,2050
 40044b8:	10841804 	addi	r2,r2,4192
 40044bc:	10c00035 	stwio	r3,0(r2)
							}

							if ((gameboard [y][x]==gameboard [y][x-1] && gameboard [y][x]== gameboard [y][x-2]))//00x
 40044c0:	e0b7c217 	ldw	r2,-8440(fp)
 40044c4:	01400504 	movi	r5,20
 40044c8:	1009883a 	mov	r4,r2
 40044cc:	40191000 	call	4019100 <__mulsi3>
 40044d0:	1007883a 	mov	r3,r2
 40044d4:	e0b7c117 	ldw	r2,-8444(fp)
 40044d8:	1885883a 	add	r2,r3,r2
 40044dc:	1085883a 	add	r2,r2,r2
 40044e0:	1085883a 	add	r2,r2,r2
 40044e4:	e0f7c104 	addi	r3,fp,-8444
 40044e8:	1885883a 	add	r2,r3,r2
 40044ec:	10879d04 	addi	r2,r2,7796
 40044f0:	14000017 	ldw	r16,0(r2)
 40044f4:	e0b7c117 	ldw	r2,-8444(fp)
 40044f8:	147fffc4 	addi	r17,r2,-1
 40044fc:	e0b7c217 	ldw	r2,-8440(fp)
 4004500:	01400504 	movi	r5,20
 4004504:	1009883a 	mov	r4,r2
 4004508:	40191000 	call	4019100 <__mulsi3>
 400450c:	1445883a 	add	r2,r2,r17
 4004510:	1085883a 	add	r2,r2,r2
 4004514:	1085883a 	add	r2,r2,r2
 4004518:	e0f7c104 	addi	r3,fp,-8444
 400451c:	1885883a 	add	r2,r3,r2
 4004520:	10879d04 	addi	r2,r2,7796
 4004524:	10800017 	ldw	r2,0(r2)
 4004528:	80803d1e 	bne	r16,r2,4004620 <main+0x404c>
 400452c:	e0b7c217 	ldw	r2,-8440(fp)
 4004530:	01400504 	movi	r5,20
 4004534:	1009883a 	mov	r4,r2
 4004538:	40191000 	call	4019100 <__mulsi3>
 400453c:	1007883a 	mov	r3,r2
 4004540:	e0b7c117 	ldw	r2,-8444(fp)
 4004544:	1885883a 	add	r2,r3,r2
 4004548:	1085883a 	add	r2,r2,r2
 400454c:	1085883a 	add	r2,r2,r2
 4004550:	e0f7c104 	addi	r3,fp,-8444
 4004554:	1885883a 	add	r2,r3,r2
 4004558:	10879d04 	addi	r2,r2,7796
 400455c:	14000017 	ldw	r16,0(r2)
 4004560:	e0b7c117 	ldw	r2,-8444(fp)
 4004564:	147fff84 	addi	r17,r2,-2
 4004568:	e0b7c217 	ldw	r2,-8440(fp)
 400456c:	01400504 	movi	r5,20
 4004570:	1009883a 	mov	r4,r2
 4004574:	40191000 	call	4019100 <__mulsi3>
 4004578:	1445883a 	add	r2,r2,r17
 400457c:	1085883a 	add	r2,r2,r2
 4004580:	1085883a 	add	r2,r2,r2
 4004584:	e0f7c104 	addi	r3,fp,-8444
 4004588:	1885883a 	add	r2,r3,r2
 400458c:	10879d04 	addi	r2,r2,7796
 4004590:	10800017 	ldw	r2,0(r2)
 4004594:	8080221e 	bne	r16,r2,4004620 <main+0x404c>
							{
								draw(white, COLOR08_WHITE, x,y+2 );
 4004598:	e0b7c217 	ldw	r2,-8440(fp)
 400459c:	10c00084 	addi	r3,r2,2
 40045a0:	e0b95e04 	addi	r2,fp,-6792
 40045a4:	180f883a 	mov	r7,r3
 40045a8:	e1b7c117 	ldw	r6,-8444(fp)
 40045ac:	01403fc4 	movi	r5,255
 40045b0:	1009883a 	mov	r4,r2
 40045b4:	40003c80 	call	40003c8 <draw>
								draw(zero, COLOR08_BLACK, x,y+2 );
 40045b8:	e0b7c217 	ldw	r2,-8440(fp)
 40045bc:	10800084 	addi	r2,r2,2
 40045c0:	100f883a 	mov	r7,r2
 40045c4:	e1b7c117 	ldw	r6,-8444(fp)
 40045c8:	000b883a 	mov	r5,zero
 40045cc:	010100f4 	movhi	r4,1027
 40045d0:	21312a04 	addi	r4,r4,-15192
 40045d4:	40003c80 	call	40003c8 <draw>
								gameboard[y][x]=-10;
 40045d8:	e0b7c217 	ldw	r2,-8440(fp)
 40045dc:	01400504 	movi	r5,20
 40045e0:	1009883a 	mov	r4,r2
 40045e4:	40191000 	call	4019100 <__mulsi3>
 40045e8:	1007883a 	mov	r3,r2
 40045ec:	e0b7c117 	ldw	r2,-8444(fp)
 40045f0:	1885883a 	add	r2,r3,r2
 40045f4:	1085883a 	add	r2,r2,r2
 40045f8:	1085883a 	add	r2,r2,r2
 40045fc:	e0f7c104 	addi	r3,fp,-8444
 4004600:	1885883a 	add	r2,r3,r2
 4004604:	10879d04 	addi	r2,r2,7796
 4004608:	00fffd84 	movi	r3,-10
 400460c:	10c00015 	stw	r3,0(r2)
								IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4004610:	00c00044 	movi	r3,1
 4004614:	008200b4 	movhi	r2,2050
 4004618:	10841804 	addi	r2,r2,4192
 400461c:	10c00035 	stwio	r3,0(r2)
							}
							if(gameboard[y][x]==0 && gameboard[y][x+1]==0 && gameboard[y][x+2]==-10)
 4004620:	e0b7c217 	ldw	r2,-8440(fp)
 4004624:	01400504 	movi	r5,20
 4004628:	1009883a 	mov	r4,r2
 400462c:	40191000 	call	4019100 <__mulsi3>
 4004630:	1007883a 	mov	r3,r2
 4004634:	e0b7c117 	ldw	r2,-8444(fp)
 4004638:	1885883a 	add	r2,r3,r2
 400463c:	1085883a 	add	r2,r2,r2
 4004640:	1085883a 	add	r2,r2,r2
 4004644:	e0f7c104 	addi	r3,fp,-8444
 4004648:	1885883a 	add	r2,r3,r2
 400464c:	10879d04 	addi	r2,r2,7796
 4004650:	10800017 	ldw	r2,0(r2)
 4004654:	10003f1e 	bne	r2,zero,4004754 <main+0x4180>
 4004658:	e0b7c117 	ldw	r2,-8444(fp)
 400465c:	14000044 	addi	r16,r2,1
 4004660:	e0b7c217 	ldw	r2,-8440(fp)
 4004664:	01400504 	movi	r5,20
 4004668:	1009883a 	mov	r4,r2
 400466c:	40191000 	call	4019100 <__mulsi3>
 4004670:	1405883a 	add	r2,r2,r16
 4004674:	1085883a 	add	r2,r2,r2
 4004678:	1085883a 	add	r2,r2,r2
 400467c:	e0f7c104 	addi	r3,fp,-8444
 4004680:	1885883a 	add	r2,r3,r2
 4004684:	10879d04 	addi	r2,r2,7796
 4004688:	10800017 	ldw	r2,0(r2)
 400468c:	1000311e 	bne	r2,zero,4004754 <main+0x4180>
 4004690:	e0b7c117 	ldw	r2,-8444(fp)
 4004694:	14000084 	addi	r16,r2,2
 4004698:	e0b7c217 	ldw	r2,-8440(fp)
 400469c:	01400504 	movi	r5,20
 40046a0:	1009883a 	mov	r4,r2
 40046a4:	40191000 	call	4019100 <__mulsi3>
 40046a8:	1405883a 	add	r2,r2,r16
 40046ac:	1085883a 	add	r2,r2,r2
 40046b0:	1085883a 	add	r2,r2,r2
 40046b4:	e0f7c104 	addi	r3,fp,-8444
 40046b8:	1885883a 	add	r2,r3,r2
 40046bc:	10879d04 	addi	r2,r2,7796
 40046c0:	10800017 	ldw	r2,0(r2)
 40046c4:	10bffd98 	cmpnei	r2,r2,-10
 40046c8:	1000221e 	bne	r2,zero,4004754 <main+0x4180>
							{
								draw(white, COLOR08_WHITE, x,y+2 );
 40046cc:	e0b7c217 	ldw	r2,-8440(fp)
 40046d0:	10c00084 	addi	r3,r2,2
 40046d4:	e0b95e04 	addi	r2,fp,-6792
 40046d8:	180f883a 	mov	r7,r3
 40046dc:	e1b7c117 	ldw	r6,-8444(fp)
 40046e0:	01403fc4 	movi	r5,255
 40046e4:	1009883a 	mov	r4,r2
 40046e8:	40003c80 	call	40003c8 <draw>
								draw(zero, COLOR08_BLACK, x,y+2 );
 40046ec:	e0b7c217 	ldw	r2,-8440(fp)
 40046f0:	10800084 	addi	r2,r2,2
 40046f4:	100f883a 	mov	r7,r2
 40046f8:	e1b7c117 	ldw	r6,-8444(fp)
 40046fc:	000b883a 	mov	r5,zero
 4004700:	010100f4 	movhi	r4,1027
 4004704:	21312a04 	addi	r4,r4,-15192
 4004708:	40003c80 	call	40003c8 <draw>
								gameboard[y][x]=-10;
 400470c:	e0b7c217 	ldw	r2,-8440(fp)
 4004710:	01400504 	movi	r5,20
 4004714:	1009883a 	mov	r4,r2
 4004718:	40191000 	call	4019100 <__mulsi3>
 400471c:	1007883a 	mov	r3,r2
 4004720:	e0b7c117 	ldw	r2,-8444(fp)
 4004724:	1885883a 	add	r2,r3,r2
 4004728:	1085883a 	add	r2,r2,r2
 400472c:	1085883a 	add	r2,r2,r2
 4004730:	e0f7c104 	addi	r3,fp,-8444
 4004734:	1885883a 	add	r2,r3,r2
 4004738:	10879d04 	addi	r2,r2,7796
 400473c:	00fffd84 	movi	r3,-10
 4004740:	10c00015 	stw	r3,0(r2)
								IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4004744:	00c00044 	movi	r3,1
 4004748:	008200b4 	movhi	r2,2050
 400474c:	10841804 	addi	r2,r2,4192
 4004750:	10c00035 	stwio	r3,0(r2)
							}
							/////////////////////////////////

							//vertical0
							if ((gameboard [y][x]==gameboard [y+1][x] && gameboard [y+1][x]== gameboard [y+2][x]) || (gameboard [y][x]==0 && gameboard [y+1][x]==-10))//xmb
 4004754:	e0b7c217 	ldw	r2,-8440(fp)
 4004758:	01400504 	movi	r5,20
 400475c:	1009883a 	mov	r4,r2
 4004760:	40191000 	call	4019100 <__mulsi3>
 4004764:	1007883a 	mov	r3,r2
 4004768:	e0b7c117 	ldw	r2,-8444(fp)
 400476c:	1885883a 	add	r2,r3,r2
 4004770:	1085883a 	add	r2,r2,r2
 4004774:	1085883a 	add	r2,r2,r2
 4004778:	e0f7c104 	addi	r3,fp,-8444
 400477c:	1885883a 	add	r2,r3,r2
 4004780:	10879d04 	addi	r2,r2,7796
 4004784:	14000017 	ldw	r16,0(r2)
 4004788:	e0b7c217 	ldw	r2,-8440(fp)
 400478c:	10800044 	addi	r2,r2,1
 4004790:	01400504 	movi	r5,20
 4004794:	1009883a 	mov	r4,r2
 4004798:	40191000 	call	4019100 <__mulsi3>
 400479c:	1007883a 	mov	r3,r2
 40047a0:	e0b7c117 	ldw	r2,-8444(fp)
 40047a4:	1885883a 	add	r2,r3,r2
 40047a8:	1085883a 	add	r2,r2,r2
 40047ac:	1085883a 	add	r2,r2,r2
 40047b0:	e0f7c104 	addi	r3,fp,-8444
 40047b4:	1885883a 	add	r2,r3,r2
 40047b8:	10879d04 	addi	r2,r2,7796
 40047bc:	10800017 	ldw	r2,0(r2)
 40047c0:	80801d1e 	bne	r16,r2,4004838 <main+0x4264>
 40047c4:	e0b7c217 	ldw	r2,-8440(fp)
 40047c8:	10800044 	addi	r2,r2,1
 40047cc:	01400504 	movi	r5,20
 40047d0:	1009883a 	mov	r4,r2
 40047d4:	40191000 	call	4019100 <__mulsi3>
 40047d8:	1007883a 	mov	r3,r2
 40047dc:	e0b7c117 	ldw	r2,-8444(fp)
 40047e0:	1885883a 	add	r2,r3,r2
 40047e4:	1085883a 	add	r2,r2,r2
 40047e8:	1085883a 	add	r2,r2,r2
 40047ec:	e0f7c104 	addi	r3,fp,-8444
 40047f0:	1885883a 	add	r2,r3,r2
 40047f4:	10879d04 	addi	r2,r2,7796
 40047f8:	14000017 	ldw	r16,0(r2)
 40047fc:	e0b7c217 	ldw	r2,-8440(fp)
 4004800:	10800084 	addi	r2,r2,2
 4004804:	01400504 	movi	r5,20
 4004808:	1009883a 	mov	r4,r2
 400480c:	40191000 	call	4019100 <__mulsi3>
 4004810:	1007883a 	mov	r3,r2
 4004814:	e0b7c117 	ldw	r2,-8444(fp)
 4004818:	1885883a 	add	r2,r3,r2
 400481c:	1085883a 	add	r2,r2,r2
 4004820:	1085883a 	add	r2,r2,r2
 4004824:	e0f7c104 	addi	r3,fp,-8444
 4004828:	1885883a 	add	r2,r3,r2
 400482c:	10879d04 	addi	r2,r2,7796
 4004830:	10800017 	ldw	r2,0(r2)
 4004834:	80801e26 	beq	r16,r2,40048b0 <main+0x42dc>
 4004838:	e0b7c217 	ldw	r2,-8440(fp)
 400483c:	01400504 	movi	r5,20
 4004840:	1009883a 	mov	r4,r2
 4004844:	40191000 	call	4019100 <__mulsi3>
 4004848:	1007883a 	mov	r3,r2
 400484c:	e0b7c117 	ldw	r2,-8444(fp)
 4004850:	1885883a 	add	r2,r3,r2
 4004854:	1085883a 	add	r2,r2,r2
 4004858:	1085883a 	add	r2,r2,r2
 400485c:	e0f7c104 	addi	r3,fp,-8444
 4004860:	1885883a 	add	r2,r3,r2
 4004864:	10879d04 	addi	r2,r2,7796
 4004868:	10800017 	ldw	r2,0(r2)
 400486c:	1000321e 	bne	r2,zero,4004938 <main+0x4364>
 4004870:	e0b7c217 	ldw	r2,-8440(fp)
 4004874:	10800044 	addi	r2,r2,1
 4004878:	01400504 	movi	r5,20
 400487c:	1009883a 	mov	r4,r2
 4004880:	40191000 	call	4019100 <__mulsi3>
 4004884:	1007883a 	mov	r3,r2
 4004888:	e0b7c117 	ldw	r2,-8444(fp)
 400488c:	1885883a 	add	r2,r3,r2
 4004890:	1085883a 	add	r2,r2,r2
 4004894:	1085883a 	add	r2,r2,r2
 4004898:	e0f7c104 	addi	r3,fp,-8444
 400489c:	1885883a 	add	r2,r3,r2
 40048a0:	10879d04 	addi	r2,r2,7796
 40048a4:	10800017 	ldw	r2,0(r2)
 40048a8:	10bffd98 	cmpnei	r2,r2,-10
 40048ac:	1000221e 	bne	r2,zero,4004938 <main+0x4364>
							{
								draw(white, COLOR08_WHITE, x,y+2 );
 40048b0:	e0b7c217 	ldw	r2,-8440(fp)
 40048b4:	10c00084 	addi	r3,r2,2
 40048b8:	e0b95e04 	addi	r2,fp,-6792
 40048bc:	180f883a 	mov	r7,r3
 40048c0:	e1b7c117 	ldw	r6,-8444(fp)
 40048c4:	01403fc4 	movi	r5,255
 40048c8:	1009883a 	mov	r4,r2
 40048cc:	40003c80 	call	40003c8 <draw>
								draw(zero, COLOR08_BLACK, x,y+2 );
 40048d0:	e0b7c217 	ldw	r2,-8440(fp)
 40048d4:	10800084 	addi	r2,r2,2
 40048d8:	100f883a 	mov	r7,r2
 40048dc:	e1b7c117 	ldw	r6,-8444(fp)
 40048e0:	000b883a 	mov	r5,zero
 40048e4:	010100f4 	movhi	r4,1027
 40048e8:	21312a04 	addi	r4,r4,-15192
 40048ec:	40003c80 	call	40003c8 <draw>
								gameboard[y][x]=-10;
 40048f0:	e0b7c217 	ldw	r2,-8440(fp)
 40048f4:	01400504 	movi	r5,20
 40048f8:	1009883a 	mov	r4,r2
 40048fc:	40191000 	call	4019100 <__mulsi3>
 4004900:	1007883a 	mov	r3,r2
 4004904:	e0b7c117 	ldw	r2,-8444(fp)
 4004908:	1885883a 	add	r2,r3,r2
 400490c:	1085883a 	add	r2,r2,r2
 4004910:	1085883a 	add	r2,r2,r2
 4004914:	e0f7c104 	addi	r3,fp,-8444
 4004918:	1885883a 	add	r2,r3,r2
 400491c:	10879d04 	addi	r2,r2,7796
 4004920:	00fffd84 	movi	r3,-10
 4004924:	10c00015 	stw	r3,0(r2)
								IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4004928:	00c00044 	movi	r3,1
 400492c:	008200b4 	movhi	r2,2050
 4004930:	10841804 	addi	r2,r2,4192
 4004934:	10c00035 	stwio	r3,0(r2)
							}

							if ((gameboard [y][x]==gameboard [y-1][x] && gameboard [y][x]== gameboard [y+1][x]) || (gameboard [y][x]==0 && gameboard [y+1][x]==-10))//txb
 4004938:	e0b7c217 	ldw	r2,-8440(fp)
 400493c:	01400504 	movi	r5,20
 4004940:	1009883a 	mov	r4,r2
 4004944:	40191000 	call	4019100 <__mulsi3>
 4004948:	1007883a 	mov	r3,r2
 400494c:	e0b7c117 	ldw	r2,-8444(fp)
 4004950:	1885883a 	add	r2,r3,r2
 4004954:	1085883a 	add	r2,r2,r2
 4004958:	1085883a 	add	r2,r2,r2
 400495c:	e0f7c104 	addi	r3,fp,-8444
 4004960:	1885883a 	add	r2,r3,r2
 4004964:	10879d04 	addi	r2,r2,7796
 4004968:	14000017 	ldw	r16,0(r2)
 400496c:	e0b7c217 	ldw	r2,-8440(fp)
 4004970:	10bfffc4 	addi	r2,r2,-1
 4004974:	01400504 	movi	r5,20
 4004978:	1009883a 	mov	r4,r2
 400497c:	40191000 	call	4019100 <__mulsi3>
 4004980:	1007883a 	mov	r3,r2
 4004984:	e0b7c117 	ldw	r2,-8444(fp)
 4004988:	1885883a 	add	r2,r3,r2
 400498c:	1085883a 	add	r2,r2,r2
 4004990:	1085883a 	add	r2,r2,r2
 4004994:	e0f7c104 	addi	r3,fp,-8444
 4004998:	1885883a 	add	r2,r3,r2
 400499c:	10879d04 	addi	r2,r2,7796
 40049a0:	10800017 	ldw	r2,0(r2)
 40049a4:	80801c1e 	bne	r16,r2,4004a18 <main+0x4444>
 40049a8:	e0b7c217 	ldw	r2,-8440(fp)
 40049ac:	01400504 	movi	r5,20
 40049b0:	1009883a 	mov	r4,r2
 40049b4:	40191000 	call	4019100 <__mulsi3>
 40049b8:	1007883a 	mov	r3,r2
 40049bc:	e0b7c117 	ldw	r2,-8444(fp)
 40049c0:	1885883a 	add	r2,r3,r2
 40049c4:	1085883a 	add	r2,r2,r2
 40049c8:	1085883a 	add	r2,r2,r2
 40049cc:	e0f7c104 	addi	r3,fp,-8444
 40049d0:	1885883a 	add	r2,r3,r2
 40049d4:	10879d04 	addi	r2,r2,7796
 40049d8:	14000017 	ldw	r16,0(r2)
 40049dc:	e0b7c217 	ldw	r2,-8440(fp)
 40049e0:	10800044 	addi	r2,r2,1
 40049e4:	01400504 	movi	r5,20
 40049e8:	1009883a 	mov	r4,r2
 40049ec:	40191000 	call	4019100 <__mulsi3>
 40049f0:	1007883a 	mov	r3,r2
 40049f4:	e0b7c117 	ldw	r2,-8444(fp)
 40049f8:	1885883a 	add	r2,r3,r2
 40049fc:	1085883a 	add	r2,r2,r2
 4004a00:	1085883a 	add	r2,r2,r2
 4004a04:	e0f7c104 	addi	r3,fp,-8444
 4004a08:	1885883a 	add	r2,r3,r2
 4004a0c:	10879d04 	addi	r2,r2,7796
 4004a10:	10800017 	ldw	r2,0(r2)
 4004a14:	80801e26 	beq	r16,r2,4004a90 <main+0x44bc>
 4004a18:	e0b7c217 	ldw	r2,-8440(fp)
 4004a1c:	01400504 	movi	r5,20
 4004a20:	1009883a 	mov	r4,r2
 4004a24:	40191000 	call	4019100 <__mulsi3>
 4004a28:	1007883a 	mov	r3,r2
 4004a2c:	e0b7c117 	ldw	r2,-8444(fp)
 4004a30:	1885883a 	add	r2,r3,r2
 4004a34:	1085883a 	add	r2,r2,r2
 4004a38:	1085883a 	add	r2,r2,r2
 4004a3c:	e0f7c104 	addi	r3,fp,-8444
 4004a40:	1885883a 	add	r2,r3,r2
 4004a44:	10879d04 	addi	r2,r2,7796
 4004a48:	10800017 	ldw	r2,0(r2)
 4004a4c:	1000321e 	bne	r2,zero,4004b18 <main+0x4544>
 4004a50:	e0b7c217 	ldw	r2,-8440(fp)
 4004a54:	10800044 	addi	r2,r2,1
 4004a58:	01400504 	movi	r5,20
 4004a5c:	1009883a 	mov	r4,r2
 4004a60:	40191000 	call	4019100 <__mulsi3>
 4004a64:	1007883a 	mov	r3,r2
 4004a68:	e0b7c117 	ldw	r2,-8444(fp)
 4004a6c:	1885883a 	add	r2,r3,r2
 4004a70:	1085883a 	add	r2,r2,r2
 4004a74:	1085883a 	add	r2,r2,r2
 4004a78:	e0f7c104 	addi	r3,fp,-8444
 4004a7c:	1885883a 	add	r2,r3,r2
 4004a80:	10879d04 	addi	r2,r2,7796
 4004a84:	10800017 	ldw	r2,0(r2)
 4004a88:	10bffd98 	cmpnei	r2,r2,-10
 4004a8c:	1000221e 	bne	r2,zero,4004b18 <main+0x4544>
							{
								draw(white, COLOR08_WHITE, x,y+2 );
 4004a90:	e0b7c217 	ldw	r2,-8440(fp)
 4004a94:	10c00084 	addi	r3,r2,2
 4004a98:	e0b95e04 	addi	r2,fp,-6792
 4004a9c:	180f883a 	mov	r7,r3
 4004aa0:	e1b7c117 	ldw	r6,-8444(fp)
 4004aa4:	01403fc4 	movi	r5,255
 4004aa8:	1009883a 	mov	r4,r2
 4004aac:	40003c80 	call	40003c8 <draw>
								draw(zero, COLOR08_BLACK, x,y+2 );
 4004ab0:	e0b7c217 	ldw	r2,-8440(fp)
 4004ab4:	10800084 	addi	r2,r2,2
 4004ab8:	100f883a 	mov	r7,r2
 4004abc:	e1b7c117 	ldw	r6,-8444(fp)
 4004ac0:	000b883a 	mov	r5,zero
 4004ac4:	010100f4 	movhi	r4,1027
 4004ac8:	21312a04 	addi	r4,r4,-15192
 4004acc:	40003c80 	call	40003c8 <draw>
								gameboard[y][x]=-10;
 4004ad0:	e0b7c217 	ldw	r2,-8440(fp)
 4004ad4:	01400504 	movi	r5,20
 4004ad8:	1009883a 	mov	r4,r2
 4004adc:	40191000 	call	4019100 <__mulsi3>
 4004ae0:	1007883a 	mov	r3,r2
 4004ae4:	e0b7c117 	ldw	r2,-8444(fp)
 4004ae8:	1885883a 	add	r2,r3,r2
 4004aec:	1085883a 	add	r2,r2,r2
 4004af0:	1085883a 	add	r2,r2,r2
 4004af4:	e0f7c104 	addi	r3,fp,-8444
 4004af8:	1885883a 	add	r2,r3,r2
 4004afc:	10879d04 	addi	r2,r2,7796
 4004b00:	00fffd84 	movi	r3,-10
 4004b04:	10c00015 	stw	r3,0(r2)
								IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4004b08:	00c00044 	movi	r3,1
 4004b0c:	008200b4 	movhi	r2,2050
 4004b10:	10841804 	addi	r2,r2,4192
 4004b14:	10c00035 	stwio	r3,0(r2)
							}

							if ((gameboard [y][x]==gameboard [y-1][x] && gameboard [y][x]== gameboard [y-2][x]) || (gameboard [y][x]==0 && gameboard [y-1][x]==-10))//tmx
 4004b18:	e0b7c217 	ldw	r2,-8440(fp)
 4004b1c:	01400504 	movi	r5,20
 4004b20:	1009883a 	mov	r4,r2
 4004b24:	40191000 	call	4019100 <__mulsi3>
 4004b28:	1007883a 	mov	r3,r2
 4004b2c:	e0b7c117 	ldw	r2,-8444(fp)
 4004b30:	1885883a 	add	r2,r3,r2
 4004b34:	1085883a 	add	r2,r2,r2
 4004b38:	1085883a 	add	r2,r2,r2
 4004b3c:	e0f7c104 	addi	r3,fp,-8444
 4004b40:	1885883a 	add	r2,r3,r2
 4004b44:	10879d04 	addi	r2,r2,7796
 4004b48:	14000017 	ldw	r16,0(r2)
 4004b4c:	e0b7c217 	ldw	r2,-8440(fp)
 4004b50:	10bfffc4 	addi	r2,r2,-1
 4004b54:	01400504 	movi	r5,20
 4004b58:	1009883a 	mov	r4,r2
 4004b5c:	40191000 	call	4019100 <__mulsi3>
 4004b60:	1007883a 	mov	r3,r2
 4004b64:	e0b7c117 	ldw	r2,-8444(fp)
 4004b68:	1885883a 	add	r2,r3,r2
 4004b6c:	1085883a 	add	r2,r2,r2
 4004b70:	1085883a 	add	r2,r2,r2
 4004b74:	e0f7c104 	addi	r3,fp,-8444
 4004b78:	1885883a 	add	r2,r3,r2
 4004b7c:	10879d04 	addi	r2,r2,7796
 4004b80:	10800017 	ldw	r2,0(r2)
 4004b84:	80801c1e 	bne	r16,r2,4004bf8 <main+0x4624>
 4004b88:	e0b7c217 	ldw	r2,-8440(fp)
 4004b8c:	01400504 	movi	r5,20
 4004b90:	1009883a 	mov	r4,r2
 4004b94:	40191000 	call	4019100 <__mulsi3>
 4004b98:	1007883a 	mov	r3,r2
 4004b9c:	e0b7c117 	ldw	r2,-8444(fp)
 4004ba0:	1885883a 	add	r2,r3,r2
 4004ba4:	1085883a 	add	r2,r2,r2
 4004ba8:	1085883a 	add	r2,r2,r2
 4004bac:	e0f7c104 	addi	r3,fp,-8444
 4004bb0:	1885883a 	add	r2,r3,r2
 4004bb4:	10879d04 	addi	r2,r2,7796
 4004bb8:	14000017 	ldw	r16,0(r2)
 4004bbc:	e0b7c217 	ldw	r2,-8440(fp)
 4004bc0:	10bfff84 	addi	r2,r2,-2
 4004bc4:	01400504 	movi	r5,20
 4004bc8:	1009883a 	mov	r4,r2
 4004bcc:	40191000 	call	4019100 <__mulsi3>
 4004bd0:	1007883a 	mov	r3,r2
 4004bd4:	e0b7c117 	ldw	r2,-8444(fp)
 4004bd8:	1885883a 	add	r2,r3,r2
 4004bdc:	1085883a 	add	r2,r2,r2
 4004be0:	1085883a 	add	r2,r2,r2
 4004be4:	e0f7c104 	addi	r3,fp,-8444
 4004be8:	1885883a 	add	r2,r3,r2
 4004bec:	10879d04 	addi	r2,r2,7796
 4004bf0:	10800017 	ldw	r2,0(r2)
 4004bf4:	80801e26 	beq	r16,r2,4004c70 <main+0x469c>
 4004bf8:	e0b7c217 	ldw	r2,-8440(fp)
 4004bfc:	01400504 	movi	r5,20
 4004c00:	1009883a 	mov	r4,r2
 4004c04:	40191000 	call	4019100 <__mulsi3>
 4004c08:	1007883a 	mov	r3,r2
 4004c0c:	e0b7c117 	ldw	r2,-8444(fp)
 4004c10:	1885883a 	add	r2,r3,r2
 4004c14:	1085883a 	add	r2,r2,r2
 4004c18:	1085883a 	add	r2,r2,r2
 4004c1c:	e0f7c104 	addi	r3,fp,-8444
 4004c20:	1885883a 	add	r2,r3,r2
 4004c24:	10879d04 	addi	r2,r2,7796
 4004c28:	10800017 	ldw	r2,0(r2)
 4004c2c:	1000321e 	bne	r2,zero,4004cf8 <main+0x4724>
 4004c30:	e0b7c217 	ldw	r2,-8440(fp)
 4004c34:	10bfffc4 	addi	r2,r2,-1
 4004c38:	01400504 	movi	r5,20
 4004c3c:	1009883a 	mov	r4,r2
 4004c40:	40191000 	call	4019100 <__mulsi3>
 4004c44:	1007883a 	mov	r3,r2
 4004c48:	e0b7c117 	ldw	r2,-8444(fp)
 4004c4c:	1885883a 	add	r2,r3,r2
 4004c50:	1085883a 	add	r2,r2,r2
 4004c54:	1085883a 	add	r2,r2,r2
 4004c58:	e0f7c104 	addi	r3,fp,-8444
 4004c5c:	1885883a 	add	r2,r3,r2
 4004c60:	10879d04 	addi	r2,r2,7796
 4004c64:	10800017 	ldw	r2,0(r2)
 4004c68:	10bffd98 	cmpnei	r2,r2,-10
 4004c6c:	1000221e 	bne	r2,zero,4004cf8 <main+0x4724>
							{
								draw(white, COLOR08_WHITE, x,y+2 );
 4004c70:	e0b7c217 	ldw	r2,-8440(fp)
 4004c74:	10c00084 	addi	r3,r2,2
 4004c78:	e0b95e04 	addi	r2,fp,-6792
 4004c7c:	180f883a 	mov	r7,r3
 4004c80:	e1b7c117 	ldw	r6,-8444(fp)
 4004c84:	01403fc4 	movi	r5,255
 4004c88:	1009883a 	mov	r4,r2
 4004c8c:	40003c80 	call	40003c8 <draw>
								draw(zero, COLOR08_BLACK, x,y+2 );
 4004c90:	e0b7c217 	ldw	r2,-8440(fp)
 4004c94:	10800084 	addi	r2,r2,2
 4004c98:	100f883a 	mov	r7,r2
 4004c9c:	e1b7c117 	ldw	r6,-8444(fp)
 4004ca0:	000b883a 	mov	r5,zero
 4004ca4:	010100f4 	movhi	r4,1027
 4004ca8:	21312a04 	addi	r4,r4,-15192
 4004cac:	40003c80 	call	40003c8 <draw>
								gameboard[y][x]=-10;
 4004cb0:	e0b7c217 	ldw	r2,-8440(fp)
 4004cb4:	01400504 	movi	r5,20
 4004cb8:	1009883a 	mov	r4,r2
 4004cbc:	40191000 	call	4019100 <__mulsi3>
 4004cc0:	1007883a 	mov	r3,r2
 4004cc4:	e0b7c117 	ldw	r2,-8444(fp)
 4004cc8:	1885883a 	add	r2,r3,r2
 4004ccc:	1085883a 	add	r2,r2,r2
 4004cd0:	1085883a 	add	r2,r2,r2
 4004cd4:	e0f7c104 	addi	r3,fp,-8444
 4004cd8:	1885883a 	add	r2,r3,r2
 4004cdc:	10879d04 	addi	r2,r2,7796
 4004ce0:	00fffd84 	movi	r3,-10
 4004ce4:	10c00015 	stw	r3,0(r2)
								IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4004ce8:	00c00044 	movi	r3,1
 4004cec:	008200b4 	movhi	r2,2050
 4004cf0:	10841804 	addi	r2,r2,4192
 4004cf4:	10c00035 	stwio	r3,0(r2)
							}
							if(gameboard[y][x]==0 && gameboard[y-1][x]==0 && gameboard[y-2][x]==-10)
 4004cf8:	e0b7c217 	ldw	r2,-8440(fp)
 4004cfc:	01400504 	movi	r5,20
 4004d00:	1009883a 	mov	r4,r2
 4004d04:	40191000 	call	4019100 <__mulsi3>
 4004d08:	1007883a 	mov	r3,r2
 4004d0c:	e0b7c117 	ldw	r2,-8444(fp)
 4004d10:	1885883a 	add	r2,r3,r2
 4004d14:	1085883a 	add	r2,r2,r2
 4004d18:	1085883a 	add	r2,r2,r2
 4004d1c:	e0f7c104 	addi	r3,fp,-8444
 4004d20:	1885883a 	add	r2,r3,r2
 4004d24:	10879d04 	addi	r2,r2,7796
 4004d28:	10800017 	ldw	r2,0(r2)
 4004d2c:	1000411e 	bne	r2,zero,4004e34 <main+0x4860>
 4004d30:	e0b7c217 	ldw	r2,-8440(fp)
 4004d34:	10bfffc4 	addi	r2,r2,-1
 4004d38:	01400504 	movi	r5,20
 4004d3c:	1009883a 	mov	r4,r2
 4004d40:	40191000 	call	4019100 <__mulsi3>
 4004d44:	1007883a 	mov	r3,r2
 4004d48:	e0b7c117 	ldw	r2,-8444(fp)
 4004d4c:	1885883a 	add	r2,r3,r2
 4004d50:	1085883a 	add	r2,r2,r2
 4004d54:	1085883a 	add	r2,r2,r2
 4004d58:	e0f7c104 	addi	r3,fp,-8444
 4004d5c:	1885883a 	add	r2,r3,r2
 4004d60:	10879d04 	addi	r2,r2,7796
 4004d64:	10800017 	ldw	r2,0(r2)
 4004d68:	1000321e 	bne	r2,zero,4004e34 <main+0x4860>
 4004d6c:	e0b7c217 	ldw	r2,-8440(fp)
 4004d70:	10bfff84 	addi	r2,r2,-2
 4004d74:	01400504 	movi	r5,20
 4004d78:	1009883a 	mov	r4,r2
 4004d7c:	40191000 	call	4019100 <__mulsi3>
 4004d80:	1007883a 	mov	r3,r2
 4004d84:	e0b7c117 	ldw	r2,-8444(fp)
 4004d88:	1885883a 	add	r2,r3,r2
 4004d8c:	1085883a 	add	r2,r2,r2
 4004d90:	1085883a 	add	r2,r2,r2
 4004d94:	e0f7c104 	addi	r3,fp,-8444
 4004d98:	1885883a 	add	r2,r3,r2
 4004d9c:	10879d04 	addi	r2,r2,7796
 4004da0:	10800017 	ldw	r2,0(r2)
 4004da4:	10bffd98 	cmpnei	r2,r2,-10
 4004da8:	1000221e 	bne	r2,zero,4004e34 <main+0x4860>
							{
								draw(white, COLOR08_WHITE, x,y+2 );
 4004dac:	e0b7c217 	ldw	r2,-8440(fp)
 4004db0:	10c00084 	addi	r3,r2,2
 4004db4:	e0b95e04 	addi	r2,fp,-6792
 4004db8:	180f883a 	mov	r7,r3
 4004dbc:	e1b7c117 	ldw	r6,-8444(fp)
 4004dc0:	01403fc4 	movi	r5,255
 4004dc4:	1009883a 	mov	r4,r2
 4004dc8:	40003c80 	call	40003c8 <draw>
								draw(zero, COLOR08_BLACK, x,y+2 );
 4004dcc:	e0b7c217 	ldw	r2,-8440(fp)
 4004dd0:	10800084 	addi	r2,r2,2
 4004dd4:	100f883a 	mov	r7,r2
 4004dd8:	e1b7c117 	ldw	r6,-8444(fp)
 4004ddc:	000b883a 	mov	r5,zero
 4004de0:	010100f4 	movhi	r4,1027
 4004de4:	21312a04 	addi	r4,r4,-15192
 4004de8:	40003c80 	call	40003c8 <draw>
								gameboard[y][x]=-10;
 4004dec:	e0b7c217 	ldw	r2,-8440(fp)
 4004df0:	01400504 	movi	r5,20
 4004df4:	1009883a 	mov	r4,r2
 4004df8:	40191000 	call	4019100 <__mulsi3>
 4004dfc:	1007883a 	mov	r3,r2
 4004e00:	e0b7c117 	ldw	r2,-8444(fp)
 4004e04:	1885883a 	add	r2,r3,r2
 4004e08:	1085883a 	add	r2,r2,r2
 4004e0c:	1085883a 	add	r2,r2,r2
 4004e10:	e0f7c104 	addi	r3,fp,-8444
 4004e14:	1885883a 	add	r2,r3,r2
 4004e18:	10879d04 	addi	r2,r2,7796
 4004e1c:	00fffd84 	movi	r3,-10
 4004e20:	10c00015 	stw	r3,0(r2)
								IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4004e24:	00c00044 	movi	r3,1
 4004e28:	008200b4 	movhi	r2,2050
 4004e2c:	10841804 	addi	r2,r2,4192
 4004e30:	10c00035 	stwio	r3,0(r2)
							}

			//////////////////////////////////////////////////////////////////

							//diagonal (\)0
							if ((gameboard [y][x]==gameboard [y+1][x+1] && gameboard[y+1][x+1]== gameboard[y+2][x+2]))//(\x\)
 4004e34:	e0b7c217 	ldw	r2,-8440(fp)
 4004e38:	01400504 	movi	r5,20
 4004e3c:	1009883a 	mov	r4,r2
 4004e40:	40191000 	call	4019100 <__mulsi3>
 4004e44:	1007883a 	mov	r3,r2
 4004e48:	e0b7c117 	ldw	r2,-8444(fp)
 4004e4c:	1885883a 	add	r2,r3,r2
 4004e50:	1085883a 	add	r2,r2,r2
 4004e54:	1085883a 	add	r2,r2,r2
 4004e58:	e0f7c104 	addi	r3,fp,-8444
 4004e5c:	1885883a 	add	r2,r3,r2
 4004e60:	10879d04 	addi	r2,r2,7796
 4004e64:	14000017 	ldw	r16,0(r2)
 4004e68:	e0b7c217 	ldw	r2,-8440(fp)
 4004e6c:	10c00044 	addi	r3,r2,1
 4004e70:	e0b7c117 	ldw	r2,-8444(fp)
 4004e74:	14400044 	addi	r17,r2,1
 4004e78:	01400504 	movi	r5,20
 4004e7c:	1809883a 	mov	r4,r3
 4004e80:	40191000 	call	4019100 <__mulsi3>
 4004e84:	1445883a 	add	r2,r2,r17
 4004e88:	1085883a 	add	r2,r2,r2
 4004e8c:	1085883a 	add	r2,r2,r2
 4004e90:	e0f7c104 	addi	r3,fp,-8444
 4004e94:	1885883a 	add	r2,r3,r2
 4004e98:	10879d04 	addi	r2,r2,7796
 4004e9c:	10800017 	ldw	r2,0(r2)
 4004ea0:	80803f1e 	bne	r16,r2,4004fa0 <main+0x49cc>
 4004ea4:	e0b7c217 	ldw	r2,-8440(fp)
 4004ea8:	10c00044 	addi	r3,r2,1
 4004eac:	e0b7c117 	ldw	r2,-8444(fp)
 4004eb0:	14000044 	addi	r16,r2,1
 4004eb4:	01400504 	movi	r5,20
 4004eb8:	1809883a 	mov	r4,r3
 4004ebc:	40191000 	call	4019100 <__mulsi3>
 4004ec0:	1405883a 	add	r2,r2,r16
 4004ec4:	1085883a 	add	r2,r2,r2
 4004ec8:	1085883a 	add	r2,r2,r2
 4004ecc:	e0f7c104 	addi	r3,fp,-8444
 4004ed0:	1885883a 	add	r2,r3,r2
 4004ed4:	10879d04 	addi	r2,r2,7796
 4004ed8:	14000017 	ldw	r16,0(r2)
 4004edc:	e0b7c217 	ldw	r2,-8440(fp)
 4004ee0:	10c00084 	addi	r3,r2,2
 4004ee4:	e0b7c117 	ldw	r2,-8444(fp)
 4004ee8:	14400084 	addi	r17,r2,2
 4004eec:	01400504 	movi	r5,20
 4004ef0:	1809883a 	mov	r4,r3
 4004ef4:	40191000 	call	4019100 <__mulsi3>
 4004ef8:	1445883a 	add	r2,r2,r17
 4004efc:	1085883a 	add	r2,r2,r2
 4004f00:	1085883a 	add	r2,r2,r2
 4004f04:	e0f7c104 	addi	r3,fp,-8444
 4004f08:	1885883a 	add	r2,r3,r2
 4004f0c:	10879d04 	addi	r2,r2,7796
 4004f10:	10800017 	ldw	r2,0(r2)
 4004f14:	8080221e 	bne	r16,r2,4004fa0 <main+0x49cc>
							{
								draw(white, COLOR08_WHITE, x,y+2 );
 4004f18:	e0b7c217 	ldw	r2,-8440(fp)
 4004f1c:	10c00084 	addi	r3,r2,2
 4004f20:	e0b95e04 	addi	r2,fp,-6792
 4004f24:	180f883a 	mov	r7,r3
 4004f28:	e1b7c117 	ldw	r6,-8444(fp)
 4004f2c:	01403fc4 	movi	r5,255
 4004f30:	1009883a 	mov	r4,r2
 4004f34:	40003c80 	call	40003c8 <draw>
								draw(zero, COLOR08_BLACK, x,y+2 );
 4004f38:	e0b7c217 	ldw	r2,-8440(fp)
 4004f3c:	10800084 	addi	r2,r2,2
 4004f40:	100f883a 	mov	r7,r2
 4004f44:	e1b7c117 	ldw	r6,-8444(fp)
 4004f48:	000b883a 	mov	r5,zero
 4004f4c:	010100f4 	movhi	r4,1027
 4004f50:	21312a04 	addi	r4,r4,-15192
 4004f54:	40003c80 	call	40003c8 <draw>
								gameboard[y][x]=-10;
 4004f58:	e0b7c217 	ldw	r2,-8440(fp)
 4004f5c:	01400504 	movi	r5,20
 4004f60:	1009883a 	mov	r4,r2
 4004f64:	40191000 	call	4019100 <__mulsi3>
 4004f68:	1007883a 	mov	r3,r2
 4004f6c:	e0b7c117 	ldw	r2,-8444(fp)
 4004f70:	1885883a 	add	r2,r3,r2
 4004f74:	1085883a 	add	r2,r2,r2
 4004f78:	1085883a 	add	r2,r2,r2
 4004f7c:	e0f7c104 	addi	r3,fp,-8444
 4004f80:	1885883a 	add	r2,r3,r2
 4004f84:	10879d04 	addi	r2,r2,7796
 4004f88:	00fffd84 	movi	r3,-10
 4004f8c:	10c00015 	stw	r3,0(r2)
								IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4004f90:	00c00044 	movi	r3,1
 4004f94:	008200b4 	movhi	r2,2050
 4004f98:	10841804 	addi	r2,r2,4192
 4004f9c:	10c00035 	stwio	r3,0(r2)
							}

							if ((gameboard [y][x]==gameboard [y+1][x+1] && gameboard[y][x]== gameboard[y+2][x+2]) )//(x\\)
 4004fa0:	e0b7c217 	ldw	r2,-8440(fp)
 4004fa4:	01400504 	movi	r5,20
 4004fa8:	1009883a 	mov	r4,r2
 4004fac:	40191000 	call	4019100 <__mulsi3>
 4004fb0:	1007883a 	mov	r3,r2
 4004fb4:	e0b7c117 	ldw	r2,-8444(fp)
 4004fb8:	1885883a 	add	r2,r3,r2
 4004fbc:	1085883a 	add	r2,r2,r2
 4004fc0:	1085883a 	add	r2,r2,r2
 4004fc4:	e0f7c104 	addi	r3,fp,-8444
 4004fc8:	1885883a 	add	r2,r3,r2
 4004fcc:	10879d04 	addi	r2,r2,7796
 4004fd0:	14000017 	ldw	r16,0(r2)
 4004fd4:	e0b7c217 	ldw	r2,-8440(fp)
 4004fd8:	10c00044 	addi	r3,r2,1
 4004fdc:	e0b7c117 	ldw	r2,-8444(fp)
 4004fe0:	14400044 	addi	r17,r2,1
 4004fe4:	01400504 	movi	r5,20
 4004fe8:	1809883a 	mov	r4,r3
 4004fec:	40191000 	call	4019100 <__mulsi3>
 4004ff0:	1445883a 	add	r2,r2,r17
 4004ff4:	1085883a 	add	r2,r2,r2
 4004ff8:	1085883a 	add	r2,r2,r2
 4004ffc:	e0f7c104 	addi	r3,fp,-8444
 4005000:	1885883a 	add	r2,r3,r2
 4005004:	10879d04 	addi	r2,r2,7796
 4005008:	10800017 	ldw	r2,0(r2)
 400500c:	80803e1e 	bne	r16,r2,4005108 <main+0x4b34>
 4005010:	e0b7c217 	ldw	r2,-8440(fp)
 4005014:	01400504 	movi	r5,20
 4005018:	1009883a 	mov	r4,r2
 400501c:	40191000 	call	4019100 <__mulsi3>
 4005020:	1007883a 	mov	r3,r2
 4005024:	e0b7c117 	ldw	r2,-8444(fp)
 4005028:	1885883a 	add	r2,r3,r2
 400502c:	1085883a 	add	r2,r2,r2
 4005030:	1085883a 	add	r2,r2,r2
 4005034:	e0f7c104 	addi	r3,fp,-8444
 4005038:	1885883a 	add	r2,r3,r2
 400503c:	10879d04 	addi	r2,r2,7796
 4005040:	14000017 	ldw	r16,0(r2)
 4005044:	e0b7c217 	ldw	r2,-8440(fp)
 4005048:	10c00084 	addi	r3,r2,2
 400504c:	e0b7c117 	ldw	r2,-8444(fp)
 4005050:	14400084 	addi	r17,r2,2
 4005054:	01400504 	movi	r5,20
 4005058:	1809883a 	mov	r4,r3
 400505c:	40191000 	call	4019100 <__mulsi3>
 4005060:	1445883a 	add	r2,r2,r17
 4005064:	1085883a 	add	r2,r2,r2
 4005068:	1085883a 	add	r2,r2,r2
 400506c:	e0f7c104 	addi	r3,fp,-8444
 4005070:	1885883a 	add	r2,r3,r2
 4005074:	10879d04 	addi	r2,r2,7796
 4005078:	10800017 	ldw	r2,0(r2)
 400507c:	8080221e 	bne	r16,r2,4005108 <main+0x4b34>
							{
								draw(white, COLOR08_WHITE, x,y+2 );
 4005080:	e0b7c217 	ldw	r2,-8440(fp)
 4005084:	10c00084 	addi	r3,r2,2
 4005088:	e0b95e04 	addi	r2,fp,-6792
 400508c:	180f883a 	mov	r7,r3
 4005090:	e1b7c117 	ldw	r6,-8444(fp)
 4005094:	01403fc4 	movi	r5,255
 4005098:	1009883a 	mov	r4,r2
 400509c:	40003c80 	call	40003c8 <draw>
								draw(zero, COLOR08_BLACK, x,y+2 );
 40050a0:	e0b7c217 	ldw	r2,-8440(fp)
 40050a4:	10800084 	addi	r2,r2,2
 40050a8:	100f883a 	mov	r7,r2
 40050ac:	e1b7c117 	ldw	r6,-8444(fp)
 40050b0:	000b883a 	mov	r5,zero
 40050b4:	010100f4 	movhi	r4,1027
 40050b8:	21312a04 	addi	r4,r4,-15192
 40050bc:	40003c80 	call	40003c8 <draw>
								gameboard[y][x]=-10;
 40050c0:	e0b7c217 	ldw	r2,-8440(fp)
 40050c4:	01400504 	movi	r5,20
 40050c8:	1009883a 	mov	r4,r2
 40050cc:	40191000 	call	4019100 <__mulsi3>
 40050d0:	1007883a 	mov	r3,r2
 40050d4:	e0b7c117 	ldw	r2,-8444(fp)
 40050d8:	1885883a 	add	r2,r3,r2
 40050dc:	1085883a 	add	r2,r2,r2
 40050e0:	1085883a 	add	r2,r2,r2
 40050e4:	e0f7c104 	addi	r3,fp,-8444
 40050e8:	1885883a 	add	r2,r3,r2
 40050ec:	10879d04 	addi	r2,r2,7796
 40050f0:	00fffd84 	movi	r3,-10
 40050f4:	10c00015 	stw	r3,0(r2)
								IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40050f8:	00c00044 	movi	r3,1
 40050fc:	008200b4 	movhi	r2,2050
 4005100:	10841804 	addi	r2,r2,4192
 4005104:	10c00035 	stwio	r3,0(r2)
							}

							if ((gameboard [y][x]==gameboard [y-1][x-1] && gameboard[y][x]== gameboard[y-2][x-2]) )//(\\x)
 4005108:	e0b7c217 	ldw	r2,-8440(fp)
 400510c:	01400504 	movi	r5,20
 4005110:	1009883a 	mov	r4,r2
 4005114:	40191000 	call	4019100 <__mulsi3>
 4005118:	1007883a 	mov	r3,r2
 400511c:	e0b7c117 	ldw	r2,-8444(fp)
 4005120:	1885883a 	add	r2,r3,r2
 4005124:	1085883a 	add	r2,r2,r2
 4005128:	1085883a 	add	r2,r2,r2
 400512c:	e0f7c104 	addi	r3,fp,-8444
 4005130:	1885883a 	add	r2,r3,r2
 4005134:	10879d04 	addi	r2,r2,7796
 4005138:	14000017 	ldw	r16,0(r2)
 400513c:	e0b7c217 	ldw	r2,-8440(fp)
 4005140:	10ffffc4 	addi	r3,r2,-1
 4005144:	e0b7c117 	ldw	r2,-8444(fp)
 4005148:	147fffc4 	addi	r17,r2,-1
 400514c:	01400504 	movi	r5,20
 4005150:	1809883a 	mov	r4,r3
 4005154:	40191000 	call	4019100 <__mulsi3>
 4005158:	1445883a 	add	r2,r2,r17
 400515c:	1085883a 	add	r2,r2,r2
 4005160:	1085883a 	add	r2,r2,r2
 4005164:	e0f7c104 	addi	r3,fp,-8444
 4005168:	1885883a 	add	r2,r3,r2
 400516c:	10879d04 	addi	r2,r2,7796
 4005170:	10800017 	ldw	r2,0(r2)
 4005174:	80803e1e 	bne	r16,r2,4005270 <main+0x4c9c>
 4005178:	e0b7c217 	ldw	r2,-8440(fp)
 400517c:	01400504 	movi	r5,20
 4005180:	1009883a 	mov	r4,r2
 4005184:	40191000 	call	4019100 <__mulsi3>
 4005188:	1007883a 	mov	r3,r2
 400518c:	e0b7c117 	ldw	r2,-8444(fp)
 4005190:	1885883a 	add	r2,r3,r2
 4005194:	1085883a 	add	r2,r2,r2
 4005198:	1085883a 	add	r2,r2,r2
 400519c:	e0f7c104 	addi	r3,fp,-8444
 40051a0:	1885883a 	add	r2,r3,r2
 40051a4:	10879d04 	addi	r2,r2,7796
 40051a8:	14000017 	ldw	r16,0(r2)
 40051ac:	e0b7c217 	ldw	r2,-8440(fp)
 40051b0:	10ffff84 	addi	r3,r2,-2
 40051b4:	e0b7c117 	ldw	r2,-8444(fp)
 40051b8:	147fff84 	addi	r17,r2,-2
 40051bc:	01400504 	movi	r5,20
 40051c0:	1809883a 	mov	r4,r3
 40051c4:	40191000 	call	4019100 <__mulsi3>
 40051c8:	1445883a 	add	r2,r2,r17
 40051cc:	1085883a 	add	r2,r2,r2
 40051d0:	1085883a 	add	r2,r2,r2
 40051d4:	e0f7c104 	addi	r3,fp,-8444
 40051d8:	1885883a 	add	r2,r3,r2
 40051dc:	10879d04 	addi	r2,r2,7796
 40051e0:	10800017 	ldw	r2,0(r2)
 40051e4:	8080221e 	bne	r16,r2,4005270 <main+0x4c9c>
							{
								draw(white, COLOR08_WHITE, x,y+2 );
 40051e8:	e0b7c217 	ldw	r2,-8440(fp)
 40051ec:	10c00084 	addi	r3,r2,2
 40051f0:	e0b95e04 	addi	r2,fp,-6792
 40051f4:	180f883a 	mov	r7,r3
 40051f8:	e1b7c117 	ldw	r6,-8444(fp)
 40051fc:	01403fc4 	movi	r5,255
 4005200:	1009883a 	mov	r4,r2
 4005204:	40003c80 	call	40003c8 <draw>
								draw(zero, COLOR08_BLACK, x,y+2 );
 4005208:	e0b7c217 	ldw	r2,-8440(fp)
 400520c:	10800084 	addi	r2,r2,2
 4005210:	100f883a 	mov	r7,r2
 4005214:	e1b7c117 	ldw	r6,-8444(fp)
 4005218:	000b883a 	mov	r5,zero
 400521c:	010100f4 	movhi	r4,1027
 4005220:	21312a04 	addi	r4,r4,-15192
 4005224:	40003c80 	call	40003c8 <draw>
								gameboard[y][x]=-10;
 4005228:	e0b7c217 	ldw	r2,-8440(fp)
 400522c:	01400504 	movi	r5,20
 4005230:	1009883a 	mov	r4,r2
 4005234:	40191000 	call	4019100 <__mulsi3>
 4005238:	1007883a 	mov	r3,r2
 400523c:	e0b7c117 	ldw	r2,-8444(fp)
 4005240:	1885883a 	add	r2,r3,r2
 4005244:	1085883a 	add	r2,r2,r2
 4005248:	1085883a 	add	r2,r2,r2
 400524c:	e0f7c104 	addi	r3,fp,-8444
 4005250:	1885883a 	add	r2,r3,r2
 4005254:	10879d04 	addi	r2,r2,7796
 4005258:	00fffd84 	movi	r3,-10
 400525c:	10c00015 	stw	r3,0(r2)
								IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4005260:	00c00044 	movi	r3,1
 4005264:	008200b4 	movhi	r2,2050
 4005268:	10841804 	addi	r2,r2,4192
 400526c:	10c00035 	stwio	r3,0(r2)
							}
							if ((gameboard[y][x]==0 && gameboard[y+1][x+1]==-10) || (gameboard[y][x]==0 && gameboard[y-1][x-1]==-10))//(\\x)
 4005270:	e0b7c217 	ldw	r2,-8440(fp)
 4005274:	01400504 	movi	r5,20
 4005278:	1009883a 	mov	r4,r2
 400527c:	40191000 	call	4019100 <__mulsi3>
 4005280:	1007883a 	mov	r3,r2
 4005284:	e0b7c117 	ldw	r2,-8444(fp)
 4005288:	1885883a 	add	r2,r3,r2
 400528c:	1085883a 	add	r2,r2,r2
 4005290:	1085883a 	add	r2,r2,r2
 4005294:	e0f7c104 	addi	r3,fp,-8444
 4005298:	1885883a 	add	r2,r3,r2
 400529c:	10879d04 	addi	r2,r2,7796
 40052a0:	10800017 	ldw	r2,0(r2)
 40052a4:	1000101e 	bne	r2,zero,40052e8 <main+0x4d14>
 40052a8:	e0b7c217 	ldw	r2,-8440(fp)
 40052ac:	10c00044 	addi	r3,r2,1
 40052b0:	e0b7c117 	ldw	r2,-8444(fp)
 40052b4:	14000044 	addi	r16,r2,1
 40052b8:	01400504 	movi	r5,20
 40052bc:	1809883a 	mov	r4,r3
 40052c0:	40191000 	call	4019100 <__mulsi3>
 40052c4:	1405883a 	add	r2,r2,r16
 40052c8:	1085883a 	add	r2,r2,r2
 40052cc:	1085883a 	add	r2,r2,r2
 40052d0:	e0f7c104 	addi	r3,fp,-8444
 40052d4:	1885883a 	add	r2,r3,r2
 40052d8:	10879d04 	addi	r2,r2,7796
 40052dc:	10800017 	ldw	r2,0(r2)
 40052e0:	10bffda0 	cmpeqi	r2,r2,-10
 40052e4:	10001e1e 	bne	r2,zero,4005360 <main+0x4d8c>
 40052e8:	e0b7c217 	ldw	r2,-8440(fp)
 40052ec:	01400504 	movi	r5,20
 40052f0:	1009883a 	mov	r4,r2
 40052f4:	40191000 	call	4019100 <__mulsi3>
 40052f8:	1007883a 	mov	r3,r2
 40052fc:	e0b7c117 	ldw	r2,-8444(fp)
 4005300:	1885883a 	add	r2,r3,r2
 4005304:	1085883a 	add	r2,r2,r2
 4005308:	1085883a 	add	r2,r2,r2
 400530c:	e0f7c104 	addi	r3,fp,-8444
 4005310:	1885883a 	add	r2,r3,r2
 4005314:	10879d04 	addi	r2,r2,7796
 4005318:	10800017 	ldw	r2,0(r2)
 400531c:	1000321e 	bne	r2,zero,40053e8 <main+0x4e14>
 4005320:	e0b7c217 	ldw	r2,-8440(fp)
 4005324:	10ffffc4 	addi	r3,r2,-1
 4005328:	e0b7c117 	ldw	r2,-8444(fp)
 400532c:	143fffc4 	addi	r16,r2,-1
 4005330:	01400504 	movi	r5,20
 4005334:	1809883a 	mov	r4,r3
 4005338:	40191000 	call	4019100 <__mulsi3>
 400533c:	1405883a 	add	r2,r2,r16
 4005340:	1085883a 	add	r2,r2,r2
 4005344:	1085883a 	add	r2,r2,r2
 4005348:	e0f7c104 	addi	r3,fp,-8444
 400534c:	1885883a 	add	r2,r3,r2
 4005350:	10879d04 	addi	r2,r2,7796
 4005354:	10800017 	ldw	r2,0(r2)
 4005358:	10bffd98 	cmpnei	r2,r2,-10
 400535c:	1000221e 	bne	r2,zero,40053e8 <main+0x4e14>
							{
								draw(white, COLOR08_WHITE, x,y+2 );
 4005360:	e0b7c217 	ldw	r2,-8440(fp)
 4005364:	10c00084 	addi	r3,r2,2
 4005368:	e0b95e04 	addi	r2,fp,-6792
 400536c:	180f883a 	mov	r7,r3
 4005370:	e1b7c117 	ldw	r6,-8444(fp)
 4005374:	01403fc4 	movi	r5,255
 4005378:	1009883a 	mov	r4,r2
 400537c:	40003c80 	call	40003c8 <draw>
								draw(zero, COLOR08_BLACK, x,y+2 );
 4005380:	e0b7c217 	ldw	r2,-8440(fp)
 4005384:	10800084 	addi	r2,r2,2
 4005388:	100f883a 	mov	r7,r2
 400538c:	e1b7c117 	ldw	r6,-8444(fp)
 4005390:	000b883a 	mov	r5,zero
 4005394:	010100f4 	movhi	r4,1027
 4005398:	21312a04 	addi	r4,r4,-15192
 400539c:	40003c80 	call	40003c8 <draw>
								gameboard[y][x]=-10;
 40053a0:	e0b7c217 	ldw	r2,-8440(fp)
 40053a4:	01400504 	movi	r5,20
 40053a8:	1009883a 	mov	r4,r2
 40053ac:	40191000 	call	4019100 <__mulsi3>
 40053b0:	1007883a 	mov	r3,r2
 40053b4:	e0b7c117 	ldw	r2,-8444(fp)
 40053b8:	1885883a 	add	r2,r3,r2
 40053bc:	1085883a 	add	r2,r2,r2
 40053c0:	1085883a 	add	r2,r2,r2
 40053c4:	e0f7c104 	addi	r3,fp,-8444
 40053c8:	1885883a 	add	r2,r3,r2
 40053cc:	10879d04 	addi	r2,r2,7796
 40053d0:	00fffd84 	movi	r3,-10
 40053d4:	10c00015 	stw	r3,0(r2)
								IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40053d8:	00c00044 	movi	r3,1
 40053dc:	008200b4 	movhi	r2,2050
 40053e0:	10841804 	addi	r2,r2,4192
 40053e4:	10c00035 	stwio	r3,0(r2)
							}
							if(gameboard[y][x]==0 && gameboard[y-1][x-1]==0 && gameboard[y-2][x-2]==-10)
 40053e8:	e0b7c217 	ldw	r2,-8440(fp)
 40053ec:	01400504 	movi	r5,20
 40053f0:	1009883a 	mov	r4,r2
 40053f4:	40191000 	call	4019100 <__mulsi3>
 40053f8:	1007883a 	mov	r3,r2
 40053fc:	e0b7c117 	ldw	r2,-8444(fp)
 4005400:	1885883a 	add	r2,r3,r2
 4005404:	1085883a 	add	r2,r2,r2
 4005408:	1085883a 	add	r2,r2,r2
 400540c:	e0f7c104 	addi	r3,fp,-8444
 4005410:	1885883a 	add	r2,r3,r2
 4005414:	10879d04 	addi	r2,r2,7796
 4005418:	10800017 	ldw	r2,0(r2)
 400541c:	1000411e 	bne	r2,zero,4005524 <main+0x4f50>
 4005420:	e0b7c217 	ldw	r2,-8440(fp)
 4005424:	10ffffc4 	addi	r3,r2,-1
 4005428:	e0b7c117 	ldw	r2,-8444(fp)
 400542c:	143fffc4 	addi	r16,r2,-1
 4005430:	01400504 	movi	r5,20
 4005434:	1809883a 	mov	r4,r3
 4005438:	40191000 	call	4019100 <__mulsi3>
 400543c:	1405883a 	add	r2,r2,r16
 4005440:	1085883a 	add	r2,r2,r2
 4005444:	1085883a 	add	r2,r2,r2
 4005448:	e0f7c104 	addi	r3,fp,-8444
 400544c:	1885883a 	add	r2,r3,r2
 4005450:	10879d04 	addi	r2,r2,7796
 4005454:	10800017 	ldw	r2,0(r2)
 4005458:	1000321e 	bne	r2,zero,4005524 <main+0x4f50>
 400545c:	e0b7c217 	ldw	r2,-8440(fp)
 4005460:	10ffff84 	addi	r3,r2,-2
 4005464:	e0b7c117 	ldw	r2,-8444(fp)
 4005468:	143fff84 	addi	r16,r2,-2
 400546c:	01400504 	movi	r5,20
 4005470:	1809883a 	mov	r4,r3
 4005474:	40191000 	call	4019100 <__mulsi3>
 4005478:	1405883a 	add	r2,r2,r16
 400547c:	1085883a 	add	r2,r2,r2
 4005480:	1085883a 	add	r2,r2,r2
 4005484:	e0f7c104 	addi	r3,fp,-8444
 4005488:	1885883a 	add	r2,r3,r2
 400548c:	10879d04 	addi	r2,r2,7796
 4005490:	10800017 	ldw	r2,0(r2)
 4005494:	10bffd98 	cmpnei	r2,r2,-10
 4005498:	1000221e 	bne	r2,zero,4005524 <main+0x4f50>
							{
								draw(white, COLOR08_WHITE, x,y+2 );
 400549c:	e0b7c217 	ldw	r2,-8440(fp)
 40054a0:	10c00084 	addi	r3,r2,2
 40054a4:	e0b95e04 	addi	r2,fp,-6792
 40054a8:	180f883a 	mov	r7,r3
 40054ac:	e1b7c117 	ldw	r6,-8444(fp)
 40054b0:	01403fc4 	movi	r5,255
 40054b4:	1009883a 	mov	r4,r2
 40054b8:	40003c80 	call	40003c8 <draw>
								draw(zero, COLOR08_BLACK, x,y+2 );
 40054bc:	e0b7c217 	ldw	r2,-8440(fp)
 40054c0:	10800084 	addi	r2,r2,2
 40054c4:	100f883a 	mov	r7,r2
 40054c8:	e1b7c117 	ldw	r6,-8444(fp)
 40054cc:	000b883a 	mov	r5,zero
 40054d0:	010100f4 	movhi	r4,1027
 40054d4:	21312a04 	addi	r4,r4,-15192
 40054d8:	40003c80 	call	40003c8 <draw>
								gameboard[y][x]=-10;
 40054dc:	e0b7c217 	ldw	r2,-8440(fp)
 40054e0:	01400504 	movi	r5,20
 40054e4:	1009883a 	mov	r4,r2
 40054e8:	40191000 	call	4019100 <__mulsi3>
 40054ec:	1007883a 	mov	r3,r2
 40054f0:	e0b7c117 	ldw	r2,-8444(fp)
 40054f4:	1885883a 	add	r2,r3,r2
 40054f8:	1085883a 	add	r2,r2,r2
 40054fc:	1085883a 	add	r2,r2,r2
 4005500:	e0f7c104 	addi	r3,fp,-8444
 4005504:	1885883a 	add	r2,r3,r2
 4005508:	10879d04 	addi	r2,r2,7796
 400550c:	00fffd84 	movi	r3,-10
 4005510:	10c00015 	stw	r3,0(r2)
								IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4005514:	00c00044 	movi	r3,1
 4005518:	008200b4 	movhi	r2,2050
 400551c:	10841804 	addi	r2,r2,4192
 4005520:	10c00035 	stwio	r3,0(r2)
							}
							if(gameboard[y][x]==0 && gameboard[y+1][x+1]==0 && gameboard[y+2][x+2]==-10)
 4005524:	e0b7c217 	ldw	r2,-8440(fp)
 4005528:	01400504 	movi	r5,20
 400552c:	1009883a 	mov	r4,r2
 4005530:	40191000 	call	4019100 <__mulsi3>
 4005534:	1007883a 	mov	r3,r2
 4005538:	e0b7c117 	ldw	r2,-8444(fp)
 400553c:	1885883a 	add	r2,r3,r2
 4005540:	1085883a 	add	r2,r2,r2
 4005544:	1085883a 	add	r2,r2,r2
 4005548:	e0f7c104 	addi	r3,fp,-8444
 400554c:	1885883a 	add	r2,r3,r2
 4005550:	10879d04 	addi	r2,r2,7796
 4005554:	10800017 	ldw	r2,0(r2)
 4005558:	1000411e 	bne	r2,zero,4005660 <main+0x508c>
 400555c:	e0b7c217 	ldw	r2,-8440(fp)
 4005560:	10c00044 	addi	r3,r2,1
 4005564:	e0b7c117 	ldw	r2,-8444(fp)
 4005568:	14000044 	addi	r16,r2,1
 400556c:	01400504 	movi	r5,20
 4005570:	1809883a 	mov	r4,r3
 4005574:	40191000 	call	4019100 <__mulsi3>
 4005578:	1405883a 	add	r2,r2,r16
 400557c:	1085883a 	add	r2,r2,r2
 4005580:	1085883a 	add	r2,r2,r2
 4005584:	e0f7c104 	addi	r3,fp,-8444
 4005588:	1885883a 	add	r2,r3,r2
 400558c:	10879d04 	addi	r2,r2,7796
 4005590:	10800017 	ldw	r2,0(r2)
 4005594:	1000321e 	bne	r2,zero,4005660 <main+0x508c>
 4005598:	e0b7c217 	ldw	r2,-8440(fp)
 400559c:	10c00084 	addi	r3,r2,2
 40055a0:	e0b7c117 	ldw	r2,-8444(fp)
 40055a4:	14000084 	addi	r16,r2,2
 40055a8:	01400504 	movi	r5,20
 40055ac:	1809883a 	mov	r4,r3
 40055b0:	40191000 	call	4019100 <__mulsi3>
 40055b4:	1405883a 	add	r2,r2,r16
 40055b8:	1085883a 	add	r2,r2,r2
 40055bc:	1085883a 	add	r2,r2,r2
 40055c0:	e0f7c104 	addi	r3,fp,-8444
 40055c4:	1885883a 	add	r2,r3,r2
 40055c8:	10879d04 	addi	r2,r2,7796
 40055cc:	10800017 	ldw	r2,0(r2)
 40055d0:	10bffd98 	cmpnei	r2,r2,-10
 40055d4:	1000221e 	bne	r2,zero,4005660 <main+0x508c>
							{
								draw(white, COLOR08_WHITE, x,y+2 );
 40055d8:	e0b7c217 	ldw	r2,-8440(fp)
 40055dc:	10c00084 	addi	r3,r2,2
 40055e0:	e0b95e04 	addi	r2,fp,-6792
 40055e4:	180f883a 	mov	r7,r3
 40055e8:	e1b7c117 	ldw	r6,-8444(fp)
 40055ec:	01403fc4 	movi	r5,255
 40055f0:	1009883a 	mov	r4,r2
 40055f4:	40003c80 	call	40003c8 <draw>
								draw(zero, COLOR08_BLACK, x,y+2 );
 40055f8:	e0b7c217 	ldw	r2,-8440(fp)
 40055fc:	10800084 	addi	r2,r2,2
 4005600:	100f883a 	mov	r7,r2
 4005604:	e1b7c117 	ldw	r6,-8444(fp)
 4005608:	000b883a 	mov	r5,zero
 400560c:	010100f4 	movhi	r4,1027
 4005610:	21312a04 	addi	r4,r4,-15192
 4005614:	40003c80 	call	40003c8 <draw>
								gameboard[y][x]=-10;
 4005618:	e0b7c217 	ldw	r2,-8440(fp)
 400561c:	01400504 	movi	r5,20
 4005620:	1009883a 	mov	r4,r2
 4005624:	40191000 	call	4019100 <__mulsi3>
 4005628:	1007883a 	mov	r3,r2
 400562c:	e0b7c117 	ldw	r2,-8444(fp)
 4005630:	1885883a 	add	r2,r3,r2
 4005634:	1085883a 	add	r2,r2,r2
 4005638:	1085883a 	add	r2,r2,r2
 400563c:	e0f7c104 	addi	r3,fp,-8444
 4005640:	1885883a 	add	r2,r3,r2
 4005644:	10879d04 	addi	r2,r2,7796
 4005648:	00fffd84 	movi	r3,-10
 400564c:	10c00015 	stw	r3,0(r2)
								IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4005650:	00c00044 	movi	r3,1
 4005654:	008200b4 	movhi	r2,2050
 4005658:	10841804 	addi	r2,r2,4192
 400565c:	10c00035 	stwio	r3,0(r2)
							}
							//////////////////////////////////////////////////////////

							//diagonal (/)0
							if (gameboard [y][x]==gameboard [y+1][x-1] && gameboard[y][x]== gameboard[y-1][x+1])//(/x/)
 4005660:	e0b7c217 	ldw	r2,-8440(fp)
 4005664:	01400504 	movi	r5,20
 4005668:	1009883a 	mov	r4,r2
 400566c:	40191000 	call	4019100 <__mulsi3>
 4005670:	1007883a 	mov	r3,r2
 4005674:	e0b7c117 	ldw	r2,-8444(fp)
 4005678:	1885883a 	add	r2,r3,r2
 400567c:	1085883a 	add	r2,r2,r2
 4005680:	1085883a 	add	r2,r2,r2
 4005684:	e0f7c104 	addi	r3,fp,-8444
 4005688:	1885883a 	add	r2,r3,r2
 400568c:	10879d04 	addi	r2,r2,7796
 4005690:	14000017 	ldw	r16,0(r2)
 4005694:	e0b7c217 	ldw	r2,-8440(fp)
 4005698:	10c00044 	addi	r3,r2,1
 400569c:	e0b7c117 	ldw	r2,-8444(fp)
 40056a0:	147fffc4 	addi	r17,r2,-1
 40056a4:	01400504 	movi	r5,20
 40056a8:	1809883a 	mov	r4,r3
 40056ac:	40191000 	call	4019100 <__mulsi3>
 40056b0:	1445883a 	add	r2,r2,r17
 40056b4:	1085883a 	add	r2,r2,r2
 40056b8:	1085883a 	add	r2,r2,r2
 40056bc:	e0f7c104 	addi	r3,fp,-8444
 40056c0:	1885883a 	add	r2,r3,r2
 40056c4:	10879d04 	addi	r2,r2,7796
 40056c8:	10800017 	ldw	r2,0(r2)
 40056cc:	80803e1e 	bne	r16,r2,40057c8 <main+0x51f4>
 40056d0:	e0b7c217 	ldw	r2,-8440(fp)
 40056d4:	01400504 	movi	r5,20
 40056d8:	1009883a 	mov	r4,r2
 40056dc:	40191000 	call	4019100 <__mulsi3>
 40056e0:	1007883a 	mov	r3,r2
 40056e4:	e0b7c117 	ldw	r2,-8444(fp)
 40056e8:	1885883a 	add	r2,r3,r2
 40056ec:	1085883a 	add	r2,r2,r2
 40056f0:	1085883a 	add	r2,r2,r2
 40056f4:	e0f7c104 	addi	r3,fp,-8444
 40056f8:	1885883a 	add	r2,r3,r2
 40056fc:	10879d04 	addi	r2,r2,7796
 4005700:	14000017 	ldw	r16,0(r2)
 4005704:	e0b7c217 	ldw	r2,-8440(fp)
 4005708:	10ffffc4 	addi	r3,r2,-1
 400570c:	e0b7c117 	ldw	r2,-8444(fp)
 4005710:	14400044 	addi	r17,r2,1
 4005714:	01400504 	movi	r5,20
 4005718:	1809883a 	mov	r4,r3
 400571c:	40191000 	call	4019100 <__mulsi3>
 4005720:	1445883a 	add	r2,r2,r17
 4005724:	1085883a 	add	r2,r2,r2
 4005728:	1085883a 	add	r2,r2,r2
 400572c:	e0f7c104 	addi	r3,fp,-8444
 4005730:	1885883a 	add	r2,r3,r2
 4005734:	10879d04 	addi	r2,r2,7796
 4005738:	10800017 	ldw	r2,0(r2)
 400573c:	8080221e 	bne	r16,r2,40057c8 <main+0x51f4>
							{
								draw(white, COLOR08_WHITE, x,y+2 );
 4005740:	e0b7c217 	ldw	r2,-8440(fp)
 4005744:	10c00084 	addi	r3,r2,2
 4005748:	e0b95e04 	addi	r2,fp,-6792
 400574c:	180f883a 	mov	r7,r3
 4005750:	e1b7c117 	ldw	r6,-8444(fp)
 4005754:	01403fc4 	movi	r5,255
 4005758:	1009883a 	mov	r4,r2
 400575c:	40003c80 	call	40003c8 <draw>
								draw(zero, COLOR08_BLACK, x,y+2 );
 4005760:	e0b7c217 	ldw	r2,-8440(fp)
 4005764:	10800084 	addi	r2,r2,2
 4005768:	100f883a 	mov	r7,r2
 400576c:	e1b7c117 	ldw	r6,-8444(fp)
 4005770:	000b883a 	mov	r5,zero
 4005774:	010100f4 	movhi	r4,1027
 4005778:	21312a04 	addi	r4,r4,-15192
 400577c:	40003c80 	call	40003c8 <draw>
								gameboard[y][x]=-10;
 4005780:	e0b7c217 	ldw	r2,-8440(fp)
 4005784:	01400504 	movi	r5,20
 4005788:	1009883a 	mov	r4,r2
 400578c:	40191000 	call	4019100 <__mulsi3>
 4005790:	1007883a 	mov	r3,r2
 4005794:	e0b7c117 	ldw	r2,-8444(fp)
 4005798:	1885883a 	add	r2,r3,r2
 400579c:	1085883a 	add	r2,r2,r2
 40057a0:	1085883a 	add	r2,r2,r2
 40057a4:	e0f7c104 	addi	r3,fp,-8444
 40057a8:	1885883a 	add	r2,r3,r2
 40057ac:	10879d04 	addi	r2,r2,7796
 40057b0:	00fffd84 	movi	r3,-10
 40057b4:	10c00015 	stw	r3,0(r2)
								IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40057b8:	00c00044 	movi	r3,1
 40057bc:	008200b4 	movhi	r2,2050
 40057c0:	10841804 	addi	r2,r2,4192
 40057c4:	10c00035 	stwio	r3,0(r2)

							}
							if (gameboard [y][x]==gameboard [y-1][x+1] && gameboard[y][x]== gameboard[y-2][x+2])//(x//)
 40057c8:	e0b7c217 	ldw	r2,-8440(fp)
 40057cc:	01400504 	movi	r5,20
 40057d0:	1009883a 	mov	r4,r2
 40057d4:	40191000 	call	4019100 <__mulsi3>
 40057d8:	1007883a 	mov	r3,r2
 40057dc:	e0b7c117 	ldw	r2,-8444(fp)
 40057e0:	1885883a 	add	r2,r3,r2
 40057e4:	1085883a 	add	r2,r2,r2
 40057e8:	1085883a 	add	r2,r2,r2
 40057ec:	e0f7c104 	addi	r3,fp,-8444
 40057f0:	1885883a 	add	r2,r3,r2
 40057f4:	10879d04 	addi	r2,r2,7796
 40057f8:	14000017 	ldw	r16,0(r2)
 40057fc:	e0b7c217 	ldw	r2,-8440(fp)
 4005800:	10ffffc4 	addi	r3,r2,-1
 4005804:	e0b7c117 	ldw	r2,-8444(fp)
 4005808:	14400044 	addi	r17,r2,1
 400580c:	01400504 	movi	r5,20
 4005810:	1809883a 	mov	r4,r3
 4005814:	40191000 	call	4019100 <__mulsi3>
 4005818:	1445883a 	add	r2,r2,r17
 400581c:	1085883a 	add	r2,r2,r2
 4005820:	1085883a 	add	r2,r2,r2
 4005824:	e0f7c104 	addi	r3,fp,-8444
 4005828:	1885883a 	add	r2,r3,r2
 400582c:	10879d04 	addi	r2,r2,7796
 4005830:	10800017 	ldw	r2,0(r2)
 4005834:	80803e1e 	bne	r16,r2,4005930 <main+0x535c>
 4005838:	e0b7c217 	ldw	r2,-8440(fp)
 400583c:	01400504 	movi	r5,20
 4005840:	1009883a 	mov	r4,r2
 4005844:	40191000 	call	4019100 <__mulsi3>
 4005848:	1007883a 	mov	r3,r2
 400584c:	e0b7c117 	ldw	r2,-8444(fp)
 4005850:	1885883a 	add	r2,r3,r2
 4005854:	1085883a 	add	r2,r2,r2
 4005858:	1085883a 	add	r2,r2,r2
 400585c:	e0f7c104 	addi	r3,fp,-8444
 4005860:	1885883a 	add	r2,r3,r2
 4005864:	10879d04 	addi	r2,r2,7796
 4005868:	14000017 	ldw	r16,0(r2)
 400586c:	e0b7c217 	ldw	r2,-8440(fp)
 4005870:	10ffff84 	addi	r3,r2,-2
 4005874:	e0b7c117 	ldw	r2,-8444(fp)
 4005878:	14400084 	addi	r17,r2,2
 400587c:	01400504 	movi	r5,20
 4005880:	1809883a 	mov	r4,r3
 4005884:	40191000 	call	4019100 <__mulsi3>
 4005888:	1445883a 	add	r2,r2,r17
 400588c:	1085883a 	add	r2,r2,r2
 4005890:	1085883a 	add	r2,r2,r2
 4005894:	e0f7c104 	addi	r3,fp,-8444
 4005898:	1885883a 	add	r2,r3,r2
 400589c:	10879d04 	addi	r2,r2,7796
 40058a0:	10800017 	ldw	r2,0(r2)
 40058a4:	8080221e 	bne	r16,r2,4005930 <main+0x535c>
							{
								draw(white, COLOR08_WHITE, x,y+2 );
 40058a8:	e0b7c217 	ldw	r2,-8440(fp)
 40058ac:	10c00084 	addi	r3,r2,2
 40058b0:	e0b95e04 	addi	r2,fp,-6792
 40058b4:	180f883a 	mov	r7,r3
 40058b8:	e1b7c117 	ldw	r6,-8444(fp)
 40058bc:	01403fc4 	movi	r5,255
 40058c0:	1009883a 	mov	r4,r2
 40058c4:	40003c80 	call	40003c8 <draw>
								draw(zero, COLOR08_BLACK, x,y+2 );
 40058c8:	e0b7c217 	ldw	r2,-8440(fp)
 40058cc:	10800084 	addi	r2,r2,2
 40058d0:	100f883a 	mov	r7,r2
 40058d4:	e1b7c117 	ldw	r6,-8444(fp)
 40058d8:	000b883a 	mov	r5,zero
 40058dc:	010100f4 	movhi	r4,1027
 40058e0:	21312a04 	addi	r4,r4,-15192
 40058e4:	40003c80 	call	40003c8 <draw>
								gameboard[y][x]=-10;
 40058e8:	e0b7c217 	ldw	r2,-8440(fp)
 40058ec:	01400504 	movi	r5,20
 40058f0:	1009883a 	mov	r4,r2
 40058f4:	40191000 	call	4019100 <__mulsi3>
 40058f8:	1007883a 	mov	r3,r2
 40058fc:	e0b7c117 	ldw	r2,-8444(fp)
 4005900:	1885883a 	add	r2,r3,r2
 4005904:	1085883a 	add	r2,r2,r2
 4005908:	1085883a 	add	r2,r2,r2
 400590c:	e0f7c104 	addi	r3,fp,-8444
 4005910:	1885883a 	add	r2,r3,r2
 4005914:	10879d04 	addi	r2,r2,7796
 4005918:	00fffd84 	movi	r3,-10
 400591c:	10c00015 	stw	r3,0(r2)
								IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4005920:	00c00044 	movi	r3,1
 4005924:	008200b4 	movhi	r2,2050
 4005928:	10841804 	addi	r2,r2,4192
 400592c:	10c00035 	stwio	r3,0(r2)
							}
							if ((gameboard [y][x]==0 && gameboard [y+1][x-1]==-10) || (gameboard [y][x]==0 && gameboard [y-1][x+1]==-10))//(x//)
 4005930:	e0b7c217 	ldw	r2,-8440(fp)
 4005934:	01400504 	movi	r5,20
 4005938:	1009883a 	mov	r4,r2
 400593c:	40191000 	call	4019100 <__mulsi3>
 4005940:	1007883a 	mov	r3,r2
 4005944:	e0b7c117 	ldw	r2,-8444(fp)
 4005948:	1885883a 	add	r2,r3,r2
 400594c:	1085883a 	add	r2,r2,r2
 4005950:	1085883a 	add	r2,r2,r2
 4005954:	e0f7c104 	addi	r3,fp,-8444
 4005958:	1885883a 	add	r2,r3,r2
 400595c:	10879d04 	addi	r2,r2,7796
 4005960:	10800017 	ldw	r2,0(r2)
 4005964:	1000101e 	bne	r2,zero,40059a8 <main+0x53d4>
 4005968:	e0b7c217 	ldw	r2,-8440(fp)
 400596c:	10c00044 	addi	r3,r2,1
 4005970:	e0b7c117 	ldw	r2,-8444(fp)
 4005974:	143fffc4 	addi	r16,r2,-1
 4005978:	01400504 	movi	r5,20
 400597c:	1809883a 	mov	r4,r3
 4005980:	40191000 	call	4019100 <__mulsi3>
 4005984:	1405883a 	add	r2,r2,r16
 4005988:	1085883a 	add	r2,r2,r2
 400598c:	1085883a 	add	r2,r2,r2
 4005990:	e0f7c104 	addi	r3,fp,-8444
 4005994:	1885883a 	add	r2,r3,r2
 4005998:	10879d04 	addi	r2,r2,7796
 400599c:	10800017 	ldw	r2,0(r2)
 40059a0:	10bffda0 	cmpeqi	r2,r2,-10
 40059a4:	10001e1e 	bne	r2,zero,4005a20 <main+0x544c>
 40059a8:	e0b7c217 	ldw	r2,-8440(fp)
 40059ac:	01400504 	movi	r5,20
 40059b0:	1009883a 	mov	r4,r2
 40059b4:	40191000 	call	4019100 <__mulsi3>
 40059b8:	1007883a 	mov	r3,r2
 40059bc:	e0b7c117 	ldw	r2,-8444(fp)
 40059c0:	1885883a 	add	r2,r3,r2
 40059c4:	1085883a 	add	r2,r2,r2
 40059c8:	1085883a 	add	r2,r2,r2
 40059cc:	e0f7c104 	addi	r3,fp,-8444
 40059d0:	1885883a 	add	r2,r3,r2
 40059d4:	10879d04 	addi	r2,r2,7796
 40059d8:	10800017 	ldw	r2,0(r2)
 40059dc:	1000321e 	bne	r2,zero,4005aa8 <main+0x54d4>
 40059e0:	e0b7c217 	ldw	r2,-8440(fp)
 40059e4:	10ffffc4 	addi	r3,r2,-1
 40059e8:	e0b7c117 	ldw	r2,-8444(fp)
 40059ec:	14000044 	addi	r16,r2,1
 40059f0:	01400504 	movi	r5,20
 40059f4:	1809883a 	mov	r4,r3
 40059f8:	40191000 	call	4019100 <__mulsi3>
 40059fc:	1405883a 	add	r2,r2,r16
 4005a00:	1085883a 	add	r2,r2,r2
 4005a04:	1085883a 	add	r2,r2,r2
 4005a08:	e0f7c104 	addi	r3,fp,-8444
 4005a0c:	1885883a 	add	r2,r3,r2
 4005a10:	10879d04 	addi	r2,r2,7796
 4005a14:	10800017 	ldw	r2,0(r2)
 4005a18:	10bffd98 	cmpnei	r2,r2,-10
 4005a1c:	1000221e 	bne	r2,zero,4005aa8 <main+0x54d4>
							{
								draw(white, COLOR08_WHITE, x,y+2 );
 4005a20:	e0b7c217 	ldw	r2,-8440(fp)
 4005a24:	10c00084 	addi	r3,r2,2
 4005a28:	e0b95e04 	addi	r2,fp,-6792
 4005a2c:	180f883a 	mov	r7,r3
 4005a30:	e1b7c117 	ldw	r6,-8444(fp)
 4005a34:	01403fc4 	movi	r5,255
 4005a38:	1009883a 	mov	r4,r2
 4005a3c:	40003c80 	call	40003c8 <draw>
								draw(zero, COLOR08_BLACK, x,y+2 );
 4005a40:	e0b7c217 	ldw	r2,-8440(fp)
 4005a44:	10800084 	addi	r2,r2,2
 4005a48:	100f883a 	mov	r7,r2
 4005a4c:	e1b7c117 	ldw	r6,-8444(fp)
 4005a50:	000b883a 	mov	r5,zero
 4005a54:	010100f4 	movhi	r4,1027
 4005a58:	21312a04 	addi	r4,r4,-15192
 4005a5c:	40003c80 	call	40003c8 <draw>
								gameboard[y][x]=-10;
 4005a60:	e0b7c217 	ldw	r2,-8440(fp)
 4005a64:	01400504 	movi	r5,20
 4005a68:	1009883a 	mov	r4,r2
 4005a6c:	40191000 	call	4019100 <__mulsi3>
 4005a70:	1007883a 	mov	r3,r2
 4005a74:	e0b7c117 	ldw	r2,-8444(fp)
 4005a78:	1885883a 	add	r2,r3,r2
 4005a7c:	1085883a 	add	r2,r2,r2
 4005a80:	1085883a 	add	r2,r2,r2
 4005a84:	e0f7c104 	addi	r3,fp,-8444
 4005a88:	1885883a 	add	r2,r3,r2
 4005a8c:	10879d04 	addi	r2,r2,7796
 4005a90:	00fffd84 	movi	r3,-10
 4005a94:	10c00015 	stw	r3,0(r2)
								IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4005a98:	00c00044 	movi	r3,1
 4005a9c:	008200b4 	movhi	r2,2050
 4005aa0:	10841804 	addi	r2,r2,4192
 4005aa4:	10c00035 	stwio	r3,0(r2)
							}
							if(gameboard[y][x]==0 && gameboard[y+1][x-1]==0 && gameboard[y+2][x-2]==-10)
 4005aa8:	e0b7c217 	ldw	r2,-8440(fp)
 4005aac:	01400504 	movi	r5,20
 4005ab0:	1009883a 	mov	r4,r2
 4005ab4:	40191000 	call	4019100 <__mulsi3>
 4005ab8:	1007883a 	mov	r3,r2
 4005abc:	e0b7c117 	ldw	r2,-8444(fp)
 4005ac0:	1885883a 	add	r2,r3,r2
 4005ac4:	1085883a 	add	r2,r2,r2
 4005ac8:	1085883a 	add	r2,r2,r2
 4005acc:	e0f7c104 	addi	r3,fp,-8444
 4005ad0:	1885883a 	add	r2,r3,r2
 4005ad4:	10879d04 	addi	r2,r2,7796
 4005ad8:	10800017 	ldw	r2,0(r2)
 4005adc:	1000411e 	bne	r2,zero,4005be4 <main+0x5610>
 4005ae0:	e0b7c217 	ldw	r2,-8440(fp)
 4005ae4:	10c00044 	addi	r3,r2,1
 4005ae8:	e0b7c117 	ldw	r2,-8444(fp)
 4005aec:	143fffc4 	addi	r16,r2,-1
 4005af0:	01400504 	movi	r5,20
 4005af4:	1809883a 	mov	r4,r3
 4005af8:	40191000 	call	4019100 <__mulsi3>
 4005afc:	1405883a 	add	r2,r2,r16
 4005b00:	1085883a 	add	r2,r2,r2
 4005b04:	1085883a 	add	r2,r2,r2
 4005b08:	e0f7c104 	addi	r3,fp,-8444
 4005b0c:	1885883a 	add	r2,r3,r2
 4005b10:	10879d04 	addi	r2,r2,7796
 4005b14:	10800017 	ldw	r2,0(r2)
 4005b18:	1000321e 	bne	r2,zero,4005be4 <main+0x5610>
 4005b1c:	e0b7c217 	ldw	r2,-8440(fp)
 4005b20:	10c00084 	addi	r3,r2,2
 4005b24:	e0b7c117 	ldw	r2,-8444(fp)
 4005b28:	143fff84 	addi	r16,r2,-2
 4005b2c:	01400504 	movi	r5,20
 4005b30:	1809883a 	mov	r4,r3
 4005b34:	40191000 	call	4019100 <__mulsi3>
 4005b38:	1405883a 	add	r2,r2,r16
 4005b3c:	1085883a 	add	r2,r2,r2
 4005b40:	1085883a 	add	r2,r2,r2
 4005b44:	e0f7c104 	addi	r3,fp,-8444
 4005b48:	1885883a 	add	r2,r3,r2
 4005b4c:	10879d04 	addi	r2,r2,7796
 4005b50:	10800017 	ldw	r2,0(r2)
 4005b54:	10bffd98 	cmpnei	r2,r2,-10
 4005b58:	1000221e 	bne	r2,zero,4005be4 <main+0x5610>
							{
								draw(white, COLOR08_WHITE, x,y+2 );
 4005b5c:	e0b7c217 	ldw	r2,-8440(fp)
 4005b60:	10c00084 	addi	r3,r2,2
 4005b64:	e0b95e04 	addi	r2,fp,-6792
 4005b68:	180f883a 	mov	r7,r3
 4005b6c:	e1b7c117 	ldw	r6,-8444(fp)
 4005b70:	01403fc4 	movi	r5,255
 4005b74:	1009883a 	mov	r4,r2
 4005b78:	40003c80 	call	40003c8 <draw>
								draw(zero, COLOR08_BLACK, x,y+2 );
 4005b7c:	e0b7c217 	ldw	r2,-8440(fp)
 4005b80:	10800084 	addi	r2,r2,2
 4005b84:	100f883a 	mov	r7,r2
 4005b88:	e1b7c117 	ldw	r6,-8444(fp)
 4005b8c:	000b883a 	mov	r5,zero
 4005b90:	010100f4 	movhi	r4,1027
 4005b94:	21312a04 	addi	r4,r4,-15192
 4005b98:	40003c80 	call	40003c8 <draw>
								gameboard[y][x]=-10;
 4005b9c:	e0b7c217 	ldw	r2,-8440(fp)
 4005ba0:	01400504 	movi	r5,20
 4005ba4:	1009883a 	mov	r4,r2
 4005ba8:	40191000 	call	4019100 <__mulsi3>
 4005bac:	1007883a 	mov	r3,r2
 4005bb0:	e0b7c117 	ldw	r2,-8444(fp)
 4005bb4:	1885883a 	add	r2,r3,r2
 4005bb8:	1085883a 	add	r2,r2,r2
 4005bbc:	1085883a 	add	r2,r2,r2
 4005bc0:	e0f7c104 	addi	r3,fp,-8444
 4005bc4:	1885883a 	add	r2,r3,r2
 4005bc8:	10879d04 	addi	r2,r2,7796
 4005bcc:	00fffd84 	movi	r3,-10
 4005bd0:	10c00015 	stw	r3,0(r2)
								IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4005bd4:	00c00044 	movi	r3,1
 4005bd8:	008200b4 	movhi	r2,2050
 4005bdc:	10841804 	addi	r2,r2,4192
 4005be0:	10c00035 	stwio	r3,0(r2)
							}
							if(gameboard[y][x]==0 && gameboard[y-1][x+1]==0 && gameboard[y-2][x+2]==-10)
 4005be4:	e0b7c217 	ldw	r2,-8440(fp)
 4005be8:	01400504 	movi	r5,20
 4005bec:	1009883a 	mov	r4,r2
 4005bf0:	40191000 	call	4019100 <__mulsi3>
 4005bf4:	1007883a 	mov	r3,r2
 4005bf8:	e0b7c117 	ldw	r2,-8444(fp)
 4005bfc:	1885883a 	add	r2,r3,r2
 4005c00:	1085883a 	add	r2,r2,r2
 4005c04:	1085883a 	add	r2,r2,r2
 4005c08:	e0f7c104 	addi	r3,fp,-8444
 4005c0c:	1885883a 	add	r2,r3,r2
 4005c10:	10879d04 	addi	r2,r2,7796
 4005c14:	10800017 	ldw	r2,0(r2)
 4005c18:	1000411e 	bne	r2,zero,4005d20 <main+0x574c>
 4005c1c:	e0b7c217 	ldw	r2,-8440(fp)
 4005c20:	10ffffc4 	addi	r3,r2,-1
 4005c24:	e0b7c117 	ldw	r2,-8444(fp)
 4005c28:	14000044 	addi	r16,r2,1
 4005c2c:	01400504 	movi	r5,20
 4005c30:	1809883a 	mov	r4,r3
 4005c34:	40191000 	call	4019100 <__mulsi3>
 4005c38:	1405883a 	add	r2,r2,r16
 4005c3c:	1085883a 	add	r2,r2,r2
 4005c40:	1085883a 	add	r2,r2,r2
 4005c44:	e0f7c104 	addi	r3,fp,-8444
 4005c48:	1885883a 	add	r2,r3,r2
 4005c4c:	10879d04 	addi	r2,r2,7796
 4005c50:	10800017 	ldw	r2,0(r2)
 4005c54:	1000321e 	bne	r2,zero,4005d20 <main+0x574c>
 4005c58:	e0b7c217 	ldw	r2,-8440(fp)
 4005c5c:	10ffff84 	addi	r3,r2,-2
 4005c60:	e0b7c117 	ldw	r2,-8444(fp)
 4005c64:	14000084 	addi	r16,r2,2
 4005c68:	01400504 	movi	r5,20
 4005c6c:	1809883a 	mov	r4,r3
 4005c70:	40191000 	call	4019100 <__mulsi3>
 4005c74:	1405883a 	add	r2,r2,r16
 4005c78:	1085883a 	add	r2,r2,r2
 4005c7c:	1085883a 	add	r2,r2,r2
 4005c80:	e0f7c104 	addi	r3,fp,-8444
 4005c84:	1885883a 	add	r2,r3,r2
 4005c88:	10879d04 	addi	r2,r2,7796
 4005c8c:	10800017 	ldw	r2,0(r2)
 4005c90:	10bffd98 	cmpnei	r2,r2,-10
 4005c94:	1000221e 	bne	r2,zero,4005d20 <main+0x574c>
							{
								draw(white, COLOR08_WHITE, x,y+2 );
 4005c98:	e0b7c217 	ldw	r2,-8440(fp)
 4005c9c:	10c00084 	addi	r3,r2,2
 4005ca0:	e0b95e04 	addi	r2,fp,-6792
 4005ca4:	180f883a 	mov	r7,r3
 4005ca8:	e1b7c117 	ldw	r6,-8444(fp)
 4005cac:	01403fc4 	movi	r5,255
 4005cb0:	1009883a 	mov	r4,r2
 4005cb4:	40003c80 	call	40003c8 <draw>
								draw(zero, COLOR08_BLACK, x,y+2 );
 4005cb8:	e0b7c217 	ldw	r2,-8440(fp)
 4005cbc:	10800084 	addi	r2,r2,2
 4005cc0:	100f883a 	mov	r7,r2
 4005cc4:	e1b7c117 	ldw	r6,-8444(fp)
 4005cc8:	000b883a 	mov	r5,zero
 4005ccc:	010100f4 	movhi	r4,1027
 4005cd0:	21312a04 	addi	r4,r4,-15192
 4005cd4:	40003c80 	call	40003c8 <draw>
								gameboard[y][x]=-10;
 4005cd8:	e0b7c217 	ldw	r2,-8440(fp)
 4005cdc:	01400504 	movi	r5,20
 4005ce0:	1009883a 	mov	r4,r2
 4005ce4:	40191000 	call	4019100 <__mulsi3>
 4005ce8:	1007883a 	mov	r3,r2
 4005cec:	e0b7c117 	ldw	r2,-8444(fp)
 4005cf0:	1885883a 	add	r2,r3,r2
 4005cf4:	1085883a 	add	r2,r2,r2
 4005cf8:	1085883a 	add	r2,r2,r2
 4005cfc:	e0f7c104 	addi	r3,fp,-8444
 4005d00:	1885883a 	add	r2,r3,r2
 4005d04:	10879d04 	addi	r2,r2,7796
 4005d08:	00fffd84 	movi	r3,-10
 4005d0c:	10c00015 	stw	r3,0(r2)
								IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4005d10:	00c00044 	movi	r3,1
 4005d14:	008200b4 	movhi	r2,2050
 4005d18:	10841804 	addi	r2,r2,4192
 4005d1c:	10c00035 	stwio	r3,0(r2)
							}
							if(gameboard[y][x]==0 && gameboard[y+1][x-1]==0 && gameboard[y+2][x-2]==0)
 4005d20:	e0b7c217 	ldw	r2,-8440(fp)
 4005d24:	01400504 	movi	r5,20
 4005d28:	1009883a 	mov	r4,r2
 4005d2c:	40191000 	call	4019100 <__mulsi3>
 4005d30:	1007883a 	mov	r3,r2
 4005d34:	e0b7c117 	ldw	r2,-8444(fp)
 4005d38:	1885883a 	add	r2,r3,r2
 4005d3c:	1085883a 	add	r2,r2,r2
 4005d40:	1085883a 	add	r2,r2,r2
 4005d44:	e0f7c104 	addi	r3,fp,-8444
 4005d48:	1885883a 	add	r2,r3,r2
 4005d4c:	10879d04 	addi	r2,r2,7796
 4005d50:	10800017 	ldw	r2,0(r2)
 4005d54:	1000401e 	bne	r2,zero,4005e58 <main+0x5884>
 4005d58:	e0b7c217 	ldw	r2,-8440(fp)
 4005d5c:	10c00044 	addi	r3,r2,1
 4005d60:	e0b7c117 	ldw	r2,-8444(fp)
 4005d64:	143fffc4 	addi	r16,r2,-1
 4005d68:	01400504 	movi	r5,20
 4005d6c:	1809883a 	mov	r4,r3
 4005d70:	40191000 	call	4019100 <__mulsi3>
 4005d74:	1405883a 	add	r2,r2,r16
 4005d78:	1085883a 	add	r2,r2,r2
 4005d7c:	1085883a 	add	r2,r2,r2
 4005d80:	e0f7c104 	addi	r3,fp,-8444
 4005d84:	1885883a 	add	r2,r3,r2
 4005d88:	10879d04 	addi	r2,r2,7796
 4005d8c:	10800017 	ldw	r2,0(r2)
 4005d90:	1000311e 	bne	r2,zero,4005e58 <main+0x5884>
 4005d94:	e0b7c217 	ldw	r2,-8440(fp)
 4005d98:	10c00084 	addi	r3,r2,2
 4005d9c:	e0b7c117 	ldw	r2,-8444(fp)
 4005da0:	143fff84 	addi	r16,r2,-2
 4005da4:	01400504 	movi	r5,20
 4005da8:	1809883a 	mov	r4,r3
 4005dac:	40191000 	call	4019100 <__mulsi3>
 4005db0:	1405883a 	add	r2,r2,r16
 4005db4:	1085883a 	add	r2,r2,r2
 4005db8:	1085883a 	add	r2,r2,r2
 4005dbc:	e0f7c104 	addi	r3,fp,-8444
 4005dc0:	1885883a 	add	r2,r3,r2
 4005dc4:	10879d04 	addi	r2,r2,7796
 4005dc8:	10800017 	ldw	r2,0(r2)
 4005dcc:	1000221e 	bne	r2,zero,4005e58 <main+0x5884>
							{
								draw(white, COLOR08_WHITE, x,y+2 );
 4005dd0:	e0b7c217 	ldw	r2,-8440(fp)
 4005dd4:	10c00084 	addi	r3,r2,2
 4005dd8:	e0b95e04 	addi	r2,fp,-6792
 4005ddc:	180f883a 	mov	r7,r3
 4005de0:	e1b7c117 	ldw	r6,-8444(fp)
 4005de4:	01403fc4 	movi	r5,255
 4005de8:	1009883a 	mov	r4,r2
 4005dec:	40003c80 	call	40003c8 <draw>
								draw(zero, COLOR08_BLACK, x,y+2 );
 4005df0:	e0b7c217 	ldw	r2,-8440(fp)
 4005df4:	10800084 	addi	r2,r2,2
 4005df8:	100f883a 	mov	r7,r2
 4005dfc:	e1b7c117 	ldw	r6,-8444(fp)
 4005e00:	000b883a 	mov	r5,zero
 4005e04:	010100f4 	movhi	r4,1027
 4005e08:	21312a04 	addi	r4,r4,-15192
 4005e0c:	40003c80 	call	40003c8 <draw>
								gameboard[y][x]=-10;
 4005e10:	e0b7c217 	ldw	r2,-8440(fp)
 4005e14:	01400504 	movi	r5,20
 4005e18:	1009883a 	mov	r4,r2
 4005e1c:	40191000 	call	4019100 <__mulsi3>
 4005e20:	1007883a 	mov	r3,r2
 4005e24:	e0b7c117 	ldw	r2,-8444(fp)
 4005e28:	1885883a 	add	r2,r3,r2
 4005e2c:	1085883a 	add	r2,r2,r2
 4005e30:	1085883a 	add	r2,r2,r2
 4005e34:	e0f7c104 	addi	r3,fp,-8444
 4005e38:	1885883a 	add	r2,r3,r2
 4005e3c:	10879d04 	addi	r2,r2,7796
 4005e40:	00fffd84 	movi	r3,-10
 4005e44:	10c00015 	stw	r3,0(r2)
								IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4005e48:	00c00044 	movi	r3,1
 4005e4c:	008200b4 	movhi	r2,2050
 4005e50:	10841804 	addi	r2,r2,4192
 4005e54:	10c00035 	stwio	r3,0(r2)
							}
							if(gameboard[y][x]==0 && gameboard[y-1][x+1]==0 && gameboard[y-2][x+2]==0)
 4005e58:	e0b7c217 	ldw	r2,-8440(fp)
 4005e5c:	01400504 	movi	r5,20
 4005e60:	1009883a 	mov	r4,r2
 4005e64:	40191000 	call	4019100 <__mulsi3>
 4005e68:	1007883a 	mov	r3,r2
 4005e6c:	e0b7c117 	ldw	r2,-8444(fp)
 4005e70:	1885883a 	add	r2,r3,r2
 4005e74:	1085883a 	add	r2,r2,r2
 4005e78:	1085883a 	add	r2,r2,r2
 4005e7c:	e0f7c104 	addi	r3,fp,-8444
 4005e80:	1885883a 	add	r2,r3,r2
 4005e84:	10879d04 	addi	r2,r2,7796
 4005e88:	10800017 	ldw	r2,0(r2)
 4005e8c:	1000401e 	bne	r2,zero,4005f90 <main+0x59bc>
 4005e90:	e0b7c217 	ldw	r2,-8440(fp)
 4005e94:	10ffffc4 	addi	r3,r2,-1
 4005e98:	e0b7c117 	ldw	r2,-8444(fp)
 4005e9c:	14000044 	addi	r16,r2,1
 4005ea0:	01400504 	movi	r5,20
 4005ea4:	1809883a 	mov	r4,r3
 4005ea8:	40191000 	call	4019100 <__mulsi3>
 4005eac:	1405883a 	add	r2,r2,r16
 4005eb0:	1085883a 	add	r2,r2,r2
 4005eb4:	1085883a 	add	r2,r2,r2
 4005eb8:	e0f7c104 	addi	r3,fp,-8444
 4005ebc:	1885883a 	add	r2,r3,r2
 4005ec0:	10879d04 	addi	r2,r2,7796
 4005ec4:	10800017 	ldw	r2,0(r2)
 4005ec8:	1000311e 	bne	r2,zero,4005f90 <main+0x59bc>
 4005ecc:	e0b7c217 	ldw	r2,-8440(fp)
 4005ed0:	10ffff84 	addi	r3,r2,-2
 4005ed4:	e0b7c117 	ldw	r2,-8444(fp)
 4005ed8:	14000084 	addi	r16,r2,2
 4005edc:	01400504 	movi	r5,20
 4005ee0:	1809883a 	mov	r4,r3
 4005ee4:	40191000 	call	4019100 <__mulsi3>
 4005ee8:	1405883a 	add	r2,r2,r16
 4005eec:	1085883a 	add	r2,r2,r2
 4005ef0:	1085883a 	add	r2,r2,r2
 4005ef4:	e0f7c104 	addi	r3,fp,-8444
 4005ef8:	1885883a 	add	r2,r3,r2
 4005efc:	10879d04 	addi	r2,r2,7796
 4005f00:	10800017 	ldw	r2,0(r2)
 4005f04:	1000221e 	bne	r2,zero,4005f90 <main+0x59bc>
							{
								draw(white, COLOR08_WHITE, x,y+2 );
 4005f08:	e0b7c217 	ldw	r2,-8440(fp)
 4005f0c:	10c00084 	addi	r3,r2,2
 4005f10:	e0b95e04 	addi	r2,fp,-6792
 4005f14:	180f883a 	mov	r7,r3
 4005f18:	e1b7c117 	ldw	r6,-8444(fp)
 4005f1c:	01403fc4 	movi	r5,255
 4005f20:	1009883a 	mov	r4,r2
 4005f24:	40003c80 	call	40003c8 <draw>
								draw(zero, COLOR08_BLACK, x,y+2 );
 4005f28:	e0b7c217 	ldw	r2,-8440(fp)
 4005f2c:	10800084 	addi	r2,r2,2
 4005f30:	100f883a 	mov	r7,r2
 4005f34:	e1b7c117 	ldw	r6,-8444(fp)
 4005f38:	000b883a 	mov	r5,zero
 4005f3c:	010100f4 	movhi	r4,1027
 4005f40:	21312a04 	addi	r4,r4,-15192
 4005f44:	40003c80 	call	40003c8 <draw>
								gameboard[y][x]=-10;
 4005f48:	e0b7c217 	ldw	r2,-8440(fp)
 4005f4c:	01400504 	movi	r5,20
 4005f50:	1009883a 	mov	r4,r2
 4005f54:	40191000 	call	4019100 <__mulsi3>
 4005f58:	1007883a 	mov	r3,r2
 4005f5c:	e0b7c117 	ldw	r2,-8444(fp)
 4005f60:	1885883a 	add	r2,r3,r2
 4005f64:	1085883a 	add	r2,r2,r2
 4005f68:	1085883a 	add	r2,r2,r2
 4005f6c:	e0f7c104 	addi	r3,fp,-8444
 4005f70:	1885883a 	add	r2,r3,r2
 4005f74:	10879d04 	addi	r2,r2,7796
 4005f78:	00fffd84 	movi	r3,-10
 4005f7c:	10c00015 	stw	r3,0(r2)
								IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4005f80:	00c00044 	movi	r3,1
 4005f84:	008200b4 	movhi	r2,2050
 4005f88:	10841804 	addi	r2,r2,4192
 4005f8c:	10c00035 	stwio	r3,0(r2)
							}

						}

			if(gameboard[y][x]==1)//1
 4005f90:	e0b7c217 	ldw	r2,-8440(fp)
 4005f94:	01400504 	movi	r5,20
 4005f98:	1009883a 	mov	r4,r2
 4005f9c:	40191000 	call	4019100 <__mulsi3>
 4005fa0:	1007883a 	mov	r3,r2
 4005fa4:	e0b7c117 	ldw	r2,-8444(fp)
 4005fa8:	1885883a 	add	r2,r3,r2
 4005fac:	1085883a 	add	r2,r2,r2
 4005fb0:	1085883a 	add	r2,r2,r2
 4005fb4:	e0f7c104 	addi	r3,fp,-8444
 4005fb8:	1885883a 	add	r2,r3,r2
 4005fbc:	10879d04 	addi	r2,r2,7796
 4005fc0:	10800017 	ldw	r2,0(r2)
 4005fc4:	10800058 	cmpnei	r2,r2,1
 4005fc8:	1007d71e 	bne	r2,zero,4007f28 <main+0x7954>
			{
				//horizontal1
				if ((gameboard [y][x]==gameboard [y][x+1] && gameboard [y][x+1]== gameboard [y][x+2]) || (gameboard[y][x]==1 && gameboard[y][x+1]==-11) )//(0,0,0)
 4005fcc:	e0b7c217 	ldw	r2,-8440(fp)
 4005fd0:	01400504 	movi	r5,20
 4005fd4:	1009883a 	mov	r4,r2
 4005fd8:	40191000 	call	4019100 <__mulsi3>
 4005fdc:	1007883a 	mov	r3,r2
 4005fe0:	e0b7c117 	ldw	r2,-8444(fp)
 4005fe4:	1885883a 	add	r2,r3,r2
 4005fe8:	1085883a 	add	r2,r2,r2
 4005fec:	1085883a 	add	r2,r2,r2
 4005ff0:	e0f7c104 	addi	r3,fp,-8444
 4005ff4:	1885883a 	add	r2,r3,r2
 4005ff8:	10879d04 	addi	r2,r2,7796
 4005ffc:	14000017 	ldw	r16,0(r2)
 4006000:	e0b7c117 	ldw	r2,-8444(fp)
 4006004:	14400044 	addi	r17,r2,1
 4006008:	e0b7c217 	ldw	r2,-8440(fp)
 400600c:	01400504 	movi	r5,20
 4006010:	1009883a 	mov	r4,r2
 4006014:	40191000 	call	4019100 <__mulsi3>
 4006018:	1445883a 	add	r2,r2,r17
 400601c:	1085883a 	add	r2,r2,r2
 4006020:	1085883a 	add	r2,r2,r2
 4006024:	e0f7c104 	addi	r3,fp,-8444
 4006028:	1885883a 	add	r2,r3,r2
 400602c:	10879d04 	addi	r2,r2,7796
 4006030:	10800017 	ldw	r2,0(r2)
 4006034:	80801b1e 	bne	r16,r2,40060a4 <main+0x5ad0>
 4006038:	e0b7c117 	ldw	r2,-8444(fp)
 400603c:	14000044 	addi	r16,r2,1
 4006040:	e0b7c217 	ldw	r2,-8440(fp)
 4006044:	01400504 	movi	r5,20
 4006048:	1009883a 	mov	r4,r2
 400604c:	40191000 	call	4019100 <__mulsi3>
 4006050:	1405883a 	add	r2,r2,r16
 4006054:	1085883a 	add	r2,r2,r2
 4006058:	1085883a 	add	r2,r2,r2
 400605c:	e0f7c104 	addi	r3,fp,-8444
 4006060:	1885883a 	add	r2,r3,r2
 4006064:	10879d04 	addi	r2,r2,7796
 4006068:	14000017 	ldw	r16,0(r2)
 400606c:	e0b7c117 	ldw	r2,-8444(fp)
 4006070:	14400084 	addi	r17,r2,2
 4006074:	e0b7c217 	ldw	r2,-8440(fp)
 4006078:	01400504 	movi	r5,20
 400607c:	1009883a 	mov	r4,r2
 4006080:	40191000 	call	4019100 <__mulsi3>
 4006084:	1445883a 	add	r2,r2,r17
 4006088:	1085883a 	add	r2,r2,r2
 400608c:	1085883a 	add	r2,r2,r2
 4006090:	e0f7c104 	addi	r3,fp,-8444
 4006094:	1885883a 	add	r2,r3,r2
 4006098:	10879d04 	addi	r2,r2,7796
 400609c:	10800017 	ldw	r2,0(r2)
 40060a0:	80801e26 	beq	r16,r2,400611c <main+0x5b48>
 40060a4:	e0b7c217 	ldw	r2,-8440(fp)
 40060a8:	01400504 	movi	r5,20
 40060ac:	1009883a 	mov	r4,r2
 40060b0:	40191000 	call	4019100 <__mulsi3>
 40060b4:	1007883a 	mov	r3,r2
 40060b8:	e0b7c117 	ldw	r2,-8444(fp)
 40060bc:	1885883a 	add	r2,r3,r2
 40060c0:	1085883a 	add	r2,r2,r2
 40060c4:	1085883a 	add	r2,r2,r2
 40060c8:	e0f7c104 	addi	r3,fp,-8444
 40060cc:	1885883a 	add	r2,r3,r2
 40060d0:	10879d04 	addi	r2,r2,7796
 40060d4:	10800017 	ldw	r2,0(r2)
 40060d8:	10800058 	cmpnei	r2,r2,1
 40060dc:	1000311e 	bne	r2,zero,40061a4 <main+0x5bd0>
 40060e0:	e0b7c117 	ldw	r2,-8444(fp)
 40060e4:	14000044 	addi	r16,r2,1
 40060e8:	e0b7c217 	ldw	r2,-8440(fp)
 40060ec:	01400504 	movi	r5,20
 40060f0:	1009883a 	mov	r4,r2
 40060f4:	40191000 	call	4019100 <__mulsi3>
 40060f8:	1405883a 	add	r2,r2,r16
 40060fc:	1085883a 	add	r2,r2,r2
 4006100:	1085883a 	add	r2,r2,r2
 4006104:	e0f7c104 	addi	r3,fp,-8444
 4006108:	1885883a 	add	r2,r3,r2
 400610c:	10879d04 	addi	r2,r2,7796
 4006110:	10800017 	ldw	r2,0(r2)
 4006114:	10bffd58 	cmpnei	r2,r2,-11
 4006118:	1000221e 	bne	r2,zero,40061a4 <main+0x5bd0>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400611c:	e0b7c217 	ldw	r2,-8440(fp)
 4006120:	10c00084 	addi	r3,r2,2
 4006124:	e0b95e04 	addi	r2,fp,-6792
 4006128:	180f883a 	mov	r7,r3
 400612c:	e1b7c117 	ldw	r6,-8444(fp)
 4006130:	01403fc4 	movi	r5,255
 4006134:	1009883a 	mov	r4,r2
 4006138:	40003c80 	call	40003c8 <draw>
					draw(one, COLOR08_BLACK, x,y+2 );
 400613c:	e0b7c217 	ldw	r2,-8440(fp)
 4006140:	10800084 	addi	r2,r2,2
 4006144:	100f883a 	mov	r7,r2
 4006148:	e1b7c117 	ldw	r6,-8444(fp)
 400614c:	000b883a 	mov	r5,zero
 4006150:	010100f4 	movhi	r4,1027
 4006154:	2132aa04 	addi	r4,r4,-13656
 4006158:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-11;
 400615c:	e0b7c217 	ldw	r2,-8440(fp)
 4006160:	01400504 	movi	r5,20
 4006164:	1009883a 	mov	r4,r2
 4006168:	40191000 	call	4019100 <__mulsi3>
 400616c:	1007883a 	mov	r3,r2
 4006170:	e0b7c117 	ldw	r2,-8444(fp)
 4006174:	1885883a 	add	r2,r3,r2
 4006178:	1085883a 	add	r2,r2,r2
 400617c:	1085883a 	add	r2,r2,r2
 4006180:	e0f7c104 	addi	r3,fp,-8444
 4006184:	1885883a 	add	r2,r3,r2
 4006188:	10879d04 	addi	r2,r2,7796
 400618c:	00fffd44 	movi	r3,-11
 4006190:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4006194:	00c00044 	movi	r3,1
 4006198:	008200b4 	movhi	r2,2050
 400619c:	10841804 	addi	r2,r2,4192
 40061a0:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y][x-1] && gameboard [y][x]== gameboard [y][x+1]) || (gameboard [y][x]==1 && gameboard [y][x-1]==-11) || (gameboard [y][x]==1 && gameboard [y][x+1]==-11))//(
 40061a4:	e0b7c217 	ldw	r2,-8440(fp)
 40061a8:	01400504 	movi	r5,20
 40061ac:	1009883a 	mov	r4,r2
 40061b0:	40191000 	call	4019100 <__mulsi3>
 40061b4:	1007883a 	mov	r3,r2
 40061b8:	e0b7c117 	ldw	r2,-8444(fp)
 40061bc:	1885883a 	add	r2,r3,r2
 40061c0:	1085883a 	add	r2,r2,r2
 40061c4:	1085883a 	add	r2,r2,r2
 40061c8:	e0f7c104 	addi	r3,fp,-8444
 40061cc:	1885883a 	add	r2,r3,r2
 40061d0:	10879d04 	addi	r2,r2,7796
 40061d4:	14000017 	ldw	r16,0(r2)
 40061d8:	e0b7c117 	ldw	r2,-8444(fp)
 40061dc:	147fffc4 	addi	r17,r2,-1
 40061e0:	e0b7c217 	ldw	r2,-8440(fp)
 40061e4:	01400504 	movi	r5,20
 40061e8:	1009883a 	mov	r4,r2
 40061ec:	40191000 	call	4019100 <__mulsi3>
 40061f0:	1445883a 	add	r2,r2,r17
 40061f4:	1085883a 	add	r2,r2,r2
 40061f8:	1085883a 	add	r2,r2,r2
 40061fc:	e0f7c104 	addi	r3,fp,-8444
 4006200:	1885883a 	add	r2,r3,r2
 4006204:	10879d04 	addi	r2,r2,7796
 4006208:	10800017 	ldw	r2,0(r2)
 400620c:	80801b1e 	bne	r16,r2,400627c <main+0x5ca8>
 4006210:	e0b7c217 	ldw	r2,-8440(fp)
 4006214:	01400504 	movi	r5,20
 4006218:	1009883a 	mov	r4,r2
 400621c:	40191000 	call	4019100 <__mulsi3>
 4006220:	1007883a 	mov	r3,r2
 4006224:	e0b7c117 	ldw	r2,-8444(fp)
 4006228:	1885883a 	add	r2,r3,r2
 400622c:	1085883a 	add	r2,r2,r2
 4006230:	1085883a 	add	r2,r2,r2
 4006234:	e0f7c104 	addi	r3,fp,-8444
 4006238:	1885883a 	add	r2,r3,r2
 400623c:	10879d04 	addi	r2,r2,7796
 4006240:	14000017 	ldw	r16,0(r2)
 4006244:	e0b7c117 	ldw	r2,-8444(fp)
 4006248:	14400044 	addi	r17,r2,1
 400624c:	e0b7c217 	ldw	r2,-8440(fp)
 4006250:	01400504 	movi	r5,20
 4006254:	1009883a 	mov	r4,r2
 4006258:	40191000 	call	4019100 <__mulsi3>
 400625c:	1445883a 	add	r2,r2,r17
 4006260:	1085883a 	add	r2,r2,r2
 4006264:	1085883a 	add	r2,r2,r2
 4006268:	e0f7c104 	addi	r3,fp,-8444
 400626c:	1885883a 	add	r2,r3,r2
 4006270:	10879d04 	addi	r2,r2,7796
 4006274:	10800017 	ldw	r2,0(r2)
 4006278:	80803c26 	beq	r16,r2,400636c <main+0x5d98>
 400627c:	e0b7c217 	ldw	r2,-8440(fp)
 4006280:	01400504 	movi	r5,20
 4006284:	1009883a 	mov	r4,r2
 4006288:	40191000 	call	4019100 <__mulsi3>
 400628c:	1007883a 	mov	r3,r2
 4006290:	e0b7c117 	ldw	r2,-8444(fp)
 4006294:	1885883a 	add	r2,r3,r2
 4006298:	1085883a 	add	r2,r2,r2
 400629c:	1085883a 	add	r2,r2,r2
 40062a0:	e0f7c104 	addi	r3,fp,-8444
 40062a4:	1885883a 	add	r2,r3,r2
 40062a8:	10879d04 	addi	r2,r2,7796
 40062ac:	10800017 	ldw	r2,0(r2)
 40062b0:	10800058 	cmpnei	r2,r2,1
 40062b4:	10000f1e 	bne	r2,zero,40062f4 <main+0x5d20>
 40062b8:	e0b7c117 	ldw	r2,-8444(fp)
 40062bc:	143fffc4 	addi	r16,r2,-1
 40062c0:	e0b7c217 	ldw	r2,-8440(fp)
 40062c4:	01400504 	movi	r5,20
 40062c8:	1009883a 	mov	r4,r2
 40062cc:	40191000 	call	4019100 <__mulsi3>
 40062d0:	1405883a 	add	r2,r2,r16
 40062d4:	1085883a 	add	r2,r2,r2
 40062d8:	1085883a 	add	r2,r2,r2
 40062dc:	e0f7c104 	addi	r3,fp,-8444
 40062e0:	1885883a 	add	r2,r3,r2
 40062e4:	10879d04 	addi	r2,r2,7796
 40062e8:	10800017 	ldw	r2,0(r2)
 40062ec:	10bffd60 	cmpeqi	r2,r2,-11
 40062f0:	10001e1e 	bne	r2,zero,400636c <main+0x5d98>
 40062f4:	e0b7c217 	ldw	r2,-8440(fp)
 40062f8:	01400504 	movi	r5,20
 40062fc:	1009883a 	mov	r4,r2
 4006300:	40191000 	call	4019100 <__mulsi3>
 4006304:	1007883a 	mov	r3,r2
 4006308:	e0b7c117 	ldw	r2,-8444(fp)
 400630c:	1885883a 	add	r2,r3,r2
 4006310:	1085883a 	add	r2,r2,r2
 4006314:	1085883a 	add	r2,r2,r2
 4006318:	e0f7c104 	addi	r3,fp,-8444
 400631c:	1885883a 	add	r2,r3,r2
 4006320:	10879d04 	addi	r2,r2,7796
 4006324:	10800017 	ldw	r2,0(r2)
 4006328:	10800058 	cmpnei	r2,r2,1
 400632c:	1000311e 	bne	r2,zero,40063f4 <main+0x5e20>
 4006330:	e0b7c117 	ldw	r2,-8444(fp)
 4006334:	14000044 	addi	r16,r2,1
 4006338:	e0b7c217 	ldw	r2,-8440(fp)
 400633c:	01400504 	movi	r5,20
 4006340:	1009883a 	mov	r4,r2
 4006344:	40191000 	call	4019100 <__mulsi3>
 4006348:	1405883a 	add	r2,r2,r16
 400634c:	1085883a 	add	r2,r2,r2
 4006350:	1085883a 	add	r2,r2,r2
 4006354:	e0f7c104 	addi	r3,fp,-8444
 4006358:	1885883a 	add	r2,r3,r2
 400635c:	10879d04 	addi	r2,r2,7796
 4006360:	10800017 	ldw	r2,0(r2)
 4006364:	10bffd58 	cmpnei	r2,r2,-11
 4006368:	1000221e 	bne	r2,zero,40063f4 <main+0x5e20>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400636c:	e0b7c217 	ldw	r2,-8440(fp)
 4006370:	10c00084 	addi	r3,r2,2
 4006374:	e0b95e04 	addi	r2,fp,-6792
 4006378:	180f883a 	mov	r7,r3
 400637c:	e1b7c117 	ldw	r6,-8444(fp)
 4006380:	01403fc4 	movi	r5,255
 4006384:	1009883a 	mov	r4,r2
 4006388:	40003c80 	call	40003c8 <draw>
					draw(one, COLOR08_BLACK, x,y+2 );
 400638c:	e0b7c217 	ldw	r2,-8440(fp)
 4006390:	10800084 	addi	r2,r2,2
 4006394:	100f883a 	mov	r7,r2
 4006398:	e1b7c117 	ldw	r6,-8444(fp)
 400639c:	000b883a 	mov	r5,zero
 40063a0:	010100f4 	movhi	r4,1027
 40063a4:	2132aa04 	addi	r4,r4,-13656
 40063a8:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-11;
 40063ac:	e0b7c217 	ldw	r2,-8440(fp)
 40063b0:	01400504 	movi	r5,20
 40063b4:	1009883a 	mov	r4,r2
 40063b8:	40191000 	call	4019100 <__mulsi3>
 40063bc:	1007883a 	mov	r3,r2
 40063c0:	e0b7c117 	ldw	r2,-8444(fp)
 40063c4:	1885883a 	add	r2,r3,r2
 40063c8:	1085883a 	add	r2,r2,r2
 40063cc:	1085883a 	add	r2,r2,r2
 40063d0:	e0f7c104 	addi	r3,fp,-8444
 40063d4:	1885883a 	add	r2,r3,r2
 40063d8:	10879d04 	addi	r2,r2,7796
 40063dc:	00fffd44 	movi	r3,-11
 40063e0:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40063e4:	00c00044 	movi	r3,1
 40063e8:	008200b4 	movhi	r2,2050
 40063ec:	10841804 	addi	r2,r2,4192
 40063f0:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y][x-1] && gameboard [y][x]== gameboard [y][x-2]))//00x
 40063f4:	e0b7c217 	ldw	r2,-8440(fp)
 40063f8:	01400504 	movi	r5,20
 40063fc:	1009883a 	mov	r4,r2
 4006400:	40191000 	call	4019100 <__mulsi3>
 4006404:	1007883a 	mov	r3,r2
 4006408:	e0b7c117 	ldw	r2,-8444(fp)
 400640c:	1885883a 	add	r2,r3,r2
 4006410:	1085883a 	add	r2,r2,r2
 4006414:	1085883a 	add	r2,r2,r2
 4006418:	e0f7c104 	addi	r3,fp,-8444
 400641c:	1885883a 	add	r2,r3,r2
 4006420:	10879d04 	addi	r2,r2,7796
 4006424:	14000017 	ldw	r16,0(r2)
 4006428:	e0b7c117 	ldw	r2,-8444(fp)
 400642c:	147fffc4 	addi	r17,r2,-1
 4006430:	e0b7c217 	ldw	r2,-8440(fp)
 4006434:	01400504 	movi	r5,20
 4006438:	1009883a 	mov	r4,r2
 400643c:	40191000 	call	4019100 <__mulsi3>
 4006440:	1445883a 	add	r2,r2,r17
 4006444:	1085883a 	add	r2,r2,r2
 4006448:	1085883a 	add	r2,r2,r2
 400644c:	e0f7c104 	addi	r3,fp,-8444
 4006450:	1885883a 	add	r2,r3,r2
 4006454:	10879d04 	addi	r2,r2,7796
 4006458:	10800017 	ldw	r2,0(r2)
 400645c:	80803d1e 	bne	r16,r2,4006554 <main+0x5f80>
 4006460:	e0b7c217 	ldw	r2,-8440(fp)
 4006464:	01400504 	movi	r5,20
 4006468:	1009883a 	mov	r4,r2
 400646c:	40191000 	call	4019100 <__mulsi3>
 4006470:	1007883a 	mov	r3,r2
 4006474:	e0b7c117 	ldw	r2,-8444(fp)
 4006478:	1885883a 	add	r2,r3,r2
 400647c:	1085883a 	add	r2,r2,r2
 4006480:	1085883a 	add	r2,r2,r2
 4006484:	e0f7c104 	addi	r3,fp,-8444
 4006488:	1885883a 	add	r2,r3,r2
 400648c:	10879d04 	addi	r2,r2,7796
 4006490:	14000017 	ldw	r16,0(r2)
 4006494:	e0b7c117 	ldw	r2,-8444(fp)
 4006498:	147fff84 	addi	r17,r2,-2
 400649c:	e0b7c217 	ldw	r2,-8440(fp)
 40064a0:	01400504 	movi	r5,20
 40064a4:	1009883a 	mov	r4,r2
 40064a8:	40191000 	call	4019100 <__mulsi3>
 40064ac:	1445883a 	add	r2,r2,r17
 40064b0:	1085883a 	add	r2,r2,r2
 40064b4:	1085883a 	add	r2,r2,r2
 40064b8:	e0f7c104 	addi	r3,fp,-8444
 40064bc:	1885883a 	add	r2,r3,r2
 40064c0:	10879d04 	addi	r2,r2,7796
 40064c4:	10800017 	ldw	r2,0(r2)
 40064c8:	8080221e 	bne	r16,r2,4006554 <main+0x5f80>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 40064cc:	e0b7c217 	ldw	r2,-8440(fp)
 40064d0:	10c00084 	addi	r3,r2,2
 40064d4:	e0b95e04 	addi	r2,fp,-6792
 40064d8:	180f883a 	mov	r7,r3
 40064dc:	e1b7c117 	ldw	r6,-8444(fp)
 40064e0:	01403fc4 	movi	r5,255
 40064e4:	1009883a 	mov	r4,r2
 40064e8:	40003c80 	call	40003c8 <draw>
					draw(one, COLOR08_BLACK, x,y+2 );
 40064ec:	e0b7c217 	ldw	r2,-8440(fp)
 40064f0:	10800084 	addi	r2,r2,2
 40064f4:	100f883a 	mov	r7,r2
 40064f8:	e1b7c117 	ldw	r6,-8444(fp)
 40064fc:	000b883a 	mov	r5,zero
 4006500:	010100f4 	movhi	r4,1027
 4006504:	2132aa04 	addi	r4,r4,-13656
 4006508:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-11;
 400650c:	e0b7c217 	ldw	r2,-8440(fp)
 4006510:	01400504 	movi	r5,20
 4006514:	1009883a 	mov	r4,r2
 4006518:	40191000 	call	4019100 <__mulsi3>
 400651c:	1007883a 	mov	r3,r2
 4006520:	e0b7c117 	ldw	r2,-8444(fp)
 4006524:	1885883a 	add	r2,r3,r2
 4006528:	1085883a 	add	r2,r2,r2
 400652c:	1085883a 	add	r2,r2,r2
 4006530:	e0f7c104 	addi	r3,fp,-8444
 4006534:	1885883a 	add	r2,r3,r2
 4006538:	10879d04 	addi	r2,r2,7796
 400653c:	00fffd44 	movi	r3,-11
 4006540:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4006544:	00c00044 	movi	r3,1
 4006548:	008200b4 	movhi	r2,2050
 400654c:	10841804 	addi	r2,r2,4192
 4006550:	10c00035 	stwio	r3,0(r2)
				}
				if(gameboard[y][x]==1 && gameboard[y][x+1]==1 && gameboard[y][x+2]==-11)
 4006554:	e0b7c217 	ldw	r2,-8440(fp)
 4006558:	01400504 	movi	r5,20
 400655c:	1009883a 	mov	r4,r2
 4006560:	40191000 	call	4019100 <__mulsi3>
 4006564:	1007883a 	mov	r3,r2
 4006568:	e0b7c117 	ldw	r2,-8444(fp)
 400656c:	1885883a 	add	r2,r3,r2
 4006570:	1085883a 	add	r2,r2,r2
 4006574:	1085883a 	add	r2,r2,r2
 4006578:	e0f7c104 	addi	r3,fp,-8444
 400657c:	1885883a 	add	r2,r3,r2
 4006580:	10879d04 	addi	r2,r2,7796
 4006584:	10800017 	ldw	r2,0(r2)
 4006588:	10800058 	cmpnei	r2,r2,1
 400658c:	1000401e 	bne	r2,zero,4006690 <main+0x60bc>
 4006590:	e0b7c117 	ldw	r2,-8444(fp)
 4006594:	14000044 	addi	r16,r2,1
 4006598:	e0b7c217 	ldw	r2,-8440(fp)
 400659c:	01400504 	movi	r5,20
 40065a0:	1009883a 	mov	r4,r2
 40065a4:	40191000 	call	4019100 <__mulsi3>
 40065a8:	1405883a 	add	r2,r2,r16
 40065ac:	1085883a 	add	r2,r2,r2
 40065b0:	1085883a 	add	r2,r2,r2
 40065b4:	e0f7c104 	addi	r3,fp,-8444
 40065b8:	1885883a 	add	r2,r3,r2
 40065bc:	10879d04 	addi	r2,r2,7796
 40065c0:	10800017 	ldw	r2,0(r2)
 40065c4:	10800058 	cmpnei	r2,r2,1
 40065c8:	1000311e 	bne	r2,zero,4006690 <main+0x60bc>
 40065cc:	e0b7c117 	ldw	r2,-8444(fp)
 40065d0:	14000084 	addi	r16,r2,2
 40065d4:	e0b7c217 	ldw	r2,-8440(fp)
 40065d8:	01400504 	movi	r5,20
 40065dc:	1009883a 	mov	r4,r2
 40065e0:	40191000 	call	4019100 <__mulsi3>
 40065e4:	1405883a 	add	r2,r2,r16
 40065e8:	1085883a 	add	r2,r2,r2
 40065ec:	1085883a 	add	r2,r2,r2
 40065f0:	e0f7c104 	addi	r3,fp,-8444
 40065f4:	1885883a 	add	r2,r3,r2
 40065f8:	10879d04 	addi	r2,r2,7796
 40065fc:	10800017 	ldw	r2,0(r2)
 4006600:	10bffd58 	cmpnei	r2,r2,-11
 4006604:	1000221e 	bne	r2,zero,4006690 <main+0x60bc>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4006608:	e0b7c217 	ldw	r2,-8440(fp)
 400660c:	10c00084 	addi	r3,r2,2
 4006610:	e0b95e04 	addi	r2,fp,-6792
 4006614:	180f883a 	mov	r7,r3
 4006618:	e1b7c117 	ldw	r6,-8444(fp)
 400661c:	01403fc4 	movi	r5,255
 4006620:	1009883a 	mov	r4,r2
 4006624:	40003c80 	call	40003c8 <draw>
					draw(one, COLOR08_BLACK, x,y+2 );
 4006628:	e0b7c217 	ldw	r2,-8440(fp)
 400662c:	10800084 	addi	r2,r2,2
 4006630:	100f883a 	mov	r7,r2
 4006634:	e1b7c117 	ldw	r6,-8444(fp)
 4006638:	000b883a 	mov	r5,zero
 400663c:	010100f4 	movhi	r4,1027
 4006640:	2132aa04 	addi	r4,r4,-13656
 4006644:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-11;
 4006648:	e0b7c217 	ldw	r2,-8440(fp)
 400664c:	01400504 	movi	r5,20
 4006650:	1009883a 	mov	r4,r2
 4006654:	40191000 	call	4019100 <__mulsi3>
 4006658:	1007883a 	mov	r3,r2
 400665c:	e0b7c117 	ldw	r2,-8444(fp)
 4006660:	1885883a 	add	r2,r3,r2
 4006664:	1085883a 	add	r2,r2,r2
 4006668:	1085883a 	add	r2,r2,r2
 400666c:	e0f7c104 	addi	r3,fp,-8444
 4006670:	1885883a 	add	r2,r3,r2
 4006674:	10879d04 	addi	r2,r2,7796
 4006678:	00fffd44 	movi	r3,-11
 400667c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4006680:	00c00044 	movi	r3,1
 4006684:	008200b4 	movhi	r2,2050
 4006688:	10841804 	addi	r2,r2,4192
 400668c:	10c00035 	stwio	r3,0(r2)
				}
				/////////////////////////////////

				//vertical1
				if ((gameboard [y][x]==gameboard [y+1][x] && gameboard [y+1][x]== gameboard [y+2][x]) || (gameboard [y][x]==1 && gameboard [y+1][x]==-11))//xmb
 4006690:	e0b7c217 	ldw	r2,-8440(fp)
 4006694:	01400504 	movi	r5,20
 4006698:	1009883a 	mov	r4,r2
 400669c:	40191000 	call	4019100 <__mulsi3>
 40066a0:	1007883a 	mov	r3,r2
 40066a4:	e0b7c117 	ldw	r2,-8444(fp)
 40066a8:	1885883a 	add	r2,r3,r2
 40066ac:	1085883a 	add	r2,r2,r2
 40066b0:	1085883a 	add	r2,r2,r2
 40066b4:	e0f7c104 	addi	r3,fp,-8444
 40066b8:	1885883a 	add	r2,r3,r2
 40066bc:	10879d04 	addi	r2,r2,7796
 40066c0:	14000017 	ldw	r16,0(r2)
 40066c4:	e0b7c217 	ldw	r2,-8440(fp)
 40066c8:	10800044 	addi	r2,r2,1
 40066cc:	01400504 	movi	r5,20
 40066d0:	1009883a 	mov	r4,r2
 40066d4:	40191000 	call	4019100 <__mulsi3>
 40066d8:	1007883a 	mov	r3,r2
 40066dc:	e0b7c117 	ldw	r2,-8444(fp)
 40066e0:	1885883a 	add	r2,r3,r2
 40066e4:	1085883a 	add	r2,r2,r2
 40066e8:	1085883a 	add	r2,r2,r2
 40066ec:	e0f7c104 	addi	r3,fp,-8444
 40066f0:	1885883a 	add	r2,r3,r2
 40066f4:	10879d04 	addi	r2,r2,7796
 40066f8:	10800017 	ldw	r2,0(r2)
 40066fc:	80801d1e 	bne	r16,r2,4006774 <main+0x61a0>
 4006700:	e0b7c217 	ldw	r2,-8440(fp)
 4006704:	10800044 	addi	r2,r2,1
 4006708:	01400504 	movi	r5,20
 400670c:	1009883a 	mov	r4,r2
 4006710:	40191000 	call	4019100 <__mulsi3>
 4006714:	1007883a 	mov	r3,r2
 4006718:	e0b7c117 	ldw	r2,-8444(fp)
 400671c:	1885883a 	add	r2,r3,r2
 4006720:	1085883a 	add	r2,r2,r2
 4006724:	1085883a 	add	r2,r2,r2
 4006728:	e0f7c104 	addi	r3,fp,-8444
 400672c:	1885883a 	add	r2,r3,r2
 4006730:	10879d04 	addi	r2,r2,7796
 4006734:	14000017 	ldw	r16,0(r2)
 4006738:	e0b7c217 	ldw	r2,-8440(fp)
 400673c:	10800084 	addi	r2,r2,2
 4006740:	01400504 	movi	r5,20
 4006744:	1009883a 	mov	r4,r2
 4006748:	40191000 	call	4019100 <__mulsi3>
 400674c:	1007883a 	mov	r3,r2
 4006750:	e0b7c117 	ldw	r2,-8444(fp)
 4006754:	1885883a 	add	r2,r3,r2
 4006758:	1085883a 	add	r2,r2,r2
 400675c:	1085883a 	add	r2,r2,r2
 4006760:	e0f7c104 	addi	r3,fp,-8444
 4006764:	1885883a 	add	r2,r3,r2
 4006768:	10879d04 	addi	r2,r2,7796
 400676c:	10800017 	ldw	r2,0(r2)
 4006770:	80801f26 	beq	r16,r2,40067f0 <main+0x621c>
 4006774:	e0b7c217 	ldw	r2,-8440(fp)
 4006778:	01400504 	movi	r5,20
 400677c:	1009883a 	mov	r4,r2
 4006780:	40191000 	call	4019100 <__mulsi3>
 4006784:	1007883a 	mov	r3,r2
 4006788:	e0b7c117 	ldw	r2,-8444(fp)
 400678c:	1885883a 	add	r2,r3,r2
 4006790:	1085883a 	add	r2,r2,r2
 4006794:	1085883a 	add	r2,r2,r2
 4006798:	e0f7c104 	addi	r3,fp,-8444
 400679c:	1885883a 	add	r2,r3,r2
 40067a0:	10879d04 	addi	r2,r2,7796
 40067a4:	10800017 	ldw	r2,0(r2)
 40067a8:	10800058 	cmpnei	r2,r2,1
 40067ac:	1000321e 	bne	r2,zero,4006878 <main+0x62a4>
 40067b0:	e0b7c217 	ldw	r2,-8440(fp)
 40067b4:	10800044 	addi	r2,r2,1
 40067b8:	01400504 	movi	r5,20
 40067bc:	1009883a 	mov	r4,r2
 40067c0:	40191000 	call	4019100 <__mulsi3>
 40067c4:	1007883a 	mov	r3,r2
 40067c8:	e0b7c117 	ldw	r2,-8444(fp)
 40067cc:	1885883a 	add	r2,r3,r2
 40067d0:	1085883a 	add	r2,r2,r2
 40067d4:	1085883a 	add	r2,r2,r2
 40067d8:	e0f7c104 	addi	r3,fp,-8444
 40067dc:	1885883a 	add	r2,r3,r2
 40067e0:	10879d04 	addi	r2,r2,7796
 40067e4:	10800017 	ldw	r2,0(r2)
 40067e8:	10bffd58 	cmpnei	r2,r2,-11
 40067ec:	1000221e 	bne	r2,zero,4006878 <main+0x62a4>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 40067f0:	e0b7c217 	ldw	r2,-8440(fp)
 40067f4:	10c00084 	addi	r3,r2,2
 40067f8:	e0b95e04 	addi	r2,fp,-6792
 40067fc:	180f883a 	mov	r7,r3
 4006800:	e1b7c117 	ldw	r6,-8444(fp)
 4006804:	01403fc4 	movi	r5,255
 4006808:	1009883a 	mov	r4,r2
 400680c:	40003c80 	call	40003c8 <draw>
					draw(one, COLOR08_BLACK, x,y+2 );
 4006810:	e0b7c217 	ldw	r2,-8440(fp)
 4006814:	10800084 	addi	r2,r2,2
 4006818:	100f883a 	mov	r7,r2
 400681c:	e1b7c117 	ldw	r6,-8444(fp)
 4006820:	000b883a 	mov	r5,zero
 4006824:	010100f4 	movhi	r4,1027
 4006828:	2132aa04 	addi	r4,r4,-13656
 400682c:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-11;
 4006830:	e0b7c217 	ldw	r2,-8440(fp)
 4006834:	01400504 	movi	r5,20
 4006838:	1009883a 	mov	r4,r2
 400683c:	40191000 	call	4019100 <__mulsi3>
 4006840:	1007883a 	mov	r3,r2
 4006844:	e0b7c117 	ldw	r2,-8444(fp)
 4006848:	1885883a 	add	r2,r3,r2
 400684c:	1085883a 	add	r2,r2,r2
 4006850:	1085883a 	add	r2,r2,r2
 4006854:	e0f7c104 	addi	r3,fp,-8444
 4006858:	1885883a 	add	r2,r3,r2
 400685c:	10879d04 	addi	r2,r2,7796
 4006860:	00fffd44 	movi	r3,-11
 4006864:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4006868:	00c00044 	movi	r3,1
 400686c:	008200b4 	movhi	r2,2050
 4006870:	10841804 	addi	r2,r2,4192
 4006874:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y-1][x] && gameboard [y][x]== gameboard [y+1][x]) || (gameboard [y][x]==1 && gameboard [y+1][x]==-11))//txb
 4006878:	e0b7c217 	ldw	r2,-8440(fp)
 400687c:	01400504 	movi	r5,20
 4006880:	1009883a 	mov	r4,r2
 4006884:	40191000 	call	4019100 <__mulsi3>
 4006888:	1007883a 	mov	r3,r2
 400688c:	e0b7c117 	ldw	r2,-8444(fp)
 4006890:	1885883a 	add	r2,r3,r2
 4006894:	1085883a 	add	r2,r2,r2
 4006898:	1085883a 	add	r2,r2,r2
 400689c:	e0f7c104 	addi	r3,fp,-8444
 40068a0:	1885883a 	add	r2,r3,r2
 40068a4:	10879d04 	addi	r2,r2,7796
 40068a8:	14000017 	ldw	r16,0(r2)
 40068ac:	e0b7c217 	ldw	r2,-8440(fp)
 40068b0:	10bfffc4 	addi	r2,r2,-1
 40068b4:	01400504 	movi	r5,20
 40068b8:	1009883a 	mov	r4,r2
 40068bc:	40191000 	call	4019100 <__mulsi3>
 40068c0:	1007883a 	mov	r3,r2
 40068c4:	e0b7c117 	ldw	r2,-8444(fp)
 40068c8:	1885883a 	add	r2,r3,r2
 40068cc:	1085883a 	add	r2,r2,r2
 40068d0:	1085883a 	add	r2,r2,r2
 40068d4:	e0f7c104 	addi	r3,fp,-8444
 40068d8:	1885883a 	add	r2,r3,r2
 40068dc:	10879d04 	addi	r2,r2,7796
 40068e0:	10800017 	ldw	r2,0(r2)
 40068e4:	80801c1e 	bne	r16,r2,4006958 <main+0x6384>
 40068e8:	e0b7c217 	ldw	r2,-8440(fp)
 40068ec:	01400504 	movi	r5,20
 40068f0:	1009883a 	mov	r4,r2
 40068f4:	40191000 	call	4019100 <__mulsi3>
 40068f8:	1007883a 	mov	r3,r2
 40068fc:	e0b7c117 	ldw	r2,-8444(fp)
 4006900:	1885883a 	add	r2,r3,r2
 4006904:	1085883a 	add	r2,r2,r2
 4006908:	1085883a 	add	r2,r2,r2
 400690c:	e0f7c104 	addi	r3,fp,-8444
 4006910:	1885883a 	add	r2,r3,r2
 4006914:	10879d04 	addi	r2,r2,7796
 4006918:	14000017 	ldw	r16,0(r2)
 400691c:	e0b7c217 	ldw	r2,-8440(fp)
 4006920:	10800044 	addi	r2,r2,1
 4006924:	01400504 	movi	r5,20
 4006928:	1009883a 	mov	r4,r2
 400692c:	40191000 	call	4019100 <__mulsi3>
 4006930:	1007883a 	mov	r3,r2
 4006934:	e0b7c117 	ldw	r2,-8444(fp)
 4006938:	1885883a 	add	r2,r3,r2
 400693c:	1085883a 	add	r2,r2,r2
 4006940:	1085883a 	add	r2,r2,r2
 4006944:	e0f7c104 	addi	r3,fp,-8444
 4006948:	1885883a 	add	r2,r3,r2
 400694c:	10879d04 	addi	r2,r2,7796
 4006950:	10800017 	ldw	r2,0(r2)
 4006954:	80801f26 	beq	r16,r2,40069d4 <main+0x6400>
 4006958:	e0b7c217 	ldw	r2,-8440(fp)
 400695c:	01400504 	movi	r5,20
 4006960:	1009883a 	mov	r4,r2
 4006964:	40191000 	call	4019100 <__mulsi3>
 4006968:	1007883a 	mov	r3,r2
 400696c:	e0b7c117 	ldw	r2,-8444(fp)
 4006970:	1885883a 	add	r2,r3,r2
 4006974:	1085883a 	add	r2,r2,r2
 4006978:	1085883a 	add	r2,r2,r2
 400697c:	e0f7c104 	addi	r3,fp,-8444
 4006980:	1885883a 	add	r2,r3,r2
 4006984:	10879d04 	addi	r2,r2,7796
 4006988:	10800017 	ldw	r2,0(r2)
 400698c:	10800058 	cmpnei	r2,r2,1
 4006990:	1000321e 	bne	r2,zero,4006a5c <main+0x6488>
 4006994:	e0b7c217 	ldw	r2,-8440(fp)
 4006998:	10800044 	addi	r2,r2,1
 400699c:	01400504 	movi	r5,20
 40069a0:	1009883a 	mov	r4,r2
 40069a4:	40191000 	call	4019100 <__mulsi3>
 40069a8:	1007883a 	mov	r3,r2
 40069ac:	e0b7c117 	ldw	r2,-8444(fp)
 40069b0:	1885883a 	add	r2,r3,r2
 40069b4:	1085883a 	add	r2,r2,r2
 40069b8:	1085883a 	add	r2,r2,r2
 40069bc:	e0f7c104 	addi	r3,fp,-8444
 40069c0:	1885883a 	add	r2,r3,r2
 40069c4:	10879d04 	addi	r2,r2,7796
 40069c8:	10800017 	ldw	r2,0(r2)
 40069cc:	10bffd58 	cmpnei	r2,r2,-11
 40069d0:	1000221e 	bne	r2,zero,4006a5c <main+0x6488>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 40069d4:	e0b7c217 	ldw	r2,-8440(fp)
 40069d8:	10c00084 	addi	r3,r2,2
 40069dc:	e0b95e04 	addi	r2,fp,-6792
 40069e0:	180f883a 	mov	r7,r3
 40069e4:	e1b7c117 	ldw	r6,-8444(fp)
 40069e8:	01403fc4 	movi	r5,255
 40069ec:	1009883a 	mov	r4,r2
 40069f0:	40003c80 	call	40003c8 <draw>
					draw(one, COLOR08_BLACK, x,y+2 );
 40069f4:	e0b7c217 	ldw	r2,-8440(fp)
 40069f8:	10800084 	addi	r2,r2,2
 40069fc:	100f883a 	mov	r7,r2
 4006a00:	e1b7c117 	ldw	r6,-8444(fp)
 4006a04:	000b883a 	mov	r5,zero
 4006a08:	010100f4 	movhi	r4,1027
 4006a0c:	2132aa04 	addi	r4,r4,-13656
 4006a10:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-11;
 4006a14:	e0b7c217 	ldw	r2,-8440(fp)
 4006a18:	01400504 	movi	r5,20
 4006a1c:	1009883a 	mov	r4,r2
 4006a20:	40191000 	call	4019100 <__mulsi3>
 4006a24:	1007883a 	mov	r3,r2
 4006a28:	e0b7c117 	ldw	r2,-8444(fp)
 4006a2c:	1885883a 	add	r2,r3,r2
 4006a30:	1085883a 	add	r2,r2,r2
 4006a34:	1085883a 	add	r2,r2,r2
 4006a38:	e0f7c104 	addi	r3,fp,-8444
 4006a3c:	1885883a 	add	r2,r3,r2
 4006a40:	10879d04 	addi	r2,r2,7796
 4006a44:	00fffd44 	movi	r3,-11
 4006a48:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4006a4c:	00c00044 	movi	r3,1
 4006a50:	008200b4 	movhi	r2,2050
 4006a54:	10841804 	addi	r2,r2,4192
 4006a58:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y-1][x] && gameboard [y][x]== gameboard [y-2][x]) || (gameboard [y][x]==1 && gameboard [y-1][x]==-11))//tmx
 4006a5c:	e0b7c217 	ldw	r2,-8440(fp)
 4006a60:	01400504 	movi	r5,20
 4006a64:	1009883a 	mov	r4,r2
 4006a68:	40191000 	call	4019100 <__mulsi3>
 4006a6c:	1007883a 	mov	r3,r2
 4006a70:	e0b7c117 	ldw	r2,-8444(fp)
 4006a74:	1885883a 	add	r2,r3,r2
 4006a78:	1085883a 	add	r2,r2,r2
 4006a7c:	1085883a 	add	r2,r2,r2
 4006a80:	e0f7c104 	addi	r3,fp,-8444
 4006a84:	1885883a 	add	r2,r3,r2
 4006a88:	10879d04 	addi	r2,r2,7796
 4006a8c:	14000017 	ldw	r16,0(r2)
 4006a90:	e0b7c217 	ldw	r2,-8440(fp)
 4006a94:	10bfffc4 	addi	r2,r2,-1
 4006a98:	01400504 	movi	r5,20
 4006a9c:	1009883a 	mov	r4,r2
 4006aa0:	40191000 	call	4019100 <__mulsi3>
 4006aa4:	1007883a 	mov	r3,r2
 4006aa8:	e0b7c117 	ldw	r2,-8444(fp)
 4006aac:	1885883a 	add	r2,r3,r2
 4006ab0:	1085883a 	add	r2,r2,r2
 4006ab4:	1085883a 	add	r2,r2,r2
 4006ab8:	e0f7c104 	addi	r3,fp,-8444
 4006abc:	1885883a 	add	r2,r3,r2
 4006ac0:	10879d04 	addi	r2,r2,7796
 4006ac4:	10800017 	ldw	r2,0(r2)
 4006ac8:	80801c1e 	bne	r16,r2,4006b3c <main+0x6568>
 4006acc:	e0b7c217 	ldw	r2,-8440(fp)
 4006ad0:	01400504 	movi	r5,20
 4006ad4:	1009883a 	mov	r4,r2
 4006ad8:	40191000 	call	4019100 <__mulsi3>
 4006adc:	1007883a 	mov	r3,r2
 4006ae0:	e0b7c117 	ldw	r2,-8444(fp)
 4006ae4:	1885883a 	add	r2,r3,r2
 4006ae8:	1085883a 	add	r2,r2,r2
 4006aec:	1085883a 	add	r2,r2,r2
 4006af0:	e0f7c104 	addi	r3,fp,-8444
 4006af4:	1885883a 	add	r2,r3,r2
 4006af8:	10879d04 	addi	r2,r2,7796
 4006afc:	14000017 	ldw	r16,0(r2)
 4006b00:	e0b7c217 	ldw	r2,-8440(fp)
 4006b04:	10bfff84 	addi	r2,r2,-2
 4006b08:	01400504 	movi	r5,20
 4006b0c:	1009883a 	mov	r4,r2
 4006b10:	40191000 	call	4019100 <__mulsi3>
 4006b14:	1007883a 	mov	r3,r2
 4006b18:	e0b7c117 	ldw	r2,-8444(fp)
 4006b1c:	1885883a 	add	r2,r3,r2
 4006b20:	1085883a 	add	r2,r2,r2
 4006b24:	1085883a 	add	r2,r2,r2
 4006b28:	e0f7c104 	addi	r3,fp,-8444
 4006b2c:	1885883a 	add	r2,r3,r2
 4006b30:	10879d04 	addi	r2,r2,7796
 4006b34:	10800017 	ldw	r2,0(r2)
 4006b38:	80801f26 	beq	r16,r2,4006bb8 <main+0x65e4>
 4006b3c:	e0b7c217 	ldw	r2,-8440(fp)
 4006b40:	01400504 	movi	r5,20
 4006b44:	1009883a 	mov	r4,r2
 4006b48:	40191000 	call	4019100 <__mulsi3>
 4006b4c:	1007883a 	mov	r3,r2
 4006b50:	e0b7c117 	ldw	r2,-8444(fp)
 4006b54:	1885883a 	add	r2,r3,r2
 4006b58:	1085883a 	add	r2,r2,r2
 4006b5c:	1085883a 	add	r2,r2,r2
 4006b60:	e0f7c104 	addi	r3,fp,-8444
 4006b64:	1885883a 	add	r2,r3,r2
 4006b68:	10879d04 	addi	r2,r2,7796
 4006b6c:	10800017 	ldw	r2,0(r2)
 4006b70:	10800058 	cmpnei	r2,r2,1
 4006b74:	1000321e 	bne	r2,zero,4006c40 <main+0x666c>
 4006b78:	e0b7c217 	ldw	r2,-8440(fp)
 4006b7c:	10bfffc4 	addi	r2,r2,-1
 4006b80:	01400504 	movi	r5,20
 4006b84:	1009883a 	mov	r4,r2
 4006b88:	40191000 	call	4019100 <__mulsi3>
 4006b8c:	1007883a 	mov	r3,r2
 4006b90:	e0b7c117 	ldw	r2,-8444(fp)
 4006b94:	1885883a 	add	r2,r3,r2
 4006b98:	1085883a 	add	r2,r2,r2
 4006b9c:	1085883a 	add	r2,r2,r2
 4006ba0:	e0f7c104 	addi	r3,fp,-8444
 4006ba4:	1885883a 	add	r2,r3,r2
 4006ba8:	10879d04 	addi	r2,r2,7796
 4006bac:	10800017 	ldw	r2,0(r2)
 4006bb0:	10bffd58 	cmpnei	r2,r2,-11
 4006bb4:	1000221e 	bne	r2,zero,4006c40 <main+0x666c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4006bb8:	e0b7c217 	ldw	r2,-8440(fp)
 4006bbc:	10c00084 	addi	r3,r2,2
 4006bc0:	e0b95e04 	addi	r2,fp,-6792
 4006bc4:	180f883a 	mov	r7,r3
 4006bc8:	e1b7c117 	ldw	r6,-8444(fp)
 4006bcc:	01403fc4 	movi	r5,255
 4006bd0:	1009883a 	mov	r4,r2
 4006bd4:	40003c80 	call	40003c8 <draw>
					draw(one, COLOR08_BLACK, x,y+2 );
 4006bd8:	e0b7c217 	ldw	r2,-8440(fp)
 4006bdc:	10800084 	addi	r2,r2,2
 4006be0:	100f883a 	mov	r7,r2
 4006be4:	e1b7c117 	ldw	r6,-8444(fp)
 4006be8:	000b883a 	mov	r5,zero
 4006bec:	010100f4 	movhi	r4,1027
 4006bf0:	2132aa04 	addi	r4,r4,-13656
 4006bf4:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-11;
 4006bf8:	e0b7c217 	ldw	r2,-8440(fp)
 4006bfc:	01400504 	movi	r5,20
 4006c00:	1009883a 	mov	r4,r2
 4006c04:	40191000 	call	4019100 <__mulsi3>
 4006c08:	1007883a 	mov	r3,r2
 4006c0c:	e0b7c117 	ldw	r2,-8444(fp)
 4006c10:	1885883a 	add	r2,r3,r2
 4006c14:	1085883a 	add	r2,r2,r2
 4006c18:	1085883a 	add	r2,r2,r2
 4006c1c:	e0f7c104 	addi	r3,fp,-8444
 4006c20:	1885883a 	add	r2,r3,r2
 4006c24:	10879d04 	addi	r2,r2,7796
 4006c28:	00fffd44 	movi	r3,-11
 4006c2c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4006c30:	00c00044 	movi	r3,1
 4006c34:	008200b4 	movhi	r2,2050
 4006c38:	10841804 	addi	r2,r2,4192
 4006c3c:	10c00035 	stwio	r3,0(r2)
				}
				if(gameboard[y][x]==1 && gameboard[y-1][x]==1 && gameboard[y-2][x]==-11)
 4006c40:	e0b7c217 	ldw	r2,-8440(fp)
 4006c44:	01400504 	movi	r5,20
 4006c48:	1009883a 	mov	r4,r2
 4006c4c:	40191000 	call	4019100 <__mulsi3>
 4006c50:	1007883a 	mov	r3,r2
 4006c54:	e0b7c117 	ldw	r2,-8444(fp)
 4006c58:	1885883a 	add	r2,r3,r2
 4006c5c:	1085883a 	add	r2,r2,r2
 4006c60:	1085883a 	add	r2,r2,r2
 4006c64:	e0f7c104 	addi	r3,fp,-8444
 4006c68:	1885883a 	add	r2,r3,r2
 4006c6c:	10879d04 	addi	r2,r2,7796
 4006c70:	10800017 	ldw	r2,0(r2)
 4006c74:	10800058 	cmpnei	r2,r2,1
 4006c78:	1000421e 	bne	r2,zero,4006d84 <main+0x67b0>
 4006c7c:	e0b7c217 	ldw	r2,-8440(fp)
 4006c80:	10bfffc4 	addi	r2,r2,-1
 4006c84:	01400504 	movi	r5,20
 4006c88:	1009883a 	mov	r4,r2
 4006c8c:	40191000 	call	4019100 <__mulsi3>
 4006c90:	1007883a 	mov	r3,r2
 4006c94:	e0b7c117 	ldw	r2,-8444(fp)
 4006c98:	1885883a 	add	r2,r3,r2
 4006c9c:	1085883a 	add	r2,r2,r2
 4006ca0:	1085883a 	add	r2,r2,r2
 4006ca4:	e0f7c104 	addi	r3,fp,-8444
 4006ca8:	1885883a 	add	r2,r3,r2
 4006cac:	10879d04 	addi	r2,r2,7796
 4006cb0:	10800017 	ldw	r2,0(r2)
 4006cb4:	10800058 	cmpnei	r2,r2,1
 4006cb8:	1000321e 	bne	r2,zero,4006d84 <main+0x67b0>
 4006cbc:	e0b7c217 	ldw	r2,-8440(fp)
 4006cc0:	10bfff84 	addi	r2,r2,-2
 4006cc4:	01400504 	movi	r5,20
 4006cc8:	1009883a 	mov	r4,r2
 4006ccc:	40191000 	call	4019100 <__mulsi3>
 4006cd0:	1007883a 	mov	r3,r2
 4006cd4:	e0b7c117 	ldw	r2,-8444(fp)
 4006cd8:	1885883a 	add	r2,r3,r2
 4006cdc:	1085883a 	add	r2,r2,r2
 4006ce0:	1085883a 	add	r2,r2,r2
 4006ce4:	e0f7c104 	addi	r3,fp,-8444
 4006ce8:	1885883a 	add	r2,r3,r2
 4006cec:	10879d04 	addi	r2,r2,7796
 4006cf0:	10800017 	ldw	r2,0(r2)
 4006cf4:	10bffd58 	cmpnei	r2,r2,-11
 4006cf8:	1000221e 	bne	r2,zero,4006d84 <main+0x67b0>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4006cfc:	e0b7c217 	ldw	r2,-8440(fp)
 4006d00:	10c00084 	addi	r3,r2,2
 4006d04:	e0b95e04 	addi	r2,fp,-6792
 4006d08:	180f883a 	mov	r7,r3
 4006d0c:	e1b7c117 	ldw	r6,-8444(fp)
 4006d10:	01403fc4 	movi	r5,255
 4006d14:	1009883a 	mov	r4,r2
 4006d18:	40003c80 	call	40003c8 <draw>
					draw(one, COLOR08_BLACK, x,y+2 );
 4006d1c:	e0b7c217 	ldw	r2,-8440(fp)
 4006d20:	10800084 	addi	r2,r2,2
 4006d24:	100f883a 	mov	r7,r2
 4006d28:	e1b7c117 	ldw	r6,-8444(fp)
 4006d2c:	000b883a 	mov	r5,zero
 4006d30:	010100f4 	movhi	r4,1027
 4006d34:	2132aa04 	addi	r4,r4,-13656
 4006d38:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-11;
 4006d3c:	e0b7c217 	ldw	r2,-8440(fp)
 4006d40:	01400504 	movi	r5,20
 4006d44:	1009883a 	mov	r4,r2
 4006d48:	40191000 	call	4019100 <__mulsi3>
 4006d4c:	1007883a 	mov	r3,r2
 4006d50:	e0b7c117 	ldw	r2,-8444(fp)
 4006d54:	1885883a 	add	r2,r3,r2
 4006d58:	1085883a 	add	r2,r2,r2
 4006d5c:	1085883a 	add	r2,r2,r2
 4006d60:	e0f7c104 	addi	r3,fp,-8444
 4006d64:	1885883a 	add	r2,r3,r2
 4006d68:	10879d04 	addi	r2,r2,7796
 4006d6c:	00fffd44 	movi	r3,-11
 4006d70:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4006d74:	00c00044 	movi	r3,1
 4006d78:	008200b4 	movhi	r2,2050
 4006d7c:	10841804 	addi	r2,r2,4192
 4006d80:	10c00035 	stwio	r3,0(r2)
				}

//////////////////////////////////////////////////////////////////

				//diagonal (\)1
				if ((gameboard [y][x]==gameboard [y+1][x+1] && gameboard[y+1][x+1]== gameboard[y+2][x+2]))//(\x\)
 4006d84:	e0b7c217 	ldw	r2,-8440(fp)
 4006d88:	01400504 	movi	r5,20
 4006d8c:	1009883a 	mov	r4,r2
 4006d90:	40191000 	call	4019100 <__mulsi3>
 4006d94:	1007883a 	mov	r3,r2
 4006d98:	e0b7c117 	ldw	r2,-8444(fp)
 4006d9c:	1885883a 	add	r2,r3,r2
 4006da0:	1085883a 	add	r2,r2,r2
 4006da4:	1085883a 	add	r2,r2,r2
 4006da8:	e0f7c104 	addi	r3,fp,-8444
 4006dac:	1885883a 	add	r2,r3,r2
 4006db0:	10879d04 	addi	r2,r2,7796
 4006db4:	14000017 	ldw	r16,0(r2)
 4006db8:	e0b7c217 	ldw	r2,-8440(fp)
 4006dbc:	10c00044 	addi	r3,r2,1
 4006dc0:	e0b7c117 	ldw	r2,-8444(fp)
 4006dc4:	14400044 	addi	r17,r2,1
 4006dc8:	01400504 	movi	r5,20
 4006dcc:	1809883a 	mov	r4,r3
 4006dd0:	40191000 	call	4019100 <__mulsi3>
 4006dd4:	1445883a 	add	r2,r2,r17
 4006dd8:	1085883a 	add	r2,r2,r2
 4006ddc:	1085883a 	add	r2,r2,r2
 4006de0:	e0f7c104 	addi	r3,fp,-8444
 4006de4:	1885883a 	add	r2,r3,r2
 4006de8:	10879d04 	addi	r2,r2,7796
 4006dec:	10800017 	ldw	r2,0(r2)
 4006df0:	80803f1e 	bne	r16,r2,4006ef0 <main+0x691c>
 4006df4:	e0b7c217 	ldw	r2,-8440(fp)
 4006df8:	10c00044 	addi	r3,r2,1
 4006dfc:	e0b7c117 	ldw	r2,-8444(fp)
 4006e00:	14000044 	addi	r16,r2,1
 4006e04:	01400504 	movi	r5,20
 4006e08:	1809883a 	mov	r4,r3
 4006e0c:	40191000 	call	4019100 <__mulsi3>
 4006e10:	1405883a 	add	r2,r2,r16
 4006e14:	1085883a 	add	r2,r2,r2
 4006e18:	1085883a 	add	r2,r2,r2
 4006e1c:	e0f7c104 	addi	r3,fp,-8444
 4006e20:	1885883a 	add	r2,r3,r2
 4006e24:	10879d04 	addi	r2,r2,7796
 4006e28:	14000017 	ldw	r16,0(r2)
 4006e2c:	e0b7c217 	ldw	r2,-8440(fp)
 4006e30:	10c00084 	addi	r3,r2,2
 4006e34:	e0b7c117 	ldw	r2,-8444(fp)
 4006e38:	14400084 	addi	r17,r2,2
 4006e3c:	01400504 	movi	r5,20
 4006e40:	1809883a 	mov	r4,r3
 4006e44:	40191000 	call	4019100 <__mulsi3>
 4006e48:	1445883a 	add	r2,r2,r17
 4006e4c:	1085883a 	add	r2,r2,r2
 4006e50:	1085883a 	add	r2,r2,r2
 4006e54:	e0f7c104 	addi	r3,fp,-8444
 4006e58:	1885883a 	add	r2,r3,r2
 4006e5c:	10879d04 	addi	r2,r2,7796
 4006e60:	10800017 	ldw	r2,0(r2)
 4006e64:	8080221e 	bne	r16,r2,4006ef0 <main+0x691c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4006e68:	e0b7c217 	ldw	r2,-8440(fp)
 4006e6c:	10c00084 	addi	r3,r2,2
 4006e70:	e0b95e04 	addi	r2,fp,-6792
 4006e74:	180f883a 	mov	r7,r3
 4006e78:	e1b7c117 	ldw	r6,-8444(fp)
 4006e7c:	01403fc4 	movi	r5,255
 4006e80:	1009883a 	mov	r4,r2
 4006e84:	40003c80 	call	40003c8 <draw>
					draw(one, COLOR08_BLACK, x,y+2 );
 4006e88:	e0b7c217 	ldw	r2,-8440(fp)
 4006e8c:	10800084 	addi	r2,r2,2
 4006e90:	100f883a 	mov	r7,r2
 4006e94:	e1b7c117 	ldw	r6,-8444(fp)
 4006e98:	000b883a 	mov	r5,zero
 4006e9c:	010100f4 	movhi	r4,1027
 4006ea0:	2132aa04 	addi	r4,r4,-13656
 4006ea4:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-11;
 4006ea8:	e0b7c217 	ldw	r2,-8440(fp)
 4006eac:	01400504 	movi	r5,20
 4006eb0:	1009883a 	mov	r4,r2
 4006eb4:	40191000 	call	4019100 <__mulsi3>
 4006eb8:	1007883a 	mov	r3,r2
 4006ebc:	e0b7c117 	ldw	r2,-8444(fp)
 4006ec0:	1885883a 	add	r2,r3,r2
 4006ec4:	1085883a 	add	r2,r2,r2
 4006ec8:	1085883a 	add	r2,r2,r2
 4006ecc:	e0f7c104 	addi	r3,fp,-8444
 4006ed0:	1885883a 	add	r2,r3,r2
 4006ed4:	10879d04 	addi	r2,r2,7796
 4006ed8:	00fffd44 	movi	r3,-11
 4006edc:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4006ee0:	00c00044 	movi	r3,1
 4006ee4:	008200b4 	movhi	r2,2050
 4006ee8:	10841804 	addi	r2,r2,4192
 4006eec:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y+1][x+1] && gameboard[y][x]== gameboard[y+2][x+2]) )//(x\\)
 4006ef0:	e0b7c217 	ldw	r2,-8440(fp)
 4006ef4:	01400504 	movi	r5,20
 4006ef8:	1009883a 	mov	r4,r2
 4006efc:	40191000 	call	4019100 <__mulsi3>
 4006f00:	1007883a 	mov	r3,r2
 4006f04:	e0b7c117 	ldw	r2,-8444(fp)
 4006f08:	1885883a 	add	r2,r3,r2
 4006f0c:	1085883a 	add	r2,r2,r2
 4006f10:	1085883a 	add	r2,r2,r2
 4006f14:	e0f7c104 	addi	r3,fp,-8444
 4006f18:	1885883a 	add	r2,r3,r2
 4006f1c:	10879d04 	addi	r2,r2,7796
 4006f20:	14000017 	ldw	r16,0(r2)
 4006f24:	e0b7c217 	ldw	r2,-8440(fp)
 4006f28:	10c00044 	addi	r3,r2,1
 4006f2c:	e0b7c117 	ldw	r2,-8444(fp)
 4006f30:	14400044 	addi	r17,r2,1
 4006f34:	01400504 	movi	r5,20
 4006f38:	1809883a 	mov	r4,r3
 4006f3c:	40191000 	call	4019100 <__mulsi3>
 4006f40:	1445883a 	add	r2,r2,r17
 4006f44:	1085883a 	add	r2,r2,r2
 4006f48:	1085883a 	add	r2,r2,r2
 4006f4c:	e0f7c104 	addi	r3,fp,-8444
 4006f50:	1885883a 	add	r2,r3,r2
 4006f54:	10879d04 	addi	r2,r2,7796
 4006f58:	10800017 	ldw	r2,0(r2)
 4006f5c:	80803e1e 	bne	r16,r2,4007058 <main+0x6a84>
 4006f60:	e0b7c217 	ldw	r2,-8440(fp)
 4006f64:	01400504 	movi	r5,20
 4006f68:	1009883a 	mov	r4,r2
 4006f6c:	40191000 	call	4019100 <__mulsi3>
 4006f70:	1007883a 	mov	r3,r2
 4006f74:	e0b7c117 	ldw	r2,-8444(fp)
 4006f78:	1885883a 	add	r2,r3,r2
 4006f7c:	1085883a 	add	r2,r2,r2
 4006f80:	1085883a 	add	r2,r2,r2
 4006f84:	e0f7c104 	addi	r3,fp,-8444
 4006f88:	1885883a 	add	r2,r3,r2
 4006f8c:	10879d04 	addi	r2,r2,7796
 4006f90:	14000017 	ldw	r16,0(r2)
 4006f94:	e0b7c217 	ldw	r2,-8440(fp)
 4006f98:	10c00084 	addi	r3,r2,2
 4006f9c:	e0b7c117 	ldw	r2,-8444(fp)
 4006fa0:	14400084 	addi	r17,r2,2
 4006fa4:	01400504 	movi	r5,20
 4006fa8:	1809883a 	mov	r4,r3
 4006fac:	40191000 	call	4019100 <__mulsi3>
 4006fb0:	1445883a 	add	r2,r2,r17
 4006fb4:	1085883a 	add	r2,r2,r2
 4006fb8:	1085883a 	add	r2,r2,r2
 4006fbc:	e0f7c104 	addi	r3,fp,-8444
 4006fc0:	1885883a 	add	r2,r3,r2
 4006fc4:	10879d04 	addi	r2,r2,7796
 4006fc8:	10800017 	ldw	r2,0(r2)
 4006fcc:	8080221e 	bne	r16,r2,4007058 <main+0x6a84>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4006fd0:	e0b7c217 	ldw	r2,-8440(fp)
 4006fd4:	10c00084 	addi	r3,r2,2
 4006fd8:	e0b95e04 	addi	r2,fp,-6792
 4006fdc:	180f883a 	mov	r7,r3
 4006fe0:	e1b7c117 	ldw	r6,-8444(fp)
 4006fe4:	01403fc4 	movi	r5,255
 4006fe8:	1009883a 	mov	r4,r2
 4006fec:	40003c80 	call	40003c8 <draw>
					draw(one, COLOR08_BLACK, x,y+2 );
 4006ff0:	e0b7c217 	ldw	r2,-8440(fp)
 4006ff4:	10800084 	addi	r2,r2,2
 4006ff8:	100f883a 	mov	r7,r2
 4006ffc:	e1b7c117 	ldw	r6,-8444(fp)
 4007000:	000b883a 	mov	r5,zero
 4007004:	010100f4 	movhi	r4,1027
 4007008:	2132aa04 	addi	r4,r4,-13656
 400700c:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-11;
 4007010:	e0b7c217 	ldw	r2,-8440(fp)
 4007014:	01400504 	movi	r5,20
 4007018:	1009883a 	mov	r4,r2
 400701c:	40191000 	call	4019100 <__mulsi3>
 4007020:	1007883a 	mov	r3,r2
 4007024:	e0b7c117 	ldw	r2,-8444(fp)
 4007028:	1885883a 	add	r2,r3,r2
 400702c:	1085883a 	add	r2,r2,r2
 4007030:	1085883a 	add	r2,r2,r2
 4007034:	e0f7c104 	addi	r3,fp,-8444
 4007038:	1885883a 	add	r2,r3,r2
 400703c:	10879d04 	addi	r2,r2,7796
 4007040:	00fffd44 	movi	r3,-11
 4007044:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4007048:	00c00044 	movi	r3,1
 400704c:	008200b4 	movhi	r2,2050
 4007050:	10841804 	addi	r2,r2,4192
 4007054:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y-1][x-1] && gameboard[y][x]== gameboard[y-2][x-2]) )//(\\x)
 4007058:	e0b7c217 	ldw	r2,-8440(fp)
 400705c:	01400504 	movi	r5,20
 4007060:	1009883a 	mov	r4,r2
 4007064:	40191000 	call	4019100 <__mulsi3>
 4007068:	1007883a 	mov	r3,r2
 400706c:	e0b7c117 	ldw	r2,-8444(fp)
 4007070:	1885883a 	add	r2,r3,r2
 4007074:	1085883a 	add	r2,r2,r2
 4007078:	1085883a 	add	r2,r2,r2
 400707c:	e0f7c104 	addi	r3,fp,-8444
 4007080:	1885883a 	add	r2,r3,r2
 4007084:	10879d04 	addi	r2,r2,7796
 4007088:	14000017 	ldw	r16,0(r2)
 400708c:	e0b7c217 	ldw	r2,-8440(fp)
 4007090:	10ffffc4 	addi	r3,r2,-1
 4007094:	e0b7c117 	ldw	r2,-8444(fp)
 4007098:	147fffc4 	addi	r17,r2,-1
 400709c:	01400504 	movi	r5,20
 40070a0:	1809883a 	mov	r4,r3
 40070a4:	40191000 	call	4019100 <__mulsi3>
 40070a8:	1445883a 	add	r2,r2,r17
 40070ac:	1085883a 	add	r2,r2,r2
 40070b0:	1085883a 	add	r2,r2,r2
 40070b4:	e0f7c104 	addi	r3,fp,-8444
 40070b8:	1885883a 	add	r2,r3,r2
 40070bc:	10879d04 	addi	r2,r2,7796
 40070c0:	10800017 	ldw	r2,0(r2)
 40070c4:	80803e1e 	bne	r16,r2,40071c0 <main+0x6bec>
 40070c8:	e0b7c217 	ldw	r2,-8440(fp)
 40070cc:	01400504 	movi	r5,20
 40070d0:	1009883a 	mov	r4,r2
 40070d4:	40191000 	call	4019100 <__mulsi3>
 40070d8:	1007883a 	mov	r3,r2
 40070dc:	e0b7c117 	ldw	r2,-8444(fp)
 40070e0:	1885883a 	add	r2,r3,r2
 40070e4:	1085883a 	add	r2,r2,r2
 40070e8:	1085883a 	add	r2,r2,r2
 40070ec:	e0f7c104 	addi	r3,fp,-8444
 40070f0:	1885883a 	add	r2,r3,r2
 40070f4:	10879d04 	addi	r2,r2,7796
 40070f8:	14000017 	ldw	r16,0(r2)
 40070fc:	e0b7c217 	ldw	r2,-8440(fp)
 4007100:	10ffff84 	addi	r3,r2,-2
 4007104:	e0b7c117 	ldw	r2,-8444(fp)
 4007108:	147fff84 	addi	r17,r2,-2
 400710c:	01400504 	movi	r5,20
 4007110:	1809883a 	mov	r4,r3
 4007114:	40191000 	call	4019100 <__mulsi3>
 4007118:	1445883a 	add	r2,r2,r17
 400711c:	1085883a 	add	r2,r2,r2
 4007120:	1085883a 	add	r2,r2,r2
 4007124:	e0f7c104 	addi	r3,fp,-8444
 4007128:	1885883a 	add	r2,r3,r2
 400712c:	10879d04 	addi	r2,r2,7796
 4007130:	10800017 	ldw	r2,0(r2)
 4007134:	8080221e 	bne	r16,r2,40071c0 <main+0x6bec>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4007138:	e0b7c217 	ldw	r2,-8440(fp)
 400713c:	10c00084 	addi	r3,r2,2
 4007140:	e0b95e04 	addi	r2,fp,-6792
 4007144:	180f883a 	mov	r7,r3
 4007148:	e1b7c117 	ldw	r6,-8444(fp)
 400714c:	01403fc4 	movi	r5,255
 4007150:	1009883a 	mov	r4,r2
 4007154:	40003c80 	call	40003c8 <draw>
					draw(one, COLOR08_BLACK, x,y+2 );
 4007158:	e0b7c217 	ldw	r2,-8440(fp)
 400715c:	10800084 	addi	r2,r2,2
 4007160:	100f883a 	mov	r7,r2
 4007164:	e1b7c117 	ldw	r6,-8444(fp)
 4007168:	000b883a 	mov	r5,zero
 400716c:	010100f4 	movhi	r4,1027
 4007170:	2132aa04 	addi	r4,r4,-13656
 4007174:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-11;
 4007178:	e0b7c217 	ldw	r2,-8440(fp)
 400717c:	01400504 	movi	r5,20
 4007180:	1009883a 	mov	r4,r2
 4007184:	40191000 	call	4019100 <__mulsi3>
 4007188:	1007883a 	mov	r3,r2
 400718c:	e0b7c117 	ldw	r2,-8444(fp)
 4007190:	1885883a 	add	r2,r3,r2
 4007194:	1085883a 	add	r2,r2,r2
 4007198:	1085883a 	add	r2,r2,r2
 400719c:	e0f7c104 	addi	r3,fp,-8444
 40071a0:	1885883a 	add	r2,r3,r2
 40071a4:	10879d04 	addi	r2,r2,7796
 40071a8:	00fffd44 	movi	r3,-11
 40071ac:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40071b0:	00c00044 	movi	r3,1
 40071b4:	008200b4 	movhi	r2,2050
 40071b8:	10841804 	addi	r2,r2,4192
 40071bc:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard[y][x]==1 && gameboard[y+1][x+1]==-11) || (gameboard[y][x]==1 && gameboard[y-1][x-1]==-11))//(\\x)
 40071c0:	e0b7c217 	ldw	r2,-8440(fp)
 40071c4:	01400504 	movi	r5,20
 40071c8:	1009883a 	mov	r4,r2
 40071cc:	40191000 	call	4019100 <__mulsi3>
 40071d0:	1007883a 	mov	r3,r2
 40071d4:	e0b7c117 	ldw	r2,-8444(fp)
 40071d8:	1885883a 	add	r2,r3,r2
 40071dc:	1085883a 	add	r2,r2,r2
 40071e0:	1085883a 	add	r2,r2,r2
 40071e4:	e0f7c104 	addi	r3,fp,-8444
 40071e8:	1885883a 	add	r2,r3,r2
 40071ec:	10879d04 	addi	r2,r2,7796
 40071f0:	10800017 	ldw	r2,0(r2)
 40071f4:	10800058 	cmpnei	r2,r2,1
 40071f8:	1000101e 	bne	r2,zero,400723c <main+0x6c68>
 40071fc:	e0b7c217 	ldw	r2,-8440(fp)
 4007200:	10c00044 	addi	r3,r2,1
 4007204:	e0b7c117 	ldw	r2,-8444(fp)
 4007208:	14000044 	addi	r16,r2,1
 400720c:	01400504 	movi	r5,20
 4007210:	1809883a 	mov	r4,r3
 4007214:	40191000 	call	4019100 <__mulsi3>
 4007218:	1405883a 	add	r2,r2,r16
 400721c:	1085883a 	add	r2,r2,r2
 4007220:	1085883a 	add	r2,r2,r2
 4007224:	e0f7c104 	addi	r3,fp,-8444
 4007228:	1885883a 	add	r2,r3,r2
 400722c:	10879d04 	addi	r2,r2,7796
 4007230:	10800017 	ldw	r2,0(r2)
 4007234:	10bffd60 	cmpeqi	r2,r2,-11
 4007238:	10001f1e 	bne	r2,zero,40072b8 <main+0x6ce4>
 400723c:	e0b7c217 	ldw	r2,-8440(fp)
 4007240:	01400504 	movi	r5,20
 4007244:	1009883a 	mov	r4,r2
 4007248:	40191000 	call	4019100 <__mulsi3>
 400724c:	1007883a 	mov	r3,r2
 4007250:	e0b7c117 	ldw	r2,-8444(fp)
 4007254:	1885883a 	add	r2,r3,r2
 4007258:	1085883a 	add	r2,r2,r2
 400725c:	1085883a 	add	r2,r2,r2
 4007260:	e0f7c104 	addi	r3,fp,-8444
 4007264:	1885883a 	add	r2,r3,r2
 4007268:	10879d04 	addi	r2,r2,7796
 400726c:	10800017 	ldw	r2,0(r2)
 4007270:	10800058 	cmpnei	r2,r2,1
 4007274:	1000321e 	bne	r2,zero,4007340 <main+0x6d6c>
 4007278:	e0b7c217 	ldw	r2,-8440(fp)
 400727c:	10ffffc4 	addi	r3,r2,-1
 4007280:	e0b7c117 	ldw	r2,-8444(fp)
 4007284:	143fffc4 	addi	r16,r2,-1
 4007288:	01400504 	movi	r5,20
 400728c:	1809883a 	mov	r4,r3
 4007290:	40191000 	call	4019100 <__mulsi3>
 4007294:	1405883a 	add	r2,r2,r16
 4007298:	1085883a 	add	r2,r2,r2
 400729c:	1085883a 	add	r2,r2,r2
 40072a0:	e0f7c104 	addi	r3,fp,-8444
 40072a4:	1885883a 	add	r2,r3,r2
 40072a8:	10879d04 	addi	r2,r2,7796
 40072ac:	10800017 	ldw	r2,0(r2)
 40072b0:	10bffd58 	cmpnei	r2,r2,-11
 40072b4:	1000221e 	bne	r2,zero,4007340 <main+0x6d6c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 40072b8:	e0b7c217 	ldw	r2,-8440(fp)
 40072bc:	10c00084 	addi	r3,r2,2
 40072c0:	e0b95e04 	addi	r2,fp,-6792
 40072c4:	180f883a 	mov	r7,r3
 40072c8:	e1b7c117 	ldw	r6,-8444(fp)
 40072cc:	01403fc4 	movi	r5,255
 40072d0:	1009883a 	mov	r4,r2
 40072d4:	40003c80 	call	40003c8 <draw>
					draw(one, COLOR08_BLACK, x,y+2 );
 40072d8:	e0b7c217 	ldw	r2,-8440(fp)
 40072dc:	10800084 	addi	r2,r2,2
 40072e0:	100f883a 	mov	r7,r2
 40072e4:	e1b7c117 	ldw	r6,-8444(fp)
 40072e8:	000b883a 	mov	r5,zero
 40072ec:	010100f4 	movhi	r4,1027
 40072f0:	2132aa04 	addi	r4,r4,-13656
 40072f4:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-11;
 40072f8:	e0b7c217 	ldw	r2,-8440(fp)
 40072fc:	01400504 	movi	r5,20
 4007300:	1009883a 	mov	r4,r2
 4007304:	40191000 	call	4019100 <__mulsi3>
 4007308:	1007883a 	mov	r3,r2
 400730c:	e0b7c117 	ldw	r2,-8444(fp)
 4007310:	1885883a 	add	r2,r3,r2
 4007314:	1085883a 	add	r2,r2,r2
 4007318:	1085883a 	add	r2,r2,r2
 400731c:	e0f7c104 	addi	r3,fp,-8444
 4007320:	1885883a 	add	r2,r3,r2
 4007324:	10879d04 	addi	r2,r2,7796
 4007328:	00fffd44 	movi	r3,-11
 400732c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4007330:	00c00044 	movi	r3,1
 4007334:	008200b4 	movhi	r2,2050
 4007338:	10841804 	addi	r2,r2,4192
 400733c:	10c00035 	stwio	r3,0(r2)
				}
				if(gameboard[y][x]==1 && gameboard[y-1][x-1]==1 && gameboard[y-2][x-2]==-11)
 4007340:	e0b7c217 	ldw	r2,-8440(fp)
 4007344:	01400504 	movi	r5,20
 4007348:	1009883a 	mov	r4,r2
 400734c:	40191000 	call	4019100 <__mulsi3>
 4007350:	1007883a 	mov	r3,r2
 4007354:	e0b7c117 	ldw	r2,-8444(fp)
 4007358:	1885883a 	add	r2,r3,r2
 400735c:	1085883a 	add	r2,r2,r2
 4007360:	1085883a 	add	r2,r2,r2
 4007364:	e0f7c104 	addi	r3,fp,-8444
 4007368:	1885883a 	add	r2,r3,r2
 400736c:	10879d04 	addi	r2,r2,7796
 4007370:	10800017 	ldw	r2,0(r2)
 4007374:	10800058 	cmpnei	r2,r2,1
 4007378:	1000421e 	bne	r2,zero,4007484 <main+0x6eb0>
 400737c:	e0b7c217 	ldw	r2,-8440(fp)
 4007380:	10ffffc4 	addi	r3,r2,-1
 4007384:	e0b7c117 	ldw	r2,-8444(fp)
 4007388:	143fffc4 	addi	r16,r2,-1
 400738c:	01400504 	movi	r5,20
 4007390:	1809883a 	mov	r4,r3
 4007394:	40191000 	call	4019100 <__mulsi3>
 4007398:	1405883a 	add	r2,r2,r16
 400739c:	1085883a 	add	r2,r2,r2
 40073a0:	1085883a 	add	r2,r2,r2
 40073a4:	e0f7c104 	addi	r3,fp,-8444
 40073a8:	1885883a 	add	r2,r3,r2
 40073ac:	10879d04 	addi	r2,r2,7796
 40073b0:	10800017 	ldw	r2,0(r2)
 40073b4:	10800058 	cmpnei	r2,r2,1
 40073b8:	1000321e 	bne	r2,zero,4007484 <main+0x6eb0>
 40073bc:	e0b7c217 	ldw	r2,-8440(fp)
 40073c0:	10ffff84 	addi	r3,r2,-2
 40073c4:	e0b7c117 	ldw	r2,-8444(fp)
 40073c8:	143fff84 	addi	r16,r2,-2
 40073cc:	01400504 	movi	r5,20
 40073d0:	1809883a 	mov	r4,r3
 40073d4:	40191000 	call	4019100 <__mulsi3>
 40073d8:	1405883a 	add	r2,r2,r16
 40073dc:	1085883a 	add	r2,r2,r2
 40073e0:	1085883a 	add	r2,r2,r2
 40073e4:	e0f7c104 	addi	r3,fp,-8444
 40073e8:	1885883a 	add	r2,r3,r2
 40073ec:	10879d04 	addi	r2,r2,7796
 40073f0:	10800017 	ldw	r2,0(r2)
 40073f4:	10bffd58 	cmpnei	r2,r2,-11
 40073f8:	1000221e 	bne	r2,zero,4007484 <main+0x6eb0>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 40073fc:	e0b7c217 	ldw	r2,-8440(fp)
 4007400:	10c00084 	addi	r3,r2,2
 4007404:	e0b95e04 	addi	r2,fp,-6792
 4007408:	180f883a 	mov	r7,r3
 400740c:	e1b7c117 	ldw	r6,-8444(fp)
 4007410:	01403fc4 	movi	r5,255
 4007414:	1009883a 	mov	r4,r2
 4007418:	40003c80 	call	40003c8 <draw>
					draw(one, COLOR08_BLACK, x,y+2 );
 400741c:	e0b7c217 	ldw	r2,-8440(fp)
 4007420:	10800084 	addi	r2,r2,2
 4007424:	100f883a 	mov	r7,r2
 4007428:	e1b7c117 	ldw	r6,-8444(fp)
 400742c:	000b883a 	mov	r5,zero
 4007430:	010100f4 	movhi	r4,1027
 4007434:	2132aa04 	addi	r4,r4,-13656
 4007438:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-11;
 400743c:	e0b7c217 	ldw	r2,-8440(fp)
 4007440:	01400504 	movi	r5,20
 4007444:	1009883a 	mov	r4,r2
 4007448:	40191000 	call	4019100 <__mulsi3>
 400744c:	1007883a 	mov	r3,r2
 4007450:	e0b7c117 	ldw	r2,-8444(fp)
 4007454:	1885883a 	add	r2,r3,r2
 4007458:	1085883a 	add	r2,r2,r2
 400745c:	1085883a 	add	r2,r2,r2
 4007460:	e0f7c104 	addi	r3,fp,-8444
 4007464:	1885883a 	add	r2,r3,r2
 4007468:	10879d04 	addi	r2,r2,7796
 400746c:	00fffd44 	movi	r3,-11
 4007470:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4007474:	00c00044 	movi	r3,1
 4007478:	008200b4 	movhi	r2,2050
 400747c:	10841804 	addi	r2,r2,4192
 4007480:	10c00035 	stwio	r3,0(r2)
				}
				if(gameboard[y][x]==1 && gameboard[y+1][x+1]==1 && gameboard[y+2][x+2]==-11)
 4007484:	e0b7c217 	ldw	r2,-8440(fp)
 4007488:	01400504 	movi	r5,20
 400748c:	1009883a 	mov	r4,r2
 4007490:	40191000 	call	4019100 <__mulsi3>
 4007494:	1007883a 	mov	r3,r2
 4007498:	e0b7c117 	ldw	r2,-8444(fp)
 400749c:	1885883a 	add	r2,r3,r2
 40074a0:	1085883a 	add	r2,r2,r2
 40074a4:	1085883a 	add	r2,r2,r2
 40074a8:	e0f7c104 	addi	r3,fp,-8444
 40074ac:	1885883a 	add	r2,r3,r2
 40074b0:	10879d04 	addi	r2,r2,7796
 40074b4:	10800017 	ldw	r2,0(r2)
 40074b8:	10800058 	cmpnei	r2,r2,1
 40074bc:	1000421e 	bne	r2,zero,40075c8 <main+0x6ff4>
 40074c0:	e0b7c217 	ldw	r2,-8440(fp)
 40074c4:	10c00044 	addi	r3,r2,1
 40074c8:	e0b7c117 	ldw	r2,-8444(fp)
 40074cc:	14000044 	addi	r16,r2,1
 40074d0:	01400504 	movi	r5,20
 40074d4:	1809883a 	mov	r4,r3
 40074d8:	40191000 	call	4019100 <__mulsi3>
 40074dc:	1405883a 	add	r2,r2,r16
 40074e0:	1085883a 	add	r2,r2,r2
 40074e4:	1085883a 	add	r2,r2,r2
 40074e8:	e0f7c104 	addi	r3,fp,-8444
 40074ec:	1885883a 	add	r2,r3,r2
 40074f0:	10879d04 	addi	r2,r2,7796
 40074f4:	10800017 	ldw	r2,0(r2)
 40074f8:	10800058 	cmpnei	r2,r2,1
 40074fc:	1000321e 	bne	r2,zero,40075c8 <main+0x6ff4>
 4007500:	e0b7c217 	ldw	r2,-8440(fp)
 4007504:	10c00084 	addi	r3,r2,2
 4007508:	e0b7c117 	ldw	r2,-8444(fp)
 400750c:	14000084 	addi	r16,r2,2
 4007510:	01400504 	movi	r5,20
 4007514:	1809883a 	mov	r4,r3
 4007518:	40191000 	call	4019100 <__mulsi3>
 400751c:	1405883a 	add	r2,r2,r16
 4007520:	1085883a 	add	r2,r2,r2
 4007524:	1085883a 	add	r2,r2,r2
 4007528:	e0f7c104 	addi	r3,fp,-8444
 400752c:	1885883a 	add	r2,r3,r2
 4007530:	10879d04 	addi	r2,r2,7796
 4007534:	10800017 	ldw	r2,0(r2)
 4007538:	10bffd58 	cmpnei	r2,r2,-11
 400753c:	1000221e 	bne	r2,zero,40075c8 <main+0x6ff4>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4007540:	e0b7c217 	ldw	r2,-8440(fp)
 4007544:	10c00084 	addi	r3,r2,2
 4007548:	e0b95e04 	addi	r2,fp,-6792
 400754c:	180f883a 	mov	r7,r3
 4007550:	e1b7c117 	ldw	r6,-8444(fp)
 4007554:	01403fc4 	movi	r5,255
 4007558:	1009883a 	mov	r4,r2
 400755c:	40003c80 	call	40003c8 <draw>
					draw(one, COLOR08_BLACK, x,y+2 );
 4007560:	e0b7c217 	ldw	r2,-8440(fp)
 4007564:	10800084 	addi	r2,r2,2
 4007568:	100f883a 	mov	r7,r2
 400756c:	e1b7c117 	ldw	r6,-8444(fp)
 4007570:	000b883a 	mov	r5,zero
 4007574:	010100f4 	movhi	r4,1027
 4007578:	2132aa04 	addi	r4,r4,-13656
 400757c:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-11;
 4007580:	e0b7c217 	ldw	r2,-8440(fp)
 4007584:	01400504 	movi	r5,20
 4007588:	1009883a 	mov	r4,r2
 400758c:	40191000 	call	4019100 <__mulsi3>
 4007590:	1007883a 	mov	r3,r2
 4007594:	e0b7c117 	ldw	r2,-8444(fp)
 4007598:	1885883a 	add	r2,r3,r2
 400759c:	1085883a 	add	r2,r2,r2
 40075a0:	1085883a 	add	r2,r2,r2
 40075a4:	e0f7c104 	addi	r3,fp,-8444
 40075a8:	1885883a 	add	r2,r3,r2
 40075ac:	10879d04 	addi	r2,r2,7796
 40075b0:	00fffd44 	movi	r3,-11
 40075b4:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40075b8:	00c00044 	movi	r3,1
 40075bc:	008200b4 	movhi	r2,2050
 40075c0:	10841804 	addi	r2,r2,4192
 40075c4:	10c00035 	stwio	r3,0(r2)
				}
				//////////////////////////////////////////////////////////

				//diagonal (/)1
				if (gameboard [y][x]==gameboard [y+1][x-1] && gameboard[y][x]== gameboard[y-1][x+1])//(/x/)
 40075c8:	e0b7c217 	ldw	r2,-8440(fp)
 40075cc:	01400504 	movi	r5,20
 40075d0:	1009883a 	mov	r4,r2
 40075d4:	40191000 	call	4019100 <__mulsi3>
 40075d8:	1007883a 	mov	r3,r2
 40075dc:	e0b7c117 	ldw	r2,-8444(fp)
 40075e0:	1885883a 	add	r2,r3,r2
 40075e4:	1085883a 	add	r2,r2,r2
 40075e8:	1085883a 	add	r2,r2,r2
 40075ec:	e0f7c104 	addi	r3,fp,-8444
 40075f0:	1885883a 	add	r2,r3,r2
 40075f4:	10879d04 	addi	r2,r2,7796
 40075f8:	14000017 	ldw	r16,0(r2)
 40075fc:	e0b7c217 	ldw	r2,-8440(fp)
 4007600:	10c00044 	addi	r3,r2,1
 4007604:	e0b7c117 	ldw	r2,-8444(fp)
 4007608:	147fffc4 	addi	r17,r2,-1
 400760c:	01400504 	movi	r5,20
 4007610:	1809883a 	mov	r4,r3
 4007614:	40191000 	call	4019100 <__mulsi3>
 4007618:	1445883a 	add	r2,r2,r17
 400761c:	1085883a 	add	r2,r2,r2
 4007620:	1085883a 	add	r2,r2,r2
 4007624:	e0f7c104 	addi	r3,fp,-8444
 4007628:	1885883a 	add	r2,r3,r2
 400762c:	10879d04 	addi	r2,r2,7796
 4007630:	10800017 	ldw	r2,0(r2)
 4007634:	80803e1e 	bne	r16,r2,4007730 <main+0x715c>
 4007638:	e0b7c217 	ldw	r2,-8440(fp)
 400763c:	01400504 	movi	r5,20
 4007640:	1009883a 	mov	r4,r2
 4007644:	40191000 	call	4019100 <__mulsi3>
 4007648:	1007883a 	mov	r3,r2
 400764c:	e0b7c117 	ldw	r2,-8444(fp)
 4007650:	1885883a 	add	r2,r3,r2
 4007654:	1085883a 	add	r2,r2,r2
 4007658:	1085883a 	add	r2,r2,r2
 400765c:	e0f7c104 	addi	r3,fp,-8444
 4007660:	1885883a 	add	r2,r3,r2
 4007664:	10879d04 	addi	r2,r2,7796
 4007668:	14000017 	ldw	r16,0(r2)
 400766c:	e0b7c217 	ldw	r2,-8440(fp)
 4007670:	10ffffc4 	addi	r3,r2,-1
 4007674:	e0b7c117 	ldw	r2,-8444(fp)
 4007678:	14400044 	addi	r17,r2,1
 400767c:	01400504 	movi	r5,20
 4007680:	1809883a 	mov	r4,r3
 4007684:	40191000 	call	4019100 <__mulsi3>
 4007688:	1445883a 	add	r2,r2,r17
 400768c:	1085883a 	add	r2,r2,r2
 4007690:	1085883a 	add	r2,r2,r2
 4007694:	e0f7c104 	addi	r3,fp,-8444
 4007698:	1885883a 	add	r2,r3,r2
 400769c:	10879d04 	addi	r2,r2,7796
 40076a0:	10800017 	ldw	r2,0(r2)
 40076a4:	8080221e 	bne	r16,r2,4007730 <main+0x715c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 40076a8:	e0b7c217 	ldw	r2,-8440(fp)
 40076ac:	10c00084 	addi	r3,r2,2
 40076b0:	e0b95e04 	addi	r2,fp,-6792
 40076b4:	180f883a 	mov	r7,r3
 40076b8:	e1b7c117 	ldw	r6,-8444(fp)
 40076bc:	01403fc4 	movi	r5,255
 40076c0:	1009883a 	mov	r4,r2
 40076c4:	40003c80 	call	40003c8 <draw>
					draw(one, COLOR08_BLACK, x,y+2 );
 40076c8:	e0b7c217 	ldw	r2,-8440(fp)
 40076cc:	10800084 	addi	r2,r2,2
 40076d0:	100f883a 	mov	r7,r2
 40076d4:	e1b7c117 	ldw	r6,-8444(fp)
 40076d8:	000b883a 	mov	r5,zero
 40076dc:	010100f4 	movhi	r4,1027
 40076e0:	2132aa04 	addi	r4,r4,-13656
 40076e4:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-11;
 40076e8:	e0b7c217 	ldw	r2,-8440(fp)
 40076ec:	01400504 	movi	r5,20
 40076f0:	1009883a 	mov	r4,r2
 40076f4:	40191000 	call	4019100 <__mulsi3>
 40076f8:	1007883a 	mov	r3,r2
 40076fc:	e0b7c117 	ldw	r2,-8444(fp)
 4007700:	1885883a 	add	r2,r3,r2
 4007704:	1085883a 	add	r2,r2,r2
 4007708:	1085883a 	add	r2,r2,r2
 400770c:	e0f7c104 	addi	r3,fp,-8444
 4007710:	1885883a 	add	r2,r3,r2
 4007714:	10879d04 	addi	r2,r2,7796
 4007718:	00fffd44 	movi	r3,-11
 400771c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4007720:	00c00044 	movi	r3,1
 4007724:	008200b4 	movhi	r2,2050
 4007728:	10841804 	addi	r2,r2,4192
 400772c:	10c00035 	stwio	r3,0(r2)
				}
				if (gameboard [y][x]==gameboard [y-1][x+1] && gameboard[y][x]== gameboard[y-2][x+2])//(x//)
 4007730:	e0b7c217 	ldw	r2,-8440(fp)
 4007734:	01400504 	movi	r5,20
 4007738:	1009883a 	mov	r4,r2
 400773c:	40191000 	call	4019100 <__mulsi3>
 4007740:	1007883a 	mov	r3,r2
 4007744:	e0b7c117 	ldw	r2,-8444(fp)
 4007748:	1885883a 	add	r2,r3,r2
 400774c:	1085883a 	add	r2,r2,r2
 4007750:	1085883a 	add	r2,r2,r2
 4007754:	e0f7c104 	addi	r3,fp,-8444
 4007758:	1885883a 	add	r2,r3,r2
 400775c:	10879d04 	addi	r2,r2,7796
 4007760:	14000017 	ldw	r16,0(r2)
 4007764:	e0b7c217 	ldw	r2,-8440(fp)
 4007768:	10ffffc4 	addi	r3,r2,-1
 400776c:	e0b7c117 	ldw	r2,-8444(fp)
 4007770:	14400044 	addi	r17,r2,1
 4007774:	01400504 	movi	r5,20
 4007778:	1809883a 	mov	r4,r3
 400777c:	40191000 	call	4019100 <__mulsi3>
 4007780:	1445883a 	add	r2,r2,r17
 4007784:	1085883a 	add	r2,r2,r2
 4007788:	1085883a 	add	r2,r2,r2
 400778c:	e0f7c104 	addi	r3,fp,-8444
 4007790:	1885883a 	add	r2,r3,r2
 4007794:	10879d04 	addi	r2,r2,7796
 4007798:	10800017 	ldw	r2,0(r2)
 400779c:	80803e1e 	bne	r16,r2,4007898 <main+0x72c4>
 40077a0:	e0b7c217 	ldw	r2,-8440(fp)
 40077a4:	01400504 	movi	r5,20
 40077a8:	1009883a 	mov	r4,r2
 40077ac:	40191000 	call	4019100 <__mulsi3>
 40077b0:	1007883a 	mov	r3,r2
 40077b4:	e0b7c117 	ldw	r2,-8444(fp)
 40077b8:	1885883a 	add	r2,r3,r2
 40077bc:	1085883a 	add	r2,r2,r2
 40077c0:	1085883a 	add	r2,r2,r2
 40077c4:	e0f7c104 	addi	r3,fp,-8444
 40077c8:	1885883a 	add	r2,r3,r2
 40077cc:	10879d04 	addi	r2,r2,7796
 40077d0:	14000017 	ldw	r16,0(r2)
 40077d4:	e0b7c217 	ldw	r2,-8440(fp)
 40077d8:	10ffff84 	addi	r3,r2,-2
 40077dc:	e0b7c117 	ldw	r2,-8444(fp)
 40077e0:	14400084 	addi	r17,r2,2
 40077e4:	01400504 	movi	r5,20
 40077e8:	1809883a 	mov	r4,r3
 40077ec:	40191000 	call	4019100 <__mulsi3>
 40077f0:	1445883a 	add	r2,r2,r17
 40077f4:	1085883a 	add	r2,r2,r2
 40077f8:	1085883a 	add	r2,r2,r2
 40077fc:	e0f7c104 	addi	r3,fp,-8444
 4007800:	1885883a 	add	r2,r3,r2
 4007804:	10879d04 	addi	r2,r2,7796
 4007808:	10800017 	ldw	r2,0(r2)
 400780c:	8080221e 	bne	r16,r2,4007898 <main+0x72c4>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4007810:	e0b7c217 	ldw	r2,-8440(fp)
 4007814:	10c00084 	addi	r3,r2,2
 4007818:	e0b95e04 	addi	r2,fp,-6792
 400781c:	180f883a 	mov	r7,r3
 4007820:	e1b7c117 	ldw	r6,-8444(fp)
 4007824:	01403fc4 	movi	r5,255
 4007828:	1009883a 	mov	r4,r2
 400782c:	40003c80 	call	40003c8 <draw>
					draw(one, COLOR08_BLACK, x,y+2 );
 4007830:	e0b7c217 	ldw	r2,-8440(fp)
 4007834:	10800084 	addi	r2,r2,2
 4007838:	100f883a 	mov	r7,r2
 400783c:	e1b7c117 	ldw	r6,-8444(fp)
 4007840:	000b883a 	mov	r5,zero
 4007844:	010100f4 	movhi	r4,1027
 4007848:	2132aa04 	addi	r4,r4,-13656
 400784c:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-11;
 4007850:	e0b7c217 	ldw	r2,-8440(fp)
 4007854:	01400504 	movi	r5,20
 4007858:	1009883a 	mov	r4,r2
 400785c:	40191000 	call	4019100 <__mulsi3>
 4007860:	1007883a 	mov	r3,r2
 4007864:	e0b7c117 	ldw	r2,-8444(fp)
 4007868:	1885883a 	add	r2,r3,r2
 400786c:	1085883a 	add	r2,r2,r2
 4007870:	1085883a 	add	r2,r2,r2
 4007874:	e0f7c104 	addi	r3,fp,-8444
 4007878:	1885883a 	add	r2,r3,r2
 400787c:	10879d04 	addi	r2,r2,7796
 4007880:	00fffd44 	movi	r3,-11
 4007884:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4007888:	00c00044 	movi	r3,1
 400788c:	008200b4 	movhi	r2,2050
 4007890:	10841804 	addi	r2,r2,4192
 4007894:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard [y][x]==1 && gameboard [y+1][x-1]==-11) || (gameboard [y][x]==1 && gameboard [y-1][x+1]==-11))//(x//)
 4007898:	e0b7c217 	ldw	r2,-8440(fp)
 400789c:	01400504 	movi	r5,20
 40078a0:	1009883a 	mov	r4,r2
 40078a4:	40191000 	call	4019100 <__mulsi3>
 40078a8:	1007883a 	mov	r3,r2
 40078ac:	e0b7c117 	ldw	r2,-8444(fp)
 40078b0:	1885883a 	add	r2,r3,r2
 40078b4:	1085883a 	add	r2,r2,r2
 40078b8:	1085883a 	add	r2,r2,r2
 40078bc:	e0f7c104 	addi	r3,fp,-8444
 40078c0:	1885883a 	add	r2,r3,r2
 40078c4:	10879d04 	addi	r2,r2,7796
 40078c8:	10800017 	ldw	r2,0(r2)
 40078cc:	10800058 	cmpnei	r2,r2,1
 40078d0:	1000101e 	bne	r2,zero,4007914 <main+0x7340>
 40078d4:	e0b7c217 	ldw	r2,-8440(fp)
 40078d8:	10c00044 	addi	r3,r2,1
 40078dc:	e0b7c117 	ldw	r2,-8444(fp)
 40078e0:	143fffc4 	addi	r16,r2,-1
 40078e4:	01400504 	movi	r5,20
 40078e8:	1809883a 	mov	r4,r3
 40078ec:	40191000 	call	4019100 <__mulsi3>
 40078f0:	1405883a 	add	r2,r2,r16
 40078f4:	1085883a 	add	r2,r2,r2
 40078f8:	1085883a 	add	r2,r2,r2
 40078fc:	e0f7c104 	addi	r3,fp,-8444
 4007900:	1885883a 	add	r2,r3,r2
 4007904:	10879d04 	addi	r2,r2,7796
 4007908:	10800017 	ldw	r2,0(r2)
 400790c:	10bffd60 	cmpeqi	r2,r2,-11
 4007910:	10001f1e 	bne	r2,zero,4007990 <main+0x73bc>
 4007914:	e0b7c217 	ldw	r2,-8440(fp)
 4007918:	01400504 	movi	r5,20
 400791c:	1009883a 	mov	r4,r2
 4007920:	40191000 	call	4019100 <__mulsi3>
 4007924:	1007883a 	mov	r3,r2
 4007928:	e0b7c117 	ldw	r2,-8444(fp)
 400792c:	1885883a 	add	r2,r3,r2
 4007930:	1085883a 	add	r2,r2,r2
 4007934:	1085883a 	add	r2,r2,r2
 4007938:	e0f7c104 	addi	r3,fp,-8444
 400793c:	1885883a 	add	r2,r3,r2
 4007940:	10879d04 	addi	r2,r2,7796
 4007944:	10800017 	ldw	r2,0(r2)
 4007948:	10800058 	cmpnei	r2,r2,1
 400794c:	1000321e 	bne	r2,zero,4007a18 <main+0x7444>
 4007950:	e0b7c217 	ldw	r2,-8440(fp)
 4007954:	10ffffc4 	addi	r3,r2,-1
 4007958:	e0b7c117 	ldw	r2,-8444(fp)
 400795c:	14000044 	addi	r16,r2,1
 4007960:	01400504 	movi	r5,20
 4007964:	1809883a 	mov	r4,r3
 4007968:	40191000 	call	4019100 <__mulsi3>
 400796c:	1405883a 	add	r2,r2,r16
 4007970:	1085883a 	add	r2,r2,r2
 4007974:	1085883a 	add	r2,r2,r2
 4007978:	e0f7c104 	addi	r3,fp,-8444
 400797c:	1885883a 	add	r2,r3,r2
 4007980:	10879d04 	addi	r2,r2,7796
 4007984:	10800017 	ldw	r2,0(r2)
 4007988:	10bffd58 	cmpnei	r2,r2,-11
 400798c:	1000221e 	bne	r2,zero,4007a18 <main+0x7444>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4007990:	e0b7c217 	ldw	r2,-8440(fp)
 4007994:	10c00084 	addi	r3,r2,2
 4007998:	e0b95e04 	addi	r2,fp,-6792
 400799c:	180f883a 	mov	r7,r3
 40079a0:	e1b7c117 	ldw	r6,-8444(fp)
 40079a4:	01403fc4 	movi	r5,255
 40079a8:	1009883a 	mov	r4,r2
 40079ac:	40003c80 	call	40003c8 <draw>
					draw(one, COLOR08_BLACK, x,y+2 );
 40079b0:	e0b7c217 	ldw	r2,-8440(fp)
 40079b4:	10800084 	addi	r2,r2,2
 40079b8:	100f883a 	mov	r7,r2
 40079bc:	e1b7c117 	ldw	r6,-8444(fp)
 40079c0:	000b883a 	mov	r5,zero
 40079c4:	010100f4 	movhi	r4,1027
 40079c8:	2132aa04 	addi	r4,r4,-13656
 40079cc:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-11;
 40079d0:	e0b7c217 	ldw	r2,-8440(fp)
 40079d4:	01400504 	movi	r5,20
 40079d8:	1009883a 	mov	r4,r2
 40079dc:	40191000 	call	4019100 <__mulsi3>
 40079e0:	1007883a 	mov	r3,r2
 40079e4:	e0b7c117 	ldw	r2,-8444(fp)
 40079e8:	1885883a 	add	r2,r3,r2
 40079ec:	1085883a 	add	r2,r2,r2
 40079f0:	1085883a 	add	r2,r2,r2
 40079f4:	e0f7c104 	addi	r3,fp,-8444
 40079f8:	1885883a 	add	r2,r3,r2
 40079fc:	10879d04 	addi	r2,r2,7796
 4007a00:	00fffd44 	movi	r3,-11
 4007a04:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4007a08:	00c00044 	movi	r3,1
 4007a0c:	008200b4 	movhi	r2,2050
 4007a10:	10841804 	addi	r2,r2,4192
 4007a14:	10c00035 	stwio	r3,0(r2)
				}
				if(gameboard[y][x]==1 && gameboard[y+1][x-1]==1 && gameboard[y+2][x-2]==-11)
 4007a18:	e0b7c217 	ldw	r2,-8440(fp)
 4007a1c:	01400504 	movi	r5,20
 4007a20:	1009883a 	mov	r4,r2
 4007a24:	40191000 	call	4019100 <__mulsi3>
 4007a28:	1007883a 	mov	r3,r2
 4007a2c:	e0b7c117 	ldw	r2,-8444(fp)
 4007a30:	1885883a 	add	r2,r3,r2
 4007a34:	1085883a 	add	r2,r2,r2
 4007a38:	1085883a 	add	r2,r2,r2
 4007a3c:	e0f7c104 	addi	r3,fp,-8444
 4007a40:	1885883a 	add	r2,r3,r2
 4007a44:	10879d04 	addi	r2,r2,7796
 4007a48:	10800017 	ldw	r2,0(r2)
 4007a4c:	10800058 	cmpnei	r2,r2,1
 4007a50:	1000421e 	bne	r2,zero,4007b5c <main+0x7588>
 4007a54:	e0b7c217 	ldw	r2,-8440(fp)
 4007a58:	10c00044 	addi	r3,r2,1
 4007a5c:	e0b7c117 	ldw	r2,-8444(fp)
 4007a60:	143fffc4 	addi	r16,r2,-1
 4007a64:	01400504 	movi	r5,20
 4007a68:	1809883a 	mov	r4,r3
 4007a6c:	40191000 	call	4019100 <__mulsi3>
 4007a70:	1405883a 	add	r2,r2,r16
 4007a74:	1085883a 	add	r2,r2,r2
 4007a78:	1085883a 	add	r2,r2,r2
 4007a7c:	e0f7c104 	addi	r3,fp,-8444
 4007a80:	1885883a 	add	r2,r3,r2
 4007a84:	10879d04 	addi	r2,r2,7796
 4007a88:	10800017 	ldw	r2,0(r2)
 4007a8c:	10800058 	cmpnei	r2,r2,1
 4007a90:	1000321e 	bne	r2,zero,4007b5c <main+0x7588>
 4007a94:	e0b7c217 	ldw	r2,-8440(fp)
 4007a98:	10c00084 	addi	r3,r2,2
 4007a9c:	e0b7c117 	ldw	r2,-8444(fp)
 4007aa0:	143fff84 	addi	r16,r2,-2
 4007aa4:	01400504 	movi	r5,20
 4007aa8:	1809883a 	mov	r4,r3
 4007aac:	40191000 	call	4019100 <__mulsi3>
 4007ab0:	1405883a 	add	r2,r2,r16
 4007ab4:	1085883a 	add	r2,r2,r2
 4007ab8:	1085883a 	add	r2,r2,r2
 4007abc:	e0f7c104 	addi	r3,fp,-8444
 4007ac0:	1885883a 	add	r2,r3,r2
 4007ac4:	10879d04 	addi	r2,r2,7796
 4007ac8:	10800017 	ldw	r2,0(r2)
 4007acc:	10bffd58 	cmpnei	r2,r2,-11
 4007ad0:	1000221e 	bne	r2,zero,4007b5c <main+0x7588>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4007ad4:	e0b7c217 	ldw	r2,-8440(fp)
 4007ad8:	10c00084 	addi	r3,r2,2
 4007adc:	e0b95e04 	addi	r2,fp,-6792
 4007ae0:	180f883a 	mov	r7,r3
 4007ae4:	e1b7c117 	ldw	r6,-8444(fp)
 4007ae8:	01403fc4 	movi	r5,255
 4007aec:	1009883a 	mov	r4,r2
 4007af0:	40003c80 	call	40003c8 <draw>
					draw(one, COLOR08_BLACK, x,y+2 );
 4007af4:	e0b7c217 	ldw	r2,-8440(fp)
 4007af8:	10800084 	addi	r2,r2,2
 4007afc:	100f883a 	mov	r7,r2
 4007b00:	e1b7c117 	ldw	r6,-8444(fp)
 4007b04:	000b883a 	mov	r5,zero
 4007b08:	010100f4 	movhi	r4,1027
 4007b0c:	2132aa04 	addi	r4,r4,-13656
 4007b10:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-11;
 4007b14:	e0b7c217 	ldw	r2,-8440(fp)
 4007b18:	01400504 	movi	r5,20
 4007b1c:	1009883a 	mov	r4,r2
 4007b20:	40191000 	call	4019100 <__mulsi3>
 4007b24:	1007883a 	mov	r3,r2
 4007b28:	e0b7c117 	ldw	r2,-8444(fp)
 4007b2c:	1885883a 	add	r2,r3,r2
 4007b30:	1085883a 	add	r2,r2,r2
 4007b34:	1085883a 	add	r2,r2,r2
 4007b38:	e0f7c104 	addi	r3,fp,-8444
 4007b3c:	1885883a 	add	r2,r3,r2
 4007b40:	10879d04 	addi	r2,r2,7796
 4007b44:	00fffd44 	movi	r3,-11
 4007b48:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4007b4c:	00c00044 	movi	r3,1
 4007b50:	008200b4 	movhi	r2,2050
 4007b54:	10841804 	addi	r2,r2,4192
 4007b58:	10c00035 	stwio	r3,0(r2)
				}
				if(gameboard[y][x]==1 && gameboard[y-1][x+1]==1 && gameboard[y-2][x+2]==-11)
 4007b5c:	e0b7c217 	ldw	r2,-8440(fp)
 4007b60:	01400504 	movi	r5,20
 4007b64:	1009883a 	mov	r4,r2
 4007b68:	40191000 	call	4019100 <__mulsi3>
 4007b6c:	1007883a 	mov	r3,r2
 4007b70:	e0b7c117 	ldw	r2,-8444(fp)
 4007b74:	1885883a 	add	r2,r3,r2
 4007b78:	1085883a 	add	r2,r2,r2
 4007b7c:	1085883a 	add	r2,r2,r2
 4007b80:	e0f7c104 	addi	r3,fp,-8444
 4007b84:	1885883a 	add	r2,r3,r2
 4007b88:	10879d04 	addi	r2,r2,7796
 4007b8c:	10800017 	ldw	r2,0(r2)
 4007b90:	10800058 	cmpnei	r2,r2,1
 4007b94:	1000421e 	bne	r2,zero,4007ca0 <main+0x76cc>
 4007b98:	e0b7c217 	ldw	r2,-8440(fp)
 4007b9c:	10ffffc4 	addi	r3,r2,-1
 4007ba0:	e0b7c117 	ldw	r2,-8444(fp)
 4007ba4:	14000044 	addi	r16,r2,1
 4007ba8:	01400504 	movi	r5,20
 4007bac:	1809883a 	mov	r4,r3
 4007bb0:	40191000 	call	4019100 <__mulsi3>
 4007bb4:	1405883a 	add	r2,r2,r16
 4007bb8:	1085883a 	add	r2,r2,r2
 4007bbc:	1085883a 	add	r2,r2,r2
 4007bc0:	e0f7c104 	addi	r3,fp,-8444
 4007bc4:	1885883a 	add	r2,r3,r2
 4007bc8:	10879d04 	addi	r2,r2,7796
 4007bcc:	10800017 	ldw	r2,0(r2)
 4007bd0:	10800058 	cmpnei	r2,r2,1
 4007bd4:	1000321e 	bne	r2,zero,4007ca0 <main+0x76cc>
 4007bd8:	e0b7c217 	ldw	r2,-8440(fp)
 4007bdc:	10ffff84 	addi	r3,r2,-2
 4007be0:	e0b7c117 	ldw	r2,-8444(fp)
 4007be4:	14000084 	addi	r16,r2,2
 4007be8:	01400504 	movi	r5,20
 4007bec:	1809883a 	mov	r4,r3
 4007bf0:	40191000 	call	4019100 <__mulsi3>
 4007bf4:	1405883a 	add	r2,r2,r16
 4007bf8:	1085883a 	add	r2,r2,r2
 4007bfc:	1085883a 	add	r2,r2,r2
 4007c00:	e0f7c104 	addi	r3,fp,-8444
 4007c04:	1885883a 	add	r2,r3,r2
 4007c08:	10879d04 	addi	r2,r2,7796
 4007c0c:	10800017 	ldw	r2,0(r2)
 4007c10:	10bffd58 	cmpnei	r2,r2,-11
 4007c14:	1000221e 	bne	r2,zero,4007ca0 <main+0x76cc>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4007c18:	e0b7c217 	ldw	r2,-8440(fp)
 4007c1c:	10c00084 	addi	r3,r2,2
 4007c20:	e0b95e04 	addi	r2,fp,-6792
 4007c24:	180f883a 	mov	r7,r3
 4007c28:	e1b7c117 	ldw	r6,-8444(fp)
 4007c2c:	01403fc4 	movi	r5,255
 4007c30:	1009883a 	mov	r4,r2
 4007c34:	40003c80 	call	40003c8 <draw>
					draw(one, COLOR08_BLACK, x,y+2 );
 4007c38:	e0b7c217 	ldw	r2,-8440(fp)
 4007c3c:	10800084 	addi	r2,r2,2
 4007c40:	100f883a 	mov	r7,r2
 4007c44:	e1b7c117 	ldw	r6,-8444(fp)
 4007c48:	000b883a 	mov	r5,zero
 4007c4c:	010100f4 	movhi	r4,1027
 4007c50:	2132aa04 	addi	r4,r4,-13656
 4007c54:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-11;
 4007c58:	e0b7c217 	ldw	r2,-8440(fp)
 4007c5c:	01400504 	movi	r5,20
 4007c60:	1009883a 	mov	r4,r2
 4007c64:	40191000 	call	4019100 <__mulsi3>
 4007c68:	1007883a 	mov	r3,r2
 4007c6c:	e0b7c117 	ldw	r2,-8444(fp)
 4007c70:	1885883a 	add	r2,r3,r2
 4007c74:	1085883a 	add	r2,r2,r2
 4007c78:	1085883a 	add	r2,r2,r2
 4007c7c:	e0f7c104 	addi	r3,fp,-8444
 4007c80:	1885883a 	add	r2,r3,r2
 4007c84:	10879d04 	addi	r2,r2,7796
 4007c88:	00fffd44 	movi	r3,-11
 4007c8c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4007c90:	00c00044 	movi	r3,1
 4007c94:	008200b4 	movhi	r2,2050
 4007c98:	10841804 	addi	r2,r2,4192
 4007c9c:	10c00035 	stwio	r3,0(r2)
				}
				if(gameboard[y][x]==1 && gameboard[y+1][x-1]==1 && gameboard[y+2][x-2]==1)
 4007ca0:	e0b7c217 	ldw	r2,-8440(fp)
 4007ca4:	01400504 	movi	r5,20
 4007ca8:	1009883a 	mov	r4,r2
 4007cac:	40191000 	call	4019100 <__mulsi3>
 4007cb0:	1007883a 	mov	r3,r2
 4007cb4:	e0b7c117 	ldw	r2,-8444(fp)
 4007cb8:	1885883a 	add	r2,r3,r2
 4007cbc:	1085883a 	add	r2,r2,r2
 4007cc0:	1085883a 	add	r2,r2,r2
 4007cc4:	e0f7c104 	addi	r3,fp,-8444
 4007cc8:	1885883a 	add	r2,r3,r2
 4007ccc:	10879d04 	addi	r2,r2,7796
 4007cd0:	10800017 	ldw	r2,0(r2)
 4007cd4:	10800058 	cmpnei	r2,r2,1
 4007cd8:	1000421e 	bne	r2,zero,4007de4 <main+0x7810>
 4007cdc:	e0b7c217 	ldw	r2,-8440(fp)
 4007ce0:	10c00044 	addi	r3,r2,1
 4007ce4:	e0b7c117 	ldw	r2,-8444(fp)
 4007ce8:	143fffc4 	addi	r16,r2,-1
 4007cec:	01400504 	movi	r5,20
 4007cf0:	1809883a 	mov	r4,r3
 4007cf4:	40191000 	call	4019100 <__mulsi3>
 4007cf8:	1405883a 	add	r2,r2,r16
 4007cfc:	1085883a 	add	r2,r2,r2
 4007d00:	1085883a 	add	r2,r2,r2
 4007d04:	e0f7c104 	addi	r3,fp,-8444
 4007d08:	1885883a 	add	r2,r3,r2
 4007d0c:	10879d04 	addi	r2,r2,7796
 4007d10:	10800017 	ldw	r2,0(r2)
 4007d14:	10800058 	cmpnei	r2,r2,1
 4007d18:	1000321e 	bne	r2,zero,4007de4 <main+0x7810>
 4007d1c:	e0b7c217 	ldw	r2,-8440(fp)
 4007d20:	10c00084 	addi	r3,r2,2
 4007d24:	e0b7c117 	ldw	r2,-8444(fp)
 4007d28:	143fff84 	addi	r16,r2,-2
 4007d2c:	01400504 	movi	r5,20
 4007d30:	1809883a 	mov	r4,r3
 4007d34:	40191000 	call	4019100 <__mulsi3>
 4007d38:	1405883a 	add	r2,r2,r16
 4007d3c:	1085883a 	add	r2,r2,r2
 4007d40:	1085883a 	add	r2,r2,r2
 4007d44:	e0f7c104 	addi	r3,fp,-8444
 4007d48:	1885883a 	add	r2,r3,r2
 4007d4c:	10879d04 	addi	r2,r2,7796
 4007d50:	10800017 	ldw	r2,0(r2)
 4007d54:	10800058 	cmpnei	r2,r2,1
 4007d58:	1000221e 	bne	r2,zero,4007de4 <main+0x7810>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4007d5c:	e0b7c217 	ldw	r2,-8440(fp)
 4007d60:	10c00084 	addi	r3,r2,2
 4007d64:	e0b95e04 	addi	r2,fp,-6792
 4007d68:	180f883a 	mov	r7,r3
 4007d6c:	e1b7c117 	ldw	r6,-8444(fp)
 4007d70:	01403fc4 	movi	r5,255
 4007d74:	1009883a 	mov	r4,r2
 4007d78:	40003c80 	call	40003c8 <draw>
					draw(one, COLOR08_BLACK, x,y+2 );
 4007d7c:	e0b7c217 	ldw	r2,-8440(fp)
 4007d80:	10800084 	addi	r2,r2,2
 4007d84:	100f883a 	mov	r7,r2
 4007d88:	e1b7c117 	ldw	r6,-8444(fp)
 4007d8c:	000b883a 	mov	r5,zero
 4007d90:	010100f4 	movhi	r4,1027
 4007d94:	2132aa04 	addi	r4,r4,-13656
 4007d98:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-11;
 4007d9c:	e0b7c217 	ldw	r2,-8440(fp)
 4007da0:	01400504 	movi	r5,20
 4007da4:	1009883a 	mov	r4,r2
 4007da8:	40191000 	call	4019100 <__mulsi3>
 4007dac:	1007883a 	mov	r3,r2
 4007db0:	e0b7c117 	ldw	r2,-8444(fp)
 4007db4:	1885883a 	add	r2,r3,r2
 4007db8:	1085883a 	add	r2,r2,r2
 4007dbc:	1085883a 	add	r2,r2,r2
 4007dc0:	e0f7c104 	addi	r3,fp,-8444
 4007dc4:	1885883a 	add	r2,r3,r2
 4007dc8:	10879d04 	addi	r2,r2,7796
 4007dcc:	00fffd44 	movi	r3,-11
 4007dd0:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4007dd4:	00c00044 	movi	r3,1
 4007dd8:	008200b4 	movhi	r2,2050
 4007ddc:	10841804 	addi	r2,r2,4192
 4007de0:	10c00035 	stwio	r3,0(r2)
				}
				if(gameboard[y][x]==1 && gameboard[y-1][x+1]==1 && gameboard[y-2][x+2]==1)
 4007de4:	e0b7c217 	ldw	r2,-8440(fp)
 4007de8:	01400504 	movi	r5,20
 4007dec:	1009883a 	mov	r4,r2
 4007df0:	40191000 	call	4019100 <__mulsi3>
 4007df4:	1007883a 	mov	r3,r2
 4007df8:	e0b7c117 	ldw	r2,-8444(fp)
 4007dfc:	1885883a 	add	r2,r3,r2
 4007e00:	1085883a 	add	r2,r2,r2
 4007e04:	1085883a 	add	r2,r2,r2
 4007e08:	e0f7c104 	addi	r3,fp,-8444
 4007e0c:	1885883a 	add	r2,r3,r2
 4007e10:	10879d04 	addi	r2,r2,7796
 4007e14:	10800017 	ldw	r2,0(r2)
 4007e18:	10800058 	cmpnei	r2,r2,1
 4007e1c:	1000421e 	bne	r2,zero,4007f28 <main+0x7954>
 4007e20:	e0b7c217 	ldw	r2,-8440(fp)
 4007e24:	10ffffc4 	addi	r3,r2,-1
 4007e28:	e0b7c117 	ldw	r2,-8444(fp)
 4007e2c:	14000044 	addi	r16,r2,1
 4007e30:	01400504 	movi	r5,20
 4007e34:	1809883a 	mov	r4,r3
 4007e38:	40191000 	call	4019100 <__mulsi3>
 4007e3c:	1405883a 	add	r2,r2,r16
 4007e40:	1085883a 	add	r2,r2,r2
 4007e44:	1085883a 	add	r2,r2,r2
 4007e48:	e0f7c104 	addi	r3,fp,-8444
 4007e4c:	1885883a 	add	r2,r3,r2
 4007e50:	10879d04 	addi	r2,r2,7796
 4007e54:	10800017 	ldw	r2,0(r2)
 4007e58:	10800058 	cmpnei	r2,r2,1
 4007e5c:	1000321e 	bne	r2,zero,4007f28 <main+0x7954>
 4007e60:	e0b7c217 	ldw	r2,-8440(fp)
 4007e64:	10ffff84 	addi	r3,r2,-2
 4007e68:	e0b7c117 	ldw	r2,-8444(fp)
 4007e6c:	14000084 	addi	r16,r2,2
 4007e70:	01400504 	movi	r5,20
 4007e74:	1809883a 	mov	r4,r3
 4007e78:	40191000 	call	4019100 <__mulsi3>
 4007e7c:	1405883a 	add	r2,r2,r16
 4007e80:	1085883a 	add	r2,r2,r2
 4007e84:	1085883a 	add	r2,r2,r2
 4007e88:	e0f7c104 	addi	r3,fp,-8444
 4007e8c:	1885883a 	add	r2,r3,r2
 4007e90:	10879d04 	addi	r2,r2,7796
 4007e94:	10800017 	ldw	r2,0(r2)
 4007e98:	10800058 	cmpnei	r2,r2,1
 4007e9c:	1000221e 	bne	r2,zero,4007f28 <main+0x7954>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4007ea0:	e0b7c217 	ldw	r2,-8440(fp)
 4007ea4:	10c00084 	addi	r3,r2,2
 4007ea8:	e0b95e04 	addi	r2,fp,-6792
 4007eac:	180f883a 	mov	r7,r3
 4007eb0:	e1b7c117 	ldw	r6,-8444(fp)
 4007eb4:	01403fc4 	movi	r5,255
 4007eb8:	1009883a 	mov	r4,r2
 4007ebc:	40003c80 	call	40003c8 <draw>
					draw(one, COLOR08_BLACK, x,y+2 );
 4007ec0:	e0b7c217 	ldw	r2,-8440(fp)
 4007ec4:	10800084 	addi	r2,r2,2
 4007ec8:	100f883a 	mov	r7,r2
 4007ecc:	e1b7c117 	ldw	r6,-8444(fp)
 4007ed0:	000b883a 	mov	r5,zero
 4007ed4:	010100f4 	movhi	r4,1027
 4007ed8:	2132aa04 	addi	r4,r4,-13656
 4007edc:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-11;
 4007ee0:	e0b7c217 	ldw	r2,-8440(fp)
 4007ee4:	01400504 	movi	r5,20
 4007ee8:	1009883a 	mov	r4,r2
 4007eec:	40191000 	call	4019100 <__mulsi3>
 4007ef0:	1007883a 	mov	r3,r2
 4007ef4:	e0b7c117 	ldw	r2,-8444(fp)
 4007ef8:	1885883a 	add	r2,r3,r2
 4007efc:	1085883a 	add	r2,r2,r2
 4007f00:	1085883a 	add	r2,r2,r2
 4007f04:	e0f7c104 	addi	r3,fp,-8444
 4007f08:	1885883a 	add	r2,r3,r2
 4007f0c:	10879d04 	addi	r2,r2,7796
 4007f10:	00fffd44 	movi	r3,-11
 4007f14:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4007f18:	00c00044 	movi	r3,1
 4007f1c:	008200b4 	movhi	r2,2050
 4007f20:	10841804 	addi	r2,r2,4192
 4007f24:	10c00035 	stwio	r3,0(r2)
				}
			}

			if(gameboard[y][x]==2)//2
 4007f28:	e0b7c217 	ldw	r2,-8440(fp)
 4007f2c:	01400504 	movi	r5,20
 4007f30:	1009883a 	mov	r4,r2
 4007f34:	40191000 	call	4019100 <__mulsi3>
 4007f38:	1007883a 	mov	r3,r2
 4007f3c:	e0b7c117 	ldw	r2,-8444(fp)
 4007f40:	1885883a 	add	r2,r3,r2
 4007f44:	1085883a 	add	r2,r2,r2
 4007f48:	1085883a 	add	r2,r2,r2
 4007f4c:	e0f7c104 	addi	r3,fp,-8444
 4007f50:	1885883a 	add	r2,r3,r2
 4007f54:	10879d04 	addi	r2,r2,7796
 4007f58:	10800017 	ldw	r2,0(r2)
 4007f5c:	10800098 	cmpnei	r2,r2,2
 4007f60:	1007d71e 	bne	r2,zero,4009ec0 <main+0x98ec>
			{
				//horizontal2
				if ((gameboard [y][x]==gameboard [y][x+1] && gameboard [y][x+1]== gameboard [y][x+2]) || (gameboard[y][x]==2 && gameboard[y][x+1]==-12) )//(0,0,0)
 4007f64:	e0b7c217 	ldw	r2,-8440(fp)
 4007f68:	01400504 	movi	r5,20
 4007f6c:	1009883a 	mov	r4,r2
 4007f70:	40191000 	call	4019100 <__mulsi3>
 4007f74:	1007883a 	mov	r3,r2
 4007f78:	e0b7c117 	ldw	r2,-8444(fp)
 4007f7c:	1885883a 	add	r2,r3,r2
 4007f80:	1085883a 	add	r2,r2,r2
 4007f84:	1085883a 	add	r2,r2,r2
 4007f88:	e0f7c104 	addi	r3,fp,-8444
 4007f8c:	1885883a 	add	r2,r3,r2
 4007f90:	10879d04 	addi	r2,r2,7796
 4007f94:	14000017 	ldw	r16,0(r2)
 4007f98:	e0b7c117 	ldw	r2,-8444(fp)
 4007f9c:	14400044 	addi	r17,r2,1
 4007fa0:	e0b7c217 	ldw	r2,-8440(fp)
 4007fa4:	01400504 	movi	r5,20
 4007fa8:	1009883a 	mov	r4,r2
 4007fac:	40191000 	call	4019100 <__mulsi3>
 4007fb0:	1445883a 	add	r2,r2,r17
 4007fb4:	1085883a 	add	r2,r2,r2
 4007fb8:	1085883a 	add	r2,r2,r2
 4007fbc:	e0f7c104 	addi	r3,fp,-8444
 4007fc0:	1885883a 	add	r2,r3,r2
 4007fc4:	10879d04 	addi	r2,r2,7796
 4007fc8:	10800017 	ldw	r2,0(r2)
 4007fcc:	80801b1e 	bne	r16,r2,400803c <main+0x7a68>
 4007fd0:	e0b7c117 	ldw	r2,-8444(fp)
 4007fd4:	14000044 	addi	r16,r2,1
 4007fd8:	e0b7c217 	ldw	r2,-8440(fp)
 4007fdc:	01400504 	movi	r5,20
 4007fe0:	1009883a 	mov	r4,r2
 4007fe4:	40191000 	call	4019100 <__mulsi3>
 4007fe8:	1405883a 	add	r2,r2,r16
 4007fec:	1085883a 	add	r2,r2,r2
 4007ff0:	1085883a 	add	r2,r2,r2
 4007ff4:	e0f7c104 	addi	r3,fp,-8444
 4007ff8:	1885883a 	add	r2,r3,r2
 4007ffc:	10879d04 	addi	r2,r2,7796
 4008000:	14000017 	ldw	r16,0(r2)
 4008004:	e0b7c117 	ldw	r2,-8444(fp)
 4008008:	14400084 	addi	r17,r2,2
 400800c:	e0b7c217 	ldw	r2,-8440(fp)
 4008010:	01400504 	movi	r5,20
 4008014:	1009883a 	mov	r4,r2
 4008018:	40191000 	call	4019100 <__mulsi3>
 400801c:	1445883a 	add	r2,r2,r17
 4008020:	1085883a 	add	r2,r2,r2
 4008024:	1085883a 	add	r2,r2,r2
 4008028:	e0f7c104 	addi	r3,fp,-8444
 400802c:	1885883a 	add	r2,r3,r2
 4008030:	10879d04 	addi	r2,r2,7796
 4008034:	10800017 	ldw	r2,0(r2)
 4008038:	80801e26 	beq	r16,r2,40080b4 <main+0x7ae0>
 400803c:	e0b7c217 	ldw	r2,-8440(fp)
 4008040:	01400504 	movi	r5,20
 4008044:	1009883a 	mov	r4,r2
 4008048:	40191000 	call	4019100 <__mulsi3>
 400804c:	1007883a 	mov	r3,r2
 4008050:	e0b7c117 	ldw	r2,-8444(fp)
 4008054:	1885883a 	add	r2,r3,r2
 4008058:	1085883a 	add	r2,r2,r2
 400805c:	1085883a 	add	r2,r2,r2
 4008060:	e0f7c104 	addi	r3,fp,-8444
 4008064:	1885883a 	add	r2,r3,r2
 4008068:	10879d04 	addi	r2,r2,7796
 400806c:	10800017 	ldw	r2,0(r2)
 4008070:	10800098 	cmpnei	r2,r2,2
 4008074:	1000311e 	bne	r2,zero,400813c <main+0x7b68>
 4008078:	e0b7c117 	ldw	r2,-8444(fp)
 400807c:	14000044 	addi	r16,r2,1
 4008080:	e0b7c217 	ldw	r2,-8440(fp)
 4008084:	01400504 	movi	r5,20
 4008088:	1009883a 	mov	r4,r2
 400808c:	40191000 	call	4019100 <__mulsi3>
 4008090:	1405883a 	add	r2,r2,r16
 4008094:	1085883a 	add	r2,r2,r2
 4008098:	1085883a 	add	r2,r2,r2
 400809c:	e0f7c104 	addi	r3,fp,-8444
 40080a0:	1885883a 	add	r2,r3,r2
 40080a4:	10879d04 	addi	r2,r2,7796
 40080a8:	10800017 	ldw	r2,0(r2)
 40080ac:	10bffd18 	cmpnei	r2,r2,-12
 40080b0:	1000221e 	bne	r2,zero,400813c <main+0x7b68>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 40080b4:	e0b7c217 	ldw	r2,-8440(fp)
 40080b8:	10c00084 	addi	r3,r2,2
 40080bc:	e0b95e04 	addi	r2,fp,-6792
 40080c0:	180f883a 	mov	r7,r3
 40080c4:	e1b7c117 	ldw	r6,-8444(fp)
 40080c8:	01403fc4 	movi	r5,255
 40080cc:	1009883a 	mov	r4,r2
 40080d0:	40003c80 	call	40003c8 <draw>
					draw(two, COLOR08_BLACK, x,y+2 );
 40080d4:	e0b7c217 	ldw	r2,-8440(fp)
 40080d8:	10800084 	addi	r2,r2,2
 40080dc:	100f883a 	mov	r7,r2
 40080e0:	e1b7c117 	ldw	r6,-8444(fp)
 40080e4:	000b883a 	mov	r5,zero
 40080e8:	010100f4 	movhi	r4,1027
 40080ec:	21342a04 	addi	r4,r4,-12120
 40080f0:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-12;
 40080f4:	e0b7c217 	ldw	r2,-8440(fp)
 40080f8:	01400504 	movi	r5,20
 40080fc:	1009883a 	mov	r4,r2
 4008100:	40191000 	call	4019100 <__mulsi3>
 4008104:	1007883a 	mov	r3,r2
 4008108:	e0b7c117 	ldw	r2,-8444(fp)
 400810c:	1885883a 	add	r2,r3,r2
 4008110:	1085883a 	add	r2,r2,r2
 4008114:	1085883a 	add	r2,r2,r2
 4008118:	e0f7c104 	addi	r3,fp,-8444
 400811c:	1885883a 	add	r2,r3,r2
 4008120:	10879d04 	addi	r2,r2,7796
 4008124:	00fffd04 	movi	r3,-12
 4008128:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400812c:	00c00044 	movi	r3,1
 4008130:	008200b4 	movhi	r2,2050
 4008134:	10841804 	addi	r2,r2,4192
 4008138:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y][x-1] && gameboard [y][x]== gameboard [y][x+1]) || (gameboard [y][x]==2 && gameboard [y][x-1]==-12) || (gameboard [y][x]==2 && gameboard [y][x+1]==-12))//(
 400813c:	e0b7c217 	ldw	r2,-8440(fp)
 4008140:	01400504 	movi	r5,20
 4008144:	1009883a 	mov	r4,r2
 4008148:	40191000 	call	4019100 <__mulsi3>
 400814c:	1007883a 	mov	r3,r2
 4008150:	e0b7c117 	ldw	r2,-8444(fp)
 4008154:	1885883a 	add	r2,r3,r2
 4008158:	1085883a 	add	r2,r2,r2
 400815c:	1085883a 	add	r2,r2,r2
 4008160:	e0f7c104 	addi	r3,fp,-8444
 4008164:	1885883a 	add	r2,r3,r2
 4008168:	10879d04 	addi	r2,r2,7796
 400816c:	14000017 	ldw	r16,0(r2)
 4008170:	e0b7c117 	ldw	r2,-8444(fp)
 4008174:	147fffc4 	addi	r17,r2,-1
 4008178:	e0b7c217 	ldw	r2,-8440(fp)
 400817c:	01400504 	movi	r5,20
 4008180:	1009883a 	mov	r4,r2
 4008184:	40191000 	call	4019100 <__mulsi3>
 4008188:	1445883a 	add	r2,r2,r17
 400818c:	1085883a 	add	r2,r2,r2
 4008190:	1085883a 	add	r2,r2,r2
 4008194:	e0f7c104 	addi	r3,fp,-8444
 4008198:	1885883a 	add	r2,r3,r2
 400819c:	10879d04 	addi	r2,r2,7796
 40081a0:	10800017 	ldw	r2,0(r2)
 40081a4:	80801b1e 	bne	r16,r2,4008214 <main+0x7c40>
 40081a8:	e0b7c217 	ldw	r2,-8440(fp)
 40081ac:	01400504 	movi	r5,20
 40081b0:	1009883a 	mov	r4,r2
 40081b4:	40191000 	call	4019100 <__mulsi3>
 40081b8:	1007883a 	mov	r3,r2
 40081bc:	e0b7c117 	ldw	r2,-8444(fp)
 40081c0:	1885883a 	add	r2,r3,r2
 40081c4:	1085883a 	add	r2,r2,r2
 40081c8:	1085883a 	add	r2,r2,r2
 40081cc:	e0f7c104 	addi	r3,fp,-8444
 40081d0:	1885883a 	add	r2,r3,r2
 40081d4:	10879d04 	addi	r2,r2,7796
 40081d8:	14000017 	ldw	r16,0(r2)
 40081dc:	e0b7c117 	ldw	r2,-8444(fp)
 40081e0:	14400044 	addi	r17,r2,1
 40081e4:	e0b7c217 	ldw	r2,-8440(fp)
 40081e8:	01400504 	movi	r5,20
 40081ec:	1009883a 	mov	r4,r2
 40081f0:	40191000 	call	4019100 <__mulsi3>
 40081f4:	1445883a 	add	r2,r2,r17
 40081f8:	1085883a 	add	r2,r2,r2
 40081fc:	1085883a 	add	r2,r2,r2
 4008200:	e0f7c104 	addi	r3,fp,-8444
 4008204:	1885883a 	add	r2,r3,r2
 4008208:	10879d04 	addi	r2,r2,7796
 400820c:	10800017 	ldw	r2,0(r2)
 4008210:	80803c26 	beq	r16,r2,4008304 <main+0x7d30>
 4008214:	e0b7c217 	ldw	r2,-8440(fp)
 4008218:	01400504 	movi	r5,20
 400821c:	1009883a 	mov	r4,r2
 4008220:	40191000 	call	4019100 <__mulsi3>
 4008224:	1007883a 	mov	r3,r2
 4008228:	e0b7c117 	ldw	r2,-8444(fp)
 400822c:	1885883a 	add	r2,r3,r2
 4008230:	1085883a 	add	r2,r2,r2
 4008234:	1085883a 	add	r2,r2,r2
 4008238:	e0f7c104 	addi	r3,fp,-8444
 400823c:	1885883a 	add	r2,r3,r2
 4008240:	10879d04 	addi	r2,r2,7796
 4008244:	10800017 	ldw	r2,0(r2)
 4008248:	10800098 	cmpnei	r2,r2,2
 400824c:	10000f1e 	bne	r2,zero,400828c <main+0x7cb8>
 4008250:	e0b7c117 	ldw	r2,-8444(fp)
 4008254:	143fffc4 	addi	r16,r2,-1
 4008258:	e0b7c217 	ldw	r2,-8440(fp)
 400825c:	01400504 	movi	r5,20
 4008260:	1009883a 	mov	r4,r2
 4008264:	40191000 	call	4019100 <__mulsi3>
 4008268:	1405883a 	add	r2,r2,r16
 400826c:	1085883a 	add	r2,r2,r2
 4008270:	1085883a 	add	r2,r2,r2
 4008274:	e0f7c104 	addi	r3,fp,-8444
 4008278:	1885883a 	add	r2,r3,r2
 400827c:	10879d04 	addi	r2,r2,7796
 4008280:	10800017 	ldw	r2,0(r2)
 4008284:	10bffd20 	cmpeqi	r2,r2,-12
 4008288:	10001e1e 	bne	r2,zero,4008304 <main+0x7d30>
 400828c:	e0b7c217 	ldw	r2,-8440(fp)
 4008290:	01400504 	movi	r5,20
 4008294:	1009883a 	mov	r4,r2
 4008298:	40191000 	call	4019100 <__mulsi3>
 400829c:	1007883a 	mov	r3,r2
 40082a0:	e0b7c117 	ldw	r2,-8444(fp)
 40082a4:	1885883a 	add	r2,r3,r2
 40082a8:	1085883a 	add	r2,r2,r2
 40082ac:	1085883a 	add	r2,r2,r2
 40082b0:	e0f7c104 	addi	r3,fp,-8444
 40082b4:	1885883a 	add	r2,r3,r2
 40082b8:	10879d04 	addi	r2,r2,7796
 40082bc:	10800017 	ldw	r2,0(r2)
 40082c0:	10800098 	cmpnei	r2,r2,2
 40082c4:	1000311e 	bne	r2,zero,400838c <main+0x7db8>
 40082c8:	e0b7c117 	ldw	r2,-8444(fp)
 40082cc:	14000044 	addi	r16,r2,1
 40082d0:	e0b7c217 	ldw	r2,-8440(fp)
 40082d4:	01400504 	movi	r5,20
 40082d8:	1009883a 	mov	r4,r2
 40082dc:	40191000 	call	4019100 <__mulsi3>
 40082e0:	1405883a 	add	r2,r2,r16
 40082e4:	1085883a 	add	r2,r2,r2
 40082e8:	1085883a 	add	r2,r2,r2
 40082ec:	e0f7c104 	addi	r3,fp,-8444
 40082f0:	1885883a 	add	r2,r3,r2
 40082f4:	10879d04 	addi	r2,r2,7796
 40082f8:	10800017 	ldw	r2,0(r2)
 40082fc:	10bffd18 	cmpnei	r2,r2,-12
 4008300:	1000221e 	bne	r2,zero,400838c <main+0x7db8>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4008304:	e0b7c217 	ldw	r2,-8440(fp)
 4008308:	10c00084 	addi	r3,r2,2
 400830c:	e0b95e04 	addi	r2,fp,-6792
 4008310:	180f883a 	mov	r7,r3
 4008314:	e1b7c117 	ldw	r6,-8444(fp)
 4008318:	01403fc4 	movi	r5,255
 400831c:	1009883a 	mov	r4,r2
 4008320:	40003c80 	call	40003c8 <draw>
					draw(two, COLOR08_BLACK, x,y+2 );
 4008324:	e0b7c217 	ldw	r2,-8440(fp)
 4008328:	10800084 	addi	r2,r2,2
 400832c:	100f883a 	mov	r7,r2
 4008330:	e1b7c117 	ldw	r6,-8444(fp)
 4008334:	000b883a 	mov	r5,zero
 4008338:	010100f4 	movhi	r4,1027
 400833c:	21342a04 	addi	r4,r4,-12120
 4008340:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-12;
 4008344:	e0b7c217 	ldw	r2,-8440(fp)
 4008348:	01400504 	movi	r5,20
 400834c:	1009883a 	mov	r4,r2
 4008350:	40191000 	call	4019100 <__mulsi3>
 4008354:	1007883a 	mov	r3,r2
 4008358:	e0b7c117 	ldw	r2,-8444(fp)
 400835c:	1885883a 	add	r2,r3,r2
 4008360:	1085883a 	add	r2,r2,r2
 4008364:	1085883a 	add	r2,r2,r2
 4008368:	e0f7c104 	addi	r3,fp,-8444
 400836c:	1885883a 	add	r2,r3,r2
 4008370:	10879d04 	addi	r2,r2,7796
 4008374:	00fffd04 	movi	r3,-12
 4008378:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400837c:	00c00044 	movi	r3,1
 4008380:	008200b4 	movhi	r2,2050
 4008384:	10841804 	addi	r2,r2,4192
 4008388:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y][x-1] && gameboard [y][x]== gameboard [y][x-2]))//00x
 400838c:	e0b7c217 	ldw	r2,-8440(fp)
 4008390:	01400504 	movi	r5,20
 4008394:	1009883a 	mov	r4,r2
 4008398:	40191000 	call	4019100 <__mulsi3>
 400839c:	1007883a 	mov	r3,r2
 40083a0:	e0b7c117 	ldw	r2,-8444(fp)
 40083a4:	1885883a 	add	r2,r3,r2
 40083a8:	1085883a 	add	r2,r2,r2
 40083ac:	1085883a 	add	r2,r2,r2
 40083b0:	e0f7c104 	addi	r3,fp,-8444
 40083b4:	1885883a 	add	r2,r3,r2
 40083b8:	10879d04 	addi	r2,r2,7796
 40083bc:	14000017 	ldw	r16,0(r2)
 40083c0:	e0b7c117 	ldw	r2,-8444(fp)
 40083c4:	147fffc4 	addi	r17,r2,-1
 40083c8:	e0b7c217 	ldw	r2,-8440(fp)
 40083cc:	01400504 	movi	r5,20
 40083d0:	1009883a 	mov	r4,r2
 40083d4:	40191000 	call	4019100 <__mulsi3>
 40083d8:	1445883a 	add	r2,r2,r17
 40083dc:	1085883a 	add	r2,r2,r2
 40083e0:	1085883a 	add	r2,r2,r2
 40083e4:	e0f7c104 	addi	r3,fp,-8444
 40083e8:	1885883a 	add	r2,r3,r2
 40083ec:	10879d04 	addi	r2,r2,7796
 40083f0:	10800017 	ldw	r2,0(r2)
 40083f4:	80803d1e 	bne	r16,r2,40084ec <main+0x7f18>
 40083f8:	e0b7c217 	ldw	r2,-8440(fp)
 40083fc:	01400504 	movi	r5,20
 4008400:	1009883a 	mov	r4,r2
 4008404:	40191000 	call	4019100 <__mulsi3>
 4008408:	1007883a 	mov	r3,r2
 400840c:	e0b7c117 	ldw	r2,-8444(fp)
 4008410:	1885883a 	add	r2,r3,r2
 4008414:	1085883a 	add	r2,r2,r2
 4008418:	1085883a 	add	r2,r2,r2
 400841c:	e0f7c104 	addi	r3,fp,-8444
 4008420:	1885883a 	add	r2,r3,r2
 4008424:	10879d04 	addi	r2,r2,7796
 4008428:	14000017 	ldw	r16,0(r2)
 400842c:	e0b7c117 	ldw	r2,-8444(fp)
 4008430:	147fff84 	addi	r17,r2,-2
 4008434:	e0b7c217 	ldw	r2,-8440(fp)
 4008438:	01400504 	movi	r5,20
 400843c:	1009883a 	mov	r4,r2
 4008440:	40191000 	call	4019100 <__mulsi3>
 4008444:	1445883a 	add	r2,r2,r17
 4008448:	1085883a 	add	r2,r2,r2
 400844c:	1085883a 	add	r2,r2,r2
 4008450:	e0f7c104 	addi	r3,fp,-8444
 4008454:	1885883a 	add	r2,r3,r2
 4008458:	10879d04 	addi	r2,r2,7796
 400845c:	10800017 	ldw	r2,0(r2)
 4008460:	8080221e 	bne	r16,r2,40084ec <main+0x7f18>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4008464:	e0b7c217 	ldw	r2,-8440(fp)
 4008468:	10c00084 	addi	r3,r2,2
 400846c:	e0b95e04 	addi	r2,fp,-6792
 4008470:	180f883a 	mov	r7,r3
 4008474:	e1b7c117 	ldw	r6,-8444(fp)
 4008478:	01403fc4 	movi	r5,255
 400847c:	1009883a 	mov	r4,r2
 4008480:	40003c80 	call	40003c8 <draw>
					draw(two, COLOR08_BLACK, x,y+2 );
 4008484:	e0b7c217 	ldw	r2,-8440(fp)
 4008488:	10800084 	addi	r2,r2,2
 400848c:	100f883a 	mov	r7,r2
 4008490:	e1b7c117 	ldw	r6,-8444(fp)
 4008494:	000b883a 	mov	r5,zero
 4008498:	010100f4 	movhi	r4,1027
 400849c:	21342a04 	addi	r4,r4,-12120
 40084a0:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-12;
 40084a4:	e0b7c217 	ldw	r2,-8440(fp)
 40084a8:	01400504 	movi	r5,20
 40084ac:	1009883a 	mov	r4,r2
 40084b0:	40191000 	call	4019100 <__mulsi3>
 40084b4:	1007883a 	mov	r3,r2
 40084b8:	e0b7c117 	ldw	r2,-8444(fp)
 40084bc:	1885883a 	add	r2,r3,r2
 40084c0:	1085883a 	add	r2,r2,r2
 40084c4:	1085883a 	add	r2,r2,r2
 40084c8:	e0f7c104 	addi	r3,fp,-8444
 40084cc:	1885883a 	add	r2,r3,r2
 40084d0:	10879d04 	addi	r2,r2,7796
 40084d4:	00fffd04 	movi	r3,-12
 40084d8:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40084dc:	00c00044 	movi	r3,1
 40084e0:	008200b4 	movhi	r2,2050
 40084e4:	10841804 	addi	r2,r2,4192
 40084e8:	10c00035 	stwio	r3,0(r2)
				}
				if(gameboard[y][x]==2 && gameboard[y][x+1]==2 && gameboard[y][x+2]==-12)
 40084ec:	e0b7c217 	ldw	r2,-8440(fp)
 40084f0:	01400504 	movi	r5,20
 40084f4:	1009883a 	mov	r4,r2
 40084f8:	40191000 	call	4019100 <__mulsi3>
 40084fc:	1007883a 	mov	r3,r2
 4008500:	e0b7c117 	ldw	r2,-8444(fp)
 4008504:	1885883a 	add	r2,r3,r2
 4008508:	1085883a 	add	r2,r2,r2
 400850c:	1085883a 	add	r2,r2,r2
 4008510:	e0f7c104 	addi	r3,fp,-8444
 4008514:	1885883a 	add	r2,r3,r2
 4008518:	10879d04 	addi	r2,r2,7796
 400851c:	10800017 	ldw	r2,0(r2)
 4008520:	10800098 	cmpnei	r2,r2,2
 4008524:	1000401e 	bne	r2,zero,4008628 <main+0x8054>
 4008528:	e0b7c117 	ldw	r2,-8444(fp)
 400852c:	14000044 	addi	r16,r2,1
 4008530:	e0b7c217 	ldw	r2,-8440(fp)
 4008534:	01400504 	movi	r5,20
 4008538:	1009883a 	mov	r4,r2
 400853c:	40191000 	call	4019100 <__mulsi3>
 4008540:	1405883a 	add	r2,r2,r16
 4008544:	1085883a 	add	r2,r2,r2
 4008548:	1085883a 	add	r2,r2,r2
 400854c:	e0f7c104 	addi	r3,fp,-8444
 4008550:	1885883a 	add	r2,r3,r2
 4008554:	10879d04 	addi	r2,r2,7796
 4008558:	10800017 	ldw	r2,0(r2)
 400855c:	10800098 	cmpnei	r2,r2,2
 4008560:	1000311e 	bne	r2,zero,4008628 <main+0x8054>
 4008564:	e0b7c117 	ldw	r2,-8444(fp)
 4008568:	14000084 	addi	r16,r2,2
 400856c:	e0b7c217 	ldw	r2,-8440(fp)
 4008570:	01400504 	movi	r5,20
 4008574:	1009883a 	mov	r4,r2
 4008578:	40191000 	call	4019100 <__mulsi3>
 400857c:	1405883a 	add	r2,r2,r16
 4008580:	1085883a 	add	r2,r2,r2
 4008584:	1085883a 	add	r2,r2,r2
 4008588:	e0f7c104 	addi	r3,fp,-8444
 400858c:	1885883a 	add	r2,r3,r2
 4008590:	10879d04 	addi	r2,r2,7796
 4008594:	10800017 	ldw	r2,0(r2)
 4008598:	10bffd18 	cmpnei	r2,r2,-12
 400859c:	1000221e 	bne	r2,zero,4008628 <main+0x8054>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 40085a0:	e0b7c217 	ldw	r2,-8440(fp)
 40085a4:	10c00084 	addi	r3,r2,2
 40085a8:	e0b95e04 	addi	r2,fp,-6792
 40085ac:	180f883a 	mov	r7,r3
 40085b0:	e1b7c117 	ldw	r6,-8444(fp)
 40085b4:	01403fc4 	movi	r5,255
 40085b8:	1009883a 	mov	r4,r2
 40085bc:	40003c80 	call	40003c8 <draw>
					draw(two, COLOR08_BLACK, x,y+2 );
 40085c0:	e0b7c217 	ldw	r2,-8440(fp)
 40085c4:	10800084 	addi	r2,r2,2
 40085c8:	100f883a 	mov	r7,r2
 40085cc:	e1b7c117 	ldw	r6,-8444(fp)
 40085d0:	000b883a 	mov	r5,zero
 40085d4:	010100f4 	movhi	r4,1027
 40085d8:	21342a04 	addi	r4,r4,-12120
 40085dc:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-12;
 40085e0:	e0b7c217 	ldw	r2,-8440(fp)
 40085e4:	01400504 	movi	r5,20
 40085e8:	1009883a 	mov	r4,r2
 40085ec:	40191000 	call	4019100 <__mulsi3>
 40085f0:	1007883a 	mov	r3,r2
 40085f4:	e0b7c117 	ldw	r2,-8444(fp)
 40085f8:	1885883a 	add	r2,r3,r2
 40085fc:	1085883a 	add	r2,r2,r2
 4008600:	1085883a 	add	r2,r2,r2
 4008604:	e0f7c104 	addi	r3,fp,-8444
 4008608:	1885883a 	add	r2,r3,r2
 400860c:	10879d04 	addi	r2,r2,7796
 4008610:	00fffd04 	movi	r3,-12
 4008614:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4008618:	00c00044 	movi	r3,1
 400861c:	008200b4 	movhi	r2,2050
 4008620:	10841804 	addi	r2,r2,4192
 4008624:	10c00035 	stwio	r3,0(r2)
				}
				/////////////////////////////////

				//vertical2
				if ((gameboard [y][x]==gameboard [y+1][x] && gameboard [y+1][x]== gameboard [y+2][x]) || (gameboard [y][x]==2 && gameboard [y+1][x]==-12))//xmb
 4008628:	e0b7c217 	ldw	r2,-8440(fp)
 400862c:	01400504 	movi	r5,20
 4008630:	1009883a 	mov	r4,r2
 4008634:	40191000 	call	4019100 <__mulsi3>
 4008638:	1007883a 	mov	r3,r2
 400863c:	e0b7c117 	ldw	r2,-8444(fp)
 4008640:	1885883a 	add	r2,r3,r2
 4008644:	1085883a 	add	r2,r2,r2
 4008648:	1085883a 	add	r2,r2,r2
 400864c:	e0f7c104 	addi	r3,fp,-8444
 4008650:	1885883a 	add	r2,r3,r2
 4008654:	10879d04 	addi	r2,r2,7796
 4008658:	14000017 	ldw	r16,0(r2)
 400865c:	e0b7c217 	ldw	r2,-8440(fp)
 4008660:	10800044 	addi	r2,r2,1
 4008664:	01400504 	movi	r5,20
 4008668:	1009883a 	mov	r4,r2
 400866c:	40191000 	call	4019100 <__mulsi3>
 4008670:	1007883a 	mov	r3,r2
 4008674:	e0b7c117 	ldw	r2,-8444(fp)
 4008678:	1885883a 	add	r2,r3,r2
 400867c:	1085883a 	add	r2,r2,r2
 4008680:	1085883a 	add	r2,r2,r2
 4008684:	e0f7c104 	addi	r3,fp,-8444
 4008688:	1885883a 	add	r2,r3,r2
 400868c:	10879d04 	addi	r2,r2,7796
 4008690:	10800017 	ldw	r2,0(r2)
 4008694:	80801d1e 	bne	r16,r2,400870c <main+0x8138>
 4008698:	e0b7c217 	ldw	r2,-8440(fp)
 400869c:	10800044 	addi	r2,r2,1
 40086a0:	01400504 	movi	r5,20
 40086a4:	1009883a 	mov	r4,r2
 40086a8:	40191000 	call	4019100 <__mulsi3>
 40086ac:	1007883a 	mov	r3,r2
 40086b0:	e0b7c117 	ldw	r2,-8444(fp)
 40086b4:	1885883a 	add	r2,r3,r2
 40086b8:	1085883a 	add	r2,r2,r2
 40086bc:	1085883a 	add	r2,r2,r2
 40086c0:	e0f7c104 	addi	r3,fp,-8444
 40086c4:	1885883a 	add	r2,r3,r2
 40086c8:	10879d04 	addi	r2,r2,7796
 40086cc:	14000017 	ldw	r16,0(r2)
 40086d0:	e0b7c217 	ldw	r2,-8440(fp)
 40086d4:	10800084 	addi	r2,r2,2
 40086d8:	01400504 	movi	r5,20
 40086dc:	1009883a 	mov	r4,r2
 40086e0:	40191000 	call	4019100 <__mulsi3>
 40086e4:	1007883a 	mov	r3,r2
 40086e8:	e0b7c117 	ldw	r2,-8444(fp)
 40086ec:	1885883a 	add	r2,r3,r2
 40086f0:	1085883a 	add	r2,r2,r2
 40086f4:	1085883a 	add	r2,r2,r2
 40086f8:	e0f7c104 	addi	r3,fp,-8444
 40086fc:	1885883a 	add	r2,r3,r2
 4008700:	10879d04 	addi	r2,r2,7796
 4008704:	10800017 	ldw	r2,0(r2)
 4008708:	80801f26 	beq	r16,r2,4008788 <main+0x81b4>
 400870c:	e0b7c217 	ldw	r2,-8440(fp)
 4008710:	01400504 	movi	r5,20
 4008714:	1009883a 	mov	r4,r2
 4008718:	40191000 	call	4019100 <__mulsi3>
 400871c:	1007883a 	mov	r3,r2
 4008720:	e0b7c117 	ldw	r2,-8444(fp)
 4008724:	1885883a 	add	r2,r3,r2
 4008728:	1085883a 	add	r2,r2,r2
 400872c:	1085883a 	add	r2,r2,r2
 4008730:	e0f7c104 	addi	r3,fp,-8444
 4008734:	1885883a 	add	r2,r3,r2
 4008738:	10879d04 	addi	r2,r2,7796
 400873c:	10800017 	ldw	r2,0(r2)
 4008740:	10800098 	cmpnei	r2,r2,2
 4008744:	1000321e 	bne	r2,zero,4008810 <main+0x823c>
 4008748:	e0b7c217 	ldw	r2,-8440(fp)
 400874c:	10800044 	addi	r2,r2,1
 4008750:	01400504 	movi	r5,20
 4008754:	1009883a 	mov	r4,r2
 4008758:	40191000 	call	4019100 <__mulsi3>
 400875c:	1007883a 	mov	r3,r2
 4008760:	e0b7c117 	ldw	r2,-8444(fp)
 4008764:	1885883a 	add	r2,r3,r2
 4008768:	1085883a 	add	r2,r2,r2
 400876c:	1085883a 	add	r2,r2,r2
 4008770:	e0f7c104 	addi	r3,fp,-8444
 4008774:	1885883a 	add	r2,r3,r2
 4008778:	10879d04 	addi	r2,r2,7796
 400877c:	10800017 	ldw	r2,0(r2)
 4008780:	10bffd18 	cmpnei	r2,r2,-12
 4008784:	1000221e 	bne	r2,zero,4008810 <main+0x823c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4008788:	e0b7c217 	ldw	r2,-8440(fp)
 400878c:	10c00084 	addi	r3,r2,2
 4008790:	e0b95e04 	addi	r2,fp,-6792
 4008794:	180f883a 	mov	r7,r3
 4008798:	e1b7c117 	ldw	r6,-8444(fp)
 400879c:	01403fc4 	movi	r5,255
 40087a0:	1009883a 	mov	r4,r2
 40087a4:	40003c80 	call	40003c8 <draw>
					draw(two, COLOR08_BLACK, x,y+2 );
 40087a8:	e0b7c217 	ldw	r2,-8440(fp)
 40087ac:	10800084 	addi	r2,r2,2
 40087b0:	100f883a 	mov	r7,r2
 40087b4:	e1b7c117 	ldw	r6,-8444(fp)
 40087b8:	000b883a 	mov	r5,zero
 40087bc:	010100f4 	movhi	r4,1027
 40087c0:	21342a04 	addi	r4,r4,-12120
 40087c4:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-12;
 40087c8:	e0b7c217 	ldw	r2,-8440(fp)
 40087cc:	01400504 	movi	r5,20
 40087d0:	1009883a 	mov	r4,r2
 40087d4:	40191000 	call	4019100 <__mulsi3>
 40087d8:	1007883a 	mov	r3,r2
 40087dc:	e0b7c117 	ldw	r2,-8444(fp)
 40087e0:	1885883a 	add	r2,r3,r2
 40087e4:	1085883a 	add	r2,r2,r2
 40087e8:	1085883a 	add	r2,r2,r2
 40087ec:	e0f7c104 	addi	r3,fp,-8444
 40087f0:	1885883a 	add	r2,r3,r2
 40087f4:	10879d04 	addi	r2,r2,7796
 40087f8:	00fffd04 	movi	r3,-12
 40087fc:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4008800:	00c00044 	movi	r3,1
 4008804:	008200b4 	movhi	r2,2050
 4008808:	10841804 	addi	r2,r2,4192
 400880c:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y-1][x] && gameboard [y][x]== gameboard [y+1][x]) || (gameboard [y][x]==2 && gameboard [y+1][x]==-12))//txb
 4008810:	e0b7c217 	ldw	r2,-8440(fp)
 4008814:	01400504 	movi	r5,20
 4008818:	1009883a 	mov	r4,r2
 400881c:	40191000 	call	4019100 <__mulsi3>
 4008820:	1007883a 	mov	r3,r2
 4008824:	e0b7c117 	ldw	r2,-8444(fp)
 4008828:	1885883a 	add	r2,r3,r2
 400882c:	1085883a 	add	r2,r2,r2
 4008830:	1085883a 	add	r2,r2,r2
 4008834:	e0f7c104 	addi	r3,fp,-8444
 4008838:	1885883a 	add	r2,r3,r2
 400883c:	10879d04 	addi	r2,r2,7796
 4008840:	14000017 	ldw	r16,0(r2)
 4008844:	e0b7c217 	ldw	r2,-8440(fp)
 4008848:	10bfffc4 	addi	r2,r2,-1
 400884c:	01400504 	movi	r5,20
 4008850:	1009883a 	mov	r4,r2
 4008854:	40191000 	call	4019100 <__mulsi3>
 4008858:	1007883a 	mov	r3,r2
 400885c:	e0b7c117 	ldw	r2,-8444(fp)
 4008860:	1885883a 	add	r2,r3,r2
 4008864:	1085883a 	add	r2,r2,r2
 4008868:	1085883a 	add	r2,r2,r2
 400886c:	e0f7c104 	addi	r3,fp,-8444
 4008870:	1885883a 	add	r2,r3,r2
 4008874:	10879d04 	addi	r2,r2,7796
 4008878:	10800017 	ldw	r2,0(r2)
 400887c:	80801c1e 	bne	r16,r2,40088f0 <main+0x831c>
 4008880:	e0b7c217 	ldw	r2,-8440(fp)
 4008884:	01400504 	movi	r5,20
 4008888:	1009883a 	mov	r4,r2
 400888c:	40191000 	call	4019100 <__mulsi3>
 4008890:	1007883a 	mov	r3,r2
 4008894:	e0b7c117 	ldw	r2,-8444(fp)
 4008898:	1885883a 	add	r2,r3,r2
 400889c:	1085883a 	add	r2,r2,r2
 40088a0:	1085883a 	add	r2,r2,r2
 40088a4:	e0f7c104 	addi	r3,fp,-8444
 40088a8:	1885883a 	add	r2,r3,r2
 40088ac:	10879d04 	addi	r2,r2,7796
 40088b0:	14000017 	ldw	r16,0(r2)
 40088b4:	e0b7c217 	ldw	r2,-8440(fp)
 40088b8:	10800044 	addi	r2,r2,1
 40088bc:	01400504 	movi	r5,20
 40088c0:	1009883a 	mov	r4,r2
 40088c4:	40191000 	call	4019100 <__mulsi3>
 40088c8:	1007883a 	mov	r3,r2
 40088cc:	e0b7c117 	ldw	r2,-8444(fp)
 40088d0:	1885883a 	add	r2,r3,r2
 40088d4:	1085883a 	add	r2,r2,r2
 40088d8:	1085883a 	add	r2,r2,r2
 40088dc:	e0f7c104 	addi	r3,fp,-8444
 40088e0:	1885883a 	add	r2,r3,r2
 40088e4:	10879d04 	addi	r2,r2,7796
 40088e8:	10800017 	ldw	r2,0(r2)
 40088ec:	80801f26 	beq	r16,r2,400896c <main+0x8398>
 40088f0:	e0b7c217 	ldw	r2,-8440(fp)
 40088f4:	01400504 	movi	r5,20
 40088f8:	1009883a 	mov	r4,r2
 40088fc:	40191000 	call	4019100 <__mulsi3>
 4008900:	1007883a 	mov	r3,r2
 4008904:	e0b7c117 	ldw	r2,-8444(fp)
 4008908:	1885883a 	add	r2,r3,r2
 400890c:	1085883a 	add	r2,r2,r2
 4008910:	1085883a 	add	r2,r2,r2
 4008914:	e0f7c104 	addi	r3,fp,-8444
 4008918:	1885883a 	add	r2,r3,r2
 400891c:	10879d04 	addi	r2,r2,7796
 4008920:	10800017 	ldw	r2,0(r2)
 4008924:	10800098 	cmpnei	r2,r2,2
 4008928:	1000321e 	bne	r2,zero,40089f4 <main+0x8420>
 400892c:	e0b7c217 	ldw	r2,-8440(fp)
 4008930:	10800044 	addi	r2,r2,1
 4008934:	01400504 	movi	r5,20
 4008938:	1009883a 	mov	r4,r2
 400893c:	40191000 	call	4019100 <__mulsi3>
 4008940:	1007883a 	mov	r3,r2
 4008944:	e0b7c117 	ldw	r2,-8444(fp)
 4008948:	1885883a 	add	r2,r3,r2
 400894c:	1085883a 	add	r2,r2,r2
 4008950:	1085883a 	add	r2,r2,r2
 4008954:	e0f7c104 	addi	r3,fp,-8444
 4008958:	1885883a 	add	r2,r3,r2
 400895c:	10879d04 	addi	r2,r2,7796
 4008960:	10800017 	ldw	r2,0(r2)
 4008964:	10bffd18 	cmpnei	r2,r2,-12
 4008968:	1000221e 	bne	r2,zero,40089f4 <main+0x8420>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400896c:	e0b7c217 	ldw	r2,-8440(fp)
 4008970:	10c00084 	addi	r3,r2,2
 4008974:	e0b95e04 	addi	r2,fp,-6792
 4008978:	180f883a 	mov	r7,r3
 400897c:	e1b7c117 	ldw	r6,-8444(fp)
 4008980:	01403fc4 	movi	r5,255
 4008984:	1009883a 	mov	r4,r2
 4008988:	40003c80 	call	40003c8 <draw>
					draw(two, COLOR08_BLACK, x,y+2 );
 400898c:	e0b7c217 	ldw	r2,-8440(fp)
 4008990:	10800084 	addi	r2,r2,2
 4008994:	100f883a 	mov	r7,r2
 4008998:	e1b7c117 	ldw	r6,-8444(fp)
 400899c:	000b883a 	mov	r5,zero
 40089a0:	010100f4 	movhi	r4,1027
 40089a4:	21342a04 	addi	r4,r4,-12120
 40089a8:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-12;
 40089ac:	e0b7c217 	ldw	r2,-8440(fp)
 40089b0:	01400504 	movi	r5,20
 40089b4:	1009883a 	mov	r4,r2
 40089b8:	40191000 	call	4019100 <__mulsi3>
 40089bc:	1007883a 	mov	r3,r2
 40089c0:	e0b7c117 	ldw	r2,-8444(fp)
 40089c4:	1885883a 	add	r2,r3,r2
 40089c8:	1085883a 	add	r2,r2,r2
 40089cc:	1085883a 	add	r2,r2,r2
 40089d0:	e0f7c104 	addi	r3,fp,-8444
 40089d4:	1885883a 	add	r2,r3,r2
 40089d8:	10879d04 	addi	r2,r2,7796
 40089dc:	00fffd04 	movi	r3,-12
 40089e0:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40089e4:	00c00044 	movi	r3,1
 40089e8:	008200b4 	movhi	r2,2050
 40089ec:	10841804 	addi	r2,r2,4192
 40089f0:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y-1][x] && gameboard [y][x]== gameboard [y-2][x]) || (gameboard [y][x]==2 && gameboard [y-1][x]==-12))//tmx
 40089f4:	e0b7c217 	ldw	r2,-8440(fp)
 40089f8:	01400504 	movi	r5,20
 40089fc:	1009883a 	mov	r4,r2
 4008a00:	40191000 	call	4019100 <__mulsi3>
 4008a04:	1007883a 	mov	r3,r2
 4008a08:	e0b7c117 	ldw	r2,-8444(fp)
 4008a0c:	1885883a 	add	r2,r3,r2
 4008a10:	1085883a 	add	r2,r2,r2
 4008a14:	1085883a 	add	r2,r2,r2
 4008a18:	e0f7c104 	addi	r3,fp,-8444
 4008a1c:	1885883a 	add	r2,r3,r2
 4008a20:	10879d04 	addi	r2,r2,7796
 4008a24:	14000017 	ldw	r16,0(r2)
 4008a28:	e0b7c217 	ldw	r2,-8440(fp)
 4008a2c:	10bfffc4 	addi	r2,r2,-1
 4008a30:	01400504 	movi	r5,20
 4008a34:	1009883a 	mov	r4,r2
 4008a38:	40191000 	call	4019100 <__mulsi3>
 4008a3c:	1007883a 	mov	r3,r2
 4008a40:	e0b7c117 	ldw	r2,-8444(fp)
 4008a44:	1885883a 	add	r2,r3,r2
 4008a48:	1085883a 	add	r2,r2,r2
 4008a4c:	1085883a 	add	r2,r2,r2
 4008a50:	e0f7c104 	addi	r3,fp,-8444
 4008a54:	1885883a 	add	r2,r3,r2
 4008a58:	10879d04 	addi	r2,r2,7796
 4008a5c:	10800017 	ldw	r2,0(r2)
 4008a60:	80801c1e 	bne	r16,r2,4008ad4 <main+0x8500>
 4008a64:	e0b7c217 	ldw	r2,-8440(fp)
 4008a68:	01400504 	movi	r5,20
 4008a6c:	1009883a 	mov	r4,r2
 4008a70:	40191000 	call	4019100 <__mulsi3>
 4008a74:	1007883a 	mov	r3,r2
 4008a78:	e0b7c117 	ldw	r2,-8444(fp)
 4008a7c:	1885883a 	add	r2,r3,r2
 4008a80:	1085883a 	add	r2,r2,r2
 4008a84:	1085883a 	add	r2,r2,r2
 4008a88:	e0f7c104 	addi	r3,fp,-8444
 4008a8c:	1885883a 	add	r2,r3,r2
 4008a90:	10879d04 	addi	r2,r2,7796
 4008a94:	14000017 	ldw	r16,0(r2)
 4008a98:	e0b7c217 	ldw	r2,-8440(fp)
 4008a9c:	10bfff84 	addi	r2,r2,-2
 4008aa0:	01400504 	movi	r5,20
 4008aa4:	1009883a 	mov	r4,r2
 4008aa8:	40191000 	call	4019100 <__mulsi3>
 4008aac:	1007883a 	mov	r3,r2
 4008ab0:	e0b7c117 	ldw	r2,-8444(fp)
 4008ab4:	1885883a 	add	r2,r3,r2
 4008ab8:	1085883a 	add	r2,r2,r2
 4008abc:	1085883a 	add	r2,r2,r2
 4008ac0:	e0f7c104 	addi	r3,fp,-8444
 4008ac4:	1885883a 	add	r2,r3,r2
 4008ac8:	10879d04 	addi	r2,r2,7796
 4008acc:	10800017 	ldw	r2,0(r2)
 4008ad0:	80801f26 	beq	r16,r2,4008b50 <main+0x857c>
 4008ad4:	e0b7c217 	ldw	r2,-8440(fp)
 4008ad8:	01400504 	movi	r5,20
 4008adc:	1009883a 	mov	r4,r2
 4008ae0:	40191000 	call	4019100 <__mulsi3>
 4008ae4:	1007883a 	mov	r3,r2
 4008ae8:	e0b7c117 	ldw	r2,-8444(fp)
 4008aec:	1885883a 	add	r2,r3,r2
 4008af0:	1085883a 	add	r2,r2,r2
 4008af4:	1085883a 	add	r2,r2,r2
 4008af8:	e0f7c104 	addi	r3,fp,-8444
 4008afc:	1885883a 	add	r2,r3,r2
 4008b00:	10879d04 	addi	r2,r2,7796
 4008b04:	10800017 	ldw	r2,0(r2)
 4008b08:	10800098 	cmpnei	r2,r2,2
 4008b0c:	1000321e 	bne	r2,zero,4008bd8 <main+0x8604>
 4008b10:	e0b7c217 	ldw	r2,-8440(fp)
 4008b14:	10bfffc4 	addi	r2,r2,-1
 4008b18:	01400504 	movi	r5,20
 4008b1c:	1009883a 	mov	r4,r2
 4008b20:	40191000 	call	4019100 <__mulsi3>
 4008b24:	1007883a 	mov	r3,r2
 4008b28:	e0b7c117 	ldw	r2,-8444(fp)
 4008b2c:	1885883a 	add	r2,r3,r2
 4008b30:	1085883a 	add	r2,r2,r2
 4008b34:	1085883a 	add	r2,r2,r2
 4008b38:	e0f7c104 	addi	r3,fp,-8444
 4008b3c:	1885883a 	add	r2,r3,r2
 4008b40:	10879d04 	addi	r2,r2,7796
 4008b44:	10800017 	ldw	r2,0(r2)
 4008b48:	10bffd18 	cmpnei	r2,r2,-12
 4008b4c:	1000221e 	bne	r2,zero,4008bd8 <main+0x8604>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4008b50:	e0b7c217 	ldw	r2,-8440(fp)
 4008b54:	10c00084 	addi	r3,r2,2
 4008b58:	e0b95e04 	addi	r2,fp,-6792
 4008b5c:	180f883a 	mov	r7,r3
 4008b60:	e1b7c117 	ldw	r6,-8444(fp)
 4008b64:	01403fc4 	movi	r5,255
 4008b68:	1009883a 	mov	r4,r2
 4008b6c:	40003c80 	call	40003c8 <draw>
					draw(two, COLOR08_BLACK, x,y+2 );
 4008b70:	e0b7c217 	ldw	r2,-8440(fp)
 4008b74:	10800084 	addi	r2,r2,2
 4008b78:	100f883a 	mov	r7,r2
 4008b7c:	e1b7c117 	ldw	r6,-8444(fp)
 4008b80:	000b883a 	mov	r5,zero
 4008b84:	010100f4 	movhi	r4,1027
 4008b88:	21342a04 	addi	r4,r4,-12120
 4008b8c:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-12;
 4008b90:	e0b7c217 	ldw	r2,-8440(fp)
 4008b94:	01400504 	movi	r5,20
 4008b98:	1009883a 	mov	r4,r2
 4008b9c:	40191000 	call	4019100 <__mulsi3>
 4008ba0:	1007883a 	mov	r3,r2
 4008ba4:	e0b7c117 	ldw	r2,-8444(fp)
 4008ba8:	1885883a 	add	r2,r3,r2
 4008bac:	1085883a 	add	r2,r2,r2
 4008bb0:	1085883a 	add	r2,r2,r2
 4008bb4:	e0f7c104 	addi	r3,fp,-8444
 4008bb8:	1885883a 	add	r2,r3,r2
 4008bbc:	10879d04 	addi	r2,r2,7796
 4008bc0:	00fffd04 	movi	r3,-12
 4008bc4:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4008bc8:	00c00044 	movi	r3,1
 4008bcc:	008200b4 	movhi	r2,2050
 4008bd0:	10841804 	addi	r2,r2,4192
 4008bd4:	10c00035 	stwio	r3,0(r2)
				}
				if(gameboard[y][x]==2 && gameboard[y-1][x]==2 && gameboard[y-2][x]==-12)
 4008bd8:	e0b7c217 	ldw	r2,-8440(fp)
 4008bdc:	01400504 	movi	r5,20
 4008be0:	1009883a 	mov	r4,r2
 4008be4:	40191000 	call	4019100 <__mulsi3>
 4008be8:	1007883a 	mov	r3,r2
 4008bec:	e0b7c117 	ldw	r2,-8444(fp)
 4008bf0:	1885883a 	add	r2,r3,r2
 4008bf4:	1085883a 	add	r2,r2,r2
 4008bf8:	1085883a 	add	r2,r2,r2
 4008bfc:	e0f7c104 	addi	r3,fp,-8444
 4008c00:	1885883a 	add	r2,r3,r2
 4008c04:	10879d04 	addi	r2,r2,7796
 4008c08:	10800017 	ldw	r2,0(r2)
 4008c0c:	10800098 	cmpnei	r2,r2,2
 4008c10:	1000421e 	bne	r2,zero,4008d1c <main+0x8748>
 4008c14:	e0b7c217 	ldw	r2,-8440(fp)
 4008c18:	10bfffc4 	addi	r2,r2,-1
 4008c1c:	01400504 	movi	r5,20
 4008c20:	1009883a 	mov	r4,r2
 4008c24:	40191000 	call	4019100 <__mulsi3>
 4008c28:	1007883a 	mov	r3,r2
 4008c2c:	e0b7c117 	ldw	r2,-8444(fp)
 4008c30:	1885883a 	add	r2,r3,r2
 4008c34:	1085883a 	add	r2,r2,r2
 4008c38:	1085883a 	add	r2,r2,r2
 4008c3c:	e0f7c104 	addi	r3,fp,-8444
 4008c40:	1885883a 	add	r2,r3,r2
 4008c44:	10879d04 	addi	r2,r2,7796
 4008c48:	10800017 	ldw	r2,0(r2)
 4008c4c:	10800098 	cmpnei	r2,r2,2
 4008c50:	1000321e 	bne	r2,zero,4008d1c <main+0x8748>
 4008c54:	e0b7c217 	ldw	r2,-8440(fp)
 4008c58:	10bfff84 	addi	r2,r2,-2
 4008c5c:	01400504 	movi	r5,20
 4008c60:	1009883a 	mov	r4,r2
 4008c64:	40191000 	call	4019100 <__mulsi3>
 4008c68:	1007883a 	mov	r3,r2
 4008c6c:	e0b7c117 	ldw	r2,-8444(fp)
 4008c70:	1885883a 	add	r2,r3,r2
 4008c74:	1085883a 	add	r2,r2,r2
 4008c78:	1085883a 	add	r2,r2,r2
 4008c7c:	e0f7c104 	addi	r3,fp,-8444
 4008c80:	1885883a 	add	r2,r3,r2
 4008c84:	10879d04 	addi	r2,r2,7796
 4008c88:	10800017 	ldw	r2,0(r2)
 4008c8c:	10bffd18 	cmpnei	r2,r2,-12
 4008c90:	1000221e 	bne	r2,zero,4008d1c <main+0x8748>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4008c94:	e0b7c217 	ldw	r2,-8440(fp)
 4008c98:	10c00084 	addi	r3,r2,2
 4008c9c:	e0b95e04 	addi	r2,fp,-6792
 4008ca0:	180f883a 	mov	r7,r3
 4008ca4:	e1b7c117 	ldw	r6,-8444(fp)
 4008ca8:	01403fc4 	movi	r5,255
 4008cac:	1009883a 	mov	r4,r2
 4008cb0:	40003c80 	call	40003c8 <draw>
					draw(two, COLOR08_BLACK, x,y+2 );
 4008cb4:	e0b7c217 	ldw	r2,-8440(fp)
 4008cb8:	10800084 	addi	r2,r2,2
 4008cbc:	100f883a 	mov	r7,r2
 4008cc0:	e1b7c117 	ldw	r6,-8444(fp)
 4008cc4:	000b883a 	mov	r5,zero
 4008cc8:	010100f4 	movhi	r4,1027
 4008ccc:	21342a04 	addi	r4,r4,-12120
 4008cd0:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-12;
 4008cd4:	e0b7c217 	ldw	r2,-8440(fp)
 4008cd8:	01400504 	movi	r5,20
 4008cdc:	1009883a 	mov	r4,r2
 4008ce0:	40191000 	call	4019100 <__mulsi3>
 4008ce4:	1007883a 	mov	r3,r2
 4008ce8:	e0b7c117 	ldw	r2,-8444(fp)
 4008cec:	1885883a 	add	r2,r3,r2
 4008cf0:	1085883a 	add	r2,r2,r2
 4008cf4:	1085883a 	add	r2,r2,r2
 4008cf8:	e0f7c104 	addi	r3,fp,-8444
 4008cfc:	1885883a 	add	r2,r3,r2
 4008d00:	10879d04 	addi	r2,r2,7796
 4008d04:	00fffd04 	movi	r3,-12
 4008d08:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4008d0c:	00c00044 	movi	r3,1
 4008d10:	008200b4 	movhi	r2,2050
 4008d14:	10841804 	addi	r2,r2,4192
 4008d18:	10c00035 	stwio	r3,0(r2)
				}

//////////////////////////////////////////////////////////////////

				//diagonal (\)2
				if ((gameboard [y][x]==gameboard [y+1][x+1] && gameboard[y+1][x+1]== gameboard[y+2][x+2]))//(\x\)
 4008d1c:	e0b7c217 	ldw	r2,-8440(fp)
 4008d20:	01400504 	movi	r5,20
 4008d24:	1009883a 	mov	r4,r2
 4008d28:	40191000 	call	4019100 <__mulsi3>
 4008d2c:	1007883a 	mov	r3,r2
 4008d30:	e0b7c117 	ldw	r2,-8444(fp)
 4008d34:	1885883a 	add	r2,r3,r2
 4008d38:	1085883a 	add	r2,r2,r2
 4008d3c:	1085883a 	add	r2,r2,r2
 4008d40:	e0f7c104 	addi	r3,fp,-8444
 4008d44:	1885883a 	add	r2,r3,r2
 4008d48:	10879d04 	addi	r2,r2,7796
 4008d4c:	14000017 	ldw	r16,0(r2)
 4008d50:	e0b7c217 	ldw	r2,-8440(fp)
 4008d54:	10c00044 	addi	r3,r2,1
 4008d58:	e0b7c117 	ldw	r2,-8444(fp)
 4008d5c:	14400044 	addi	r17,r2,1
 4008d60:	01400504 	movi	r5,20
 4008d64:	1809883a 	mov	r4,r3
 4008d68:	40191000 	call	4019100 <__mulsi3>
 4008d6c:	1445883a 	add	r2,r2,r17
 4008d70:	1085883a 	add	r2,r2,r2
 4008d74:	1085883a 	add	r2,r2,r2
 4008d78:	e0f7c104 	addi	r3,fp,-8444
 4008d7c:	1885883a 	add	r2,r3,r2
 4008d80:	10879d04 	addi	r2,r2,7796
 4008d84:	10800017 	ldw	r2,0(r2)
 4008d88:	80803f1e 	bne	r16,r2,4008e88 <main+0x88b4>
 4008d8c:	e0b7c217 	ldw	r2,-8440(fp)
 4008d90:	10c00044 	addi	r3,r2,1
 4008d94:	e0b7c117 	ldw	r2,-8444(fp)
 4008d98:	14000044 	addi	r16,r2,1
 4008d9c:	01400504 	movi	r5,20
 4008da0:	1809883a 	mov	r4,r3
 4008da4:	40191000 	call	4019100 <__mulsi3>
 4008da8:	1405883a 	add	r2,r2,r16
 4008dac:	1085883a 	add	r2,r2,r2
 4008db0:	1085883a 	add	r2,r2,r2
 4008db4:	e0f7c104 	addi	r3,fp,-8444
 4008db8:	1885883a 	add	r2,r3,r2
 4008dbc:	10879d04 	addi	r2,r2,7796
 4008dc0:	14000017 	ldw	r16,0(r2)
 4008dc4:	e0b7c217 	ldw	r2,-8440(fp)
 4008dc8:	10c00084 	addi	r3,r2,2
 4008dcc:	e0b7c117 	ldw	r2,-8444(fp)
 4008dd0:	14400084 	addi	r17,r2,2
 4008dd4:	01400504 	movi	r5,20
 4008dd8:	1809883a 	mov	r4,r3
 4008ddc:	40191000 	call	4019100 <__mulsi3>
 4008de0:	1445883a 	add	r2,r2,r17
 4008de4:	1085883a 	add	r2,r2,r2
 4008de8:	1085883a 	add	r2,r2,r2
 4008dec:	e0f7c104 	addi	r3,fp,-8444
 4008df0:	1885883a 	add	r2,r3,r2
 4008df4:	10879d04 	addi	r2,r2,7796
 4008df8:	10800017 	ldw	r2,0(r2)
 4008dfc:	8080221e 	bne	r16,r2,4008e88 <main+0x88b4>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4008e00:	e0b7c217 	ldw	r2,-8440(fp)
 4008e04:	10c00084 	addi	r3,r2,2
 4008e08:	e0b95e04 	addi	r2,fp,-6792
 4008e0c:	180f883a 	mov	r7,r3
 4008e10:	e1b7c117 	ldw	r6,-8444(fp)
 4008e14:	01403fc4 	movi	r5,255
 4008e18:	1009883a 	mov	r4,r2
 4008e1c:	40003c80 	call	40003c8 <draw>
					draw(two, COLOR08_BLACK, x,y+2 );
 4008e20:	e0b7c217 	ldw	r2,-8440(fp)
 4008e24:	10800084 	addi	r2,r2,2
 4008e28:	100f883a 	mov	r7,r2
 4008e2c:	e1b7c117 	ldw	r6,-8444(fp)
 4008e30:	000b883a 	mov	r5,zero
 4008e34:	010100f4 	movhi	r4,1027
 4008e38:	21342a04 	addi	r4,r4,-12120
 4008e3c:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-12;
 4008e40:	e0b7c217 	ldw	r2,-8440(fp)
 4008e44:	01400504 	movi	r5,20
 4008e48:	1009883a 	mov	r4,r2
 4008e4c:	40191000 	call	4019100 <__mulsi3>
 4008e50:	1007883a 	mov	r3,r2
 4008e54:	e0b7c117 	ldw	r2,-8444(fp)
 4008e58:	1885883a 	add	r2,r3,r2
 4008e5c:	1085883a 	add	r2,r2,r2
 4008e60:	1085883a 	add	r2,r2,r2
 4008e64:	e0f7c104 	addi	r3,fp,-8444
 4008e68:	1885883a 	add	r2,r3,r2
 4008e6c:	10879d04 	addi	r2,r2,7796
 4008e70:	00fffd04 	movi	r3,-12
 4008e74:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4008e78:	00c00044 	movi	r3,1
 4008e7c:	008200b4 	movhi	r2,2050
 4008e80:	10841804 	addi	r2,r2,4192
 4008e84:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y+1][x+1] && gameboard[y][x]== gameboard[y+2][x+2]) )//(x\\)
 4008e88:	e0b7c217 	ldw	r2,-8440(fp)
 4008e8c:	01400504 	movi	r5,20
 4008e90:	1009883a 	mov	r4,r2
 4008e94:	40191000 	call	4019100 <__mulsi3>
 4008e98:	1007883a 	mov	r3,r2
 4008e9c:	e0b7c117 	ldw	r2,-8444(fp)
 4008ea0:	1885883a 	add	r2,r3,r2
 4008ea4:	1085883a 	add	r2,r2,r2
 4008ea8:	1085883a 	add	r2,r2,r2
 4008eac:	e0f7c104 	addi	r3,fp,-8444
 4008eb0:	1885883a 	add	r2,r3,r2
 4008eb4:	10879d04 	addi	r2,r2,7796
 4008eb8:	14000017 	ldw	r16,0(r2)
 4008ebc:	e0b7c217 	ldw	r2,-8440(fp)
 4008ec0:	10c00044 	addi	r3,r2,1
 4008ec4:	e0b7c117 	ldw	r2,-8444(fp)
 4008ec8:	14400044 	addi	r17,r2,1
 4008ecc:	01400504 	movi	r5,20
 4008ed0:	1809883a 	mov	r4,r3
 4008ed4:	40191000 	call	4019100 <__mulsi3>
 4008ed8:	1445883a 	add	r2,r2,r17
 4008edc:	1085883a 	add	r2,r2,r2
 4008ee0:	1085883a 	add	r2,r2,r2
 4008ee4:	e0f7c104 	addi	r3,fp,-8444
 4008ee8:	1885883a 	add	r2,r3,r2
 4008eec:	10879d04 	addi	r2,r2,7796
 4008ef0:	10800017 	ldw	r2,0(r2)
 4008ef4:	80803e1e 	bne	r16,r2,4008ff0 <main+0x8a1c>
 4008ef8:	e0b7c217 	ldw	r2,-8440(fp)
 4008efc:	01400504 	movi	r5,20
 4008f00:	1009883a 	mov	r4,r2
 4008f04:	40191000 	call	4019100 <__mulsi3>
 4008f08:	1007883a 	mov	r3,r2
 4008f0c:	e0b7c117 	ldw	r2,-8444(fp)
 4008f10:	1885883a 	add	r2,r3,r2
 4008f14:	1085883a 	add	r2,r2,r2
 4008f18:	1085883a 	add	r2,r2,r2
 4008f1c:	e0f7c104 	addi	r3,fp,-8444
 4008f20:	1885883a 	add	r2,r3,r2
 4008f24:	10879d04 	addi	r2,r2,7796
 4008f28:	14000017 	ldw	r16,0(r2)
 4008f2c:	e0b7c217 	ldw	r2,-8440(fp)
 4008f30:	10c00084 	addi	r3,r2,2
 4008f34:	e0b7c117 	ldw	r2,-8444(fp)
 4008f38:	14400084 	addi	r17,r2,2
 4008f3c:	01400504 	movi	r5,20
 4008f40:	1809883a 	mov	r4,r3
 4008f44:	40191000 	call	4019100 <__mulsi3>
 4008f48:	1445883a 	add	r2,r2,r17
 4008f4c:	1085883a 	add	r2,r2,r2
 4008f50:	1085883a 	add	r2,r2,r2
 4008f54:	e0f7c104 	addi	r3,fp,-8444
 4008f58:	1885883a 	add	r2,r3,r2
 4008f5c:	10879d04 	addi	r2,r2,7796
 4008f60:	10800017 	ldw	r2,0(r2)
 4008f64:	8080221e 	bne	r16,r2,4008ff0 <main+0x8a1c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4008f68:	e0b7c217 	ldw	r2,-8440(fp)
 4008f6c:	10c00084 	addi	r3,r2,2
 4008f70:	e0b95e04 	addi	r2,fp,-6792
 4008f74:	180f883a 	mov	r7,r3
 4008f78:	e1b7c117 	ldw	r6,-8444(fp)
 4008f7c:	01403fc4 	movi	r5,255
 4008f80:	1009883a 	mov	r4,r2
 4008f84:	40003c80 	call	40003c8 <draw>
					draw(two, COLOR08_BLACK, x,y+2 );
 4008f88:	e0b7c217 	ldw	r2,-8440(fp)
 4008f8c:	10800084 	addi	r2,r2,2
 4008f90:	100f883a 	mov	r7,r2
 4008f94:	e1b7c117 	ldw	r6,-8444(fp)
 4008f98:	000b883a 	mov	r5,zero
 4008f9c:	010100f4 	movhi	r4,1027
 4008fa0:	21342a04 	addi	r4,r4,-12120
 4008fa4:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-12;
 4008fa8:	e0b7c217 	ldw	r2,-8440(fp)
 4008fac:	01400504 	movi	r5,20
 4008fb0:	1009883a 	mov	r4,r2
 4008fb4:	40191000 	call	4019100 <__mulsi3>
 4008fb8:	1007883a 	mov	r3,r2
 4008fbc:	e0b7c117 	ldw	r2,-8444(fp)
 4008fc0:	1885883a 	add	r2,r3,r2
 4008fc4:	1085883a 	add	r2,r2,r2
 4008fc8:	1085883a 	add	r2,r2,r2
 4008fcc:	e0f7c104 	addi	r3,fp,-8444
 4008fd0:	1885883a 	add	r2,r3,r2
 4008fd4:	10879d04 	addi	r2,r2,7796
 4008fd8:	00fffd04 	movi	r3,-12
 4008fdc:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4008fe0:	00c00044 	movi	r3,1
 4008fe4:	008200b4 	movhi	r2,2050
 4008fe8:	10841804 	addi	r2,r2,4192
 4008fec:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y-1][x-1] && gameboard[y][x]== gameboard[y-2][x-2]) )//(\\x)
 4008ff0:	e0b7c217 	ldw	r2,-8440(fp)
 4008ff4:	01400504 	movi	r5,20
 4008ff8:	1009883a 	mov	r4,r2
 4008ffc:	40191000 	call	4019100 <__mulsi3>
 4009000:	1007883a 	mov	r3,r2
 4009004:	e0b7c117 	ldw	r2,-8444(fp)
 4009008:	1885883a 	add	r2,r3,r2
 400900c:	1085883a 	add	r2,r2,r2
 4009010:	1085883a 	add	r2,r2,r2
 4009014:	e0f7c104 	addi	r3,fp,-8444
 4009018:	1885883a 	add	r2,r3,r2
 400901c:	10879d04 	addi	r2,r2,7796
 4009020:	14000017 	ldw	r16,0(r2)
 4009024:	e0b7c217 	ldw	r2,-8440(fp)
 4009028:	10ffffc4 	addi	r3,r2,-1
 400902c:	e0b7c117 	ldw	r2,-8444(fp)
 4009030:	147fffc4 	addi	r17,r2,-1
 4009034:	01400504 	movi	r5,20
 4009038:	1809883a 	mov	r4,r3
 400903c:	40191000 	call	4019100 <__mulsi3>
 4009040:	1445883a 	add	r2,r2,r17
 4009044:	1085883a 	add	r2,r2,r2
 4009048:	1085883a 	add	r2,r2,r2
 400904c:	e0f7c104 	addi	r3,fp,-8444
 4009050:	1885883a 	add	r2,r3,r2
 4009054:	10879d04 	addi	r2,r2,7796
 4009058:	10800017 	ldw	r2,0(r2)
 400905c:	80803e1e 	bne	r16,r2,4009158 <main+0x8b84>
 4009060:	e0b7c217 	ldw	r2,-8440(fp)
 4009064:	01400504 	movi	r5,20
 4009068:	1009883a 	mov	r4,r2
 400906c:	40191000 	call	4019100 <__mulsi3>
 4009070:	1007883a 	mov	r3,r2
 4009074:	e0b7c117 	ldw	r2,-8444(fp)
 4009078:	1885883a 	add	r2,r3,r2
 400907c:	1085883a 	add	r2,r2,r2
 4009080:	1085883a 	add	r2,r2,r2
 4009084:	e0f7c104 	addi	r3,fp,-8444
 4009088:	1885883a 	add	r2,r3,r2
 400908c:	10879d04 	addi	r2,r2,7796
 4009090:	14000017 	ldw	r16,0(r2)
 4009094:	e0b7c217 	ldw	r2,-8440(fp)
 4009098:	10ffff84 	addi	r3,r2,-2
 400909c:	e0b7c117 	ldw	r2,-8444(fp)
 40090a0:	147fff84 	addi	r17,r2,-2
 40090a4:	01400504 	movi	r5,20
 40090a8:	1809883a 	mov	r4,r3
 40090ac:	40191000 	call	4019100 <__mulsi3>
 40090b0:	1445883a 	add	r2,r2,r17
 40090b4:	1085883a 	add	r2,r2,r2
 40090b8:	1085883a 	add	r2,r2,r2
 40090bc:	e0f7c104 	addi	r3,fp,-8444
 40090c0:	1885883a 	add	r2,r3,r2
 40090c4:	10879d04 	addi	r2,r2,7796
 40090c8:	10800017 	ldw	r2,0(r2)
 40090cc:	8080221e 	bne	r16,r2,4009158 <main+0x8b84>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 40090d0:	e0b7c217 	ldw	r2,-8440(fp)
 40090d4:	10c00084 	addi	r3,r2,2
 40090d8:	e0b95e04 	addi	r2,fp,-6792
 40090dc:	180f883a 	mov	r7,r3
 40090e0:	e1b7c117 	ldw	r6,-8444(fp)
 40090e4:	01403fc4 	movi	r5,255
 40090e8:	1009883a 	mov	r4,r2
 40090ec:	40003c80 	call	40003c8 <draw>
					draw(two, COLOR08_BLACK, x,y+2 );
 40090f0:	e0b7c217 	ldw	r2,-8440(fp)
 40090f4:	10800084 	addi	r2,r2,2
 40090f8:	100f883a 	mov	r7,r2
 40090fc:	e1b7c117 	ldw	r6,-8444(fp)
 4009100:	000b883a 	mov	r5,zero
 4009104:	010100f4 	movhi	r4,1027
 4009108:	21342a04 	addi	r4,r4,-12120
 400910c:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-12;
 4009110:	e0b7c217 	ldw	r2,-8440(fp)
 4009114:	01400504 	movi	r5,20
 4009118:	1009883a 	mov	r4,r2
 400911c:	40191000 	call	4019100 <__mulsi3>
 4009120:	1007883a 	mov	r3,r2
 4009124:	e0b7c117 	ldw	r2,-8444(fp)
 4009128:	1885883a 	add	r2,r3,r2
 400912c:	1085883a 	add	r2,r2,r2
 4009130:	1085883a 	add	r2,r2,r2
 4009134:	e0f7c104 	addi	r3,fp,-8444
 4009138:	1885883a 	add	r2,r3,r2
 400913c:	10879d04 	addi	r2,r2,7796
 4009140:	00fffd04 	movi	r3,-12
 4009144:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4009148:	00c00044 	movi	r3,1
 400914c:	008200b4 	movhi	r2,2050
 4009150:	10841804 	addi	r2,r2,4192
 4009154:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard[y][x]==2 && gameboard[y+1][x+1]==-12) || (gameboard[y][x]==2 && gameboard[y-1][x-1]==-12))//(\\x)
 4009158:	e0b7c217 	ldw	r2,-8440(fp)
 400915c:	01400504 	movi	r5,20
 4009160:	1009883a 	mov	r4,r2
 4009164:	40191000 	call	4019100 <__mulsi3>
 4009168:	1007883a 	mov	r3,r2
 400916c:	e0b7c117 	ldw	r2,-8444(fp)
 4009170:	1885883a 	add	r2,r3,r2
 4009174:	1085883a 	add	r2,r2,r2
 4009178:	1085883a 	add	r2,r2,r2
 400917c:	e0f7c104 	addi	r3,fp,-8444
 4009180:	1885883a 	add	r2,r3,r2
 4009184:	10879d04 	addi	r2,r2,7796
 4009188:	10800017 	ldw	r2,0(r2)
 400918c:	10800098 	cmpnei	r2,r2,2
 4009190:	1000101e 	bne	r2,zero,40091d4 <main+0x8c00>
 4009194:	e0b7c217 	ldw	r2,-8440(fp)
 4009198:	10c00044 	addi	r3,r2,1
 400919c:	e0b7c117 	ldw	r2,-8444(fp)
 40091a0:	14000044 	addi	r16,r2,1
 40091a4:	01400504 	movi	r5,20
 40091a8:	1809883a 	mov	r4,r3
 40091ac:	40191000 	call	4019100 <__mulsi3>
 40091b0:	1405883a 	add	r2,r2,r16
 40091b4:	1085883a 	add	r2,r2,r2
 40091b8:	1085883a 	add	r2,r2,r2
 40091bc:	e0f7c104 	addi	r3,fp,-8444
 40091c0:	1885883a 	add	r2,r3,r2
 40091c4:	10879d04 	addi	r2,r2,7796
 40091c8:	10800017 	ldw	r2,0(r2)
 40091cc:	10bffd20 	cmpeqi	r2,r2,-12
 40091d0:	10001f1e 	bne	r2,zero,4009250 <main+0x8c7c>
 40091d4:	e0b7c217 	ldw	r2,-8440(fp)
 40091d8:	01400504 	movi	r5,20
 40091dc:	1009883a 	mov	r4,r2
 40091e0:	40191000 	call	4019100 <__mulsi3>
 40091e4:	1007883a 	mov	r3,r2
 40091e8:	e0b7c117 	ldw	r2,-8444(fp)
 40091ec:	1885883a 	add	r2,r3,r2
 40091f0:	1085883a 	add	r2,r2,r2
 40091f4:	1085883a 	add	r2,r2,r2
 40091f8:	e0f7c104 	addi	r3,fp,-8444
 40091fc:	1885883a 	add	r2,r3,r2
 4009200:	10879d04 	addi	r2,r2,7796
 4009204:	10800017 	ldw	r2,0(r2)
 4009208:	10800098 	cmpnei	r2,r2,2
 400920c:	1000321e 	bne	r2,zero,40092d8 <main+0x8d04>
 4009210:	e0b7c217 	ldw	r2,-8440(fp)
 4009214:	10ffffc4 	addi	r3,r2,-1
 4009218:	e0b7c117 	ldw	r2,-8444(fp)
 400921c:	143fffc4 	addi	r16,r2,-1
 4009220:	01400504 	movi	r5,20
 4009224:	1809883a 	mov	r4,r3
 4009228:	40191000 	call	4019100 <__mulsi3>
 400922c:	1405883a 	add	r2,r2,r16
 4009230:	1085883a 	add	r2,r2,r2
 4009234:	1085883a 	add	r2,r2,r2
 4009238:	e0f7c104 	addi	r3,fp,-8444
 400923c:	1885883a 	add	r2,r3,r2
 4009240:	10879d04 	addi	r2,r2,7796
 4009244:	10800017 	ldw	r2,0(r2)
 4009248:	10bffd18 	cmpnei	r2,r2,-12
 400924c:	1000221e 	bne	r2,zero,40092d8 <main+0x8d04>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4009250:	e0b7c217 	ldw	r2,-8440(fp)
 4009254:	10c00084 	addi	r3,r2,2
 4009258:	e0b95e04 	addi	r2,fp,-6792
 400925c:	180f883a 	mov	r7,r3
 4009260:	e1b7c117 	ldw	r6,-8444(fp)
 4009264:	01403fc4 	movi	r5,255
 4009268:	1009883a 	mov	r4,r2
 400926c:	40003c80 	call	40003c8 <draw>
					draw(two, COLOR08_BLACK, x,y+2 );
 4009270:	e0b7c217 	ldw	r2,-8440(fp)
 4009274:	10800084 	addi	r2,r2,2
 4009278:	100f883a 	mov	r7,r2
 400927c:	e1b7c117 	ldw	r6,-8444(fp)
 4009280:	000b883a 	mov	r5,zero
 4009284:	010100f4 	movhi	r4,1027
 4009288:	21342a04 	addi	r4,r4,-12120
 400928c:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-12;
 4009290:	e0b7c217 	ldw	r2,-8440(fp)
 4009294:	01400504 	movi	r5,20
 4009298:	1009883a 	mov	r4,r2
 400929c:	40191000 	call	4019100 <__mulsi3>
 40092a0:	1007883a 	mov	r3,r2
 40092a4:	e0b7c117 	ldw	r2,-8444(fp)
 40092a8:	1885883a 	add	r2,r3,r2
 40092ac:	1085883a 	add	r2,r2,r2
 40092b0:	1085883a 	add	r2,r2,r2
 40092b4:	e0f7c104 	addi	r3,fp,-8444
 40092b8:	1885883a 	add	r2,r3,r2
 40092bc:	10879d04 	addi	r2,r2,7796
 40092c0:	00fffd04 	movi	r3,-12
 40092c4:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40092c8:	00c00044 	movi	r3,1
 40092cc:	008200b4 	movhi	r2,2050
 40092d0:	10841804 	addi	r2,r2,4192
 40092d4:	10c00035 	stwio	r3,0(r2)
				}
				if(gameboard[y][x]==2 && gameboard[y-1][x-1]==2 && gameboard[y-2][x-2]==-12)
 40092d8:	e0b7c217 	ldw	r2,-8440(fp)
 40092dc:	01400504 	movi	r5,20
 40092e0:	1009883a 	mov	r4,r2
 40092e4:	40191000 	call	4019100 <__mulsi3>
 40092e8:	1007883a 	mov	r3,r2
 40092ec:	e0b7c117 	ldw	r2,-8444(fp)
 40092f0:	1885883a 	add	r2,r3,r2
 40092f4:	1085883a 	add	r2,r2,r2
 40092f8:	1085883a 	add	r2,r2,r2
 40092fc:	e0f7c104 	addi	r3,fp,-8444
 4009300:	1885883a 	add	r2,r3,r2
 4009304:	10879d04 	addi	r2,r2,7796
 4009308:	10800017 	ldw	r2,0(r2)
 400930c:	10800098 	cmpnei	r2,r2,2
 4009310:	1000421e 	bne	r2,zero,400941c <main+0x8e48>
 4009314:	e0b7c217 	ldw	r2,-8440(fp)
 4009318:	10ffffc4 	addi	r3,r2,-1
 400931c:	e0b7c117 	ldw	r2,-8444(fp)
 4009320:	143fffc4 	addi	r16,r2,-1
 4009324:	01400504 	movi	r5,20
 4009328:	1809883a 	mov	r4,r3
 400932c:	40191000 	call	4019100 <__mulsi3>
 4009330:	1405883a 	add	r2,r2,r16
 4009334:	1085883a 	add	r2,r2,r2
 4009338:	1085883a 	add	r2,r2,r2
 400933c:	e0f7c104 	addi	r3,fp,-8444
 4009340:	1885883a 	add	r2,r3,r2
 4009344:	10879d04 	addi	r2,r2,7796
 4009348:	10800017 	ldw	r2,0(r2)
 400934c:	10800098 	cmpnei	r2,r2,2
 4009350:	1000321e 	bne	r2,zero,400941c <main+0x8e48>
 4009354:	e0b7c217 	ldw	r2,-8440(fp)
 4009358:	10ffff84 	addi	r3,r2,-2
 400935c:	e0b7c117 	ldw	r2,-8444(fp)
 4009360:	143fff84 	addi	r16,r2,-2
 4009364:	01400504 	movi	r5,20
 4009368:	1809883a 	mov	r4,r3
 400936c:	40191000 	call	4019100 <__mulsi3>
 4009370:	1405883a 	add	r2,r2,r16
 4009374:	1085883a 	add	r2,r2,r2
 4009378:	1085883a 	add	r2,r2,r2
 400937c:	e0f7c104 	addi	r3,fp,-8444
 4009380:	1885883a 	add	r2,r3,r2
 4009384:	10879d04 	addi	r2,r2,7796
 4009388:	10800017 	ldw	r2,0(r2)
 400938c:	10bffd18 	cmpnei	r2,r2,-12
 4009390:	1000221e 	bne	r2,zero,400941c <main+0x8e48>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4009394:	e0b7c217 	ldw	r2,-8440(fp)
 4009398:	10c00084 	addi	r3,r2,2
 400939c:	e0b95e04 	addi	r2,fp,-6792
 40093a0:	180f883a 	mov	r7,r3
 40093a4:	e1b7c117 	ldw	r6,-8444(fp)
 40093a8:	01403fc4 	movi	r5,255
 40093ac:	1009883a 	mov	r4,r2
 40093b0:	40003c80 	call	40003c8 <draw>
					draw(two, COLOR08_BLACK, x,y+2 );
 40093b4:	e0b7c217 	ldw	r2,-8440(fp)
 40093b8:	10800084 	addi	r2,r2,2
 40093bc:	100f883a 	mov	r7,r2
 40093c0:	e1b7c117 	ldw	r6,-8444(fp)
 40093c4:	000b883a 	mov	r5,zero
 40093c8:	010100f4 	movhi	r4,1027
 40093cc:	21342a04 	addi	r4,r4,-12120
 40093d0:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-12;
 40093d4:	e0b7c217 	ldw	r2,-8440(fp)
 40093d8:	01400504 	movi	r5,20
 40093dc:	1009883a 	mov	r4,r2
 40093e0:	40191000 	call	4019100 <__mulsi3>
 40093e4:	1007883a 	mov	r3,r2
 40093e8:	e0b7c117 	ldw	r2,-8444(fp)
 40093ec:	1885883a 	add	r2,r3,r2
 40093f0:	1085883a 	add	r2,r2,r2
 40093f4:	1085883a 	add	r2,r2,r2
 40093f8:	e0f7c104 	addi	r3,fp,-8444
 40093fc:	1885883a 	add	r2,r3,r2
 4009400:	10879d04 	addi	r2,r2,7796
 4009404:	00fffd04 	movi	r3,-12
 4009408:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400940c:	00c00044 	movi	r3,1
 4009410:	008200b4 	movhi	r2,2050
 4009414:	10841804 	addi	r2,r2,4192
 4009418:	10c00035 	stwio	r3,0(r2)
				}
				if(gameboard[y][x]==2 && gameboard[y+1][x+1]==2 && gameboard[y+2][x+2]==-12)
 400941c:	e0b7c217 	ldw	r2,-8440(fp)
 4009420:	01400504 	movi	r5,20
 4009424:	1009883a 	mov	r4,r2
 4009428:	40191000 	call	4019100 <__mulsi3>
 400942c:	1007883a 	mov	r3,r2
 4009430:	e0b7c117 	ldw	r2,-8444(fp)
 4009434:	1885883a 	add	r2,r3,r2
 4009438:	1085883a 	add	r2,r2,r2
 400943c:	1085883a 	add	r2,r2,r2
 4009440:	e0f7c104 	addi	r3,fp,-8444
 4009444:	1885883a 	add	r2,r3,r2
 4009448:	10879d04 	addi	r2,r2,7796
 400944c:	10800017 	ldw	r2,0(r2)
 4009450:	10800098 	cmpnei	r2,r2,2
 4009454:	1000421e 	bne	r2,zero,4009560 <main+0x8f8c>
 4009458:	e0b7c217 	ldw	r2,-8440(fp)
 400945c:	10c00044 	addi	r3,r2,1
 4009460:	e0b7c117 	ldw	r2,-8444(fp)
 4009464:	14000044 	addi	r16,r2,1
 4009468:	01400504 	movi	r5,20
 400946c:	1809883a 	mov	r4,r3
 4009470:	40191000 	call	4019100 <__mulsi3>
 4009474:	1405883a 	add	r2,r2,r16
 4009478:	1085883a 	add	r2,r2,r2
 400947c:	1085883a 	add	r2,r2,r2
 4009480:	e0f7c104 	addi	r3,fp,-8444
 4009484:	1885883a 	add	r2,r3,r2
 4009488:	10879d04 	addi	r2,r2,7796
 400948c:	10800017 	ldw	r2,0(r2)
 4009490:	10800098 	cmpnei	r2,r2,2
 4009494:	1000321e 	bne	r2,zero,4009560 <main+0x8f8c>
 4009498:	e0b7c217 	ldw	r2,-8440(fp)
 400949c:	10c00084 	addi	r3,r2,2
 40094a0:	e0b7c117 	ldw	r2,-8444(fp)
 40094a4:	14000084 	addi	r16,r2,2
 40094a8:	01400504 	movi	r5,20
 40094ac:	1809883a 	mov	r4,r3
 40094b0:	40191000 	call	4019100 <__mulsi3>
 40094b4:	1405883a 	add	r2,r2,r16
 40094b8:	1085883a 	add	r2,r2,r2
 40094bc:	1085883a 	add	r2,r2,r2
 40094c0:	e0f7c104 	addi	r3,fp,-8444
 40094c4:	1885883a 	add	r2,r3,r2
 40094c8:	10879d04 	addi	r2,r2,7796
 40094cc:	10800017 	ldw	r2,0(r2)
 40094d0:	10bffd18 	cmpnei	r2,r2,-12
 40094d4:	1000221e 	bne	r2,zero,4009560 <main+0x8f8c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 40094d8:	e0b7c217 	ldw	r2,-8440(fp)
 40094dc:	10c00084 	addi	r3,r2,2
 40094e0:	e0b95e04 	addi	r2,fp,-6792
 40094e4:	180f883a 	mov	r7,r3
 40094e8:	e1b7c117 	ldw	r6,-8444(fp)
 40094ec:	01403fc4 	movi	r5,255
 40094f0:	1009883a 	mov	r4,r2
 40094f4:	40003c80 	call	40003c8 <draw>
					draw(two, COLOR08_BLACK, x,y+2 );
 40094f8:	e0b7c217 	ldw	r2,-8440(fp)
 40094fc:	10800084 	addi	r2,r2,2
 4009500:	100f883a 	mov	r7,r2
 4009504:	e1b7c117 	ldw	r6,-8444(fp)
 4009508:	000b883a 	mov	r5,zero
 400950c:	010100f4 	movhi	r4,1027
 4009510:	21342a04 	addi	r4,r4,-12120
 4009514:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-12;
 4009518:	e0b7c217 	ldw	r2,-8440(fp)
 400951c:	01400504 	movi	r5,20
 4009520:	1009883a 	mov	r4,r2
 4009524:	40191000 	call	4019100 <__mulsi3>
 4009528:	1007883a 	mov	r3,r2
 400952c:	e0b7c117 	ldw	r2,-8444(fp)
 4009530:	1885883a 	add	r2,r3,r2
 4009534:	1085883a 	add	r2,r2,r2
 4009538:	1085883a 	add	r2,r2,r2
 400953c:	e0f7c104 	addi	r3,fp,-8444
 4009540:	1885883a 	add	r2,r3,r2
 4009544:	10879d04 	addi	r2,r2,7796
 4009548:	00fffd04 	movi	r3,-12
 400954c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4009550:	00c00044 	movi	r3,1
 4009554:	008200b4 	movhi	r2,2050
 4009558:	10841804 	addi	r2,r2,4192
 400955c:	10c00035 	stwio	r3,0(r2)
				}
				//////////////////////////////////////////////////////////

				//diagonal (/)2
				if (gameboard [y][x]==gameboard [y+1][x-1] && gameboard[y][x]== gameboard[y-1][x+1])//(/x/)
 4009560:	e0b7c217 	ldw	r2,-8440(fp)
 4009564:	01400504 	movi	r5,20
 4009568:	1009883a 	mov	r4,r2
 400956c:	40191000 	call	4019100 <__mulsi3>
 4009570:	1007883a 	mov	r3,r2
 4009574:	e0b7c117 	ldw	r2,-8444(fp)
 4009578:	1885883a 	add	r2,r3,r2
 400957c:	1085883a 	add	r2,r2,r2
 4009580:	1085883a 	add	r2,r2,r2
 4009584:	e0f7c104 	addi	r3,fp,-8444
 4009588:	1885883a 	add	r2,r3,r2
 400958c:	10879d04 	addi	r2,r2,7796
 4009590:	14000017 	ldw	r16,0(r2)
 4009594:	e0b7c217 	ldw	r2,-8440(fp)
 4009598:	10c00044 	addi	r3,r2,1
 400959c:	e0b7c117 	ldw	r2,-8444(fp)
 40095a0:	147fffc4 	addi	r17,r2,-1
 40095a4:	01400504 	movi	r5,20
 40095a8:	1809883a 	mov	r4,r3
 40095ac:	40191000 	call	4019100 <__mulsi3>
 40095b0:	1445883a 	add	r2,r2,r17
 40095b4:	1085883a 	add	r2,r2,r2
 40095b8:	1085883a 	add	r2,r2,r2
 40095bc:	e0f7c104 	addi	r3,fp,-8444
 40095c0:	1885883a 	add	r2,r3,r2
 40095c4:	10879d04 	addi	r2,r2,7796
 40095c8:	10800017 	ldw	r2,0(r2)
 40095cc:	80803e1e 	bne	r16,r2,40096c8 <main+0x90f4>
 40095d0:	e0b7c217 	ldw	r2,-8440(fp)
 40095d4:	01400504 	movi	r5,20
 40095d8:	1009883a 	mov	r4,r2
 40095dc:	40191000 	call	4019100 <__mulsi3>
 40095e0:	1007883a 	mov	r3,r2
 40095e4:	e0b7c117 	ldw	r2,-8444(fp)
 40095e8:	1885883a 	add	r2,r3,r2
 40095ec:	1085883a 	add	r2,r2,r2
 40095f0:	1085883a 	add	r2,r2,r2
 40095f4:	e0f7c104 	addi	r3,fp,-8444
 40095f8:	1885883a 	add	r2,r3,r2
 40095fc:	10879d04 	addi	r2,r2,7796
 4009600:	14000017 	ldw	r16,0(r2)
 4009604:	e0b7c217 	ldw	r2,-8440(fp)
 4009608:	10ffffc4 	addi	r3,r2,-1
 400960c:	e0b7c117 	ldw	r2,-8444(fp)
 4009610:	14400044 	addi	r17,r2,1
 4009614:	01400504 	movi	r5,20
 4009618:	1809883a 	mov	r4,r3
 400961c:	40191000 	call	4019100 <__mulsi3>
 4009620:	1445883a 	add	r2,r2,r17
 4009624:	1085883a 	add	r2,r2,r2
 4009628:	1085883a 	add	r2,r2,r2
 400962c:	e0f7c104 	addi	r3,fp,-8444
 4009630:	1885883a 	add	r2,r3,r2
 4009634:	10879d04 	addi	r2,r2,7796
 4009638:	10800017 	ldw	r2,0(r2)
 400963c:	8080221e 	bne	r16,r2,40096c8 <main+0x90f4>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4009640:	e0b7c217 	ldw	r2,-8440(fp)
 4009644:	10c00084 	addi	r3,r2,2
 4009648:	e0b95e04 	addi	r2,fp,-6792
 400964c:	180f883a 	mov	r7,r3
 4009650:	e1b7c117 	ldw	r6,-8444(fp)
 4009654:	01403fc4 	movi	r5,255
 4009658:	1009883a 	mov	r4,r2
 400965c:	40003c80 	call	40003c8 <draw>
					draw(two, COLOR08_BLACK, x,y+2 );
 4009660:	e0b7c217 	ldw	r2,-8440(fp)
 4009664:	10800084 	addi	r2,r2,2
 4009668:	100f883a 	mov	r7,r2
 400966c:	e1b7c117 	ldw	r6,-8444(fp)
 4009670:	000b883a 	mov	r5,zero
 4009674:	010100f4 	movhi	r4,1027
 4009678:	21342a04 	addi	r4,r4,-12120
 400967c:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-12;
 4009680:	e0b7c217 	ldw	r2,-8440(fp)
 4009684:	01400504 	movi	r5,20
 4009688:	1009883a 	mov	r4,r2
 400968c:	40191000 	call	4019100 <__mulsi3>
 4009690:	1007883a 	mov	r3,r2
 4009694:	e0b7c117 	ldw	r2,-8444(fp)
 4009698:	1885883a 	add	r2,r3,r2
 400969c:	1085883a 	add	r2,r2,r2
 40096a0:	1085883a 	add	r2,r2,r2
 40096a4:	e0f7c104 	addi	r3,fp,-8444
 40096a8:	1885883a 	add	r2,r3,r2
 40096ac:	10879d04 	addi	r2,r2,7796
 40096b0:	00fffd04 	movi	r3,-12
 40096b4:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40096b8:	00c00044 	movi	r3,1
 40096bc:	008200b4 	movhi	r2,2050
 40096c0:	10841804 	addi	r2,r2,4192
 40096c4:	10c00035 	stwio	r3,0(r2)

				}
				if (gameboard [y][x]==gameboard [y-1][x+1] && gameboard[y][x]== gameboard[y-2][x+2])//(x//)
 40096c8:	e0b7c217 	ldw	r2,-8440(fp)
 40096cc:	01400504 	movi	r5,20
 40096d0:	1009883a 	mov	r4,r2
 40096d4:	40191000 	call	4019100 <__mulsi3>
 40096d8:	1007883a 	mov	r3,r2
 40096dc:	e0b7c117 	ldw	r2,-8444(fp)
 40096e0:	1885883a 	add	r2,r3,r2
 40096e4:	1085883a 	add	r2,r2,r2
 40096e8:	1085883a 	add	r2,r2,r2
 40096ec:	e0f7c104 	addi	r3,fp,-8444
 40096f0:	1885883a 	add	r2,r3,r2
 40096f4:	10879d04 	addi	r2,r2,7796
 40096f8:	14000017 	ldw	r16,0(r2)
 40096fc:	e0b7c217 	ldw	r2,-8440(fp)
 4009700:	10ffffc4 	addi	r3,r2,-1
 4009704:	e0b7c117 	ldw	r2,-8444(fp)
 4009708:	14400044 	addi	r17,r2,1
 400970c:	01400504 	movi	r5,20
 4009710:	1809883a 	mov	r4,r3
 4009714:	40191000 	call	4019100 <__mulsi3>
 4009718:	1445883a 	add	r2,r2,r17
 400971c:	1085883a 	add	r2,r2,r2
 4009720:	1085883a 	add	r2,r2,r2
 4009724:	e0f7c104 	addi	r3,fp,-8444
 4009728:	1885883a 	add	r2,r3,r2
 400972c:	10879d04 	addi	r2,r2,7796
 4009730:	10800017 	ldw	r2,0(r2)
 4009734:	80803e1e 	bne	r16,r2,4009830 <main+0x925c>
 4009738:	e0b7c217 	ldw	r2,-8440(fp)
 400973c:	01400504 	movi	r5,20
 4009740:	1009883a 	mov	r4,r2
 4009744:	40191000 	call	4019100 <__mulsi3>
 4009748:	1007883a 	mov	r3,r2
 400974c:	e0b7c117 	ldw	r2,-8444(fp)
 4009750:	1885883a 	add	r2,r3,r2
 4009754:	1085883a 	add	r2,r2,r2
 4009758:	1085883a 	add	r2,r2,r2
 400975c:	e0f7c104 	addi	r3,fp,-8444
 4009760:	1885883a 	add	r2,r3,r2
 4009764:	10879d04 	addi	r2,r2,7796
 4009768:	14000017 	ldw	r16,0(r2)
 400976c:	e0b7c217 	ldw	r2,-8440(fp)
 4009770:	10ffff84 	addi	r3,r2,-2
 4009774:	e0b7c117 	ldw	r2,-8444(fp)
 4009778:	14400084 	addi	r17,r2,2
 400977c:	01400504 	movi	r5,20
 4009780:	1809883a 	mov	r4,r3
 4009784:	40191000 	call	4019100 <__mulsi3>
 4009788:	1445883a 	add	r2,r2,r17
 400978c:	1085883a 	add	r2,r2,r2
 4009790:	1085883a 	add	r2,r2,r2
 4009794:	e0f7c104 	addi	r3,fp,-8444
 4009798:	1885883a 	add	r2,r3,r2
 400979c:	10879d04 	addi	r2,r2,7796
 40097a0:	10800017 	ldw	r2,0(r2)
 40097a4:	8080221e 	bne	r16,r2,4009830 <main+0x925c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 40097a8:	e0b7c217 	ldw	r2,-8440(fp)
 40097ac:	10c00084 	addi	r3,r2,2
 40097b0:	e0b95e04 	addi	r2,fp,-6792
 40097b4:	180f883a 	mov	r7,r3
 40097b8:	e1b7c117 	ldw	r6,-8444(fp)
 40097bc:	01403fc4 	movi	r5,255
 40097c0:	1009883a 	mov	r4,r2
 40097c4:	40003c80 	call	40003c8 <draw>
					draw(two, COLOR08_BLACK, x,y+2 );
 40097c8:	e0b7c217 	ldw	r2,-8440(fp)
 40097cc:	10800084 	addi	r2,r2,2
 40097d0:	100f883a 	mov	r7,r2
 40097d4:	e1b7c117 	ldw	r6,-8444(fp)
 40097d8:	000b883a 	mov	r5,zero
 40097dc:	010100f4 	movhi	r4,1027
 40097e0:	21342a04 	addi	r4,r4,-12120
 40097e4:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-12;
 40097e8:	e0b7c217 	ldw	r2,-8440(fp)
 40097ec:	01400504 	movi	r5,20
 40097f0:	1009883a 	mov	r4,r2
 40097f4:	40191000 	call	4019100 <__mulsi3>
 40097f8:	1007883a 	mov	r3,r2
 40097fc:	e0b7c117 	ldw	r2,-8444(fp)
 4009800:	1885883a 	add	r2,r3,r2
 4009804:	1085883a 	add	r2,r2,r2
 4009808:	1085883a 	add	r2,r2,r2
 400980c:	e0f7c104 	addi	r3,fp,-8444
 4009810:	1885883a 	add	r2,r3,r2
 4009814:	10879d04 	addi	r2,r2,7796
 4009818:	00fffd04 	movi	r3,-12
 400981c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4009820:	00c00044 	movi	r3,1
 4009824:	008200b4 	movhi	r2,2050
 4009828:	10841804 	addi	r2,r2,4192
 400982c:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard [y][x]==2 && gameboard [y+1][x-1]==-12) || (gameboard [y][x]==2 && gameboard [y-1][x+1]==-12))//(x//)
 4009830:	e0b7c217 	ldw	r2,-8440(fp)
 4009834:	01400504 	movi	r5,20
 4009838:	1009883a 	mov	r4,r2
 400983c:	40191000 	call	4019100 <__mulsi3>
 4009840:	1007883a 	mov	r3,r2
 4009844:	e0b7c117 	ldw	r2,-8444(fp)
 4009848:	1885883a 	add	r2,r3,r2
 400984c:	1085883a 	add	r2,r2,r2
 4009850:	1085883a 	add	r2,r2,r2
 4009854:	e0f7c104 	addi	r3,fp,-8444
 4009858:	1885883a 	add	r2,r3,r2
 400985c:	10879d04 	addi	r2,r2,7796
 4009860:	10800017 	ldw	r2,0(r2)
 4009864:	10800098 	cmpnei	r2,r2,2
 4009868:	1000101e 	bne	r2,zero,40098ac <main+0x92d8>
 400986c:	e0b7c217 	ldw	r2,-8440(fp)
 4009870:	10c00044 	addi	r3,r2,1
 4009874:	e0b7c117 	ldw	r2,-8444(fp)
 4009878:	143fffc4 	addi	r16,r2,-1
 400987c:	01400504 	movi	r5,20
 4009880:	1809883a 	mov	r4,r3
 4009884:	40191000 	call	4019100 <__mulsi3>
 4009888:	1405883a 	add	r2,r2,r16
 400988c:	1085883a 	add	r2,r2,r2
 4009890:	1085883a 	add	r2,r2,r2
 4009894:	e0f7c104 	addi	r3,fp,-8444
 4009898:	1885883a 	add	r2,r3,r2
 400989c:	10879d04 	addi	r2,r2,7796
 40098a0:	10800017 	ldw	r2,0(r2)
 40098a4:	10bffd20 	cmpeqi	r2,r2,-12
 40098a8:	10001f1e 	bne	r2,zero,4009928 <main+0x9354>
 40098ac:	e0b7c217 	ldw	r2,-8440(fp)
 40098b0:	01400504 	movi	r5,20
 40098b4:	1009883a 	mov	r4,r2
 40098b8:	40191000 	call	4019100 <__mulsi3>
 40098bc:	1007883a 	mov	r3,r2
 40098c0:	e0b7c117 	ldw	r2,-8444(fp)
 40098c4:	1885883a 	add	r2,r3,r2
 40098c8:	1085883a 	add	r2,r2,r2
 40098cc:	1085883a 	add	r2,r2,r2
 40098d0:	e0f7c104 	addi	r3,fp,-8444
 40098d4:	1885883a 	add	r2,r3,r2
 40098d8:	10879d04 	addi	r2,r2,7796
 40098dc:	10800017 	ldw	r2,0(r2)
 40098e0:	10800098 	cmpnei	r2,r2,2
 40098e4:	1000321e 	bne	r2,zero,40099b0 <main+0x93dc>
 40098e8:	e0b7c217 	ldw	r2,-8440(fp)
 40098ec:	10ffffc4 	addi	r3,r2,-1
 40098f0:	e0b7c117 	ldw	r2,-8444(fp)
 40098f4:	14000044 	addi	r16,r2,1
 40098f8:	01400504 	movi	r5,20
 40098fc:	1809883a 	mov	r4,r3
 4009900:	40191000 	call	4019100 <__mulsi3>
 4009904:	1405883a 	add	r2,r2,r16
 4009908:	1085883a 	add	r2,r2,r2
 400990c:	1085883a 	add	r2,r2,r2
 4009910:	e0f7c104 	addi	r3,fp,-8444
 4009914:	1885883a 	add	r2,r3,r2
 4009918:	10879d04 	addi	r2,r2,7796
 400991c:	10800017 	ldw	r2,0(r2)
 4009920:	10bffd18 	cmpnei	r2,r2,-12
 4009924:	1000221e 	bne	r2,zero,40099b0 <main+0x93dc>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4009928:	e0b7c217 	ldw	r2,-8440(fp)
 400992c:	10c00084 	addi	r3,r2,2
 4009930:	e0b95e04 	addi	r2,fp,-6792
 4009934:	180f883a 	mov	r7,r3
 4009938:	e1b7c117 	ldw	r6,-8444(fp)
 400993c:	01403fc4 	movi	r5,255
 4009940:	1009883a 	mov	r4,r2
 4009944:	40003c80 	call	40003c8 <draw>
					draw(two, COLOR08_BLACK, x,y+2 );
 4009948:	e0b7c217 	ldw	r2,-8440(fp)
 400994c:	10800084 	addi	r2,r2,2
 4009950:	100f883a 	mov	r7,r2
 4009954:	e1b7c117 	ldw	r6,-8444(fp)
 4009958:	000b883a 	mov	r5,zero
 400995c:	010100f4 	movhi	r4,1027
 4009960:	21342a04 	addi	r4,r4,-12120
 4009964:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-12;
 4009968:	e0b7c217 	ldw	r2,-8440(fp)
 400996c:	01400504 	movi	r5,20
 4009970:	1009883a 	mov	r4,r2
 4009974:	40191000 	call	4019100 <__mulsi3>
 4009978:	1007883a 	mov	r3,r2
 400997c:	e0b7c117 	ldw	r2,-8444(fp)
 4009980:	1885883a 	add	r2,r3,r2
 4009984:	1085883a 	add	r2,r2,r2
 4009988:	1085883a 	add	r2,r2,r2
 400998c:	e0f7c104 	addi	r3,fp,-8444
 4009990:	1885883a 	add	r2,r3,r2
 4009994:	10879d04 	addi	r2,r2,7796
 4009998:	00fffd04 	movi	r3,-12
 400999c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40099a0:	00c00044 	movi	r3,1
 40099a4:	008200b4 	movhi	r2,2050
 40099a8:	10841804 	addi	r2,r2,4192
 40099ac:	10c00035 	stwio	r3,0(r2)
				}
				if(gameboard[y][x]==2 && gameboard[y+1][x-1]==2 && gameboard[y+2][x-2]==-12)
 40099b0:	e0b7c217 	ldw	r2,-8440(fp)
 40099b4:	01400504 	movi	r5,20
 40099b8:	1009883a 	mov	r4,r2
 40099bc:	40191000 	call	4019100 <__mulsi3>
 40099c0:	1007883a 	mov	r3,r2
 40099c4:	e0b7c117 	ldw	r2,-8444(fp)
 40099c8:	1885883a 	add	r2,r3,r2
 40099cc:	1085883a 	add	r2,r2,r2
 40099d0:	1085883a 	add	r2,r2,r2
 40099d4:	e0f7c104 	addi	r3,fp,-8444
 40099d8:	1885883a 	add	r2,r3,r2
 40099dc:	10879d04 	addi	r2,r2,7796
 40099e0:	10800017 	ldw	r2,0(r2)
 40099e4:	10800098 	cmpnei	r2,r2,2
 40099e8:	1000421e 	bne	r2,zero,4009af4 <main+0x9520>
 40099ec:	e0b7c217 	ldw	r2,-8440(fp)
 40099f0:	10c00044 	addi	r3,r2,1
 40099f4:	e0b7c117 	ldw	r2,-8444(fp)
 40099f8:	143fffc4 	addi	r16,r2,-1
 40099fc:	01400504 	movi	r5,20
 4009a00:	1809883a 	mov	r4,r3
 4009a04:	40191000 	call	4019100 <__mulsi3>
 4009a08:	1405883a 	add	r2,r2,r16
 4009a0c:	1085883a 	add	r2,r2,r2
 4009a10:	1085883a 	add	r2,r2,r2
 4009a14:	e0f7c104 	addi	r3,fp,-8444
 4009a18:	1885883a 	add	r2,r3,r2
 4009a1c:	10879d04 	addi	r2,r2,7796
 4009a20:	10800017 	ldw	r2,0(r2)
 4009a24:	10800098 	cmpnei	r2,r2,2
 4009a28:	1000321e 	bne	r2,zero,4009af4 <main+0x9520>
 4009a2c:	e0b7c217 	ldw	r2,-8440(fp)
 4009a30:	10c00084 	addi	r3,r2,2
 4009a34:	e0b7c117 	ldw	r2,-8444(fp)
 4009a38:	143fff84 	addi	r16,r2,-2
 4009a3c:	01400504 	movi	r5,20
 4009a40:	1809883a 	mov	r4,r3
 4009a44:	40191000 	call	4019100 <__mulsi3>
 4009a48:	1405883a 	add	r2,r2,r16
 4009a4c:	1085883a 	add	r2,r2,r2
 4009a50:	1085883a 	add	r2,r2,r2
 4009a54:	e0f7c104 	addi	r3,fp,-8444
 4009a58:	1885883a 	add	r2,r3,r2
 4009a5c:	10879d04 	addi	r2,r2,7796
 4009a60:	10800017 	ldw	r2,0(r2)
 4009a64:	10bffd18 	cmpnei	r2,r2,-12
 4009a68:	1000221e 	bne	r2,zero,4009af4 <main+0x9520>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4009a6c:	e0b7c217 	ldw	r2,-8440(fp)
 4009a70:	10c00084 	addi	r3,r2,2
 4009a74:	e0b95e04 	addi	r2,fp,-6792
 4009a78:	180f883a 	mov	r7,r3
 4009a7c:	e1b7c117 	ldw	r6,-8444(fp)
 4009a80:	01403fc4 	movi	r5,255
 4009a84:	1009883a 	mov	r4,r2
 4009a88:	40003c80 	call	40003c8 <draw>
					draw(two, COLOR08_BLACK, x,y+2 );
 4009a8c:	e0b7c217 	ldw	r2,-8440(fp)
 4009a90:	10800084 	addi	r2,r2,2
 4009a94:	100f883a 	mov	r7,r2
 4009a98:	e1b7c117 	ldw	r6,-8444(fp)
 4009a9c:	000b883a 	mov	r5,zero
 4009aa0:	010100f4 	movhi	r4,1027
 4009aa4:	21342a04 	addi	r4,r4,-12120
 4009aa8:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-12;
 4009aac:	e0b7c217 	ldw	r2,-8440(fp)
 4009ab0:	01400504 	movi	r5,20
 4009ab4:	1009883a 	mov	r4,r2
 4009ab8:	40191000 	call	4019100 <__mulsi3>
 4009abc:	1007883a 	mov	r3,r2
 4009ac0:	e0b7c117 	ldw	r2,-8444(fp)
 4009ac4:	1885883a 	add	r2,r3,r2
 4009ac8:	1085883a 	add	r2,r2,r2
 4009acc:	1085883a 	add	r2,r2,r2
 4009ad0:	e0f7c104 	addi	r3,fp,-8444
 4009ad4:	1885883a 	add	r2,r3,r2
 4009ad8:	10879d04 	addi	r2,r2,7796
 4009adc:	00fffd04 	movi	r3,-12
 4009ae0:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4009ae4:	00c00044 	movi	r3,1
 4009ae8:	008200b4 	movhi	r2,2050
 4009aec:	10841804 	addi	r2,r2,4192
 4009af0:	10c00035 	stwio	r3,0(r2)
				}
				if(gameboard[y][x]==2 && gameboard[y-1][x+1]==2 && gameboard[y-2][x+2]==-12)
 4009af4:	e0b7c217 	ldw	r2,-8440(fp)
 4009af8:	01400504 	movi	r5,20
 4009afc:	1009883a 	mov	r4,r2
 4009b00:	40191000 	call	4019100 <__mulsi3>
 4009b04:	1007883a 	mov	r3,r2
 4009b08:	e0b7c117 	ldw	r2,-8444(fp)
 4009b0c:	1885883a 	add	r2,r3,r2
 4009b10:	1085883a 	add	r2,r2,r2
 4009b14:	1085883a 	add	r2,r2,r2
 4009b18:	e0f7c104 	addi	r3,fp,-8444
 4009b1c:	1885883a 	add	r2,r3,r2
 4009b20:	10879d04 	addi	r2,r2,7796
 4009b24:	10800017 	ldw	r2,0(r2)
 4009b28:	10800098 	cmpnei	r2,r2,2
 4009b2c:	1000421e 	bne	r2,zero,4009c38 <main+0x9664>
 4009b30:	e0b7c217 	ldw	r2,-8440(fp)
 4009b34:	10ffffc4 	addi	r3,r2,-1
 4009b38:	e0b7c117 	ldw	r2,-8444(fp)
 4009b3c:	14000044 	addi	r16,r2,1
 4009b40:	01400504 	movi	r5,20
 4009b44:	1809883a 	mov	r4,r3
 4009b48:	40191000 	call	4019100 <__mulsi3>
 4009b4c:	1405883a 	add	r2,r2,r16
 4009b50:	1085883a 	add	r2,r2,r2
 4009b54:	1085883a 	add	r2,r2,r2
 4009b58:	e0f7c104 	addi	r3,fp,-8444
 4009b5c:	1885883a 	add	r2,r3,r2
 4009b60:	10879d04 	addi	r2,r2,7796
 4009b64:	10800017 	ldw	r2,0(r2)
 4009b68:	10800098 	cmpnei	r2,r2,2
 4009b6c:	1000321e 	bne	r2,zero,4009c38 <main+0x9664>
 4009b70:	e0b7c217 	ldw	r2,-8440(fp)
 4009b74:	10ffff84 	addi	r3,r2,-2
 4009b78:	e0b7c117 	ldw	r2,-8444(fp)
 4009b7c:	14000084 	addi	r16,r2,2
 4009b80:	01400504 	movi	r5,20
 4009b84:	1809883a 	mov	r4,r3
 4009b88:	40191000 	call	4019100 <__mulsi3>
 4009b8c:	1405883a 	add	r2,r2,r16
 4009b90:	1085883a 	add	r2,r2,r2
 4009b94:	1085883a 	add	r2,r2,r2
 4009b98:	e0f7c104 	addi	r3,fp,-8444
 4009b9c:	1885883a 	add	r2,r3,r2
 4009ba0:	10879d04 	addi	r2,r2,7796
 4009ba4:	10800017 	ldw	r2,0(r2)
 4009ba8:	10bffd18 	cmpnei	r2,r2,-12
 4009bac:	1000221e 	bne	r2,zero,4009c38 <main+0x9664>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4009bb0:	e0b7c217 	ldw	r2,-8440(fp)
 4009bb4:	10c00084 	addi	r3,r2,2
 4009bb8:	e0b95e04 	addi	r2,fp,-6792
 4009bbc:	180f883a 	mov	r7,r3
 4009bc0:	e1b7c117 	ldw	r6,-8444(fp)
 4009bc4:	01403fc4 	movi	r5,255
 4009bc8:	1009883a 	mov	r4,r2
 4009bcc:	40003c80 	call	40003c8 <draw>
					draw(two, COLOR08_BLACK, x,y+2 );
 4009bd0:	e0b7c217 	ldw	r2,-8440(fp)
 4009bd4:	10800084 	addi	r2,r2,2
 4009bd8:	100f883a 	mov	r7,r2
 4009bdc:	e1b7c117 	ldw	r6,-8444(fp)
 4009be0:	000b883a 	mov	r5,zero
 4009be4:	010100f4 	movhi	r4,1027
 4009be8:	21342a04 	addi	r4,r4,-12120
 4009bec:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-12;
 4009bf0:	e0b7c217 	ldw	r2,-8440(fp)
 4009bf4:	01400504 	movi	r5,20
 4009bf8:	1009883a 	mov	r4,r2
 4009bfc:	40191000 	call	4019100 <__mulsi3>
 4009c00:	1007883a 	mov	r3,r2
 4009c04:	e0b7c117 	ldw	r2,-8444(fp)
 4009c08:	1885883a 	add	r2,r3,r2
 4009c0c:	1085883a 	add	r2,r2,r2
 4009c10:	1085883a 	add	r2,r2,r2
 4009c14:	e0f7c104 	addi	r3,fp,-8444
 4009c18:	1885883a 	add	r2,r3,r2
 4009c1c:	10879d04 	addi	r2,r2,7796
 4009c20:	00fffd04 	movi	r3,-12
 4009c24:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4009c28:	00c00044 	movi	r3,1
 4009c2c:	008200b4 	movhi	r2,2050
 4009c30:	10841804 	addi	r2,r2,4192
 4009c34:	10c00035 	stwio	r3,0(r2)
				}
				if(gameboard[y][x]==2 && gameboard[y+1][x-1]==2 && gameboard[y+2][x-2]==2)
 4009c38:	e0b7c217 	ldw	r2,-8440(fp)
 4009c3c:	01400504 	movi	r5,20
 4009c40:	1009883a 	mov	r4,r2
 4009c44:	40191000 	call	4019100 <__mulsi3>
 4009c48:	1007883a 	mov	r3,r2
 4009c4c:	e0b7c117 	ldw	r2,-8444(fp)
 4009c50:	1885883a 	add	r2,r3,r2
 4009c54:	1085883a 	add	r2,r2,r2
 4009c58:	1085883a 	add	r2,r2,r2
 4009c5c:	e0f7c104 	addi	r3,fp,-8444
 4009c60:	1885883a 	add	r2,r3,r2
 4009c64:	10879d04 	addi	r2,r2,7796
 4009c68:	10800017 	ldw	r2,0(r2)
 4009c6c:	10800098 	cmpnei	r2,r2,2
 4009c70:	1000421e 	bne	r2,zero,4009d7c <main+0x97a8>
 4009c74:	e0b7c217 	ldw	r2,-8440(fp)
 4009c78:	10c00044 	addi	r3,r2,1
 4009c7c:	e0b7c117 	ldw	r2,-8444(fp)
 4009c80:	143fffc4 	addi	r16,r2,-1
 4009c84:	01400504 	movi	r5,20
 4009c88:	1809883a 	mov	r4,r3
 4009c8c:	40191000 	call	4019100 <__mulsi3>
 4009c90:	1405883a 	add	r2,r2,r16
 4009c94:	1085883a 	add	r2,r2,r2
 4009c98:	1085883a 	add	r2,r2,r2
 4009c9c:	e0f7c104 	addi	r3,fp,-8444
 4009ca0:	1885883a 	add	r2,r3,r2
 4009ca4:	10879d04 	addi	r2,r2,7796
 4009ca8:	10800017 	ldw	r2,0(r2)
 4009cac:	10800098 	cmpnei	r2,r2,2
 4009cb0:	1000321e 	bne	r2,zero,4009d7c <main+0x97a8>
 4009cb4:	e0b7c217 	ldw	r2,-8440(fp)
 4009cb8:	10c00084 	addi	r3,r2,2
 4009cbc:	e0b7c117 	ldw	r2,-8444(fp)
 4009cc0:	143fff84 	addi	r16,r2,-2
 4009cc4:	01400504 	movi	r5,20
 4009cc8:	1809883a 	mov	r4,r3
 4009ccc:	40191000 	call	4019100 <__mulsi3>
 4009cd0:	1405883a 	add	r2,r2,r16
 4009cd4:	1085883a 	add	r2,r2,r2
 4009cd8:	1085883a 	add	r2,r2,r2
 4009cdc:	e0f7c104 	addi	r3,fp,-8444
 4009ce0:	1885883a 	add	r2,r3,r2
 4009ce4:	10879d04 	addi	r2,r2,7796
 4009ce8:	10800017 	ldw	r2,0(r2)
 4009cec:	10800098 	cmpnei	r2,r2,2
 4009cf0:	1000221e 	bne	r2,zero,4009d7c <main+0x97a8>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4009cf4:	e0b7c217 	ldw	r2,-8440(fp)
 4009cf8:	10c00084 	addi	r3,r2,2
 4009cfc:	e0b95e04 	addi	r2,fp,-6792
 4009d00:	180f883a 	mov	r7,r3
 4009d04:	e1b7c117 	ldw	r6,-8444(fp)
 4009d08:	01403fc4 	movi	r5,255
 4009d0c:	1009883a 	mov	r4,r2
 4009d10:	40003c80 	call	40003c8 <draw>
					draw(two, COLOR08_BLACK, x,y+2 );
 4009d14:	e0b7c217 	ldw	r2,-8440(fp)
 4009d18:	10800084 	addi	r2,r2,2
 4009d1c:	100f883a 	mov	r7,r2
 4009d20:	e1b7c117 	ldw	r6,-8444(fp)
 4009d24:	000b883a 	mov	r5,zero
 4009d28:	010100f4 	movhi	r4,1027
 4009d2c:	21342a04 	addi	r4,r4,-12120
 4009d30:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-12;
 4009d34:	e0b7c217 	ldw	r2,-8440(fp)
 4009d38:	01400504 	movi	r5,20
 4009d3c:	1009883a 	mov	r4,r2
 4009d40:	40191000 	call	4019100 <__mulsi3>
 4009d44:	1007883a 	mov	r3,r2
 4009d48:	e0b7c117 	ldw	r2,-8444(fp)
 4009d4c:	1885883a 	add	r2,r3,r2
 4009d50:	1085883a 	add	r2,r2,r2
 4009d54:	1085883a 	add	r2,r2,r2
 4009d58:	e0f7c104 	addi	r3,fp,-8444
 4009d5c:	1885883a 	add	r2,r3,r2
 4009d60:	10879d04 	addi	r2,r2,7796
 4009d64:	00fffd04 	movi	r3,-12
 4009d68:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4009d6c:	00c00044 	movi	r3,1
 4009d70:	008200b4 	movhi	r2,2050
 4009d74:	10841804 	addi	r2,r2,4192
 4009d78:	10c00035 	stwio	r3,0(r2)
				}
				if(gameboard[y][x]==2 && gameboard[y-1][x+1]==2 && gameboard[y-2][x+2]==2)
 4009d7c:	e0b7c217 	ldw	r2,-8440(fp)
 4009d80:	01400504 	movi	r5,20
 4009d84:	1009883a 	mov	r4,r2
 4009d88:	40191000 	call	4019100 <__mulsi3>
 4009d8c:	1007883a 	mov	r3,r2
 4009d90:	e0b7c117 	ldw	r2,-8444(fp)
 4009d94:	1885883a 	add	r2,r3,r2
 4009d98:	1085883a 	add	r2,r2,r2
 4009d9c:	1085883a 	add	r2,r2,r2
 4009da0:	e0f7c104 	addi	r3,fp,-8444
 4009da4:	1885883a 	add	r2,r3,r2
 4009da8:	10879d04 	addi	r2,r2,7796
 4009dac:	10800017 	ldw	r2,0(r2)
 4009db0:	10800098 	cmpnei	r2,r2,2
 4009db4:	1000421e 	bne	r2,zero,4009ec0 <main+0x98ec>
 4009db8:	e0b7c217 	ldw	r2,-8440(fp)
 4009dbc:	10ffffc4 	addi	r3,r2,-1
 4009dc0:	e0b7c117 	ldw	r2,-8444(fp)
 4009dc4:	14000044 	addi	r16,r2,1
 4009dc8:	01400504 	movi	r5,20
 4009dcc:	1809883a 	mov	r4,r3
 4009dd0:	40191000 	call	4019100 <__mulsi3>
 4009dd4:	1405883a 	add	r2,r2,r16
 4009dd8:	1085883a 	add	r2,r2,r2
 4009ddc:	1085883a 	add	r2,r2,r2
 4009de0:	e0f7c104 	addi	r3,fp,-8444
 4009de4:	1885883a 	add	r2,r3,r2
 4009de8:	10879d04 	addi	r2,r2,7796
 4009dec:	10800017 	ldw	r2,0(r2)
 4009df0:	10800098 	cmpnei	r2,r2,2
 4009df4:	1000321e 	bne	r2,zero,4009ec0 <main+0x98ec>
 4009df8:	e0b7c217 	ldw	r2,-8440(fp)
 4009dfc:	10ffff84 	addi	r3,r2,-2
 4009e00:	e0b7c117 	ldw	r2,-8444(fp)
 4009e04:	14000084 	addi	r16,r2,2
 4009e08:	01400504 	movi	r5,20
 4009e0c:	1809883a 	mov	r4,r3
 4009e10:	40191000 	call	4019100 <__mulsi3>
 4009e14:	1405883a 	add	r2,r2,r16
 4009e18:	1085883a 	add	r2,r2,r2
 4009e1c:	1085883a 	add	r2,r2,r2
 4009e20:	e0f7c104 	addi	r3,fp,-8444
 4009e24:	1885883a 	add	r2,r3,r2
 4009e28:	10879d04 	addi	r2,r2,7796
 4009e2c:	10800017 	ldw	r2,0(r2)
 4009e30:	10800098 	cmpnei	r2,r2,2
 4009e34:	1000221e 	bne	r2,zero,4009ec0 <main+0x98ec>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4009e38:	e0b7c217 	ldw	r2,-8440(fp)
 4009e3c:	10c00084 	addi	r3,r2,2
 4009e40:	e0b95e04 	addi	r2,fp,-6792
 4009e44:	180f883a 	mov	r7,r3
 4009e48:	e1b7c117 	ldw	r6,-8444(fp)
 4009e4c:	01403fc4 	movi	r5,255
 4009e50:	1009883a 	mov	r4,r2
 4009e54:	40003c80 	call	40003c8 <draw>
					draw(two, COLOR08_BLACK, x,y+2 );
 4009e58:	e0b7c217 	ldw	r2,-8440(fp)
 4009e5c:	10800084 	addi	r2,r2,2
 4009e60:	100f883a 	mov	r7,r2
 4009e64:	e1b7c117 	ldw	r6,-8444(fp)
 4009e68:	000b883a 	mov	r5,zero
 4009e6c:	010100f4 	movhi	r4,1027
 4009e70:	21342a04 	addi	r4,r4,-12120
 4009e74:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-12;
 4009e78:	e0b7c217 	ldw	r2,-8440(fp)
 4009e7c:	01400504 	movi	r5,20
 4009e80:	1009883a 	mov	r4,r2
 4009e84:	40191000 	call	4019100 <__mulsi3>
 4009e88:	1007883a 	mov	r3,r2
 4009e8c:	e0b7c117 	ldw	r2,-8444(fp)
 4009e90:	1885883a 	add	r2,r3,r2
 4009e94:	1085883a 	add	r2,r2,r2
 4009e98:	1085883a 	add	r2,r2,r2
 4009e9c:	e0f7c104 	addi	r3,fp,-8444
 4009ea0:	1885883a 	add	r2,r3,r2
 4009ea4:	10879d04 	addi	r2,r2,7796
 4009ea8:	00fffd04 	movi	r3,-12
 4009eac:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4009eb0:	00c00044 	movi	r3,1
 4009eb4:	008200b4 	movhi	r2,2050
 4009eb8:	10841804 	addi	r2,r2,4192
 4009ebc:	10c00035 	stwio	r3,0(r2)
				}
			}

			if(gameboard[y][x]==3)//3
 4009ec0:	e0b7c217 	ldw	r2,-8440(fp)
 4009ec4:	01400504 	movi	r5,20
 4009ec8:	1009883a 	mov	r4,r2
 4009ecc:	40191000 	call	4019100 <__mulsi3>
 4009ed0:	1007883a 	mov	r3,r2
 4009ed4:	e0b7c117 	ldw	r2,-8444(fp)
 4009ed8:	1885883a 	add	r2,r3,r2
 4009edc:	1085883a 	add	r2,r2,r2
 4009ee0:	1085883a 	add	r2,r2,r2
 4009ee4:	e0f7c104 	addi	r3,fp,-8444
 4009ee8:	1885883a 	add	r2,r3,r2
 4009eec:	10879d04 	addi	r2,r2,7796
 4009ef0:	10800017 	ldw	r2,0(r2)
 4009ef4:	108000d8 	cmpnei	r2,r2,3
 4009ef8:	1007351e 	bne	r2,zero,400bbd0 <main+0xb5fc>
			{
				//horizontal3
				if ((gameboard [y][x]==gameboard [y][x+1] && gameboard [y][x+1]== gameboard [y][x+2]) || (gameboard[y][x]==3 && gameboard[y][x+1]==-13) )//(0,0,0)
 4009efc:	e0b7c217 	ldw	r2,-8440(fp)
 4009f00:	01400504 	movi	r5,20
 4009f04:	1009883a 	mov	r4,r2
 4009f08:	40191000 	call	4019100 <__mulsi3>
 4009f0c:	1007883a 	mov	r3,r2
 4009f10:	e0b7c117 	ldw	r2,-8444(fp)
 4009f14:	1885883a 	add	r2,r3,r2
 4009f18:	1085883a 	add	r2,r2,r2
 4009f1c:	1085883a 	add	r2,r2,r2
 4009f20:	e0f7c104 	addi	r3,fp,-8444
 4009f24:	1885883a 	add	r2,r3,r2
 4009f28:	10879d04 	addi	r2,r2,7796
 4009f2c:	14000017 	ldw	r16,0(r2)
 4009f30:	e0b7c117 	ldw	r2,-8444(fp)
 4009f34:	14400044 	addi	r17,r2,1
 4009f38:	e0b7c217 	ldw	r2,-8440(fp)
 4009f3c:	01400504 	movi	r5,20
 4009f40:	1009883a 	mov	r4,r2
 4009f44:	40191000 	call	4019100 <__mulsi3>
 4009f48:	1445883a 	add	r2,r2,r17
 4009f4c:	1085883a 	add	r2,r2,r2
 4009f50:	1085883a 	add	r2,r2,r2
 4009f54:	e0f7c104 	addi	r3,fp,-8444
 4009f58:	1885883a 	add	r2,r3,r2
 4009f5c:	10879d04 	addi	r2,r2,7796
 4009f60:	10800017 	ldw	r2,0(r2)
 4009f64:	80801b1e 	bne	r16,r2,4009fd4 <main+0x9a00>
 4009f68:	e0b7c117 	ldw	r2,-8444(fp)
 4009f6c:	14000044 	addi	r16,r2,1
 4009f70:	e0b7c217 	ldw	r2,-8440(fp)
 4009f74:	01400504 	movi	r5,20
 4009f78:	1009883a 	mov	r4,r2
 4009f7c:	40191000 	call	4019100 <__mulsi3>
 4009f80:	1405883a 	add	r2,r2,r16
 4009f84:	1085883a 	add	r2,r2,r2
 4009f88:	1085883a 	add	r2,r2,r2
 4009f8c:	e0f7c104 	addi	r3,fp,-8444
 4009f90:	1885883a 	add	r2,r3,r2
 4009f94:	10879d04 	addi	r2,r2,7796
 4009f98:	14000017 	ldw	r16,0(r2)
 4009f9c:	e0b7c117 	ldw	r2,-8444(fp)
 4009fa0:	14400084 	addi	r17,r2,2
 4009fa4:	e0b7c217 	ldw	r2,-8440(fp)
 4009fa8:	01400504 	movi	r5,20
 4009fac:	1009883a 	mov	r4,r2
 4009fb0:	40191000 	call	4019100 <__mulsi3>
 4009fb4:	1445883a 	add	r2,r2,r17
 4009fb8:	1085883a 	add	r2,r2,r2
 4009fbc:	1085883a 	add	r2,r2,r2
 4009fc0:	e0f7c104 	addi	r3,fp,-8444
 4009fc4:	1885883a 	add	r2,r3,r2
 4009fc8:	10879d04 	addi	r2,r2,7796
 4009fcc:	10800017 	ldw	r2,0(r2)
 4009fd0:	80801e26 	beq	r16,r2,400a04c <main+0x9a78>
 4009fd4:	e0b7c217 	ldw	r2,-8440(fp)
 4009fd8:	01400504 	movi	r5,20
 4009fdc:	1009883a 	mov	r4,r2
 4009fe0:	40191000 	call	4019100 <__mulsi3>
 4009fe4:	1007883a 	mov	r3,r2
 4009fe8:	e0b7c117 	ldw	r2,-8444(fp)
 4009fec:	1885883a 	add	r2,r3,r2
 4009ff0:	1085883a 	add	r2,r2,r2
 4009ff4:	1085883a 	add	r2,r2,r2
 4009ff8:	e0f7c104 	addi	r3,fp,-8444
 4009ffc:	1885883a 	add	r2,r3,r2
 400a000:	10879d04 	addi	r2,r2,7796
 400a004:	10800017 	ldw	r2,0(r2)
 400a008:	108000d8 	cmpnei	r2,r2,3
 400a00c:	1000311e 	bne	r2,zero,400a0d4 <main+0x9b00>
 400a010:	e0b7c117 	ldw	r2,-8444(fp)
 400a014:	14000044 	addi	r16,r2,1
 400a018:	e0b7c217 	ldw	r2,-8440(fp)
 400a01c:	01400504 	movi	r5,20
 400a020:	1009883a 	mov	r4,r2
 400a024:	40191000 	call	4019100 <__mulsi3>
 400a028:	1405883a 	add	r2,r2,r16
 400a02c:	1085883a 	add	r2,r2,r2
 400a030:	1085883a 	add	r2,r2,r2
 400a034:	e0f7c104 	addi	r3,fp,-8444
 400a038:	1885883a 	add	r2,r3,r2
 400a03c:	10879d04 	addi	r2,r2,7796
 400a040:	10800017 	ldw	r2,0(r2)
 400a044:	10bffcd8 	cmpnei	r2,r2,-13
 400a048:	1000221e 	bne	r2,zero,400a0d4 <main+0x9b00>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400a04c:	e0b7c217 	ldw	r2,-8440(fp)
 400a050:	10c00084 	addi	r3,r2,2
 400a054:	e0b95e04 	addi	r2,fp,-6792
 400a058:	180f883a 	mov	r7,r3
 400a05c:	e1b7c117 	ldw	r6,-8444(fp)
 400a060:	01403fc4 	movi	r5,255
 400a064:	1009883a 	mov	r4,r2
 400a068:	40003c80 	call	40003c8 <draw>
					draw(three, COLOR08_BLACK, x,y+2 );
 400a06c:	e0b7c217 	ldw	r2,-8440(fp)
 400a070:	10800084 	addi	r2,r2,2
 400a074:	100f883a 	mov	r7,r2
 400a078:	e1b7c117 	ldw	r6,-8444(fp)
 400a07c:	000b883a 	mov	r5,zero
 400a080:	010100f4 	movhi	r4,1027
 400a084:	2135aa04 	addi	r4,r4,-10584
 400a088:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-13;
 400a08c:	e0b7c217 	ldw	r2,-8440(fp)
 400a090:	01400504 	movi	r5,20
 400a094:	1009883a 	mov	r4,r2
 400a098:	40191000 	call	4019100 <__mulsi3>
 400a09c:	1007883a 	mov	r3,r2
 400a0a0:	e0b7c117 	ldw	r2,-8444(fp)
 400a0a4:	1885883a 	add	r2,r3,r2
 400a0a8:	1085883a 	add	r2,r2,r2
 400a0ac:	1085883a 	add	r2,r2,r2
 400a0b0:	e0f7c104 	addi	r3,fp,-8444
 400a0b4:	1885883a 	add	r2,r3,r2
 400a0b8:	10879d04 	addi	r2,r2,7796
 400a0bc:	00fffcc4 	movi	r3,-13
 400a0c0:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400a0c4:	00c00044 	movi	r3,1
 400a0c8:	008200b4 	movhi	r2,2050
 400a0cc:	10841804 	addi	r2,r2,4192
 400a0d0:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y][x-1] && gameboard [y][x]== gameboard [y][x+1]) || (gameboard [y][x]==3 && gameboard [y][x-1]==-13) || (gameboard [y][x]==3 && gameboard [y][x+1]==-13))//(
 400a0d4:	e0b7c217 	ldw	r2,-8440(fp)
 400a0d8:	01400504 	movi	r5,20
 400a0dc:	1009883a 	mov	r4,r2
 400a0e0:	40191000 	call	4019100 <__mulsi3>
 400a0e4:	1007883a 	mov	r3,r2
 400a0e8:	e0b7c117 	ldw	r2,-8444(fp)
 400a0ec:	1885883a 	add	r2,r3,r2
 400a0f0:	1085883a 	add	r2,r2,r2
 400a0f4:	1085883a 	add	r2,r2,r2
 400a0f8:	e0f7c104 	addi	r3,fp,-8444
 400a0fc:	1885883a 	add	r2,r3,r2
 400a100:	10879d04 	addi	r2,r2,7796
 400a104:	14000017 	ldw	r16,0(r2)
 400a108:	e0b7c117 	ldw	r2,-8444(fp)
 400a10c:	147fffc4 	addi	r17,r2,-1
 400a110:	e0b7c217 	ldw	r2,-8440(fp)
 400a114:	01400504 	movi	r5,20
 400a118:	1009883a 	mov	r4,r2
 400a11c:	40191000 	call	4019100 <__mulsi3>
 400a120:	1445883a 	add	r2,r2,r17
 400a124:	1085883a 	add	r2,r2,r2
 400a128:	1085883a 	add	r2,r2,r2
 400a12c:	e0f7c104 	addi	r3,fp,-8444
 400a130:	1885883a 	add	r2,r3,r2
 400a134:	10879d04 	addi	r2,r2,7796
 400a138:	10800017 	ldw	r2,0(r2)
 400a13c:	80801b1e 	bne	r16,r2,400a1ac <main+0x9bd8>
 400a140:	e0b7c217 	ldw	r2,-8440(fp)
 400a144:	01400504 	movi	r5,20
 400a148:	1009883a 	mov	r4,r2
 400a14c:	40191000 	call	4019100 <__mulsi3>
 400a150:	1007883a 	mov	r3,r2
 400a154:	e0b7c117 	ldw	r2,-8444(fp)
 400a158:	1885883a 	add	r2,r3,r2
 400a15c:	1085883a 	add	r2,r2,r2
 400a160:	1085883a 	add	r2,r2,r2
 400a164:	e0f7c104 	addi	r3,fp,-8444
 400a168:	1885883a 	add	r2,r3,r2
 400a16c:	10879d04 	addi	r2,r2,7796
 400a170:	14000017 	ldw	r16,0(r2)
 400a174:	e0b7c117 	ldw	r2,-8444(fp)
 400a178:	14400044 	addi	r17,r2,1
 400a17c:	e0b7c217 	ldw	r2,-8440(fp)
 400a180:	01400504 	movi	r5,20
 400a184:	1009883a 	mov	r4,r2
 400a188:	40191000 	call	4019100 <__mulsi3>
 400a18c:	1445883a 	add	r2,r2,r17
 400a190:	1085883a 	add	r2,r2,r2
 400a194:	1085883a 	add	r2,r2,r2
 400a198:	e0f7c104 	addi	r3,fp,-8444
 400a19c:	1885883a 	add	r2,r3,r2
 400a1a0:	10879d04 	addi	r2,r2,7796
 400a1a4:	10800017 	ldw	r2,0(r2)
 400a1a8:	80803c26 	beq	r16,r2,400a29c <main+0x9cc8>
 400a1ac:	e0b7c217 	ldw	r2,-8440(fp)
 400a1b0:	01400504 	movi	r5,20
 400a1b4:	1009883a 	mov	r4,r2
 400a1b8:	40191000 	call	4019100 <__mulsi3>
 400a1bc:	1007883a 	mov	r3,r2
 400a1c0:	e0b7c117 	ldw	r2,-8444(fp)
 400a1c4:	1885883a 	add	r2,r3,r2
 400a1c8:	1085883a 	add	r2,r2,r2
 400a1cc:	1085883a 	add	r2,r2,r2
 400a1d0:	e0f7c104 	addi	r3,fp,-8444
 400a1d4:	1885883a 	add	r2,r3,r2
 400a1d8:	10879d04 	addi	r2,r2,7796
 400a1dc:	10800017 	ldw	r2,0(r2)
 400a1e0:	108000d8 	cmpnei	r2,r2,3
 400a1e4:	10000f1e 	bne	r2,zero,400a224 <main+0x9c50>
 400a1e8:	e0b7c117 	ldw	r2,-8444(fp)
 400a1ec:	143fffc4 	addi	r16,r2,-1
 400a1f0:	e0b7c217 	ldw	r2,-8440(fp)
 400a1f4:	01400504 	movi	r5,20
 400a1f8:	1009883a 	mov	r4,r2
 400a1fc:	40191000 	call	4019100 <__mulsi3>
 400a200:	1405883a 	add	r2,r2,r16
 400a204:	1085883a 	add	r2,r2,r2
 400a208:	1085883a 	add	r2,r2,r2
 400a20c:	e0f7c104 	addi	r3,fp,-8444
 400a210:	1885883a 	add	r2,r3,r2
 400a214:	10879d04 	addi	r2,r2,7796
 400a218:	10800017 	ldw	r2,0(r2)
 400a21c:	10bffce0 	cmpeqi	r2,r2,-13
 400a220:	10001e1e 	bne	r2,zero,400a29c <main+0x9cc8>
 400a224:	e0b7c217 	ldw	r2,-8440(fp)
 400a228:	01400504 	movi	r5,20
 400a22c:	1009883a 	mov	r4,r2
 400a230:	40191000 	call	4019100 <__mulsi3>
 400a234:	1007883a 	mov	r3,r2
 400a238:	e0b7c117 	ldw	r2,-8444(fp)
 400a23c:	1885883a 	add	r2,r3,r2
 400a240:	1085883a 	add	r2,r2,r2
 400a244:	1085883a 	add	r2,r2,r2
 400a248:	e0f7c104 	addi	r3,fp,-8444
 400a24c:	1885883a 	add	r2,r3,r2
 400a250:	10879d04 	addi	r2,r2,7796
 400a254:	10800017 	ldw	r2,0(r2)
 400a258:	108000d8 	cmpnei	r2,r2,3
 400a25c:	1000311e 	bne	r2,zero,400a324 <main+0x9d50>
 400a260:	e0b7c117 	ldw	r2,-8444(fp)
 400a264:	14000044 	addi	r16,r2,1
 400a268:	e0b7c217 	ldw	r2,-8440(fp)
 400a26c:	01400504 	movi	r5,20
 400a270:	1009883a 	mov	r4,r2
 400a274:	40191000 	call	4019100 <__mulsi3>
 400a278:	1405883a 	add	r2,r2,r16
 400a27c:	1085883a 	add	r2,r2,r2
 400a280:	1085883a 	add	r2,r2,r2
 400a284:	e0f7c104 	addi	r3,fp,-8444
 400a288:	1885883a 	add	r2,r3,r2
 400a28c:	10879d04 	addi	r2,r2,7796
 400a290:	10800017 	ldw	r2,0(r2)
 400a294:	10bffcd8 	cmpnei	r2,r2,-13
 400a298:	1000221e 	bne	r2,zero,400a324 <main+0x9d50>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400a29c:	e0b7c217 	ldw	r2,-8440(fp)
 400a2a0:	10c00084 	addi	r3,r2,2
 400a2a4:	e0b95e04 	addi	r2,fp,-6792
 400a2a8:	180f883a 	mov	r7,r3
 400a2ac:	e1b7c117 	ldw	r6,-8444(fp)
 400a2b0:	01403fc4 	movi	r5,255
 400a2b4:	1009883a 	mov	r4,r2
 400a2b8:	40003c80 	call	40003c8 <draw>
					draw(three, COLOR08_BLACK, x,y+2 );
 400a2bc:	e0b7c217 	ldw	r2,-8440(fp)
 400a2c0:	10800084 	addi	r2,r2,2
 400a2c4:	100f883a 	mov	r7,r2
 400a2c8:	e1b7c117 	ldw	r6,-8444(fp)
 400a2cc:	000b883a 	mov	r5,zero
 400a2d0:	010100f4 	movhi	r4,1027
 400a2d4:	2135aa04 	addi	r4,r4,-10584
 400a2d8:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-13;
 400a2dc:	e0b7c217 	ldw	r2,-8440(fp)
 400a2e0:	01400504 	movi	r5,20
 400a2e4:	1009883a 	mov	r4,r2
 400a2e8:	40191000 	call	4019100 <__mulsi3>
 400a2ec:	1007883a 	mov	r3,r2
 400a2f0:	e0b7c117 	ldw	r2,-8444(fp)
 400a2f4:	1885883a 	add	r2,r3,r2
 400a2f8:	1085883a 	add	r2,r2,r2
 400a2fc:	1085883a 	add	r2,r2,r2
 400a300:	e0f7c104 	addi	r3,fp,-8444
 400a304:	1885883a 	add	r2,r3,r2
 400a308:	10879d04 	addi	r2,r2,7796
 400a30c:	00fffcc4 	movi	r3,-13
 400a310:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400a314:	00c00044 	movi	r3,1
 400a318:	008200b4 	movhi	r2,2050
 400a31c:	10841804 	addi	r2,r2,4192
 400a320:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y][x-1] && gameboard [y][x]== gameboard [y][x-2]))//00x
 400a324:	e0b7c217 	ldw	r2,-8440(fp)
 400a328:	01400504 	movi	r5,20
 400a32c:	1009883a 	mov	r4,r2
 400a330:	40191000 	call	4019100 <__mulsi3>
 400a334:	1007883a 	mov	r3,r2
 400a338:	e0b7c117 	ldw	r2,-8444(fp)
 400a33c:	1885883a 	add	r2,r3,r2
 400a340:	1085883a 	add	r2,r2,r2
 400a344:	1085883a 	add	r2,r2,r2
 400a348:	e0f7c104 	addi	r3,fp,-8444
 400a34c:	1885883a 	add	r2,r3,r2
 400a350:	10879d04 	addi	r2,r2,7796
 400a354:	14000017 	ldw	r16,0(r2)
 400a358:	e0b7c117 	ldw	r2,-8444(fp)
 400a35c:	147fffc4 	addi	r17,r2,-1
 400a360:	e0b7c217 	ldw	r2,-8440(fp)
 400a364:	01400504 	movi	r5,20
 400a368:	1009883a 	mov	r4,r2
 400a36c:	40191000 	call	4019100 <__mulsi3>
 400a370:	1445883a 	add	r2,r2,r17
 400a374:	1085883a 	add	r2,r2,r2
 400a378:	1085883a 	add	r2,r2,r2
 400a37c:	e0f7c104 	addi	r3,fp,-8444
 400a380:	1885883a 	add	r2,r3,r2
 400a384:	10879d04 	addi	r2,r2,7796
 400a388:	10800017 	ldw	r2,0(r2)
 400a38c:	80803d1e 	bne	r16,r2,400a484 <main+0x9eb0>
 400a390:	e0b7c217 	ldw	r2,-8440(fp)
 400a394:	01400504 	movi	r5,20
 400a398:	1009883a 	mov	r4,r2
 400a39c:	40191000 	call	4019100 <__mulsi3>
 400a3a0:	1007883a 	mov	r3,r2
 400a3a4:	e0b7c117 	ldw	r2,-8444(fp)
 400a3a8:	1885883a 	add	r2,r3,r2
 400a3ac:	1085883a 	add	r2,r2,r2
 400a3b0:	1085883a 	add	r2,r2,r2
 400a3b4:	e0f7c104 	addi	r3,fp,-8444
 400a3b8:	1885883a 	add	r2,r3,r2
 400a3bc:	10879d04 	addi	r2,r2,7796
 400a3c0:	14000017 	ldw	r16,0(r2)
 400a3c4:	e0b7c117 	ldw	r2,-8444(fp)
 400a3c8:	147fff84 	addi	r17,r2,-2
 400a3cc:	e0b7c217 	ldw	r2,-8440(fp)
 400a3d0:	01400504 	movi	r5,20
 400a3d4:	1009883a 	mov	r4,r2
 400a3d8:	40191000 	call	4019100 <__mulsi3>
 400a3dc:	1445883a 	add	r2,r2,r17
 400a3e0:	1085883a 	add	r2,r2,r2
 400a3e4:	1085883a 	add	r2,r2,r2
 400a3e8:	e0f7c104 	addi	r3,fp,-8444
 400a3ec:	1885883a 	add	r2,r3,r2
 400a3f0:	10879d04 	addi	r2,r2,7796
 400a3f4:	10800017 	ldw	r2,0(r2)
 400a3f8:	8080221e 	bne	r16,r2,400a484 <main+0x9eb0>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400a3fc:	e0b7c217 	ldw	r2,-8440(fp)
 400a400:	10c00084 	addi	r3,r2,2
 400a404:	e0b95e04 	addi	r2,fp,-6792
 400a408:	180f883a 	mov	r7,r3
 400a40c:	e1b7c117 	ldw	r6,-8444(fp)
 400a410:	01403fc4 	movi	r5,255
 400a414:	1009883a 	mov	r4,r2
 400a418:	40003c80 	call	40003c8 <draw>
					draw(three, COLOR08_BLACK, x,y+2 );
 400a41c:	e0b7c217 	ldw	r2,-8440(fp)
 400a420:	10800084 	addi	r2,r2,2
 400a424:	100f883a 	mov	r7,r2
 400a428:	e1b7c117 	ldw	r6,-8444(fp)
 400a42c:	000b883a 	mov	r5,zero
 400a430:	010100f4 	movhi	r4,1027
 400a434:	2135aa04 	addi	r4,r4,-10584
 400a438:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-13;
 400a43c:	e0b7c217 	ldw	r2,-8440(fp)
 400a440:	01400504 	movi	r5,20
 400a444:	1009883a 	mov	r4,r2
 400a448:	40191000 	call	4019100 <__mulsi3>
 400a44c:	1007883a 	mov	r3,r2
 400a450:	e0b7c117 	ldw	r2,-8444(fp)
 400a454:	1885883a 	add	r2,r3,r2
 400a458:	1085883a 	add	r2,r2,r2
 400a45c:	1085883a 	add	r2,r2,r2
 400a460:	e0f7c104 	addi	r3,fp,-8444
 400a464:	1885883a 	add	r2,r3,r2
 400a468:	10879d04 	addi	r2,r2,7796
 400a46c:	00fffcc4 	movi	r3,-13
 400a470:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400a474:	00c00044 	movi	r3,1
 400a478:	008200b4 	movhi	r2,2050
 400a47c:	10841804 	addi	r2,r2,4192
 400a480:	10c00035 	stwio	r3,0(r2)
				}
				if(gameboard[y][x]==3 && gameboard[y][x+1]==3 && gameboard[y][x+2]==-13)
 400a484:	e0b7c217 	ldw	r2,-8440(fp)
 400a488:	01400504 	movi	r5,20
 400a48c:	1009883a 	mov	r4,r2
 400a490:	40191000 	call	4019100 <__mulsi3>
 400a494:	1007883a 	mov	r3,r2
 400a498:	e0b7c117 	ldw	r2,-8444(fp)
 400a49c:	1885883a 	add	r2,r3,r2
 400a4a0:	1085883a 	add	r2,r2,r2
 400a4a4:	1085883a 	add	r2,r2,r2
 400a4a8:	e0f7c104 	addi	r3,fp,-8444
 400a4ac:	1885883a 	add	r2,r3,r2
 400a4b0:	10879d04 	addi	r2,r2,7796
 400a4b4:	10800017 	ldw	r2,0(r2)
 400a4b8:	108000d8 	cmpnei	r2,r2,3
 400a4bc:	1000401e 	bne	r2,zero,400a5c0 <main+0x9fec>
 400a4c0:	e0b7c117 	ldw	r2,-8444(fp)
 400a4c4:	14000044 	addi	r16,r2,1
 400a4c8:	e0b7c217 	ldw	r2,-8440(fp)
 400a4cc:	01400504 	movi	r5,20
 400a4d0:	1009883a 	mov	r4,r2
 400a4d4:	40191000 	call	4019100 <__mulsi3>
 400a4d8:	1405883a 	add	r2,r2,r16
 400a4dc:	1085883a 	add	r2,r2,r2
 400a4e0:	1085883a 	add	r2,r2,r2
 400a4e4:	e0f7c104 	addi	r3,fp,-8444
 400a4e8:	1885883a 	add	r2,r3,r2
 400a4ec:	10879d04 	addi	r2,r2,7796
 400a4f0:	10800017 	ldw	r2,0(r2)
 400a4f4:	108000d8 	cmpnei	r2,r2,3
 400a4f8:	1000311e 	bne	r2,zero,400a5c0 <main+0x9fec>
 400a4fc:	e0b7c117 	ldw	r2,-8444(fp)
 400a500:	14000084 	addi	r16,r2,2
 400a504:	e0b7c217 	ldw	r2,-8440(fp)
 400a508:	01400504 	movi	r5,20
 400a50c:	1009883a 	mov	r4,r2
 400a510:	40191000 	call	4019100 <__mulsi3>
 400a514:	1405883a 	add	r2,r2,r16
 400a518:	1085883a 	add	r2,r2,r2
 400a51c:	1085883a 	add	r2,r2,r2
 400a520:	e0f7c104 	addi	r3,fp,-8444
 400a524:	1885883a 	add	r2,r3,r2
 400a528:	10879d04 	addi	r2,r2,7796
 400a52c:	10800017 	ldw	r2,0(r2)
 400a530:	10bffcd8 	cmpnei	r2,r2,-13
 400a534:	1000221e 	bne	r2,zero,400a5c0 <main+0x9fec>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400a538:	e0b7c217 	ldw	r2,-8440(fp)
 400a53c:	10c00084 	addi	r3,r2,2
 400a540:	e0b95e04 	addi	r2,fp,-6792
 400a544:	180f883a 	mov	r7,r3
 400a548:	e1b7c117 	ldw	r6,-8444(fp)
 400a54c:	01403fc4 	movi	r5,255
 400a550:	1009883a 	mov	r4,r2
 400a554:	40003c80 	call	40003c8 <draw>
					draw(three, COLOR08_BLACK, x,y+2 );
 400a558:	e0b7c217 	ldw	r2,-8440(fp)
 400a55c:	10800084 	addi	r2,r2,2
 400a560:	100f883a 	mov	r7,r2
 400a564:	e1b7c117 	ldw	r6,-8444(fp)
 400a568:	000b883a 	mov	r5,zero
 400a56c:	010100f4 	movhi	r4,1027
 400a570:	2135aa04 	addi	r4,r4,-10584
 400a574:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-13;
 400a578:	e0b7c217 	ldw	r2,-8440(fp)
 400a57c:	01400504 	movi	r5,20
 400a580:	1009883a 	mov	r4,r2
 400a584:	40191000 	call	4019100 <__mulsi3>
 400a588:	1007883a 	mov	r3,r2
 400a58c:	e0b7c117 	ldw	r2,-8444(fp)
 400a590:	1885883a 	add	r2,r3,r2
 400a594:	1085883a 	add	r2,r2,r2
 400a598:	1085883a 	add	r2,r2,r2
 400a59c:	e0f7c104 	addi	r3,fp,-8444
 400a5a0:	1885883a 	add	r2,r3,r2
 400a5a4:	10879d04 	addi	r2,r2,7796
 400a5a8:	00fffcc4 	movi	r3,-13
 400a5ac:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400a5b0:	00c00044 	movi	r3,1
 400a5b4:	008200b4 	movhi	r2,2050
 400a5b8:	10841804 	addi	r2,r2,4192
 400a5bc:	10c00035 	stwio	r3,0(r2)
				}
				/////////////////////////////////

				//vertical3
				if ((gameboard [y][x]==gameboard [y+1][x] && gameboard [y+1][x]== gameboard [y+2][x]) || (gameboard [y][x]==3 && gameboard [y+1][x]==-13))//xmb
 400a5c0:	e0b7c217 	ldw	r2,-8440(fp)
 400a5c4:	01400504 	movi	r5,20
 400a5c8:	1009883a 	mov	r4,r2
 400a5cc:	40191000 	call	4019100 <__mulsi3>
 400a5d0:	1007883a 	mov	r3,r2
 400a5d4:	e0b7c117 	ldw	r2,-8444(fp)
 400a5d8:	1885883a 	add	r2,r3,r2
 400a5dc:	1085883a 	add	r2,r2,r2
 400a5e0:	1085883a 	add	r2,r2,r2
 400a5e4:	e0f7c104 	addi	r3,fp,-8444
 400a5e8:	1885883a 	add	r2,r3,r2
 400a5ec:	10879d04 	addi	r2,r2,7796
 400a5f0:	14000017 	ldw	r16,0(r2)
 400a5f4:	e0b7c217 	ldw	r2,-8440(fp)
 400a5f8:	10800044 	addi	r2,r2,1
 400a5fc:	01400504 	movi	r5,20
 400a600:	1009883a 	mov	r4,r2
 400a604:	40191000 	call	4019100 <__mulsi3>
 400a608:	1007883a 	mov	r3,r2
 400a60c:	e0b7c117 	ldw	r2,-8444(fp)
 400a610:	1885883a 	add	r2,r3,r2
 400a614:	1085883a 	add	r2,r2,r2
 400a618:	1085883a 	add	r2,r2,r2
 400a61c:	e0f7c104 	addi	r3,fp,-8444
 400a620:	1885883a 	add	r2,r3,r2
 400a624:	10879d04 	addi	r2,r2,7796
 400a628:	10800017 	ldw	r2,0(r2)
 400a62c:	80801d1e 	bne	r16,r2,400a6a4 <main+0xa0d0>
 400a630:	e0b7c217 	ldw	r2,-8440(fp)
 400a634:	10800044 	addi	r2,r2,1
 400a638:	01400504 	movi	r5,20
 400a63c:	1009883a 	mov	r4,r2
 400a640:	40191000 	call	4019100 <__mulsi3>
 400a644:	1007883a 	mov	r3,r2
 400a648:	e0b7c117 	ldw	r2,-8444(fp)
 400a64c:	1885883a 	add	r2,r3,r2
 400a650:	1085883a 	add	r2,r2,r2
 400a654:	1085883a 	add	r2,r2,r2
 400a658:	e0f7c104 	addi	r3,fp,-8444
 400a65c:	1885883a 	add	r2,r3,r2
 400a660:	10879d04 	addi	r2,r2,7796
 400a664:	14000017 	ldw	r16,0(r2)
 400a668:	e0b7c217 	ldw	r2,-8440(fp)
 400a66c:	10800084 	addi	r2,r2,2
 400a670:	01400504 	movi	r5,20
 400a674:	1009883a 	mov	r4,r2
 400a678:	40191000 	call	4019100 <__mulsi3>
 400a67c:	1007883a 	mov	r3,r2
 400a680:	e0b7c117 	ldw	r2,-8444(fp)
 400a684:	1885883a 	add	r2,r3,r2
 400a688:	1085883a 	add	r2,r2,r2
 400a68c:	1085883a 	add	r2,r2,r2
 400a690:	e0f7c104 	addi	r3,fp,-8444
 400a694:	1885883a 	add	r2,r3,r2
 400a698:	10879d04 	addi	r2,r2,7796
 400a69c:	10800017 	ldw	r2,0(r2)
 400a6a0:	80801f26 	beq	r16,r2,400a720 <main+0xa14c>
 400a6a4:	e0b7c217 	ldw	r2,-8440(fp)
 400a6a8:	01400504 	movi	r5,20
 400a6ac:	1009883a 	mov	r4,r2
 400a6b0:	40191000 	call	4019100 <__mulsi3>
 400a6b4:	1007883a 	mov	r3,r2
 400a6b8:	e0b7c117 	ldw	r2,-8444(fp)
 400a6bc:	1885883a 	add	r2,r3,r2
 400a6c0:	1085883a 	add	r2,r2,r2
 400a6c4:	1085883a 	add	r2,r2,r2
 400a6c8:	e0f7c104 	addi	r3,fp,-8444
 400a6cc:	1885883a 	add	r2,r3,r2
 400a6d0:	10879d04 	addi	r2,r2,7796
 400a6d4:	10800017 	ldw	r2,0(r2)
 400a6d8:	108000d8 	cmpnei	r2,r2,3
 400a6dc:	1000321e 	bne	r2,zero,400a7a8 <main+0xa1d4>
 400a6e0:	e0b7c217 	ldw	r2,-8440(fp)
 400a6e4:	10800044 	addi	r2,r2,1
 400a6e8:	01400504 	movi	r5,20
 400a6ec:	1009883a 	mov	r4,r2
 400a6f0:	40191000 	call	4019100 <__mulsi3>
 400a6f4:	1007883a 	mov	r3,r2
 400a6f8:	e0b7c117 	ldw	r2,-8444(fp)
 400a6fc:	1885883a 	add	r2,r3,r2
 400a700:	1085883a 	add	r2,r2,r2
 400a704:	1085883a 	add	r2,r2,r2
 400a708:	e0f7c104 	addi	r3,fp,-8444
 400a70c:	1885883a 	add	r2,r3,r2
 400a710:	10879d04 	addi	r2,r2,7796
 400a714:	10800017 	ldw	r2,0(r2)
 400a718:	10bffcd8 	cmpnei	r2,r2,-13
 400a71c:	1000221e 	bne	r2,zero,400a7a8 <main+0xa1d4>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400a720:	e0b7c217 	ldw	r2,-8440(fp)
 400a724:	10c00084 	addi	r3,r2,2
 400a728:	e0b95e04 	addi	r2,fp,-6792
 400a72c:	180f883a 	mov	r7,r3
 400a730:	e1b7c117 	ldw	r6,-8444(fp)
 400a734:	01403fc4 	movi	r5,255
 400a738:	1009883a 	mov	r4,r2
 400a73c:	40003c80 	call	40003c8 <draw>
					draw(three, COLOR08_BLACK, x,y+2 );
 400a740:	e0b7c217 	ldw	r2,-8440(fp)
 400a744:	10800084 	addi	r2,r2,2
 400a748:	100f883a 	mov	r7,r2
 400a74c:	e1b7c117 	ldw	r6,-8444(fp)
 400a750:	000b883a 	mov	r5,zero
 400a754:	010100f4 	movhi	r4,1027
 400a758:	2135aa04 	addi	r4,r4,-10584
 400a75c:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-13;
 400a760:	e0b7c217 	ldw	r2,-8440(fp)
 400a764:	01400504 	movi	r5,20
 400a768:	1009883a 	mov	r4,r2
 400a76c:	40191000 	call	4019100 <__mulsi3>
 400a770:	1007883a 	mov	r3,r2
 400a774:	e0b7c117 	ldw	r2,-8444(fp)
 400a778:	1885883a 	add	r2,r3,r2
 400a77c:	1085883a 	add	r2,r2,r2
 400a780:	1085883a 	add	r2,r2,r2
 400a784:	e0f7c104 	addi	r3,fp,-8444
 400a788:	1885883a 	add	r2,r3,r2
 400a78c:	10879d04 	addi	r2,r2,7796
 400a790:	00fffcc4 	movi	r3,-13
 400a794:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400a798:	00c00044 	movi	r3,1
 400a79c:	008200b4 	movhi	r2,2050
 400a7a0:	10841804 	addi	r2,r2,4192
 400a7a4:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y-1][x] && gameboard [y][x]== gameboard [y+1][x]) || (gameboard [y][x]==3 && gameboard [y+1][x]==-13))//txb
 400a7a8:	e0b7c217 	ldw	r2,-8440(fp)
 400a7ac:	01400504 	movi	r5,20
 400a7b0:	1009883a 	mov	r4,r2
 400a7b4:	40191000 	call	4019100 <__mulsi3>
 400a7b8:	1007883a 	mov	r3,r2
 400a7bc:	e0b7c117 	ldw	r2,-8444(fp)
 400a7c0:	1885883a 	add	r2,r3,r2
 400a7c4:	1085883a 	add	r2,r2,r2
 400a7c8:	1085883a 	add	r2,r2,r2
 400a7cc:	e0f7c104 	addi	r3,fp,-8444
 400a7d0:	1885883a 	add	r2,r3,r2
 400a7d4:	10879d04 	addi	r2,r2,7796
 400a7d8:	14000017 	ldw	r16,0(r2)
 400a7dc:	e0b7c217 	ldw	r2,-8440(fp)
 400a7e0:	10bfffc4 	addi	r2,r2,-1
 400a7e4:	01400504 	movi	r5,20
 400a7e8:	1009883a 	mov	r4,r2
 400a7ec:	40191000 	call	4019100 <__mulsi3>
 400a7f0:	1007883a 	mov	r3,r2
 400a7f4:	e0b7c117 	ldw	r2,-8444(fp)
 400a7f8:	1885883a 	add	r2,r3,r2
 400a7fc:	1085883a 	add	r2,r2,r2
 400a800:	1085883a 	add	r2,r2,r2
 400a804:	e0f7c104 	addi	r3,fp,-8444
 400a808:	1885883a 	add	r2,r3,r2
 400a80c:	10879d04 	addi	r2,r2,7796
 400a810:	10800017 	ldw	r2,0(r2)
 400a814:	80801c1e 	bne	r16,r2,400a888 <main+0xa2b4>
 400a818:	e0b7c217 	ldw	r2,-8440(fp)
 400a81c:	01400504 	movi	r5,20
 400a820:	1009883a 	mov	r4,r2
 400a824:	40191000 	call	4019100 <__mulsi3>
 400a828:	1007883a 	mov	r3,r2
 400a82c:	e0b7c117 	ldw	r2,-8444(fp)
 400a830:	1885883a 	add	r2,r3,r2
 400a834:	1085883a 	add	r2,r2,r2
 400a838:	1085883a 	add	r2,r2,r2
 400a83c:	e0f7c104 	addi	r3,fp,-8444
 400a840:	1885883a 	add	r2,r3,r2
 400a844:	10879d04 	addi	r2,r2,7796
 400a848:	14000017 	ldw	r16,0(r2)
 400a84c:	e0b7c217 	ldw	r2,-8440(fp)
 400a850:	10800044 	addi	r2,r2,1
 400a854:	01400504 	movi	r5,20
 400a858:	1009883a 	mov	r4,r2
 400a85c:	40191000 	call	4019100 <__mulsi3>
 400a860:	1007883a 	mov	r3,r2
 400a864:	e0b7c117 	ldw	r2,-8444(fp)
 400a868:	1885883a 	add	r2,r3,r2
 400a86c:	1085883a 	add	r2,r2,r2
 400a870:	1085883a 	add	r2,r2,r2
 400a874:	e0f7c104 	addi	r3,fp,-8444
 400a878:	1885883a 	add	r2,r3,r2
 400a87c:	10879d04 	addi	r2,r2,7796
 400a880:	10800017 	ldw	r2,0(r2)
 400a884:	80801f26 	beq	r16,r2,400a904 <main+0xa330>
 400a888:	e0b7c217 	ldw	r2,-8440(fp)
 400a88c:	01400504 	movi	r5,20
 400a890:	1009883a 	mov	r4,r2
 400a894:	40191000 	call	4019100 <__mulsi3>
 400a898:	1007883a 	mov	r3,r2
 400a89c:	e0b7c117 	ldw	r2,-8444(fp)
 400a8a0:	1885883a 	add	r2,r3,r2
 400a8a4:	1085883a 	add	r2,r2,r2
 400a8a8:	1085883a 	add	r2,r2,r2
 400a8ac:	e0f7c104 	addi	r3,fp,-8444
 400a8b0:	1885883a 	add	r2,r3,r2
 400a8b4:	10879d04 	addi	r2,r2,7796
 400a8b8:	10800017 	ldw	r2,0(r2)
 400a8bc:	108000d8 	cmpnei	r2,r2,3
 400a8c0:	1000321e 	bne	r2,zero,400a98c <main+0xa3b8>
 400a8c4:	e0b7c217 	ldw	r2,-8440(fp)
 400a8c8:	10800044 	addi	r2,r2,1
 400a8cc:	01400504 	movi	r5,20
 400a8d0:	1009883a 	mov	r4,r2
 400a8d4:	40191000 	call	4019100 <__mulsi3>
 400a8d8:	1007883a 	mov	r3,r2
 400a8dc:	e0b7c117 	ldw	r2,-8444(fp)
 400a8e0:	1885883a 	add	r2,r3,r2
 400a8e4:	1085883a 	add	r2,r2,r2
 400a8e8:	1085883a 	add	r2,r2,r2
 400a8ec:	e0f7c104 	addi	r3,fp,-8444
 400a8f0:	1885883a 	add	r2,r3,r2
 400a8f4:	10879d04 	addi	r2,r2,7796
 400a8f8:	10800017 	ldw	r2,0(r2)
 400a8fc:	10bffcd8 	cmpnei	r2,r2,-13
 400a900:	1000221e 	bne	r2,zero,400a98c <main+0xa3b8>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400a904:	e0b7c217 	ldw	r2,-8440(fp)
 400a908:	10c00084 	addi	r3,r2,2
 400a90c:	e0b95e04 	addi	r2,fp,-6792
 400a910:	180f883a 	mov	r7,r3
 400a914:	e1b7c117 	ldw	r6,-8444(fp)
 400a918:	01403fc4 	movi	r5,255
 400a91c:	1009883a 	mov	r4,r2
 400a920:	40003c80 	call	40003c8 <draw>
					draw(three, COLOR08_BLACK, x,y+2 );
 400a924:	e0b7c217 	ldw	r2,-8440(fp)
 400a928:	10800084 	addi	r2,r2,2
 400a92c:	100f883a 	mov	r7,r2
 400a930:	e1b7c117 	ldw	r6,-8444(fp)
 400a934:	000b883a 	mov	r5,zero
 400a938:	010100f4 	movhi	r4,1027
 400a93c:	2135aa04 	addi	r4,r4,-10584
 400a940:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-13;
 400a944:	e0b7c217 	ldw	r2,-8440(fp)
 400a948:	01400504 	movi	r5,20
 400a94c:	1009883a 	mov	r4,r2
 400a950:	40191000 	call	4019100 <__mulsi3>
 400a954:	1007883a 	mov	r3,r2
 400a958:	e0b7c117 	ldw	r2,-8444(fp)
 400a95c:	1885883a 	add	r2,r3,r2
 400a960:	1085883a 	add	r2,r2,r2
 400a964:	1085883a 	add	r2,r2,r2
 400a968:	e0f7c104 	addi	r3,fp,-8444
 400a96c:	1885883a 	add	r2,r3,r2
 400a970:	10879d04 	addi	r2,r2,7796
 400a974:	00fffcc4 	movi	r3,-13
 400a978:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400a97c:	00c00044 	movi	r3,1
 400a980:	008200b4 	movhi	r2,2050
 400a984:	10841804 	addi	r2,r2,4192
 400a988:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y-1][x] && gameboard [y][x]== gameboard [y-2][x]) || (gameboard [y][x]==3 && gameboard [y-1][x]==-13))//tmx
 400a98c:	e0b7c217 	ldw	r2,-8440(fp)
 400a990:	01400504 	movi	r5,20
 400a994:	1009883a 	mov	r4,r2
 400a998:	40191000 	call	4019100 <__mulsi3>
 400a99c:	1007883a 	mov	r3,r2
 400a9a0:	e0b7c117 	ldw	r2,-8444(fp)
 400a9a4:	1885883a 	add	r2,r3,r2
 400a9a8:	1085883a 	add	r2,r2,r2
 400a9ac:	1085883a 	add	r2,r2,r2
 400a9b0:	e0f7c104 	addi	r3,fp,-8444
 400a9b4:	1885883a 	add	r2,r3,r2
 400a9b8:	10879d04 	addi	r2,r2,7796
 400a9bc:	14000017 	ldw	r16,0(r2)
 400a9c0:	e0b7c217 	ldw	r2,-8440(fp)
 400a9c4:	10bfffc4 	addi	r2,r2,-1
 400a9c8:	01400504 	movi	r5,20
 400a9cc:	1009883a 	mov	r4,r2
 400a9d0:	40191000 	call	4019100 <__mulsi3>
 400a9d4:	1007883a 	mov	r3,r2
 400a9d8:	e0b7c117 	ldw	r2,-8444(fp)
 400a9dc:	1885883a 	add	r2,r3,r2
 400a9e0:	1085883a 	add	r2,r2,r2
 400a9e4:	1085883a 	add	r2,r2,r2
 400a9e8:	e0f7c104 	addi	r3,fp,-8444
 400a9ec:	1885883a 	add	r2,r3,r2
 400a9f0:	10879d04 	addi	r2,r2,7796
 400a9f4:	10800017 	ldw	r2,0(r2)
 400a9f8:	80801c1e 	bne	r16,r2,400aa6c <main+0xa498>
 400a9fc:	e0b7c217 	ldw	r2,-8440(fp)
 400aa00:	01400504 	movi	r5,20
 400aa04:	1009883a 	mov	r4,r2
 400aa08:	40191000 	call	4019100 <__mulsi3>
 400aa0c:	1007883a 	mov	r3,r2
 400aa10:	e0b7c117 	ldw	r2,-8444(fp)
 400aa14:	1885883a 	add	r2,r3,r2
 400aa18:	1085883a 	add	r2,r2,r2
 400aa1c:	1085883a 	add	r2,r2,r2
 400aa20:	e0f7c104 	addi	r3,fp,-8444
 400aa24:	1885883a 	add	r2,r3,r2
 400aa28:	10879d04 	addi	r2,r2,7796
 400aa2c:	14000017 	ldw	r16,0(r2)
 400aa30:	e0b7c217 	ldw	r2,-8440(fp)
 400aa34:	10bfff84 	addi	r2,r2,-2
 400aa38:	01400504 	movi	r5,20
 400aa3c:	1009883a 	mov	r4,r2
 400aa40:	40191000 	call	4019100 <__mulsi3>
 400aa44:	1007883a 	mov	r3,r2
 400aa48:	e0b7c117 	ldw	r2,-8444(fp)
 400aa4c:	1885883a 	add	r2,r3,r2
 400aa50:	1085883a 	add	r2,r2,r2
 400aa54:	1085883a 	add	r2,r2,r2
 400aa58:	e0f7c104 	addi	r3,fp,-8444
 400aa5c:	1885883a 	add	r2,r3,r2
 400aa60:	10879d04 	addi	r2,r2,7796
 400aa64:	10800017 	ldw	r2,0(r2)
 400aa68:	80801f26 	beq	r16,r2,400aae8 <main+0xa514>
 400aa6c:	e0b7c217 	ldw	r2,-8440(fp)
 400aa70:	01400504 	movi	r5,20
 400aa74:	1009883a 	mov	r4,r2
 400aa78:	40191000 	call	4019100 <__mulsi3>
 400aa7c:	1007883a 	mov	r3,r2
 400aa80:	e0b7c117 	ldw	r2,-8444(fp)
 400aa84:	1885883a 	add	r2,r3,r2
 400aa88:	1085883a 	add	r2,r2,r2
 400aa8c:	1085883a 	add	r2,r2,r2
 400aa90:	e0f7c104 	addi	r3,fp,-8444
 400aa94:	1885883a 	add	r2,r3,r2
 400aa98:	10879d04 	addi	r2,r2,7796
 400aa9c:	10800017 	ldw	r2,0(r2)
 400aaa0:	108000d8 	cmpnei	r2,r2,3
 400aaa4:	1000321e 	bne	r2,zero,400ab70 <main+0xa59c>
 400aaa8:	e0b7c217 	ldw	r2,-8440(fp)
 400aaac:	10bfffc4 	addi	r2,r2,-1
 400aab0:	01400504 	movi	r5,20
 400aab4:	1009883a 	mov	r4,r2
 400aab8:	40191000 	call	4019100 <__mulsi3>
 400aabc:	1007883a 	mov	r3,r2
 400aac0:	e0b7c117 	ldw	r2,-8444(fp)
 400aac4:	1885883a 	add	r2,r3,r2
 400aac8:	1085883a 	add	r2,r2,r2
 400aacc:	1085883a 	add	r2,r2,r2
 400aad0:	e0f7c104 	addi	r3,fp,-8444
 400aad4:	1885883a 	add	r2,r3,r2
 400aad8:	10879d04 	addi	r2,r2,7796
 400aadc:	10800017 	ldw	r2,0(r2)
 400aae0:	10bffcd8 	cmpnei	r2,r2,-13
 400aae4:	1000221e 	bne	r2,zero,400ab70 <main+0xa59c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400aae8:	e0b7c217 	ldw	r2,-8440(fp)
 400aaec:	10c00084 	addi	r3,r2,2
 400aaf0:	e0b95e04 	addi	r2,fp,-6792
 400aaf4:	180f883a 	mov	r7,r3
 400aaf8:	e1b7c117 	ldw	r6,-8444(fp)
 400aafc:	01403fc4 	movi	r5,255
 400ab00:	1009883a 	mov	r4,r2
 400ab04:	40003c80 	call	40003c8 <draw>
					draw(three, COLOR08_BLACK, x,y+2 );
 400ab08:	e0b7c217 	ldw	r2,-8440(fp)
 400ab0c:	10800084 	addi	r2,r2,2
 400ab10:	100f883a 	mov	r7,r2
 400ab14:	e1b7c117 	ldw	r6,-8444(fp)
 400ab18:	000b883a 	mov	r5,zero
 400ab1c:	010100f4 	movhi	r4,1027
 400ab20:	2135aa04 	addi	r4,r4,-10584
 400ab24:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-13;
 400ab28:	e0b7c217 	ldw	r2,-8440(fp)
 400ab2c:	01400504 	movi	r5,20
 400ab30:	1009883a 	mov	r4,r2
 400ab34:	40191000 	call	4019100 <__mulsi3>
 400ab38:	1007883a 	mov	r3,r2
 400ab3c:	e0b7c117 	ldw	r2,-8444(fp)
 400ab40:	1885883a 	add	r2,r3,r2
 400ab44:	1085883a 	add	r2,r2,r2
 400ab48:	1085883a 	add	r2,r2,r2
 400ab4c:	e0f7c104 	addi	r3,fp,-8444
 400ab50:	1885883a 	add	r2,r3,r2
 400ab54:	10879d04 	addi	r2,r2,7796
 400ab58:	00fffcc4 	movi	r3,-13
 400ab5c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400ab60:	00c00044 	movi	r3,1
 400ab64:	008200b4 	movhi	r2,2050
 400ab68:	10841804 	addi	r2,r2,4192
 400ab6c:	10c00035 	stwio	r3,0(r2)
				}
				if(gameboard[y][x]==3 && gameboard[y-1][x]==3 && gameboard[y-2][x]==-13)
 400ab70:	e0b7c217 	ldw	r2,-8440(fp)
 400ab74:	01400504 	movi	r5,20
 400ab78:	1009883a 	mov	r4,r2
 400ab7c:	40191000 	call	4019100 <__mulsi3>
 400ab80:	1007883a 	mov	r3,r2
 400ab84:	e0b7c117 	ldw	r2,-8444(fp)
 400ab88:	1885883a 	add	r2,r3,r2
 400ab8c:	1085883a 	add	r2,r2,r2
 400ab90:	1085883a 	add	r2,r2,r2
 400ab94:	e0f7c104 	addi	r3,fp,-8444
 400ab98:	1885883a 	add	r2,r3,r2
 400ab9c:	10879d04 	addi	r2,r2,7796
 400aba0:	10800017 	ldw	r2,0(r2)
 400aba4:	108000d8 	cmpnei	r2,r2,3
 400aba8:	1000421e 	bne	r2,zero,400acb4 <main+0xa6e0>
 400abac:	e0b7c217 	ldw	r2,-8440(fp)
 400abb0:	10bfffc4 	addi	r2,r2,-1
 400abb4:	01400504 	movi	r5,20
 400abb8:	1009883a 	mov	r4,r2
 400abbc:	40191000 	call	4019100 <__mulsi3>
 400abc0:	1007883a 	mov	r3,r2
 400abc4:	e0b7c117 	ldw	r2,-8444(fp)
 400abc8:	1885883a 	add	r2,r3,r2
 400abcc:	1085883a 	add	r2,r2,r2
 400abd0:	1085883a 	add	r2,r2,r2
 400abd4:	e0f7c104 	addi	r3,fp,-8444
 400abd8:	1885883a 	add	r2,r3,r2
 400abdc:	10879d04 	addi	r2,r2,7796
 400abe0:	10800017 	ldw	r2,0(r2)
 400abe4:	108000d8 	cmpnei	r2,r2,3
 400abe8:	1000321e 	bne	r2,zero,400acb4 <main+0xa6e0>
 400abec:	e0b7c217 	ldw	r2,-8440(fp)
 400abf0:	10bfff84 	addi	r2,r2,-2
 400abf4:	01400504 	movi	r5,20
 400abf8:	1009883a 	mov	r4,r2
 400abfc:	40191000 	call	4019100 <__mulsi3>
 400ac00:	1007883a 	mov	r3,r2
 400ac04:	e0b7c117 	ldw	r2,-8444(fp)
 400ac08:	1885883a 	add	r2,r3,r2
 400ac0c:	1085883a 	add	r2,r2,r2
 400ac10:	1085883a 	add	r2,r2,r2
 400ac14:	e0f7c104 	addi	r3,fp,-8444
 400ac18:	1885883a 	add	r2,r3,r2
 400ac1c:	10879d04 	addi	r2,r2,7796
 400ac20:	10800017 	ldw	r2,0(r2)
 400ac24:	10bffcd8 	cmpnei	r2,r2,-13
 400ac28:	1000221e 	bne	r2,zero,400acb4 <main+0xa6e0>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400ac2c:	e0b7c217 	ldw	r2,-8440(fp)
 400ac30:	10c00084 	addi	r3,r2,2
 400ac34:	e0b95e04 	addi	r2,fp,-6792
 400ac38:	180f883a 	mov	r7,r3
 400ac3c:	e1b7c117 	ldw	r6,-8444(fp)
 400ac40:	01403fc4 	movi	r5,255
 400ac44:	1009883a 	mov	r4,r2
 400ac48:	40003c80 	call	40003c8 <draw>
					draw(three, COLOR08_BLACK, x,y+2 );
 400ac4c:	e0b7c217 	ldw	r2,-8440(fp)
 400ac50:	10800084 	addi	r2,r2,2
 400ac54:	100f883a 	mov	r7,r2
 400ac58:	e1b7c117 	ldw	r6,-8444(fp)
 400ac5c:	000b883a 	mov	r5,zero
 400ac60:	010100f4 	movhi	r4,1027
 400ac64:	2135aa04 	addi	r4,r4,-10584
 400ac68:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-13;
 400ac6c:	e0b7c217 	ldw	r2,-8440(fp)
 400ac70:	01400504 	movi	r5,20
 400ac74:	1009883a 	mov	r4,r2
 400ac78:	40191000 	call	4019100 <__mulsi3>
 400ac7c:	1007883a 	mov	r3,r2
 400ac80:	e0b7c117 	ldw	r2,-8444(fp)
 400ac84:	1885883a 	add	r2,r3,r2
 400ac88:	1085883a 	add	r2,r2,r2
 400ac8c:	1085883a 	add	r2,r2,r2
 400ac90:	e0f7c104 	addi	r3,fp,-8444
 400ac94:	1885883a 	add	r2,r3,r2
 400ac98:	10879d04 	addi	r2,r2,7796
 400ac9c:	00fffcc4 	movi	r3,-13
 400aca0:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400aca4:	00c00044 	movi	r3,1
 400aca8:	008200b4 	movhi	r2,2050
 400acac:	10841804 	addi	r2,r2,4192
 400acb0:	10c00035 	stwio	r3,0(r2)
				}

//////////////////////////////////////////////////////////////////

				//diagonal (\)3
				if ((gameboard [y][x]==gameboard [y+1][x+1] && gameboard[y+1][x+1]== gameboard[y+2][x+2]))//(\x\)
 400acb4:	e0b7c217 	ldw	r2,-8440(fp)
 400acb8:	01400504 	movi	r5,20
 400acbc:	1009883a 	mov	r4,r2
 400acc0:	40191000 	call	4019100 <__mulsi3>
 400acc4:	1007883a 	mov	r3,r2
 400acc8:	e0b7c117 	ldw	r2,-8444(fp)
 400accc:	1885883a 	add	r2,r3,r2
 400acd0:	1085883a 	add	r2,r2,r2
 400acd4:	1085883a 	add	r2,r2,r2
 400acd8:	e0f7c104 	addi	r3,fp,-8444
 400acdc:	1885883a 	add	r2,r3,r2
 400ace0:	10879d04 	addi	r2,r2,7796
 400ace4:	14000017 	ldw	r16,0(r2)
 400ace8:	e0b7c217 	ldw	r2,-8440(fp)
 400acec:	10c00044 	addi	r3,r2,1
 400acf0:	e0b7c117 	ldw	r2,-8444(fp)
 400acf4:	14400044 	addi	r17,r2,1
 400acf8:	01400504 	movi	r5,20
 400acfc:	1809883a 	mov	r4,r3
 400ad00:	40191000 	call	4019100 <__mulsi3>
 400ad04:	1445883a 	add	r2,r2,r17
 400ad08:	1085883a 	add	r2,r2,r2
 400ad0c:	1085883a 	add	r2,r2,r2
 400ad10:	e0f7c104 	addi	r3,fp,-8444
 400ad14:	1885883a 	add	r2,r3,r2
 400ad18:	10879d04 	addi	r2,r2,7796
 400ad1c:	10800017 	ldw	r2,0(r2)
 400ad20:	80803f1e 	bne	r16,r2,400ae20 <main+0xa84c>
 400ad24:	e0b7c217 	ldw	r2,-8440(fp)
 400ad28:	10c00044 	addi	r3,r2,1
 400ad2c:	e0b7c117 	ldw	r2,-8444(fp)
 400ad30:	14000044 	addi	r16,r2,1
 400ad34:	01400504 	movi	r5,20
 400ad38:	1809883a 	mov	r4,r3
 400ad3c:	40191000 	call	4019100 <__mulsi3>
 400ad40:	1405883a 	add	r2,r2,r16
 400ad44:	1085883a 	add	r2,r2,r2
 400ad48:	1085883a 	add	r2,r2,r2
 400ad4c:	e0f7c104 	addi	r3,fp,-8444
 400ad50:	1885883a 	add	r2,r3,r2
 400ad54:	10879d04 	addi	r2,r2,7796
 400ad58:	14000017 	ldw	r16,0(r2)
 400ad5c:	e0b7c217 	ldw	r2,-8440(fp)
 400ad60:	10c00084 	addi	r3,r2,2
 400ad64:	e0b7c117 	ldw	r2,-8444(fp)
 400ad68:	14400084 	addi	r17,r2,2
 400ad6c:	01400504 	movi	r5,20
 400ad70:	1809883a 	mov	r4,r3
 400ad74:	40191000 	call	4019100 <__mulsi3>
 400ad78:	1445883a 	add	r2,r2,r17
 400ad7c:	1085883a 	add	r2,r2,r2
 400ad80:	1085883a 	add	r2,r2,r2
 400ad84:	e0f7c104 	addi	r3,fp,-8444
 400ad88:	1885883a 	add	r2,r3,r2
 400ad8c:	10879d04 	addi	r2,r2,7796
 400ad90:	10800017 	ldw	r2,0(r2)
 400ad94:	8080221e 	bne	r16,r2,400ae20 <main+0xa84c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400ad98:	e0b7c217 	ldw	r2,-8440(fp)
 400ad9c:	10c00084 	addi	r3,r2,2
 400ada0:	e0b95e04 	addi	r2,fp,-6792
 400ada4:	180f883a 	mov	r7,r3
 400ada8:	e1b7c117 	ldw	r6,-8444(fp)
 400adac:	01403fc4 	movi	r5,255
 400adb0:	1009883a 	mov	r4,r2
 400adb4:	40003c80 	call	40003c8 <draw>
					draw(three, COLOR08_BLACK, x,y+2 );
 400adb8:	e0b7c217 	ldw	r2,-8440(fp)
 400adbc:	10800084 	addi	r2,r2,2
 400adc0:	100f883a 	mov	r7,r2
 400adc4:	e1b7c117 	ldw	r6,-8444(fp)
 400adc8:	000b883a 	mov	r5,zero
 400adcc:	010100f4 	movhi	r4,1027
 400add0:	2135aa04 	addi	r4,r4,-10584
 400add4:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-13;
 400add8:	e0b7c217 	ldw	r2,-8440(fp)
 400addc:	01400504 	movi	r5,20
 400ade0:	1009883a 	mov	r4,r2
 400ade4:	40191000 	call	4019100 <__mulsi3>
 400ade8:	1007883a 	mov	r3,r2
 400adec:	e0b7c117 	ldw	r2,-8444(fp)
 400adf0:	1885883a 	add	r2,r3,r2
 400adf4:	1085883a 	add	r2,r2,r2
 400adf8:	1085883a 	add	r2,r2,r2
 400adfc:	e0f7c104 	addi	r3,fp,-8444
 400ae00:	1885883a 	add	r2,r3,r2
 400ae04:	10879d04 	addi	r2,r2,7796
 400ae08:	00fffcc4 	movi	r3,-13
 400ae0c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400ae10:	00c00044 	movi	r3,1
 400ae14:	008200b4 	movhi	r2,2050
 400ae18:	10841804 	addi	r2,r2,4192
 400ae1c:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y+1][x+1] && gameboard[y][x]== gameboard[y+2][x+2]) )//(x\\)
 400ae20:	e0b7c217 	ldw	r2,-8440(fp)
 400ae24:	01400504 	movi	r5,20
 400ae28:	1009883a 	mov	r4,r2
 400ae2c:	40191000 	call	4019100 <__mulsi3>
 400ae30:	1007883a 	mov	r3,r2
 400ae34:	e0b7c117 	ldw	r2,-8444(fp)
 400ae38:	1885883a 	add	r2,r3,r2
 400ae3c:	1085883a 	add	r2,r2,r2
 400ae40:	1085883a 	add	r2,r2,r2
 400ae44:	e0f7c104 	addi	r3,fp,-8444
 400ae48:	1885883a 	add	r2,r3,r2
 400ae4c:	10879d04 	addi	r2,r2,7796
 400ae50:	14000017 	ldw	r16,0(r2)
 400ae54:	e0b7c217 	ldw	r2,-8440(fp)
 400ae58:	10c00044 	addi	r3,r2,1
 400ae5c:	e0b7c117 	ldw	r2,-8444(fp)
 400ae60:	14400044 	addi	r17,r2,1
 400ae64:	01400504 	movi	r5,20
 400ae68:	1809883a 	mov	r4,r3
 400ae6c:	40191000 	call	4019100 <__mulsi3>
 400ae70:	1445883a 	add	r2,r2,r17
 400ae74:	1085883a 	add	r2,r2,r2
 400ae78:	1085883a 	add	r2,r2,r2
 400ae7c:	e0f7c104 	addi	r3,fp,-8444
 400ae80:	1885883a 	add	r2,r3,r2
 400ae84:	10879d04 	addi	r2,r2,7796
 400ae88:	10800017 	ldw	r2,0(r2)
 400ae8c:	80803e1e 	bne	r16,r2,400af88 <main+0xa9b4>
 400ae90:	e0b7c217 	ldw	r2,-8440(fp)
 400ae94:	01400504 	movi	r5,20
 400ae98:	1009883a 	mov	r4,r2
 400ae9c:	40191000 	call	4019100 <__mulsi3>
 400aea0:	1007883a 	mov	r3,r2
 400aea4:	e0b7c117 	ldw	r2,-8444(fp)
 400aea8:	1885883a 	add	r2,r3,r2
 400aeac:	1085883a 	add	r2,r2,r2
 400aeb0:	1085883a 	add	r2,r2,r2
 400aeb4:	e0f7c104 	addi	r3,fp,-8444
 400aeb8:	1885883a 	add	r2,r3,r2
 400aebc:	10879d04 	addi	r2,r2,7796
 400aec0:	14000017 	ldw	r16,0(r2)
 400aec4:	e0b7c217 	ldw	r2,-8440(fp)
 400aec8:	10c00084 	addi	r3,r2,2
 400aecc:	e0b7c117 	ldw	r2,-8444(fp)
 400aed0:	14400084 	addi	r17,r2,2
 400aed4:	01400504 	movi	r5,20
 400aed8:	1809883a 	mov	r4,r3
 400aedc:	40191000 	call	4019100 <__mulsi3>
 400aee0:	1445883a 	add	r2,r2,r17
 400aee4:	1085883a 	add	r2,r2,r2
 400aee8:	1085883a 	add	r2,r2,r2
 400aeec:	e0f7c104 	addi	r3,fp,-8444
 400aef0:	1885883a 	add	r2,r3,r2
 400aef4:	10879d04 	addi	r2,r2,7796
 400aef8:	10800017 	ldw	r2,0(r2)
 400aefc:	8080221e 	bne	r16,r2,400af88 <main+0xa9b4>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400af00:	e0b7c217 	ldw	r2,-8440(fp)
 400af04:	10c00084 	addi	r3,r2,2
 400af08:	e0b95e04 	addi	r2,fp,-6792
 400af0c:	180f883a 	mov	r7,r3
 400af10:	e1b7c117 	ldw	r6,-8444(fp)
 400af14:	01403fc4 	movi	r5,255
 400af18:	1009883a 	mov	r4,r2
 400af1c:	40003c80 	call	40003c8 <draw>
					draw(three, COLOR08_BLACK, x,y+2 );
 400af20:	e0b7c217 	ldw	r2,-8440(fp)
 400af24:	10800084 	addi	r2,r2,2
 400af28:	100f883a 	mov	r7,r2
 400af2c:	e1b7c117 	ldw	r6,-8444(fp)
 400af30:	000b883a 	mov	r5,zero
 400af34:	010100f4 	movhi	r4,1027
 400af38:	2135aa04 	addi	r4,r4,-10584
 400af3c:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-13;
 400af40:	e0b7c217 	ldw	r2,-8440(fp)
 400af44:	01400504 	movi	r5,20
 400af48:	1009883a 	mov	r4,r2
 400af4c:	40191000 	call	4019100 <__mulsi3>
 400af50:	1007883a 	mov	r3,r2
 400af54:	e0b7c117 	ldw	r2,-8444(fp)
 400af58:	1885883a 	add	r2,r3,r2
 400af5c:	1085883a 	add	r2,r2,r2
 400af60:	1085883a 	add	r2,r2,r2
 400af64:	e0f7c104 	addi	r3,fp,-8444
 400af68:	1885883a 	add	r2,r3,r2
 400af6c:	10879d04 	addi	r2,r2,7796
 400af70:	00fffcc4 	movi	r3,-13
 400af74:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400af78:	00c00044 	movi	r3,1
 400af7c:	008200b4 	movhi	r2,2050
 400af80:	10841804 	addi	r2,r2,4192
 400af84:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y-1][x-1] && gameboard[y][x]== gameboard[y-2][x-2]) )//(\\x)
 400af88:	e0b7c217 	ldw	r2,-8440(fp)
 400af8c:	01400504 	movi	r5,20
 400af90:	1009883a 	mov	r4,r2
 400af94:	40191000 	call	4019100 <__mulsi3>
 400af98:	1007883a 	mov	r3,r2
 400af9c:	e0b7c117 	ldw	r2,-8444(fp)
 400afa0:	1885883a 	add	r2,r3,r2
 400afa4:	1085883a 	add	r2,r2,r2
 400afa8:	1085883a 	add	r2,r2,r2
 400afac:	e0f7c104 	addi	r3,fp,-8444
 400afb0:	1885883a 	add	r2,r3,r2
 400afb4:	10879d04 	addi	r2,r2,7796
 400afb8:	14000017 	ldw	r16,0(r2)
 400afbc:	e0b7c217 	ldw	r2,-8440(fp)
 400afc0:	10ffffc4 	addi	r3,r2,-1
 400afc4:	e0b7c117 	ldw	r2,-8444(fp)
 400afc8:	147fffc4 	addi	r17,r2,-1
 400afcc:	01400504 	movi	r5,20
 400afd0:	1809883a 	mov	r4,r3
 400afd4:	40191000 	call	4019100 <__mulsi3>
 400afd8:	1445883a 	add	r2,r2,r17
 400afdc:	1085883a 	add	r2,r2,r2
 400afe0:	1085883a 	add	r2,r2,r2
 400afe4:	e0f7c104 	addi	r3,fp,-8444
 400afe8:	1885883a 	add	r2,r3,r2
 400afec:	10879d04 	addi	r2,r2,7796
 400aff0:	10800017 	ldw	r2,0(r2)
 400aff4:	80803e1e 	bne	r16,r2,400b0f0 <main+0xab1c>
 400aff8:	e0b7c217 	ldw	r2,-8440(fp)
 400affc:	01400504 	movi	r5,20
 400b000:	1009883a 	mov	r4,r2
 400b004:	40191000 	call	4019100 <__mulsi3>
 400b008:	1007883a 	mov	r3,r2
 400b00c:	e0b7c117 	ldw	r2,-8444(fp)
 400b010:	1885883a 	add	r2,r3,r2
 400b014:	1085883a 	add	r2,r2,r2
 400b018:	1085883a 	add	r2,r2,r2
 400b01c:	e0f7c104 	addi	r3,fp,-8444
 400b020:	1885883a 	add	r2,r3,r2
 400b024:	10879d04 	addi	r2,r2,7796
 400b028:	14000017 	ldw	r16,0(r2)
 400b02c:	e0b7c217 	ldw	r2,-8440(fp)
 400b030:	10ffff84 	addi	r3,r2,-2
 400b034:	e0b7c117 	ldw	r2,-8444(fp)
 400b038:	147fff84 	addi	r17,r2,-2
 400b03c:	01400504 	movi	r5,20
 400b040:	1809883a 	mov	r4,r3
 400b044:	40191000 	call	4019100 <__mulsi3>
 400b048:	1445883a 	add	r2,r2,r17
 400b04c:	1085883a 	add	r2,r2,r2
 400b050:	1085883a 	add	r2,r2,r2
 400b054:	e0f7c104 	addi	r3,fp,-8444
 400b058:	1885883a 	add	r2,r3,r2
 400b05c:	10879d04 	addi	r2,r2,7796
 400b060:	10800017 	ldw	r2,0(r2)
 400b064:	8080221e 	bne	r16,r2,400b0f0 <main+0xab1c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400b068:	e0b7c217 	ldw	r2,-8440(fp)
 400b06c:	10c00084 	addi	r3,r2,2
 400b070:	e0b95e04 	addi	r2,fp,-6792
 400b074:	180f883a 	mov	r7,r3
 400b078:	e1b7c117 	ldw	r6,-8444(fp)
 400b07c:	01403fc4 	movi	r5,255
 400b080:	1009883a 	mov	r4,r2
 400b084:	40003c80 	call	40003c8 <draw>
					draw(three, COLOR08_BLACK, x,y+2 );
 400b088:	e0b7c217 	ldw	r2,-8440(fp)
 400b08c:	10800084 	addi	r2,r2,2
 400b090:	100f883a 	mov	r7,r2
 400b094:	e1b7c117 	ldw	r6,-8444(fp)
 400b098:	000b883a 	mov	r5,zero
 400b09c:	010100f4 	movhi	r4,1027
 400b0a0:	2135aa04 	addi	r4,r4,-10584
 400b0a4:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-13;
 400b0a8:	e0b7c217 	ldw	r2,-8440(fp)
 400b0ac:	01400504 	movi	r5,20
 400b0b0:	1009883a 	mov	r4,r2
 400b0b4:	40191000 	call	4019100 <__mulsi3>
 400b0b8:	1007883a 	mov	r3,r2
 400b0bc:	e0b7c117 	ldw	r2,-8444(fp)
 400b0c0:	1885883a 	add	r2,r3,r2
 400b0c4:	1085883a 	add	r2,r2,r2
 400b0c8:	1085883a 	add	r2,r2,r2
 400b0cc:	e0f7c104 	addi	r3,fp,-8444
 400b0d0:	1885883a 	add	r2,r3,r2
 400b0d4:	10879d04 	addi	r2,r2,7796
 400b0d8:	00fffcc4 	movi	r3,-13
 400b0dc:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400b0e0:	00c00044 	movi	r3,1
 400b0e4:	008200b4 	movhi	r2,2050
 400b0e8:	10841804 	addi	r2,r2,4192
 400b0ec:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard[y][x]==3 && gameboard[y+1][x+1]==-13) || (gameboard[y][x]==3 && gameboard[y-1][x-1]==-13))//(\\x)
 400b0f0:	e0b7c217 	ldw	r2,-8440(fp)
 400b0f4:	01400504 	movi	r5,20
 400b0f8:	1009883a 	mov	r4,r2
 400b0fc:	40191000 	call	4019100 <__mulsi3>
 400b100:	1007883a 	mov	r3,r2
 400b104:	e0b7c117 	ldw	r2,-8444(fp)
 400b108:	1885883a 	add	r2,r3,r2
 400b10c:	1085883a 	add	r2,r2,r2
 400b110:	1085883a 	add	r2,r2,r2
 400b114:	e0f7c104 	addi	r3,fp,-8444
 400b118:	1885883a 	add	r2,r3,r2
 400b11c:	10879d04 	addi	r2,r2,7796
 400b120:	10800017 	ldw	r2,0(r2)
 400b124:	108000d8 	cmpnei	r2,r2,3
 400b128:	1000101e 	bne	r2,zero,400b16c <main+0xab98>
 400b12c:	e0b7c217 	ldw	r2,-8440(fp)
 400b130:	10c00044 	addi	r3,r2,1
 400b134:	e0b7c117 	ldw	r2,-8444(fp)
 400b138:	14000044 	addi	r16,r2,1
 400b13c:	01400504 	movi	r5,20
 400b140:	1809883a 	mov	r4,r3
 400b144:	40191000 	call	4019100 <__mulsi3>
 400b148:	1405883a 	add	r2,r2,r16
 400b14c:	1085883a 	add	r2,r2,r2
 400b150:	1085883a 	add	r2,r2,r2
 400b154:	e0f7c104 	addi	r3,fp,-8444
 400b158:	1885883a 	add	r2,r3,r2
 400b15c:	10879d04 	addi	r2,r2,7796
 400b160:	10800017 	ldw	r2,0(r2)
 400b164:	10bffce0 	cmpeqi	r2,r2,-13
 400b168:	10001f1e 	bne	r2,zero,400b1e8 <main+0xac14>
 400b16c:	e0b7c217 	ldw	r2,-8440(fp)
 400b170:	01400504 	movi	r5,20
 400b174:	1009883a 	mov	r4,r2
 400b178:	40191000 	call	4019100 <__mulsi3>
 400b17c:	1007883a 	mov	r3,r2
 400b180:	e0b7c117 	ldw	r2,-8444(fp)
 400b184:	1885883a 	add	r2,r3,r2
 400b188:	1085883a 	add	r2,r2,r2
 400b18c:	1085883a 	add	r2,r2,r2
 400b190:	e0f7c104 	addi	r3,fp,-8444
 400b194:	1885883a 	add	r2,r3,r2
 400b198:	10879d04 	addi	r2,r2,7796
 400b19c:	10800017 	ldw	r2,0(r2)
 400b1a0:	108000d8 	cmpnei	r2,r2,3
 400b1a4:	1000321e 	bne	r2,zero,400b270 <main+0xac9c>
 400b1a8:	e0b7c217 	ldw	r2,-8440(fp)
 400b1ac:	10ffffc4 	addi	r3,r2,-1
 400b1b0:	e0b7c117 	ldw	r2,-8444(fp)
 400b1b4:	143fffc4 	addi	r16,r2,-1
 400b1b8:	01400504 	movi	r5,20
 400b1bc:	1809883a 	mov	r4,r3
 400b1c0:	40191000 	call	4019100 <__mulsi3>
 400b1c4:	1405883a 	add	r2,r2,r16
 400b1c8:	1085883a 	add	r2,r2,r2
 400b1cc:	1085883a 	add	r2,r2,r2
 400b1d0:	e0f7c104 	addi	r3,fp,-8444
 400b1d4:	1885883a 	add	r2,r3,r2
 400b1d8:	10879d04 	addi	r2,r2,7796
 400b1dc:	10800017 	ldw	r2,0(r2)
 400b1e0:	10bffcd8 	cmpnei	r2,r2,-13
 400b1e4:	1000221e 	bne	r2,zero,400b270 <main+0xac9c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400b1e8:	e0b7c217 	ldw	r2,-8440(fp)
 400b1ec:	10c00084 	addi	r3,r2,2
 400b1f0:	e0b95e04 	addi	r2,fp,-6792
 400b1f4:	180f883a 	mov	r7,r3
 400b1f8:	e1b7c117 	ldw	r6,-8444(fp)
 400b1fc:	01403fc4 	movi	r5,255
 400b200:	1009883a 	mov	r4,r2
 400b204:	40003c80 	call	40003c8 <draw>
					draw(three, COLOR08_BLACK, x,y+2 );
 400b208:	e0b7c217 	ldw	r2,-8440(fp)
 400b20c:	10800084 	addi	r2,r2,2
 400b210:	100f883a 	mov	r7,r2
 400b214:	e1b7c117 	ldw	r6,-8444(fp)
 400b218:	000b883a 	mov	r5,zero
 400b21c:	010100f4 	movhi	r4,1027
 400b220:	2135aa04 	addi	r4,r4,-10584
 400b224:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-13;
 400b228:	e0b7c217 	ldw	r2,-8440(fp)
 400b22c:	01400504 	movi	r5,20
 400b230:	1009883a 	mov	r4,r2
 400b234:	40191000 	call	4019100 <__mulsi3>
 400b238:	1007883a 	mov	r3,r2
 400b23c:	e0b7c117 	ldw	r2,-8444(fp)
 400b240:	1885883a 	add	r2,r3,r2
 400b244:	1085883a 	add	r2,r2,r2
 400b248:	1085883a 	add	r2,r2,r2
 400b24c:	e0f7c104 	addi	r3,fp,-8444
 400b250:	1885883a 	add	r2,r3,r2
 400b254:	10879d04 	addi	r2,r2,7796
 400b258:	00fffcc4 	movi	r3,-13
 400b25c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400b260:	00c00044 	movi	r3,1
 400b264:	008200b4 	movhi	r2,2050
 400b268:	10841804 	addi	r2,r2,4192
 400b26c:	10c00035 	stwio	r3,0(r2)
				}
				if(gameboard[y][x]==3 && gameboard[y-1][x-1]==3 && gameboard[y-2][x-2]==-13)
 400b270:	e0b7c217 	ldw	r2,-8440(fp)
 400b274:	01400504 	movi	r5,20
 400b278:	1009883a 	mov	r4,r2
 400b27c:	40191000 	call	4019100 <__mulsi3>
 400b280:	1007883a 	mov	r3,r2
 400b284:	e0b7c117 	ldw	r2,-8444(fp)
 400b288:	1885883a 	add	r2,r3,r2
 400b28c:	1085883a 	add	r2,r2,r2
 400b290:	1085883a 	add	r2,r2,r2
 400b294:	e0f7c104 	addi	r3,fp,-8444
 400b298:	1885883a 	add	r2,r3,r2
 400b29c:	10879d04 	addi	r2,r2,7796
 400b2a0:	10800017 	ldw	r2,0(r2)
 400b2a4:	108000d8 	cmpnei	r2,r2,3
 400b2a8:	1000421e 	bne	r2,zero,400b3b4 <main+0xade0>
 400b2ac:	e0b7c217 	ldw	r2,-8440(fp)
 400b2b0:	10ffffc4 	addi	r3,r2,-1
 400b2b4:	e0b7c117 	ldw	r2,-8444(fp)
 400b2b8:	143fffc4 	addi	r16,r2,-1
 400b2bc:	01400504 	movi	r5,20
 400b2c0:	1809883a 	mov	r4,r3
 400b2c4:	40191000 	call	4019100 <__mulsi3>
 400b2c8:	1405883a 	add	r2,r2,r16
 400b2cc:	1085883a 	add	r2,r2,r2
 400b2d0:	1085883a 	add	r2,r2,r2
 400b2d4:	e0f7c104 	addi	r3,fp,-8444
 400b2d8:	1885883a 	add	r2,r3,r2
 400b2dc:	10879d04 	addi	r2,r2,7796
 400b2e0:	10800017 	ldw	r2,0(r2)
 400b2e4:	108000d8 	cmpnei	r2,r2,3
 400b2e8:	1000321e 	bne	r2,zero,400b3b4 <main+0xade0>
 400b2ec:	e0b7c217 	ldw	r2,-8440(fp)
 400b2f0:	10ffff84 	addi	r3,r2,-2
 400b2f4:	e0b7c117 	ldw	r2,-8444(fp)
 400b2f8:	143fff84 	addi	r16,r2,-2
 400b2fc:	01400504 	movi	r5,20
 400b300:	1809883a 	mov	r4,r3
 400b304:	40191000 	call	4019100 <__mulsi3>
 400b308:	1405883a 	add	r2,r2,r16
 400b30c:	1085883a 	add	r2,r2,r2
 400b310:	1085883a 	add	r2,r2,r2
 400b314:	e0f7c104 	addi	r3,fp,-8444
 400b318:	1885883a 	add	r2,r3,r2
 400b31c:	10879d04 	addi	r2,r2,7796
 400b320:	10800017 	ldw	r2,0(r2)
 400b324:	10bffcd8 	cmpnei	r2,r2,-13
 400b328:	1000221e 	bne	r2,zero,400b3b4 <main+0xade0>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400b32c:	e0b7c217 	ldw	r2,-8440(fp)
 400b330:	10c00084 	addi	r3,r2,2
 400b334:	e0b95e04 	addi	r2,fp,-6792
 400b338:	180f883a 	mov	r7,r3
 400b33c:	e1b7c117 	ldw	r6,-8444(fp)
 400b340:	01403fc4 	movi	r5,255
 400b344:	1009883a 	mov	r4,r2
 400b348:	40003c80 	call	40003c8 <draw>
					draw(three, COLOR08_BLACK, x,y+2 );
 400b34c:	e0b7c217 	ldw	r2,-8440(fp)
 400b350:	10800084 	addi	r2,r2,2
 400b354:	100f883a 	mov	r7,r2
 400b358:	e1b7c117 	ldw	r6,-8444(fp)
 400b35c:	000b883a 	mov	r5,zero
 400b360:	010100f4 	movhi	r4,1027
 400b364:	2135aa04 	addi	r4,r4,-10584
 400b368:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-13;
 400b36c:	e0b7c217 	ldw	r2,-8440(fp)
 400b370:	01400504 	movi	r5,20
 400b374:	1009883a 	mov	r4,r2
 400b378:	40191000 	call	4019100 <__mulsi3>
 400b37c:	1007883a 	mov	r3,r2
 400b380:	e0b7c117 	ldw	r2,-8444(fp)
 400b384:	1885883a 	add	r2,r3,r2
 400b388:	1085883a 	add	r2,r2,r2
 400b38c:	1085883a 	add	r2,r2,r2
 400b390:	e0f7c104 	addi	r3,fp,-8444
 400b394:	1885883a 	add	r2,r3,r2
 400b398:	10879d04 	addi	r2,r2,7796
 400b39c:	00fffcc4 	movi	r3,-13
 400b3a0:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400b3a4:	00c00044 	movi	r3,1
 400b3a8:	008200b4 	movhi	r2,2050
 400b3ac:	10841804 	addi	r2,r2,4192
 400b3b0:	10c00035 	stwio	r3,0(r2)
				}
				if(gameboard[y][x]==3 && gameboard[y+1][x+1]==3 && gameboard[y+2][x+2]==-13)
 400b3b4:	e0b7c217 	ldw	r2,-8440(fp)
 400b3b8:	01400504 	movi	r5,20
 400b3bc:	1009883a 	mov	r4,r2
 400b3c0:	40191000 	call	4019100 <__mulsi3>
 400b3c4:	1007883a 	mov	r3,r2
 400b3c8:	e0b7c117 	ldw	r2,-8444(fp)
 400b3cc:	1885883a 	add	r2,r3,r2
 400b3d0:	1085883a 	add	r2,r2,r2
 400b3d4:	1085883a 	add	r2,r2,r2
 400b3d8:	e0f7c104 	addi	r3,fp,-8444
 400b3dc:	1885883a 	add	r2,r3,r2
 400b3e0:	10879d04 	addi	r2,r2,7796
 400b3e4:	10800017 	ldw	r2,0(r2)
 400b3e8:	108000d8 	cmpnei	r2,r2,3
 400b3ec:	1000421e 	bne	r2,zero,400b4f8 <main+0xaf24>
 400b3f0:	e0b7c217 	ldw	r2,-8440(fp)
 400b3f4:	10c00044 	addi	r3,r2,1
 400b3f8:	e0b7c117 	ldw	r2,-8444(fp)
 400b3fc:	14000044 	addi	r16,r2,1
 400b400:	01400504 	movi	r5,20
 400b404:	1809883a 	mov	r4,r3
 400b408:	40191000 	call	4019100 <__mulsi3>
 400b40c:	1405883a 	add	r2,r2,r16
 400b410:	1085883a 	add	r2,r2,r2
 400b414:	1085883a 	add	r2,r2,r2
 400b418:	e0f7c104 	addi	r3,fp,-8444
 400b41c:	1885883a 	add	r2,r3,r2
 400b420:	10879d04 	addi	r2,r2,7796
 400b424:	10800017 	ldw	r2,0(r2)
 400b428:	108000d8 	cmpnei	r2,r2,3
 400b42c:	1000321e 	bne	r2,zero,400b4f8 <main+0xaf24>
 400b430:	e0b7c217 	ldw	r2,-8440(fp)
 400b434:	10c00084 	addi	r3,r2,2
 400b438:	e0b7c117 	ldw	r2,-8444(fp)
 400b43c:	14000084 	addi	r16,r2,2
 400b440:	01400504 	movi	r5,20
 400b444:	1809883a 	mov	r4,r3
 400b448:	40191000 	call	4019100 <__mulsi3>
 400b44c:	1405883a 	add	r2,r2,r16
 400b450:	1085883a 	add	r2,r2,r2
 400b454:	1085883a 	add	r2,r2,r2
 400b458:	e0f7c104 	addi	r3,fp,-8444
 400b45c:	1885883a 	add	r2,r3,r2
 400b460:	10879d04 	addi	r2,r2,7796
 400b464:	10800017 	ldw	r2,0(r2)
 400b468:	10bffcd8 	cmpnei	r2,r2,-13
 400b46c:	1000221e 	bne	r2,zero,400b4f8 <main+0xaf24>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400b470:	e0b7c217 	ldw	r2,-8440(fp)
 400b474:	10c00084 	addi	r3,r2,2
 400b478:	e0b95e04 	addi	r2,fp,-6792
 400b47c:	180f883a 	mov	r7,r3
 400b480:	e1b7c117 	ldw	r6,-8444(fp)
 400b484:	01403fc4 	movi	r5,255
 400b488:	1009883a 	mov	r4,r2
 400b48c:	40003c80 	call	40003c8 <draw>
					draw(three, COLOR08_BLACK, x,y+2 );
 400b490:	e0b7c217 	ldw	r2,-8440(fp)
 400b494:	10800084 	addi	r2,r2,2
 400b498:	100f883a 	mov	r7,r2
 400b49c:	e1b7c117 	ldw	r6,-8444(fp)
 400b4a0:	000b883a 	mov	r5,zero
 400b4a4:	010100f4 	movhi	r4,1027
 400b4a8:	2135aa04 	addi	r4,r4,-10584
 400b4ac:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-13;
 400b4b0:	e0b7c217 	ldw	r2,-8440(fp)
 400b4b4:	01400504 	movi	r5,20
 400b4b8:	1009883a 	mov	r4,r2
 400b4bc:	40191000 	call	4019100 <__mulsi3>
 400b4c0:	1007883a 	mov	r3,r2
 400b4c4:	e0b7c117 	ldw	r2,-8444(fp)
 400b4c8:	1885883a 	add	r2,r3,r2
 400b4cc:	1085883a 	add	r2,r2,r2
 400b4d0:	1085883a 	add	r2,r2,r2
 400b4d4:	e0f7c104 	addi	r3,fp,-8444
 400b4d8:	1885883a 	add	r2,r3,r2
 400b4dc:	10879d04 	addi	r2,r2,7796
 400b4e0:	00fffcc4 	movi	r3,-13
 400b4e4:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400b4e8:	00c00044 	movi	r3,1
 400b4ec:	008200b4 	movhi	r2,2050
 400b4f0:	10841804 	addi	r2,r2,4192
 400b4f4:	10c00035 	stwio	r3,0(r2)
				}
				//////////////////////////////////////////////////////////

				//diagonal (/)3
				if (gameboard [y][x]==gameboard [y+1][x-1] && gameboard[y][x]== gameboard[y-1][x+1])//(/x/)
 400b4f8:	e0b7c217 	ldw	r2,-8440(fp)
 400b4fc:	01400504 	movi	r5,20
 400b500:	1009883a 	mov	r4,r2
 400b504:	40191000 	call	4019100 <__mulsi3>
 400b508:	1007883a 	mov	r3,r2
 400b50c:	e0b7c117 	ldw	r2,-8444(fp)
 400b510:	1885883a 	add	r2,r3,r2
 400b514:	1085883a 	add	r2,r2,r2
 400b518:	1085883a 	add	r2,r2,r2
 400b51c:	e0f7c104 	addi	r3,fp,-8444
 400b520:	1885883a 	add	r2,r3,r2
 400b524:	10879d04 	addi	r2,r2,7796
 400b528:	14000017 	ldw	r16,0(r2)
 400b52c:	e0b7c217 	ldw	r2,-8440(fp)
 400b530:	10c00044 	addi	r3,r2,1
 400b534:	e0b7c117 	ldw	r2,-8444(fp)
 400b538:	147fffc4 	addi	r17,r2,-1
 400b53c:	01400504 	movi	r5,20
 400b540:	1809883a 	mov	r4,r3
 400b544:	40191000 	call	4019100 <__mulsi3>
 400b548:	1445883a 	add	r2,r2,r17
 400b54c:	1085883a 	add	r2,r2,r2
 400b550:	1085883a 	add	r2,r2,r2
 400b554:	e0f7c104 	addi	r3,fp,-8444
 400b558:	1885883a 	add	r2,r3,r2
 400b55c:	10879d04 	addi	r2,r2,7796
 400b560:	10800017 	ldw	r2,0(r2)
 400b564:	80803e1e 	bne	r16,r2,400b660 <main+0xb08c>
 400b568:	e0b7c217 	ldw	r2,-8440(fp)
 400b56c:	01400504 	movi	r5,20
 400b570:	1009883a 	mov	r4,r2
 400b574:	40191000 	call	4019100 <__mulsi3>
 400b578:	1007883a 	mov	r3,r2
 400b57c:	e0b7c117 	ldw	r2,-8444(fp)
 400b580:	1885883a 	add	r2,r3,r2
 400b584:	1085883a 	add	r2,r2,r2
 400b588:	1085883a 	add	r2,r2,r2
 400b58c:	e0f7c104 	addi	r3,fp,-8444
 400b590:	1885883a 	add	r2,r3,r2
 400b594:	10879d04 	addi	r2,r2,7796
 400b598:	14000017 	ldw	r16,0(r2)
 400b59c:	e0b7c217 	ldw	r2,-8440(fp)
 400b5a0:	10ffffc4 	addi	r3,r2,-1
 400b5a4:	e0b7c117 	ldw	r2,-8444(fp)
 400b5a8:	14400044 	addi	r17,r2,1
 400b5ac:	01400504 	movi	r5,20
 400b5b0:	1809883a 	mov	r4,r3
 400b5b4:	40191000 	call	4019100 <__mulsi3>
 400b5b8:	1445883a 	add	r2,r2,r17
 400b5bc:	1085883a 	add	r2,r2,r2
 400b5c0:	1085883a 	add	r2,r2,r2
 400b5c4:	e0f7c104 	addi	r3,fp,-8444
 400b5c8:	1885883a 	add	r2,r3,r2
 400b5cc:	10879d04 	addi	r2,r2,7796
 400b5d0:	10800017 	ldw	r2,0(r2)
 400b5d4:	8080221e 	bne	r16,r2,400b660 <main+0xb08c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400b5d8:	e0b7c217 	ldw	r2,-8440(fp)
 400b5dc:	10c00084 	addi	r3,r2,2
 400b5e0:	e0b95e04 	addi	r2,fp,-6792
 400b5e4:	180f883a 	mov	r7,r3
 400b5e8:	e1b7c117 	ldw	r6,-8444(fp)
 400b5ec:	01403fc4 	movi	r5,255
 400b5f0:	1009883a 	mov	r4,r2
 400b5f4:	40003c80 	call	40003c8 <draw>
					draw(three, COLOR08_BLACK, x,y+2 );
 400b5f8:	e0b7c217 	ldw	r2,-8440(fp)
 400b5fc:	10800084 	addi	r2,r2,2
 400b600:	100f883a 	mov	r7,r2
 400b604:	e1b7c117 	ldw	r6,-8444(fp)
 400b608:	000b883a 	mov	r5,zero
 400b60c:	010100f4 	movhi	r4,1027
 400b610:	2135aa04 	addi	r4,r4,-10584
 400b614:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-13;
 400b618:	e0b7c217 	ldw	r2,-8440(fp)
 400b61c:	01400504 	movi	r5,20
 400b620:	1009883a 	mov	r4,r2
 400b624:	40191000 	call	4019100 <__mulsi3>
 400b628:	1007883a 	mov	r3,r2
 400b62c:	e0b7c117 	ldw	r2,-8444(fp)
 400b630:	1885883a 	add	r2,r3,r2
 400b634:	1085883a 	add	r2,r2,r2
 400b638:	1085883a 	add	r2,r2,r2
 400b63c:	e0f7c104 	addi	r3,fp,-8444
 400b640:	1885883a 	add	r2,r3,r2
 400b644:	10879d04 	addi	r2,r2,7796
 400b648:	00fffcc4 	movi	r3,-13
 400b64c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400b650:	00c00044 	movi	r3,1
 400b654:	008200b4 	movhi	r2,2050
 400b658:	10841804 	addi	r2,r2,4192
 400b65c:	10c00035 	stwio	r3,0(r2)

				}
				if (gameboard [y][x]==gameboard [y-1][x+1] && gameboard[y][x]== gameboard[y-2][x+2])//(x//)
 400b660:	e0b7c217 	ldw	r2,-8440(fp)
 400b664:	01400504 	movi	r5,20
 400b668:	1009883a 	mov	r4,r2
 400b66c:	40191000 	call	4019100 <__mulsi3>
 400b670:	1007883a 	mov	r3,r2
 400b674:	e0b7c117 	ldw	r2,-8444(fp)
 400b678:	1885883a 	add	r2,r3,r2
 400b67c:	1085883a 	add	r2,r2,r2
 400b680:	1085883a 	add	r2,r2,r2
 400b684:	e0f7c104 	addi	r3,fp,-8444
 400b688:	1885883a 	add	r2,r3,r2
 400b68c:	10879d04 	addi	r2,r2,7796
 400b690:	14000017 	ldw	r16,0(r2)
 400b694:	e0b7c217 	ldw	r2,-8440(fp)
 400b698:	10ffffc4 	addi	r3,r2,-1
 400b69c:	e0b7c117 	ldw	r2,-8444(fp)
 400b6a0:	14400044 	addi	r17,r2,1
 400b6a4:	01400504 	movi	r5,20
 400b6a8:	1809883a 	mov	r4,r3
 400b6ac:	40191000 	call	4019100 <__mulsi3>
 400b6b0:	1445883a 	add	r2,r2,r17
 400b6b4:	1085883a 	add	r2,r2,r2
 400b6b8:	1085883a 	add	r2,r2,r2
 400b6bc:	e0f7c104 	addi	r3,fp,-8444
 400b6c0:	1885883a 	add	r2,r3,r2
 400b6c4:	10879d04 	addi	r2,r2,7796
 400b6c8:	10800017 	ldw	r2,0(r2)
 400b6cc:	80803e1e 	bne	r16,r2,400b7c8 <main+0xb1f4>
 400b6d0:	e0b7c217 	ldw	r2,-8440(fp)
 400b6d4:	01400504 	movi	r5,20
 400b6d8:	1009883a 	mov	r4,r2
 400b6dc:	40191000 	call	4019100 <__mulsi3>
 400b6e0:	1007883a 	mov	r3,r2
 400b6e4:	e0b7c117 	ldw	r2,-8444(fp)
 400b6e8:	1885883a 	add	r2,r3,r2
 400b6ec:	1085883a 	add	r2,r2,r2
 400b6f0:	1085883a 	add	r2,r2,r2
 400b6f4:	e0f7c104 	addi	r3,fp,-8444
 400b6f8:	1885883a 	add	r2,r3,r2
 400b6fc:	10879d04 	addi	r2,r2,7796
 400b700:	14000017 	ldw	r16,0(r2)
 400b704:	e0b7c217 	ldw	r2,-8440(fp)
 400b708:	10ffff84 	addi	r3,r2,-2
 400b70c:	e0b7c117 	ldw	r2,-8444(fp)
 400b710:	14400084 	addi	r17,r2,2
 400b714:	01400504 	movi	r5,20
 400b718:	1809883a 	mov	r4,r3
 400b71c:	40191000 	call	4019100 <__mulsi3>
 400b720:	1445883a 	add	r2,r2,r17
 400b724:	1085883a 	add	r2,r2,r2
 400b728:	1085883a 	add	r2,r2,r2
 400b72c:	e0f7c104 	addi	r3,fp,-8444
 400b730:	1885883a 	add	r2,r3,r2
 400b734:	10879d04 	addi	r2,r2,7796
 400b738:	10800017 	ldw	r2,0(r2)
 400b73c:	8080221e 	bne	r16,r2,400b7c8 <main+0xb1f4>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400b740:	e0b7c217 	ldw	r2,-8440(fp)
 400b744:	10c00084 	addi	r3,r2,2
 400b748:	e0b95e04 	addi	r2,fp,-6792
 400b74c:	180f883a 	mov	r7,r3
 400b750:	e1b7c117 	ldw	r6,-8444(fp)
 400b754:	01403fc4 	movi	r5,255
 400b758:	1009883a 	mov	r4,r2
 400b75c:	40003c80 	call	40003c8 <draw>
					draw(three, COLOR08_BLACK, x,y+2 );
 400b760:	e0b7c217 	ldw	r2,-8440(fp)
 400b764:	10800084 	addi	r2,r2,2
 400b768:	100f883a 	mov	r7,r2
 400b76c:	e1b7c117 	ldw	r6,-8444(fp)
 400b770:	000b883a 	mov	r5,zero
 400b774:	010100f4 	movhi	r4,1027
 400b778:	2135aa04 	addi	r4,r4,-10584
 400b77c:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-13;
 400b780:	e0b7c217 	ldw	r2,-8440(fp)
 400b784:	01400504 	movi	r5,20
 400b788:	1009883a 	mov	r4,r2
 400b78c:	40191000 	call	4019100 <__mulsi3>
 400b790:	1007883a 	mov	r3,r2
 400b794:	e0b7c117 	ldw	r2,-8444(fp)
 400b798:	1885883a 	add	r2,r3,r2
 400b79c:	1085883a 	add	r2,r2,r2
 400b7a0:	1085883a 	add	r2,r2,r2
 400b7a4:	e0f7c104 	addi	r3,fp,-8444
 400b7a8:	1885883a 	add	r2,r3,r2
 400b7ac:	10879d04 	addi	r2,r2,7796
 400b7b0:	00fffcc4 	movi	r3,-13
 400b7b4:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400b7b8:	00c00044 	movi	r3,1
 400b7bc:	008200b4 	movhi	r2,2050
 400b7c0:	10841804 	addi	r2,r2,4192
 400b7c4:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard [y][x]==3 && gameboard [y+1][x-1]==-13) || (gameboard [y][x]==3 && gameboard [y-1][x+1]==-13))//(x//)
 400b7c8:	e0b7c217 	ldw	r2,-8440(fp)
 400b7cc:	01400504 	movi	r5,20
 400b7d0:	1009883a 	mov	r4,r2
 400b7d4:	40191000 	call	4019100 <__mulsi3>
 400b7d8:	1007883a 	mov	r3,r2
 400b7dc:	e0b7c117 	ldw	r2,-8444(fp)
 400b7e0:	1885883a 	add	r2,r3,r2
 400b7e4:	1085883a 	add	r2,r2,r2
 400b7e8:	1085883a 	add	r2,r2,r2
 400b7ec:	e0f7c104 	addi	r3,fp,-8444
 400b7f0:	1885883a 	add	r2,r3,r2
 400b7f4:	10879d04 	addi	r2,r2,7796
 400b7f8:	10800017 	ldw	r2,0(r2)
 400b7fc:	108000d8 	cmpnei	r2,r2,3
 400b800:	1000101e 	bne	r2,zero,400b844 <main+0xb270>
 400b804:	e0b7c217 	ldw	r2,-8440(fp)
 400b808:	10c00044 	addi	r3,r2,1
 400b80c:	e0b7c117 	ldw	r2,-8444(fp)
 400b810:	143fffc4 	addi	r16,r2,-1
 400b814:	01400504 	movi	r5,20
 400b818:	1809883a 	mov	r4,r3
 400b81c:	40191000 	call	4019100 <__mulsi3>
 400b820:	1405883a 	add	r2,r2,r16
 400b824:	1085883a 	add	r2,r2,r2
 400b828:	1085883a 	add	r2,r2,r2
 400b82c:	e0f7c104 	addi	r3,fp,-8444
 400b830:	1885883a 	add	r2,r3,r2
 400b834:	10879d04 	addi	r2,r2,7796
 400b838:	10800017 	ldw	r2,0(r2)
 400b83c:	10bffce0 	cmpeqi	r2,r2,-13
 400b840:	10001f1e 	bne	r2,zero,400b8c0 <main+0xb2ec>
 400b844:	e0b7c217 	ldw	r2,-8440(fp)
 400b848:	01400504 	movi	r5,20
 400b84c:	1009883a 	mov	r4,r2
 400b850:	40191000 	call	4019100 <__mulsi3>
 400b854:	1007883a 	mov	r3,r2
 400b858:	e0b7c117 	ldw	r2,-8444(fp)
 400b85c:	1885883a 	add	r2,r3,r2
 400b860:	1085883a 	add	r2,r2,r2
 400b864:	1085883a 	add	r2,r2,r2
 400b868:	e0f7c104 	addi	r3,fp,-8444
 400b86c:	1885883a 	add	r2,r3,r2
 400b870:	10879d04 	addi	r2,r2,7796
 400b874:	10800017 	ldw	r2,0(r2)
 400b878:	108000d8 	cmpnei	r2,r2,3
 400b87c:	1000321e 	bne	r2,zero,400b948 <main+0xb374>
 400b880:	e0b7c217 	ldw	r2,-8440(fp)
 400b884:	10ffffc4 	addi	r3,r2,-1
 400b888:	e0b7c117 	ldw	r2,-8444(fp)
 400b88c:	14000044 	addi	r16,r2,1
 400b890:	01400504 	movi	r5,20
 400b894:	1809883a 	mov	r4,r3
 400b898:	40191000 	call	4019100 <__mulsi3>
 400b89c:	1405883a 	add	r2,r2,r16
 400b8a0:	1085883a 	add	r2,r2,r2
 400b8a4:	1085883a 	add	r2,r2,r2
 400b8a8:	e0f7c104 	addi	r3,fp,-8444
 400b8ac:	1885883a 	add	r2,r3,r2
 400b8b0:	10879d04 	addi	r2,r2,7796
 400b8b4:	10800017 	ldw	r2,0(r2)
 400b8b8:	10bffcd8 	cmpnei	r2,r2,-13
 400b8bc:	1000221e 	bne	r2,zero,400b948 <main+0xb374>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400b8c0:	e0b7c217 	ldw	r2,-8440(fp)
 400b8c4:	10c00084 	addi	r3,r2,2
 400b8c8:	e0b95e04 	addi	r2,fp,-6792
 400b8cc:	180f883a 	mov	r7,r3
 400b8d0:	e1b7c117 	ldw	r6,-8444(fp)
 400b8d4:	01403fc4 	movi	r5,255
 400b8d8:	1009883a 	mov	r4,r2
 400b8dc:	40003c80 	call	40003c8 <draw>
					draw(three, COLOR08_BLACK, x,y+2 );
 400b8e0:	e0b7c217 	ldw	r2,-8440(fp)
 400b8e4:	10800084 	addi	r2,r2,2
 400b8e8:	100f883a 	mov	r7,r2
 400b8ec:	e1b7c117 	ldw	r6,-8444(fp)
 400b8f0:	000b883a 	mov	r5,zero
 400b8f4:	010100f4 	movhi	r4,1027
 400b8f8:	2135aa04 	addi	r4,r4,-10584
 400b8fc:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-13;
 400b900:	e0b7c217 	ldw	r2,-8440(fp)
 400b904:	01400504 	movi	r5,20
 400b908:	1009883a 	mov	r4,r2
 400b90c:	40191000 	call	4019100 <__mulsi3>
 400b910:	1007883a 	mov	r3,r2
 400b914:	e0b7c117 	ldw	r2,-8444(fp)
 400b918:	1885883a 	add	r2,r3,r2
 400b91c:	1085883a 	add	r2,r2,r2
 400b920:	1085883a 	add	r2,r2,r2
 400b924:	e0f7c104 	addi	r3,fp,-8444
 400b928:	1885883a 	add	r2,r3,r2
 400b92c:	10879d04 	addi	r2,r2,7796
 400b930:	00fffcc4 	movi	r3,-13
 400b934:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400b938:	00c00044 	movi	r3,1
 400b93c:	008200b4 	movhi	r2,2050
 400b940:	10841804 	addi	r2,r2,4192
 400b944:	10c00035 	stwio	r3,0(r2)
				}
				if(gameboard[y][x]==3 && gameboard[y+1][x-1]==3 && gameboard[y+2][x-2]==-13)
 400b948:	e0b7c217 	ldw	r2,-8440(fp)
 400b94c:	01400504 	movi	r5,20
 400b950:	1009883a 	mov	r4,r2
 400b954:	40191000 	call	4019100 <__mulsi3>
 400b958:	1007883a 	mov	r3,r2
 400b95c:	e0b7c117 	ldw	r2,-8444(fp)
 400b960:	1885883a 	add	r2,r3,r2
 400b964:	1085883a 	add	r2,r2,r2
 400b968:	1085883a 	add	r2,r2,r2
 400b96c:	e0f7c104 	addi	r3,fp,-8444
 400b970:	1885883a 	add	r2,r3,r2
 400b974:	10879d04 	addi	r2,r2,7796
 400b978:	10800017 	ldw	r2,0(r2)
 400b97c:	108000d8 	cmpnei	r2,r2,3
 400b980:	1000421e 	bne	r2,zero,400ba8c <main+0xb4b8>
 400b984:	e0b7c217 	ldw	r2,-8440(fp)
 400b988:	10c00044 	addi	r3,r2,1
 400b98c:	e0b7c117 	ldw	r2,-8444(fp)
 400b990:	143fffc4 	addi	r16,r2,-1
 400b994:	01400504 	movi	r5,20
 400b998:	1809883a 	mov	r4,r3
 400b99c:	40191000 	call	4019100 <__mulsi3>
 400b9a0:	1405883a 	add	r2,r2,r16
 400b9a4:	1085883a 	add	r2,r2,r2
 400b9a8:	1085883a 	add	r2,r2,r2
 400b9ac:	e0f7c104 	addi	r3,fp,-8444
 400b9b0:	1885883a 	add	r2,r3,r2
 400b9b4:	10879d04 	addi	r2,r2,7796
 400b9b8:	10800017 	ldw	r2,0(r2)
 400b9bc:	108000d8 	cmpnei	r2,r2,3
 400b9c0:	1000321e 	bne	r2,zero,400ba8c <main+0xb4b8>
 400b9c4:	e0b7c217 	ldw	r2,-8440(fp)
 400b9c8:	10c00084 	addi	r3,r2,2
 400b9cc:	e0b7c117 	ldw	r2,-8444(fp)
 400b9d0:	143fff84 	addi	r16,r2,-2
 400b9d4:	01400504 	movi	r5,20
 400b9d8:	1809883a 	mov	r4,r3
 400b9dc:	40191000 	call	4019100 <__mulsi3>
 400b9e0:	1405883a 	add	r2,r2,r16
 400b9e4:	1085883a 	add	r2,r2,r2
 400b9e8:	1085883a 	add	r2,r2,r2
 400b9ec:	e0f7c104 	addi	r3,fp,-8444
 400b9f0:	1885883a 	add	r2,r3,r2
 400b9f4:	10879d04 	addi	r2,r2,7796
 400b9f8:	10800017 	ldw	r2,0(r2)
 400b9fc:	10bffcd8 	cmpnei	r2,r2,-13
 400ba00:	1000221e 	bne	r2,zero,400ba8c <main+0xb4b8>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400ba04:	e0b7c217 	ldw	r2,-8440(fp)
 400ba08:	10c00084 	addi	r3,r2,2
 400ba0c:	e0b95e04 	addi	r2,fp,-6792
 400ba10:	180f883a 	mov	r7,r3
 400ba14:	e1b7c117 	ldw	r6,-8444(fp)
 400ba18:	01403fc4 	movi	r5,255
 400ba1c:	1009883a 	mov	r4,r2
 400ba20:	40003c80 	call	40003c8 <draw>
					draw(three, COLOR08_BLACK, x,y+2 );
 400ba24:	e0b7c217 	ldw	r2,-8440(fp)
 400ba28:	10800084 	addi	r2,r2,2
 400ba2c:	100f883a 	mov	r7,r2
 400ba30:	e1b7c117 	ldw	r6,-8444(fp)
 400ba34:	000b883a 	mov	r5,zero
 400ba38:	010100f4 	movhi	r4,1027
 400ba3c:	2135aa04 	addi	r4,r4,-10584
 400ba40:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-13;
 400ba44:	e0b7c217 	ldw	r2,-8440(fp)
 400ba48:	01400504 	movi	r5,20
 400ba4c:	1009883a 	mov	r4,r2
 400ba50:	40191000 	call	4019100 <__mulsi3>
 400ba54:	1007883a 	mov	r3,r2
 400ba58:	e0b7c117 	ldw	r2,-8444(fp)
 400ba5c:	1885883a 	add	r2,r3,r2
 400ba60:	1085883a 	add	r2,r2,r2
 400ba64:	1085883a 	add	r2,r2,r2
 400ba68:	e0f7c104 	addi	r3,fp,-8444
 400ba6c:	1885883a 	add	r2,r3,r2
 400ba70:	10879d04 	addi	r2,r2,7796
 400ba74:	00fffcc4 	movi	r3,-13
 400ba78:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400ba7c:	00c00044 	movi	r3,1
 400ba80:	008200b4 	movhi	r2,2050
 400ba84:	10841804 	addi	r2,r2,4192
 400ba88:	10c00035 	stwio	r3,0(r2)
				}
				if(gameboard[y][x]==3 && gameboard[y-1][x+1]==3 && gameboard[y-2][x+2]==-13)
 400ba8c:	e0b7c217 	ldw	r2,-8440(fp)
 400ba90:	01400504 	movi	r5,20
 400ba94:	1009883a 	mov	r4,r2
 400ba98:	40191000 	call	4019100 <__mulsi3>
 400ba9c:	1007883a 	mov	r3,r2
 400baa0:	e0b7c117 	ldw	r2,-8444(fp)
 400baa4:	1885883a 	add	r2,r3,r2
 400baa8:	1085883a 	add	r2,r2,r2
 400baac:	1085883a 	add	r2,r2,r2
 400bab0:	e0f7c104 	addi	r3,fp,-8444
 400bab4:	1885883a 	add	r2,r3,r2
 400bab8:	10879d04 	addi	r2,r2,7796
 400babc:	10800017 	ldw	r2,0(r2)
 400bac0:	108000d8 	cmpnei	r2,r2,3
 400bac4:	1000421e 	bne	r2,zero,400bbd0 <main+0xb5fc>
 400bac8:	e0b7c217 	ldw	r2,-8440(fp)
 400bacc:	10ffffc4 	addi	r3,r2,-1
 400bad0:	e0b7c117 	ldw	r2,-8444(fp)
 400bad4:	14000044 	addi	r16,r2,1
 400bad8:	01400504 	movi	r5,20
 400badc:	1809883a 	mov	r4,r3
 400bae0:	40191000 	call	4019100 <__mulsi3>
 400bae4:	1405883a 	add	r2,r2,r16
 400bae8:	1085883a 	add	r2,r2,r2
 400baec:	1085883a 	add	r2,r2,r2
 400baf0:	e0f7c104 	addi	r3,fp,-8444
 400baf4:	1885883a 	add	r2,r3,r2
 400baf8:	10879d04 	addi	r2,r2,7796
 400bafc:	10800017 	ldw	r2,0(r2)
 400bb00:	108000d8 	cmpnei	r2,r2,3
 400bb04:	1000321e 	bne	r2,zero,400bbd0 <main+0xb5fc>
 400bb08:	e0b7c217 	ldw	r2,-8440(fp)
 400bb0c:	10ffff84 	addi	r3,r2,-2
 400bb10:	e0b7c117 	ldw	r2,-8444(fp)
 400bb14:	14000084 	addi	r16,r2,2
 400bb18:	01400504 	movi	r5,20
 400bb1c:	1809883a 	mov	r4,r3
 400bb20:	40191000 	call	4019100 <__mulsi3>
 400bb24:	1405883a 	add	r2,r2,r16
 400bb28:	1085883a 	add	r2,r2,r2
 400bb2c:	1085883a 	add	r2,r2,r2
 400bb30:	e0f7c104 	addi	r3,fp,-8444
 400bb34:	1885883a 	add	r2,r3,r2
 400bb38:	10879d04 	addi	r2,r2,7796
 400bb3c:	10800017 	ldw	r2,0(r2)
 400bb40:	10bffcd8 	cmpnei	r2,r2,-13
 400bb44:	1000221e 	bne	r2,zero,400bbd0 <main+0xb5fc>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400bb48:	e0b7c217 	ldw	r2,-8440(fp)
 400bb4c:	10c00084 	addi	r3,r2,2
 400bb50:	e0b95e04 	addi	r2,fp,-6792
 400bb54:	180f883a 	mov	r7,r3
 400bb58:	e1b7c117 	ldw	r6,-8444(fp)
 400bb5c:	01403fc4 	movi	r5,255
 400bb60:	1009883a 	mov	r4,r2
 400bb64:	40003c80 	call	40003c8 <draw>
					draw(three, COLOR08_BLACK, x,y+2 );
 400bb68:	e0b7c217 	ldw	r2,-8440(fp)
 400bb6c:	10800084 	addi	r2,r2,2
 400bb70:	100f883a 	mov	r7,r2
 400bb74:	e1b7c117 	ldw	r6,-8444(fp)
 400bb78:	000b883a 	mov	r5,zero
 400bb7c:	010100f4 	movhi	r4,1027
 400bb80:	2135aa04 	addi	r4,r4,-10584
 400bb84:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-13;
 400bb88:	e0b7c217 	ldw	r2,-8440(fp)
 400bb8c:	01400504 	movi	r5,20
 400bb90:	1009883a 	mov	r4,r2
 400bb94:	40191000 	call	4019100 <__mulsi3>
 400bb98:	1007883a 	mov	r3,r2
 400bb9c:	e0b7c117 	ldw	r2,-8444(fp)
 400bba0:	1885883a 	add	r2,r3,r2
 400bba4:	1085883a 	add	r2,r2,r2
 400bba8:	1085883a 	add	r2,r2,r2
 400bbac:	e0f7c104 	addi	r3,fp,-8444
 400bbb0:	1885883a 	add	r2,r3,r2
 400bbb4:	10879d04 	addi	r2,r2,7796
 400bbb8:	00fffcc4 	movi	r3,-13
 400bbbc:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400bbc0:	00c00044 	movi	r3,1
 400bbc4:	008200b4 	movhi	r2,2050
 400bbc8:	10841804 	addi	r2,r2,4192
 400bbcc:	10c00035 	stwio	r3,0(r2)
				}
			}

			if(gameboard[y][x]==4)//4
 400bbd0:	e0b7c217 	ldw	r2,-8440(fp)
 400bbd4:	01400504 	movi	r5,20
 400bbd8:	1009883a 	mov	r4,r2
 400bbdc:	40191000 	call	4019100 <__mulsi3>
 400bbe0:	1007883a 	mov	r3,r2
 400bbe4:	e0b7c117 	ldw	r2,-8444(fp)
 400bbe8:	1885883a 	add	r2,r3,r2
 400bbec:	1085883a 	add	r2,r2,r2
 400bbf0:	1085883a 	add	r2,r2,r2
 400bbf4:	e0f7c104 	addi	r3,fp,-8444
 400bbf8:	1885883a 	add	r2,r3,r2
 400bbfc:	10879d04 	addi	r2,r2,7796
 400bc00:	10800017 	ldw	r2,0(r2)
 400bc04:	10800118 	cmpnei	r2,r2,4
 400bc08:	1007351e 	bne	r2,zero,400d8e0 <main+0xd30c>
			{
				//horizontal4
				if ((gameboard [y][x]==gameboard [y][x+1] && gameboard [y][x+1]== gameboard [y][x+2]) || (gameboard[y][x]==4 && gameboard[y][x+1]==-14) )//(0,0,0)
 400bc0c:	e0b7c217 	ldw	r2,-8440(fp)
 400bc10:	01400504 	movi	r5,20
 400bc14:	1009883a 	mov	r4,r2
 400bc18:	40191000 	call	4019100 <__mulsi3>
 400bc1c:	1007883a 	mov	r3,r2
 400bc20:	e0b7c117 	ldw	r2,-8444(fp)
 400bc24:	1885883a 	add	r2,r3,r2
 400bc28:	1085883a 	add	r2,r2,r2
 400bc2c:	1085883a 	add	r2,r2,r2
 400bc30:	e0f7c104 	addi	r3,fp,-8444
 400bc34:	1885883a 	add	r2,r3,r2
 400bc38:	10879d04 	addi	r2,r2,7796
 400bc3c:	14000017 	ldw	r16,0(r2)
 400bc40:	e0b7c117 	ldw	r2,-8444(fp)
 400bc44:	14400044 	addi	r17,r2,1
 400bc48:	e0b7c217 	ldw	r2,-8440(fp)
 400bc4c:	01400504 	movi	r5,20
 400bc50:	1009883a 	mov	r4,r2
 400bc54:	40191000 	call	4019100 <__mulsi3>
 400bc58:	1445883a 	add	r2,r2,r17
 400bc5c:	1085883a 	add	r2,r2,r2
 400bc60:	1085883a 	add	r2,r2,r2
 400bc64:	e0f7c104 	addi	r3,fp,-8444
 400bc68:	1885883a 	add	r2,r3,r2
 400bc6c:	10879d04 	addi	r2,r2,7796
 400bc70:	10800017 	ldw	r2,0(r2)
 400bc74:	80801b1e 	bne	r16,r2,400bce4 <main+0xb710>
 400bc78:	e0b7c117 	ldw	r2,-8444(fp)
 400bc7c:	14000044 	addi	r16,r2,1
 400bc80:	e0b7c217 	ldw	r2,-8440(fp)
 400bc84:	01400504 	movi	r5,20
 400bc88:	1009883a 	mov	r4,r2
 400bc8c:	40191000 	call	4019100 <__mulsi3>
 400bc90:	1405883a 	add	r2,r2,r16
 400bc94:	1085883a 	add	r2,r2,r2
 400bc98:	1085883a 	add	r2,r2,r2
 400bc9c:	e0f7c104 	addi	r3,fp,-8444
 400bca0:	1885883a 	add	r2,r3,r2
 400bca4:	10879d04 	addi	r2,r2,7796
 400bca8:	14000017 	ldw	r16,0(r2)
 400bcac:	e0b7c117 	ldw	r2,-8444(fp)
 400bcb0:	14400084 	addi	r17,r2,2
 400bcb4:	e0b7c217 	ldw	r2,-8440(fp)
 400bcb8:	01400504 	movi	r5,20
 400bcbc:	1009883a 	mov	r4,r2
 400bcc0:	40191000 	call	4019100 <__mulsi3>
 400bcc4:	1445883a 	add	r2,r2,r17
 400bcc8:	1085883a 	add	r2,r2,r2
 400bccc:	1085883a 	add	r2,r2,r2
 400bcd0:	e0f7c104 	addi	r3,fp,-8444
 400bcd4:	1885883a 	add	r2,r3,r2
 400bcd8:	10879d04 	addi	r2,r2,7796
 400bcdc:	10800017 	ldw	r2,0(r2)
 400bce0:	80801e26 	beq	r16,r2,400bd5c <main+0xb788>
 400bce4:	e0b7c217 	ldw	r2,-8440(fp)
 400bce8:	01400504 	movi	r5,20
 400bcec:	1009883a 	mov	r4,r2
 400bcf0:	40191000 	call	4019100 <__mulsi3>
 400bcf4:	1007883a 	mov	r3,r2
 400bcf8:	e0b7c117 	ldw	r2,-8444(fp)
 400bcfc:	1885883a 	add	r2,r3,r2
 400bd00:	1085883a 	add	r2,r2,r2
 400bd04:	1085883a 	add	r2,r2,r2
 400bd08:	e0f7c104 	addi	r3,fp,-8444
 400bd0c:	1885883a 	add	r2,r3,r2
 400bd10:	10879d04 	addi	r2,r2,7796
 400bd14:	10800017 	ldw	r2,0(r2)
 400bd18:	10800118 	cmpnei	r2,r2,4
 400bd1c:	1000311e 	bne	r2,zero,400bde4 <main+0xb810>
 400bd20:	e0b7c117 	ldw	r2,-8444(fp)
 400bd24:	14000044 	addi	r16,r2,1
 400bd28:	e0b7c217 	ldw	r2,-8440(fp)
 400bd2c:	01400504 	movi	r5,20
 400bd30:	1009883a 	mov	r4,r2
 400bd34:	40191000 	call	4019100 <__mulsi3>
 400bd38:	1405883a 	add	r2,r2,r16
 400bd3c:	1085883a 	add	r2,r2,r2
 400bd40:	1085883a 	add	r2,r2,r2
 400bd44:	e0f7c104 	addi	r3,fp,-8444
 400bd48:	1885883a 	add	r2,r3,r2
 400bd4c:	10879d04 	addi	r2,r2,7796
 400bd50:	10800017 	ldw	r2,0(r2)
 400bd54:	10bffc98 	cmpnei	r2,r2,-14
 400bd58:	1000221e 	bne	r2,zero,400bde4 <main+0xb810>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400bd5c:	e0b7c217 	ldw	r2,-8440(fp)
 400bd60:	10c00084 	addi	r3,r2,2
 400bd64:	e0b95e04 	addi	r2,fp,-6792
 400bd68:	180f883a 	mov	r7,r3
 400bd6c:	e1b7c117 	ldw	r6,-8444(fp)
 400bd70:	01403fc4 	movi	r5,255
 400bd74:	1009883a 	mov	r4,r2
 400bd78:	40003c80 	call	40003c8 <draw>
					draw(four, COLOR08_BLACK, x,y+2 );
 400bd7c:	e0b7c217 	ldw	r2,-8440(fp)
 400bd80:	10800084 	addi	r2,r2,2
 400bd84:	100f883a 	mov	r7,r2
 400bd88:	e1b7c117 	ldw	r6,-8444(fp)
 400bd8c:	000b883a 	mov	r5,zero
 400bd90:	010100f4 	movhi	r4,1027
 400bd94:	21372a04 	addi	r4,r4,-9048
 400bd98:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-14;
 400bd9c:	e0b7c217 	ldw	r2,-8440(fp)
 400bda0:	01400504 	movi	r5,20
 400bda4:	1009883a 	mov	r4,r2
 400bda8:	40191000 	call	4019100 <__mulsi3>
 400bdac:	1007883a 	mov	r3,r2
 400bdb0:	e0b7c117 	ldw	r2,-8444(fp)
 400bdb4:	1885883a 	add	r2,r3,r2
 400bdb8:	1085883a 	add	r2,r2,r2
 400bdbc:	1085883a 	add	r2,r2,r2
 400bdc0:	e0f7c104 	addi	r3,fp,-8444
 400bdc4:	1885883a 	add	r2,r3,r2
 400bdc8:	10879d04 	addi	r2,r2,7796
 400bdcc:	00fffc84 	movi	r3,-14
 400bdd0:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400bdd4:	00c00044 	movi	r3,1
 400bdd8:	008200b4 	movhi	r2,2050
 400bddc:	10841804 	addi	r2,r2,4192
 400bde0:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y][x-1] && gameboard [y][x]== gameboard [y][x+1]) || (gameboard [y][x]==4 && gameboard [y][x-1]==-14) || (gameboard [y][x]==4 && gameboard [y][x+1]==-14))//(
 400bde4:	e0b7c217 	ldw	r2,-8440(fp)
 400bde8:	01400504 	movi	r5,20
 400bdec:	1009883a 	mov	r4,r2
 400bdf0:	40191000 	call	4019100 <__mulsi3>
 400bdf4:	1007883a 	mov	r3,r2
 400bdf8:	e0b7c117 	ldw	r2,-8444(fp)
 400bdfc:	1885883a 	add	r2,r3,r2
 400be00:	1085883a 	add	r2,r2,r2
 400be04:	1085883a 	add	r2,r2,r2
 400be08:	e0f7c104 	addi	r3,fp,-8444
 400be0c:	1885883a 	add	r2,r3,r2
 400be10:	10879d04 	addi	r2,r2,7796
 400be14:	14000017 	ldw	r16,0(r2)
 400be18:	e0b7c117 	ldw	r2,-8444(fp)
 400be1c:	147fffc4 	addi	r17,r2,-1
 400be20:	e0b7c217 	ldw	r2,-8440(fp)
 400be24:	01400504 	movi	r5,20
 400be28:	1009883a 	mov	r4,r2
 400be2c:	40191000 	call	4019100 <__mulsi3>
 400be30:	1445883a 	add	r2,r2,r17
 400be34:	1085883a 	add	r2,r2,r2
 400be38:	1085883a 	add	r2,r2,r2
 400be3c:	e0f7c104 	addi	r3,fp,-8444
 400be40:	1885883a 	add	r2,r3,r2
 400be44:	10879d04 	addi	r2,r2,7796
 400be48:	10800017 	ldw	r2,0(r2)
 400be4c:	80801b1e 	bne	r16,r2,400bebc <main+0xb8e8>
 400be50:	e0b7c217 	ldw	r2,-8440(fp)
 400be54:	01400504 	movi	r5,20
 400be58:	1009883a 	mov	r4,r2
 400be5c:	40191000 	call	4019100 <__mulsi3>
 400be60:	1007883a 	mov	r3,r2
 400be64:	e0b7c117 	ldw	r2,-8444(fp)
 400be68:	1885883a 	add	r2,r3,r2
 400be6c:	1085883a 	add	r2,r2,r2
 400be70:	1085883a 	add	r2,r2,r2
 400be74:	e0f7c104 	addi	r3,fp,-8444
 400be78:	1885883a 	add	r2,r3,r2
 400be7c:	10879d04 	addi	r2,r2,7796
 400be80:	14000017 	ldw	r16,0(r2)
 400be84:	e0b7c117 	ldw	r2,-8444(fp)
 400be88:	14400044 	addi	r17,r2,1
 400be8c:	e0b7c217 	ldw	r2,-8440(fp)
 400be90:	01400504 	movi	r5,20
 400be94:	1009883a 	mov	r4,r2
 400be98:	40191000 	call	4019100 <__mulsi3>
 400be9c:	1445883a 	add	r2,r2,r17
 400bea0:	1085883a 	add	r2,r2,r2
 400bea4:	1085883a 	add	r2,r2,r2
 400bea8:	e0f7c104 	addi	r3,fp,-8444
 400beac:	1885883a 	add	r2,r3,r2
 400beb0:	10879d04 	addi	r2,r2,7796
 400beb4:	10800017 	ldw	r2,0(r2)
 400beb8:	80803c26 	beq	r16,r2,400bfac <main+0xb9d8>
 400bebc:	e0b7c217 	ldw	r2,-8440(fp)
 400bec0:	01400504 	movi	r5,20
 400bec4:	1009883a 	mov	r4,r2
 400bec8:	40191000 	call	4019100 <__mulsi3>
 400becc:	1007883a 	mov	r3,r2
 400bed0:	e0b7c117 	ldw	r2,-8444(fp)
 400bed4:	1885883a 	add	r2,r3,r2
 400bed8:	1085883a 	add	r2,r2,r2
 400bedc:	1085883a 	add	r2,r2,r2
 400bee0:	e0f7c104 	addi	r3,fp,-8444
 400bee4:	1885883a 	add	r2,r3,r2
 400bee8:	10879d04 	addi	r2,r2,7796
 400beec:	10800017 	ldw	r2,0(r2)
 400bef0:	10800118 	cmpnei	r2,r2,4
 400bef4:	10000f1e 	bne	r2,zero,400bf34 <main+0xb960>
 400bef8:	e0b7c117 	ldw	r2,-8444(fp)
 400befc:	143fffc4 	addi	r16,r2,-1
 400bf00:	e0b7c217 	ldw	r2,-8440(fp)
 400bf04:	01400504 	movi	r5,20
 400bf08:	1009883a 	mov	r4,r2
 400bf0c:	40191000 	call	4019100 <__mulsi3>
 400bf10:	1405883a 	add	r2,r2,r16
 400bf14:	1085883a 	add	r2,r2,r2
 400bf18:	1085883a 	add	r2,r2,r2
 400bf1c:	e0f7c104 	addi	r3,fp,-8444
 400bf20:	1885883a 	add	r2,r3,r2
 400bf24:	10879d04 	addi	r2,r2,7796
 400bf28:	10800017 	ldw	r2,0(r2)
 400bf2c:	10bffca0 	cmpeqi	r2,r2,-14
 400bf30:	10001e1e 	bne	r2,zero,400bfac <main+0xb9d8>
 400bf34:	e0b7c217 	ldw	r2,-8440(fp)
 400bf38:	01400504 	movi	r5,20
 400bf3c:	1009883a 	mov	r4,r2
 400bf40:	40191000 	call	4019100 <__mulsi3>
 400bf44:	1007883a 	mov	r3,r2
 400bf48:	e0b7c117 	ldw	r2,-8444(fp)
 400bf4c:	1885883a 	add	r2,r3,r2
 400bf50:	1085883a 	add	r2,r2,r2
 400bf54:	1085883a 	add	r2,r2,r2
 400bf58:	e0f7c104 	addi	r3,fp,-8444
 400bf5c:	1885883a 	add	r2,r3,r2
 400bf60:	10879d04 	addi	r2,r2,7796
 400bf64:	10800017 	ldw	r2,0(r2)
 400bf68:	10800118 	cmpnei	r2,r2,4
 400bf6c:	1000311e 	bne	r2,zero,400c034 <main+0xba60>
 400bf70:	e0b7c117 	ldw	r2,-8444(fp)
 400bf74:	14000044 	addi	r16,r2,1
 400bf78:	e0b7c217 	ldw	r2,-8440(fp)
 400bf7c:	01400504 	movi	r5,20
 400bf80:	1009883a 	mov	r4,r2
 400bf84:	40191000 	call	4019100 <__mulsi3>
 400bf88:	1405883a 	add	r2,r2,r16
 400bf8c:	1085883a 	add	r2,r2,r2
 400bf90:	1085883a 	add	r2,r2,r2
 400bf94:	e0f7c104 	addi	r3,fp,-8444
 400bf98:	1885883a 	add	r2,r3,r2
 400bf9c:	10879d04 	addi	r2,r2,7796
 400bfa0:	10800017 	ldw	r2,0(r2)
 400bfa4:	10bffc98 	cmpnei	r2,r2,-14
 400bfa8:	1000221e 	bne	r2,zero,400c034 <main+0xba60>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400bfac:	e0b7c217 	ldw	r2,-8440(fp)
 400bfb0:	10c00084 	addi	r3,r2,2
 400bfb4:	e0b95e04 	addi	r2,fp,-6792
 400bfb8:	180f883a 	mov	r7,r3
 400bfbc:	e1b7c117 	ldw	r6,-8444(fp)
 400bfc0:	01403fc4 	movi	r5,255
 400bfc4:	1009883a 	mov	r4,r2
 400bfc8:	40003c80 	call	40003c8 <draw>
					draw(four, COLOR08_BLACK, x,y+2 );
 400bfcc:	e0b7c217 	ldw	r2,-8440(fp)
 400bfd0:	10800084 	addi	r2,r2,2
 400bfd4:	100f883a 	mov	r7,r2
 400bfd8:	e1b7c117 	ldw	r6,-8444(fp)
 400bfdc:	000b883a 	mov	r5,zero
 400bfe0:	010100f4 	movhi	r4,1027
 400bfe4:	21372a04 	addi	r4,r4,-9048
 400bfe8:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-14;
 400bfec:	e0b7c217 	ldw	r2,-8440(fp)
 400bff0:	01400504 	movi	r5,20
 400bff4:	1009883a 	mov	r4,r2
 400bff8:	40191000 	call	4019100 <__mulsi3>
 400bffc:	1007883a 	mov	r3,r2
 400c000:	e0b7c117 	ldw	r2,-8444(fp)
 400c004:	1885883a 	add	r2,r3,r2
 400c008:	1085883a 	add	r2,r2,r2
 400c00c:	1085883a 	add	r2,r2,r2
 400c010:	e0f7c104 	addi	r3,fp,-8444
 400c014:	1885883a 	add	r2,r3,r2
 400c018:	10879d04 	addi	r2,r2,7796
 400c01c:	00fffc84 	movi	r3,-14
 400c020:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400c024:	00c00044 	movi	r3,1
 400c028:	008200b4 	movhi	r2,2050
 400c02c:	10841804 	addi	r2,r2,4192
 400c030:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y][x-1] && gameboard [y][x]== gameboard [y][x-2]))//00x
 400c034:	e0b7c217 	ldw	r2,-8440(fp)
 400c038:	01400504 	movi	r5,20
 400c03c:	1009883a 	mov	r4,r2
 400c040:	40191000 	call	4019100 <__mulsi3>
 400c044:	1007883a 	mov	r3,r2
 400c048:	e0b7c117 	ldw	r2,-8444(fp)
 400c04c:	1885883a 	add	r2,r3,r2
 400c050:	1085883a 	add	r2,r2,r2
 400c054:	1085883a 	add	r2,r2,r2
 400c058:	e0f7c104 	addi	r3,fp,-8444
 400c05c:	1885883a 	add	r2,r3,r2
 400c060:	10879d04 	addi	r2,r2,7796
 400c064:	14000017 	ldw	r16,0(r2)
 400c068:	e0b7c117 	ldw	r2,-8444(fp)
 400c06c:	147fffc4 	addi	r17,r2,-1
 400c070:	e0b7c217 	ldw	r2,-8440(fp)
 400c074:	01400504 	movi	r5,20
 400c078:	1009883a 	mov	r4,r2
 400c07c:	40191000 	call	4019100 <__mulsi3>
 400c080:	1445883a 	add	r2,r2,r17
 400c084:	1085883a 	add	r2,r2,r2
 400c088:	1085883a 	add	r2,r2,r2
 400c08c:	e0f7c104 	addi	r3,fp,-8444
 400c090:	1885883a 	add	r2,r3,r2
 400c094:	10879d04 	addi	r2,r2,7796
 400c098:	10800017 	ldw	r2,0(r2)
 400c09c:	80803d1e 	bne	r16,r2,400c194 <main+0xbbc0>
 400c0a0:	e0b7c217 	ldw	r2,-8440(fp)
 400c0a4:	01400504 	movi	r5,20
 400c0a8:	1009883a 	mov	r4,r2
 400c0ac:	40191000 	call	4019100 <__mulsi3>
 400c0b0:	1007883a 	mov	r3,r2
 400c0b4:	e0b7c117 	ldw	r2,-8444(fp)
 400c0b8:	1885883a 	add	r2,r3,r2
 400c0bc:	1085883a 	add	r2,r2,r2
 400c0c0:	1085883a 	add	r2,r2,r2
 400c0c4:	e0f7c104 	addi	r3,fp,-8444
 400c0c8:	1885883a 	add	r2,r3,r2
 400c0cc:	10879d04 	addi	r2,r2,7796
 400c0d0:	14000017 	ldw	r16,0(r2)
 400c0d4:	e0b7c117 	ldw	r2,-8444(fp)
 400c0d8:	147fff84 	addi	r17,r2,-2
 400c0dc:	e0b7c217 	ldw	r2,-8440(fp)
 400c0e0:	01400504 	movi	r5,20
 400c0e4:	1009883a 	mov	r4,r2
 400c0e8:	40191000 	call	4019100 <__mulsi3>
 400c0ec:	1445883a 	add	r2,r2,r17
 400c0f0:	1085883a 	add	r2,r2,r2
 400c0f4:	1085883a 	add	r2,r2,r2
 400c0f8:	e0f7c104 	addi	r3,fp,-8444
 400c0fc:	1885883a 	add	r2,r3,r2
 400c100:	10879d04 	addi	r2,r2,7796
 400c104:	10800017 	ldw	r2,0(r2)
 400c108:	8080221e 	bne	r16,r2,400c194 <main+0xbbc0>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400c10c:	e0b7c217 	ldw	r2,-8440(fp)
 400c110:	10c00084 	addi	r3,r2,2
 400c114:	e0b95e04 	addi	r2,fp,-6792
 400c118:	180f883a 	mov	r7,r3
 400c11c:	e1b7c117 	ldw	r6,-8444(fp)
 400c120:	01403fc4 	movi	r5,255
 400c124:	1009883a 	mov	r4,r2
 400c128:	40003c80 	call	40003c8 <draw>
					draw(four, COLOR08_BLACK, x,y+2 );
 400c12c:	e0b7c217 	ldw	r2,-8440(fp)
 400c130:	10800084 	addi	r2,r2,2
 400c134:	100f883a 	mov	r7,r2
 400c138:	e1b7c117 	ldw	r6,-8444(fp)
 400c13c:	000b883a 	mov	r5,zero
 400c140:	010100f4 	movhi	r4,1027
 400c144:	21372a04 	addi	r4,r4,-9048
 400c148:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-14;
 400c14c:	e0b7c217 	ldw	r2,-8440(fp)
 400c150:	01400504 	movi	r5,20
 400c154:	1009883a 	mov	r4,r2
 400c158:	40191000 	call	4019100 <__mulsi3>
 400c15c:	1007883a 	mov	r3,r2
 400c160:	e0b7c117 	ldw	r2,-8444(fp)
 400c164:	1885883a 	add	r2,r3,r2
 400c168:	1085883a 	add	r2,r2,r2
 400c16c:	1085883a 	add	r2,r2,r2
 400c170:	e0f7c104 	addi	r3,fp,-8444
 400c174:	1885883a 	add	r2,r3,r2
 400c178:	10879d04 	addi	r2,r2,7796
 400c17c:	00fffc84 	movi	r3,-14
 400c180:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400c184:	00c00044 	movi	r3,1
 400c188:	008200b4 	movhi	r2,2050
 400c18c:	10841804 	addi	r2,r2,4192
 400c190:	10c00035 	stwio	r3,0(r2)
				}
				if(gameboard[y][x]==4 && gameboard[y][x+1]==4 && gameboard[y][x+2]==-14)
 400c194:	e0b7c217 	ldw	r2,-8440(fp)
 400c198:	01400504 	movi	r5,20
 400c19c:	1009883a 	mov	r4,r2
 400c1a0:	40191000 	call	4019100 <__mulsi3>
 400c1a4:	1007883a 	mov	r3,r2
 400c1a8:	e0b7c117 	ldw	r2,-8444(fp)
 400c1ac:	1885883a 	add	r2,r3,r2
 400c1b0:	1085883a 	add	r2,r2,r2
 400c1b4:	1085883a 	add	r2,r2,r2
 400c1b8:	e0f7c104 	addi	r3,fp,-8444
 400c1bc:	1885883a 	add	r2,r3,r2
 400c1c0:	10879d04 	addi	r2,r2,7796
 400c1c4:	10800017 	ldw	r2,0(r2)
 400c1c8:	10800118 	cmpnei	r2,r2,4
 400c1cc:	1000401e 	bne	r2,zero,400c2d0 <main+0xbcfc>
 400c1d0:	e0b7c117 	ldw	r2,-8444(fp)
 400c1d4:	14000044 	addi	r16,r2,1
 400c1d8:	e0b7c217 	ldw	r2,-8440(fp)
 400c1dc:	01400504 	movi	r5,20
 400c1e0:	1009883a 	mov	r4,r2
 400c1e4:	40191000 	call	4019100 <__mulsi3>
 400c1e8:	1405883a 	add	r2,r2,r16
 400c1ec:	1085883a 	add	r2,r2,r2
 400c1f0:	1085883a 	add	r2,r2,r2
 400c1f4:	e0f7c104 	addi	r3,fp,-8444
 400c1f8:	1885883a 	add	r2,r3,r2
 400c1fc:	10879d04 	addi	r2,r2,7796
 400c200:	10800017 	ldw	r2,0(r2)
 400c204:	10800118 	cmpnei	r2,r2,4
 400c208:	1000311e 	bne	r2,zero,400c2d0 <main+0xbcfc>
 400c20c:	e0b7c117 	ldw	r2,-8444(fp)
 400c210:	14000084 	addi	r16,r2,2
 400c214:	e0b7c217 	ldw	r2,-8440(fp)
 400c218:	01400504 	movi	r5,20
 400c21c:	1009883a 	mov	r4,r2
 400c220:	40191000 	call	4019100 <__mulsi3>
 400c224:	1405883a 	add	r2,r2,r16
 400c228:	1085883a 	add	r2,r2,r2
 400c22c:	1085883a 	add	r2,r2,r2
 400c230:	e0f7c104 	addi	r3,fp,-8444
 400c234:	1885883a 	add	r2,r3,r2
 400c238:	10879d04 	addi	r2,r2,7796
 400c23c:	10800017 	ldw	r2,0(r2)
 400c240:	10bffc98 	cmpnei	r2,r2,-14
 400c244:	1000221e 	bne	r2,zero,400c2d0 <main+0xbcfc>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400c248:	e0b7c217 	ldw	r2,-8440(fp)
 400c24c:	10c00084 	addi	r3,r2,2
 400c250:	e0b95e04 	addi	r2,fp,-6792
 400c254:	180f883a 	mov	r7,r3
 400c258:	e1b7c117 	ldw	r6,-8444(fp)
 400c25c:	01403fc4 	movi	r5,255
 400c260:	1009883a 	mov	r4,r2
 400c264:	40003c80 	call	40003c8 <draw>
					draw(four, COLOR08_BLACK, x,y+2 );
 400c268:	e0b7c217 	ldw	r2,-8440(fp)
 400c26c:	10800084 	addi	r2,r2,2
 400c270:	100f883a 	mov	r7,r2
 400c274:	e1b7c117 	ldw	r6,-8444(fp)
 400c278:	000b883a 	mov	r5,zero
 400c27c:	010100f4 	movhi	r4,1027
 400c280:	21372a04 	addi	r4,r4,-9048
 400c284:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-14;
 400c288:	e0b7c217 	ldw	r2,-8440(fp)
 400c28c:	01400504 	movi	r5,20
 400c290:	1009883a 	mov	r4,r2
 400c294:	40191000 	call	4019100 <__mulsi3>
 400c298:	1007883a 	mov	r3,r2
 400c29c:	e0b7c117 	ldw	r2,-8444(fp)
 400c2a0:	1885883a 	add	r2,r3,r2
 400c2a4:	1085883a 	add	r2,r2,r2
 400c2a8:	1085883a 	add	r2,r2,r2
 400c2ac:	e0f7c104 	addi	r3,fp,-8444
 400c2b0:	1885883a 	add	r2,r3,r2
 400c2b4:	10879d04 	addi	r2,r2,7796
 400c2b8:	00fffc84 	movi	r3,-14
 400c2bc:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400c2c0:	00c00044 	movi	r3,1
 400c2c4:	008200b4 	movhi	r2,2050
 400c2c8:	10841804 	addi	r2,r2,4192
 400c2cc:	10c00035 	stwio	r3,0(r2)
				}
				/////////////////////////////////

				//vertical4
				if ((gameboard [y][x]==gameboard [y+1][x] && gameboard [y+1][x]== gameboard [y+2][x]) || (gameboard [y][x]==4 && gameboard [y+1][x]==-14))//xmb
 400c2d0:	e0b7c217 	ldw	r2,-8440(fp)
 400c2d4:	01400504 	movi	r5,20
 400c2d8:	1009883a 	mov	r4,r2
 400c2dc:	40191000 	call	4019100 <__mulsi3>
 400c2e0:	1007883a 	mov	r3,r2
 400c2e4:	e0b7c117 	ldw	r2,-8444(fp)
 400c2e8:	1885883a 	add	r2,r3,r2
 400c2ec:	1085883a 	add	r2,r2,r2
 400c2f0:	1085883a 	add	r2,r2,r2
 400c2f4:	e0f7c104 	addi	r3,fp,-8444
 400c2f8:	1885883a 	add	r2,r3,r2
 400c2fc:	10879d04 	addi	r2,r2,7796
 400c300:	14000017 	ldw	r16,0(r2)
 400c304:	e0b7c217 	ldw	r2,-8440(fp)
 400c308:	10800044 	addi	r2,r2,1
 400c30c:	01400504 	movi	r5,20
 400c310:	1009883a 	mov	r4,r2
 400c314:	40191000 	call	4019100 <__mulsi3>
 400c318:	1007883a 	mov	r3,r2
 400c31c:	e0b7c117 	ldw	r2,-8444(fp)
 400c320:	1885883a 	add	r2,r3,r2
 400c324:	1085883a 	add	r2,r2,r2
 400c328:	1085883a 	add	r2,r2,r2
 400c32c:	e0f7c104 	addi	r3,fp,-8444
 400c330:	1885883a 	add	r2,r3,r2
 400c334:	10879d04 	addi	r2,r2,7796
 400c338:	10800017 	ldw	r2,0(r2)
 400c33c:	80801d1e 	bne	r16,r2,400c3b4 <main+0xbde0>
 400c340:	e0b7c217 	ldw	r2,-8440(fp)
 400c344:	10800044 	addi	r2,r2,1
 400c348:	01400504 	movi	r5,20
 400c34c:	1009883a 	mov	r4,r2
 400c350:	40191000 	call	4019100 <__mulsi3>
 400c354:	1007883a 	mov	r3,r2
 400c358:	e0b7c117 	ldw	r2,-8444(fp)
 400c35c:	1885883a 	add	r2,r3,r2
 400c360:	1085883a 	add	r2,r2,r2
 400c364:	1085883a 	add	r2,r2,r2
 400c368:	e0f7c104 	addi	r3,fp,-8444
 400c36c:	1885883a 	add	r2,r3,r2
 400c370:	10879d04 	addi	r2,r2,7796
 400c374:	14000017 	ldw	r16,0(r2)
 400c378:	e0b7c217 	ldw	r2,-8440(fp)
 400c37c:	10800084 	addi	r2,r2,2
 400c380:	01400504 	movi	r5,20
 400c384:	1009883a 	mov	r4,r2
 400c388:	40191000 	call	4019100 <__mulsi3>
 400c38c:	1007883a 	mov	r3,r2
 400c390:	e0b7c117 	ldw	r2,-8444(fp)
 400c394:	1885883a 	add	r2,r3,r2
 400c398:	1085883a 	add	r2,r2,r2
 400c39c:	1085883a 	add	r2,r2,r2
 400c3a0:	e0f7c104 	addi	r3,fp,-8444
 400c3a4:	1885883a 	add	r2,r3,r2
 400c3a8:	10879d04 	addi	r2,r2,7796
 400c3ac:	10800017 	ldw	r2,0(r2)
 400c3b0:	80801f26 	beq	r16,r2,400c430 <main+0xbe5c>
 400c3b4:	e0b7c217 	ldw	r2,-8440(fp)
 400c3b8:	01400504 	movi	r5,20
 400c3bc:	1009883a 	mov	r4,r2
 400c3c0:	40191000 	call	4019100 <__mulsi3>
 400c3c4:	1007883a 	mov	r3,r2
 400c3c8:	e0b7c117 	ldw	r2,-8444(fp)
 400c3cc:	1885883a 	add	r2,r3,r2
 400c3d0:	1085883a 	add	r2,r2,r2
 400c3d4:	1085883a 	add	r2,r2,r2
 400c3d8:	e0f7c104 	addi	r3,fp,-8444
 400c3dc:	1885883a 	add	r2,r3,r2
 400c3e0:	10879d04 	addi	r2,r2,7796
 400c3e4:	10800017 	ldw	r2,0(r2)
 400c3e8:	10800118 	cmpnei	r2,r2,4
 400c3ec:	1000321e 	bne	r2,zero,400c4b8 <main+0xbee4>
 400c3f0:	e0b7c217 	ldw	r2,-8440(fp)
 400c3f4:	10800044 	addi	r2,r2,1
 400c3f8:	01400504 	movi	r5,20
 400c3fc:	1009883a 	mov	r4,r2
 400c400:	40191000 	call	4019100 <__mulsi3>
 400c404:	1007883a 	mov	r3,r2
 400c408:	e0b7c117 	ldw	r2,-8444(fp)
 400c40c:	1885883a 	add	r2,r3,r2
 400c410:	1085883a 	add	r2,r2,r2
 400c414:	1085883a 	add	r2,r2,r2
 400c418:	e0f7c104 	addi	r3,fp,-8444
 400c41c:	1885883a 	add	r2,r3,r2
 400c420:	10879d04 	addi	r2,r2,7796
 400c424:	10800017 	ldw	r2,0(r2)
 400c428:	10bffc98 	cmpnei	r2,r2,-14
 400c42c:	1000221e 	bne	r2,zero,400c4b8 <main+0xbee4>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400c430:	e0b7c217 	ldw	r2,-8440(fp)
 400c434:	10c00084 	addi	r3,r2,2
 400c438:	e0b95e04 	addi	r2,fp,-6792
 400c43c:	180f883a 	mov	r7,r3
 400c440:	e1b7c117 	ldw	r6,-8444(fp)
 400c444:	01403fc4 	movi	r5,255
 400c448:	1009883a 	mov	r4,r2
 400c44c:	40003c80 	call	40003c8 <draw>
					draw(four, COLOR08_BLACK, x,y+2 );
 400c450:	e0b7c217 	ldw	r2,-8440(fp)
 400c454:	10800084 	addi	r2,r2,2
 400c458:	100f883a 	mov	r7,r2
 400c45c:	e1b7c117 	ldw	r6,-8444(fp)
 400c460:	000b883a 	mov	r5,zero
 400c464:	010100f4 	movhi	r4,1027
 400c468:	21372a04 	addi	r4,r4,-9048
 400c46c:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-14;
 400c470:	e0b7c217 	ldw	r2,-8440(fp)
 400c474:	01400504 	movi	r5,20
 400c478:	1009883a 	mov	r4,r2
 400c47c:	40191000 	call	4019100 <__mulsi3>
 400c480:	1007883a 	mov	r3,r2
 400c484:	e0b7c117 	ldw	r2,-8444(fp)
 400c488:	1885883a 	add	r2,r3,r2
 400c48c:	1085883a 	add	r2,r2,r2
 400c490:	1085883a 	add	r2,r2,r2
 400c494:	e0f7c104 	addi	r3,fp,-8444
 400c498:	1885883a 	add	r2,r3,r2
 400c49c:	10879d04 	addi	r2,r2,7796
 400c4a0:	00fffc84 	movi	r3,-14
 400c4a4:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400c4a8:	00c00044 	movi	r3,1
 400c4ac:	008200b4 	movhi	r2,2050
 400c4b0:	10841804 	addi	r2,r2,4192
 400c4b4:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y-1][x] && gameboard [y][x]== gameboard [y+1][x]) || (gameboard [y][x]==4 && gameboard [y+1][x]==-14))//txb
 400c4b8:	e0b7c217 	ldw	r2,-8440(fp)
 400c4bc:	01400504 	movi	r5,20
 400c4c0:	1009883a 	mov	r4,r2
 400c4c4:	40191000 	call	4019100 <__mulsi3>
 400c4c8:	1007883a 	mov	r3,r2
 400c4cc:	e0b7c117 	ldw	r2,-8444(fp)
 400c4d0:	1885883a 	add	r2,r3,r2
 400c4d4:	1085883a 	add	r2,r2,r2
 400c4d8:	1085883a 	add	r2,r2,r2
 400c4dc:	e0f7c104 	addi	r3,fp,-8444
 400c4e0:	1885883a 	add	r2,r3,r2
 400c4e4:	10879d04 	addi	r2,r2,7796
 400c4e8:	14000017 	ldw	r16,0(r2)
 400c4ec:	e0b7c217 	ldw	r2,-8440(fp)
 400c4f0:	10bfffc4 	addi	r2,r2,-1
 400c4f4:	01400504 	movi	r5,20
 400c4f8:	1009883a 	mov	r4,r2
 400c4fc:	40191000 	call	4019100 <__mulsi3>
 400c500:	1007883a 	mov	r3,r2
 400c504:	e0b7c117 	ldw	r2,-8444(fp)
 400c508:	1885883a 	add	r2,r3,r2
 400c50c:	1085883a 	add	r2,r2,r2
 400c510:	1085883a 	add	r2,r2,r2
 400c514:	e0f7c104 	addi	r3,fp,-8444
 400c518:	1885883a 	add	r2,r3,r2
 400c51c:	10879d04 	addi	r2,r2,7796
 400c520:	10800017 	ldw	r2,0(r2)
 400c524:	80801c1e 	bne	r16,r2,400c598 <main+0xbfc4>
 400c528:	e0b7c217 	ldw	r2,-8440(fp)
 400c52c:	01400504 	movi	r5,20
 400c530:	1009883a 	mov	r4,r2
 400c534:	40191000 	call	4019100 <__mulsi3>
 400c538:	1007883a 	mov	r3,r2
 400c53c:	e0b7c117 	ldw	r2,-8444(fp)
 400c540:	1885883a 	add	r2,r3,r2
 400c544:	1085883a 	add	r2,r2,r2
 400c548:	1085883a 	add	r2,r2,r2
 400c54c:	e0f7c104 	addi	r3,fp,-8444
 400c550:	1885883a 	add	r2,r3,r2
 400c554:	10879d04 	addi	r2,r2,7796
 400c558:	14000017 	ldw	r16,0(r2)
 400c55c:	e0b7c217 	ldw	r2,-8440(fp)
 400c560:	10800044 	addi	r2,r2,1
 400c564:	01400504 	movi	r5,20
 400c568:	1009883a 	mov	r4,r2
 400c56c:	40191000 	call	4019100 <__mulsi3>
 400c570:	1007883a 	mov	r3,r2
 400c574:	e0b7c117 	ldw	r2,-8444(fp)
 400c578:	1885883a 	add	r2,r3,r2
 400c57c:	1085883a 	add	r2,r2,r2
 400c580:	1085883a 	add	r2,r2,r2
 400c584:	e0f7c104 	addi	r3,fp,-8444
 400c588:	1885883a 	add	r2,r3,r2
 400c58c:	10879d04 	addi	r2,r2,7796
 400c590:	10800017 	ldw	r2,0(r2)
 400c594:	80801f26 	beq	r16,r2,400c614 <main+0xc040>
 400c598:	e0b7c217 	ldw	r2,-8440(fp)
 400c59c:	01400504 	movi	r5,20
 400c5a0:	1009883a 	mov	r4,r2
 400c5a4:	40191000 	call	4019100 <__mulsi3>
 400c5a8:	1007883a 	mov	r3,r2
 400c5ac:	e0b7c117 	ldw	r2,-8444(fp)
 400c5b0:	1885883a 	add	r2,r3,r2
 400c5b4:	1085883a 	add	r2,r2,r2
 400c5b8:	1085883a 	add	r2,r2,r2
 400c5bc:	e0f7c104 	addi	r3,fp,-8444
 400c5c0:	1885883a 	add	r2,r3,r2
 400c5c4:	10879d04 	addi	r2,r2,7796
 400c5c8:	10800017 	ldw	r2,0(r2)
 400c5cc:	10800118 	cmpnei	r2,r2,4
 400c5d0:	1000321e 	bne	r2,zero,400c69c <main+0xc0c8>
 400c5d4:	e0b7c217 	ldw	r2,-8440(fp)
 400c5d8:	10800044 	addi	r2,r2,1
 400c5dc:	01400504 	movi	r5,20
 400c5e0:	1009883a 	mov	r4,r2
 400c5e4:	40191000 	call	4019100 <__mulsi3>
 400c5e8:	1007883a 	mov	r3,r2
 400c5ec:	e0b7c117 	ldw	r2,-8444(fp)
 400c5f0:	1885883a 	add	r2,r3,r2
 400c5f4:	1085883a 	add	r2,r2,r2
 400c5f8:	1085883a 	add	r2,r2,r2
 400c5fc:	e0f7c104 	addi	r3,fp,-8444
 400c600:	1885883a 	add	r2,r3,r2
 400c604:	10879d04 	addi	r2,r2,7796
 400c608:	10800017 	ldw	r2,0(r2)
 400c60c:	10bffc98 	cmpnei	r2,r2,-14
 400c610:	1000221e 	bne	r2,zero,400c69c <main+0xc0c8>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400c614:	e0b7c217 	ldw	r2,-8440(fp)
 400c618:	10c00084 	addi	r3,r2,2
 400c61c:	e0b95e04 	addi	r2,fp,-6792
 400c620:	180f883a 	mov	r7,r3
 400c624:	e1b7c117 	ldw	r6,-8444(fp)
 400c628:	01403fc4 	movi	r5,255
 400c62c:	1009883a 	mov	r4,r2
 400c630:	40003c80 	call	40003c8 <draw>
					draw(four, COLOR08_BLACK, x,y+2 );
 400c634:	e0b7c217 	ldw	r2,-8440(fp)
 400c638:	10800084 	addi	r2,r2,2
 400c63c:	100f883a 	mov	r7,r2
 400c640:	e1b7c117 	ldw	r6,-8444(fp)
 400c644:	000b883a 	mov	r5,zero
 400c648:	010100f4 	movhi	r4,1027
 400c64c:	21372a04 	addi	r4,r4,-9048
 400c650:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-14;
 400c654:	e0b7c217 	ldw	r2,-8440(fp)
 400c658:	01400504 	movi	r5,20
 400c65c:	1009883a 	mov	r4,r2
 400c660:	40191000 	call	4019100 <__mulsi3>
 400c664:	1007883a 	mov	r3,r2
 400c668:	e0b7c117 	ldw	r2,-8444(fp)
 400c66c:	1885883a 	add	r2,r3,r2
 400c670:	1085883a 	add	r2,r2,r2
 400c674:	1085883a 	add	r2,r2,r2
 400c678:	e0f7c104 	addi	r3,fp,-8444
 400c67c:	1885883a 	add	r2,r3,r2
 400c680:	10879d04 	addi	r2,r2,7796
 400c684:	00fffc84 	movi	r3,-14
 400c688:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400c68c:	00c00044 	movi	r3,1
 400c690:	008200b4 	movhi	r2,2050
 400c694:	10841804 	addi	r2,r2,4192
 400c698:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y-1][x] && gameboard [y][x]== gameboard [y-2][x]) || (gameboard [y][x]==4 && gameboard [y-1][x]==-14))//tmx
 400c69c:	e0b7c217 	ldw	r2,-8440(fp)
 400c6a0:	01400504 	movi	r5,20
 400c6a4:	1009883a 	mov	r4,r2
 400c6a8:	40191000 	call	4019100 <__mulsi3>
 400c6ac:	1007883a 	mov	r3,r2
 400c6b0:	e0b7c117 	ldw	r2,-8444(fp)
 400c6b4:	1885883a 	add	r2,r3,r2
 400c6b8:	1085883a 	add	r2,r2,r2
 400c6bc:	1085883a 	add	r2,r2,r2
 400c6c0:	e0f7c104 	addi	r3,fp,-8444
 400c6c4:	1885883a 	add	r2,r3,r2
 400c6c8:	10879d04 	addi	r2,r2,7796
 400c6cc:	14000017 	ldw	r16,0(r2)
 400c6d0:	e0b7c217 	ldw	r2,-8440(fp)
 400c6d4:	10bfffc4 	addi	r2,r2,-1
 400c6d8:	01400504 	movi	r5,20
 400c6dc:	1009883a 	mov	r4,r2
 400c6e0:	40191000 	call	4019100 <__mulsi3>
 400c6e4:	1007883a 	mov	r3,r2
 400c6e8:	e0b7c117 	ldw	r2,-8444(fp)
 400c6ec:	1885883a 	add	r2,r3,r2
 400c6f0:	1085883a 	add	r2,r2,r2
 400c6f4:	1085883a 	add	r2,r2,r2
 400c6f8:	e0f7c104 	addi	r3,fp,-8444
 400c6fc:	1885883a 	add	r2,r3,r2
 400c700:	10879d04 	addi	r2,r2,7796
 400c704:	10800017 	ldw	r2,0(r2)
 400c708:	80801c1e 	bne	r16,r2,400c77c <main+0xc1a8>
 400c70c:	e0b7c217 	ldw	r2,-8440(fp)
 400c710:	01400504 	movi	r5,20
 400c714:	1009883a 	mov	r4,r2
 400c718:	40191000 	call	4019100 <__mulsi3>
 400c71c:	1007883a 	mov	r3,r2
 400c720:	e0b7c117 	ldw	r2,-8444(fp)
 400c724:	1885883a 	add	r2,r3,r2
 400c728:	1085883a 	add	r2,r2,r2
 400c72c:	1085883a 	add	r2,r2,r2
 400c730:	e0f7c104 	addi	r3,fp,-8444
 400c734:	1885883a 	add	r2,r3,r2
 400c738:	10879d04 	addi	r2,r2,7796
 400c73c:	14000017 	ldw	r16,0(r2)
 400c740:	e0b7c217 	ldw	r2,-8440(fp)
 400c744:	10bfff84 	addi	r2,r2,-2
 400c748:	01400504 	movi	r5,20
 400c74c:	1009883a 	mov	r4,r2
 400c750:	40191000 	call	4019100 <__mulsi3>
 400c754:	1007883a 	mov	r3,r2
 400c758:	e0b7c117 	ldw	r2,-8444(fp)
 400c75c:	1885883a 	add	r2,r3,r2
 400c760:	1085883a 	add	r2,r2,r2
 400c764:	1085883a 	add	r2,r2,r2
 400c768:	e0f7c104 	addi	r3,fp,-8444
 400c76c:	1885883a 	add	r2,r3,r2
 400c770:	10879d04 	addi	r2,r2,7796
 400c774:	10800017 	ldw	r2,0(r2)
 400c778:	80801f26 	beq	r16,r2,400c7f8 <main+0xc224>
 400c77c:	e0b7c217 	ldw	r2,-8440(fp)
 400c780:	01400504 	movi	r5,20
 400c784:	1009883a 	mov	r4,r2
 400c788:	40191000 	call	4019100 <__mulsi3>
 400c78c:	1007883a 	mov	r3,r2
 400c790:	e0b7c117 	ldw	r2,-8444(fp)
 400c794:	1885883a 	add	r2,r3,r2
 400c798:	1085883a 	add	r2,r2,r2
 400c79c:	1085883a 	add	r2,r2,r2
 400c7a0:	e0f7c104 	addi	r3,fp,-8444
 400c7a4:	1885883a 	add	r2,r3,r2
 400c7a8:	10879d04 	addi	r2,r2,7796
 400c7ac:	10800017 	ldw	r2,0(r2)
 400c7b0:	10800118 	cmpnei	r2,r2,4
 400c7b4:	1000321e 	bne	r2,zero,400c880 <main+0xc2ac>
 400c7b8:	e0b7c217 	ldw	r2,-8440(fp)
 400c7bc:	10bfffc4 	addi	r2,r2,-1
 400c7c0:	01400504 	movi	r5,20
 400c7c4:	1009883a 	mov	r4,r2
 400c7c8:	40191000 	call	4019100 <__mulsi3>
 400c7cc:	1007883a 	mov	r3,r2
 400c7d0:	e0b7c117 	ldw	r2,-8444(fp)
 400c7d4:	1885883a 	add	r2,r3,r2
 400c7d8:	1085883a 	add	r2,r2,r2
 400c7dc:	1085883a 	add	r2,r2,r2
 400c7e0:	e0f7c104 	addi	r3,fp,-8444
 400c7e4:	1885883a 	add	r2,r3,r2
 400c7e8:	10879d04 	addi	r2,r2,7796
 400c7ec:	10800017 	ldw	r2,0(r2)
 400c7f0:	10bffc98 	cmpnei	r2,r2,-14
 400c7f4:	1000221e 	bne	r2,zero,400c880 <main+0xc2ac>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400c7f8:	e0b7c217 	ldw	r2,-8440(fp)
 400c7fc:	10c00084 	addi	r3,r2,2
 400c800:	e0b95e04 	addi	r2,fp,-6792
 400c804:	180f883a 	mov	r7,r3
 400c808:	e1b7c117 	ldw	r6,-8444(fp)
 400c80c:	01403fc4 	movi	r5,255
 400c810:	1009883a 	mov	r4,r2
 400c814:	40003c80 	call	40003c8 <draw>
					draw(four, COLOR08_BLACK, x,y+2 );
 400c818:	e0b7c217 	ldw	r2,-8440(fp)
 400c81c:	10800084 	addi	r2,r2,2
 400c820:	100f883a 	mov	r7,r2
 400c824:	e1b7c117 	ldw	r6,-8444(fp)
 400c828:	000b883a 	mov	r5,zero
 400c82c:	010100f4 	movhi	r4,1027
 400c830:	21372a04 	addi	r4,r4,-9048
 400c834:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-14;
 400c838:	e0b7c217 	ldw	r2,-8440(fp)
 400c83c:	01400504 	movi	r5,20
 400c840:	1009883a 	mov	r4,r2
 400c844:	40191000 	call	4019100 <__mulsi3>
 400c848:	1007883a 	mov	r3,r2
 400c84c:	e0b7c117 	ldw	r2,-8444(fp)
 400c850:	1885883a 	add	r2,r3,r2
 400c854:	1085883a 	add	r2,r2,r2
 400c858:	1085883a 	add	r2,r2,r2
 400c85c:	e0f7c104 	addi	r3,fp,-8444
 400c860:	1885883a 	add	r2,r3,r2
 400c864:	10879d04 	addi	r2,r2,7796
 400c868:	00fffc84 	movi	r3,-14
 400c86c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400c870:	00c00044 	movi	r3,1
 400c874:	008200b4 	movhi	r2,2050
 400c878:	10841804 	addi	r2,r2,4192
 400c87c:	10c00035 	stwio	r3,0(r2)
				}
				if(gameboard[y][x]==4 && gameboard[y-1][x]==4 && gameboard[y-2][x]==-14)
 400c880:	e0b7c217 	ldw	r2,-8440(fp)
 400c884:	01400504 	movi	r5,20
 400c888:	1009883a 	mov	r4,r2
 400c88c:	40191000 	call	4019100 <__mulsi3>
 400c890:	1007883a 	mov	r3,r2
 400c894:	e0b7c117 	ldw	r2,-8444(fp)
 400c898:	1885883a 	add	r2,r3,r2
 400c89c:	1085883a 	add	r2,r2,r2
 400c8a0:	1085883a 	add	r2,r2,r2
 400c8a4:	e0f7c104 	addi	r3,fp,-8444
 400c8a8:	1885883a 	add	r2,r3,r2
 400c8ac:	10879d04 	addi	r2,r2,7796
 400c8b0:	10800017 	ldw	r2,0(r2)
 400c8b4:	10800118 	cmpnei	r2,r2,4
 400c8b8:	1000421e 	bne	r2,zero,400c9c4 <main+0xc3f0>
 400c8bc:	e0b7c217 	ldw	r2,-8440(fp)
 400c8c0:	10bfffc4 	addi	r2,r2,-1
 400c8c4:	01400504 	movi	r5,20
 400c8c8:	1009883a 	mov	r4,r2
 400c8cc:	40191000 	call	4019100 <__mulsi3>
 400c8d0:	1007883a 	mov	r3,r2
 400c8d4:	e0b7c117 	ldw	r2,-8444(fp)
 400c8d8:	1885883a 	add	r2,r3,r2
 400c8dc:	1085883a 	add	r2,r2,r2
 400c8e0:	1085883a 	add	r2,r2,r2
 400c8e4:	e0f7c104 	addi	r3,fp,-8444
 400c8e8:	1885883a 	add	r2,r3,r2
 400c8ec:	10879d04 	addi	r2,r2,7796
 400c8f0:	10800017 	ldw	r2,0(r2)
 400c8f4:	10800118 	cmpnei	r2,r2,4
 400c8f8:	1000321e 	bne	r2,zero,400c9c4 <main+0xc3f0>
 400c8fc:	e0b7c217 	ldw	r2,-8440(fp)
 400c900:	10bfff84 	addi	r2,r2,-2
 400c904:	01400504 	movi	r5,20
 400c908:	1009883a 	mov	r4,r2
 400c90c:	40191000 	call	4019100 <__mulsi3>
 400c910:	1007883a 	mov	r3,r2
 400c914:	e0b7c117 	ldw	r2,-8444(fp)
 400c918:	1885883a 	add	r2,r3,r2
 400c91c:	1085883a 	add	r2,r2,r2
 400c920:	1085883a 	add	r2,r2,r2
 400c924:	e0f7c104 	addi	r3,fp,-8444
 400c928:	1885883a 	add	r2,r3,r2
 400c92c:	10879d04 	addi	r2,r2,7796
 400c930:	10800017 	ldw	r2,0(r2)
 400c934:	10bffc98 	cmpnei	r2,r2,-14
 400c938:	1000221e 	bne	r2,zero,400c9c4 <main+0xc3f0>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400c93c:	e0b7c217 	ldw	r2,-8440(fp)
 400c940:	10c00084 	addi	r3,r2,2
 400c944:	e0b95e04 	addi	r2,fp,-6792
 400c948:	180f883a 	mov	r7,r3
 400c94c:	e1b7c117 	ldw	r6,-8444(fp)
 400c950:	01403fc4 	movi	r5,255
 400c954:	1009883a 	mov	r4,r2
 400c958:	40003c80 	call	40003c8 <draw>
					draw(four, COLOR08_BLACK, x,y+2 );
 400c95c:	e0b7c217 	ldw	r2,-8440(fp)
 400c960:	10800084 	addi	r2,r2,2
 400c964:	100f883a 	mov	r7,r2
 400c968:	e1b7c117 	ldw	r6,-8444(fp)
 400c96c:	000b883a 	mov	r5,zero
 400c970:	010100f4 	movhi	r4,1027
 400c974:	21372a04 	addi	r4,r4,-9048
 400c978:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-14;
 400c97c:	e0b7c217 	ldw	r2,-8440(fp)
 400c980:	01400504 	movi	r5,20
 400c984:	1009883a 	mov	r4,r2
 400c988:	40191000 	call	4019100 <__mulsi3>
 400c98c:	1007883a 	mov	r3,r2
 400c990:	e0b7c117 	ldw	r2,-8444(fp)
 400c994:	1885883a 	add	r2,r3,r2
 400c998:	1085883a 	add	r2,r2,r2
 400c99c:	1085883a 	add	r2,r2,r2
 400c9a0:	e0f7c104 	addi	r3,fp,-8444
 400c9a4:	1885883a 	add	r2,r3,r2
 400c9a8:	10879d04 	addi	r2,r2,7796
 400c9ac:	00fffc84 	movi	r3,-14
 400c9b0:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400c9b4:	00c00044 	movi	r3,1
 400c9b8:	008200b4 	movhi	r2,2050
 400c9bc:	10841804 	addi	r2,r2,4192
 400c9c0:	10c00035 	stwio	r3,0(r2)
				}

//////////////////////////////////////////////////////////////////

				//diagonal (\)4
				if ((gameboard [y][x]==gameboard [y+1][x+1] && gameboard[y+1][x+1]== gameboard[y+2][x+2]))//(\x\)
 400c9c4:	e0b7c217 	ldw	r2,-8440(fp)
 400c9c8:	01400504 	movi	r5,20
 400c9cc:	1009883a 	mov	r4,r2
 400c9d0:	40191000 	call	4019100 <__mulsi3>
 400c9d4:	1007883a 	mov	r3,r2
 400c9d8:	e0b7c117 	ldw	r2,-8444(fp)
 400c9dc:	1885883a 	add	r2,r3,r2
 400c9e0:	1085883a 	add	r2,r2,r2
 400c9e4:	1085883a 	add	r2,r2,r2
 400c9e8:	e0f7c104 	addi	r3,fp,-8444
 400c9ec:	1885883a 	add	r2,r3,r2
 400c9f0:	10879d04 	addi	r2,r2,7796
 400c9f4:	14000017 	ldw	r16,0(r2)
 400c9f8:	e0b7c217 	ldw	r2,-8440(fp)
 400c9fc:	10c00044 	addi	r3,r2,1
 400ca00:	e0b7c117 	ldw	r2,-8444(fp)
 400ca04:	14400044 	addi	r17,r2,1
 400ca08:	01400504 	movi	r5,20
 400ca0c:	1809883a 	mov	r4,r3
 400ca10:	40191000 	call	4019100 <__mulsi3>
 400ca14:	1445883a 	add	r2,r2,r17
 400ca18:	1085883a 	add	r2,r2,r2
 400ca1c:	1085883a 	add	r2,r2,r2
 400ca20:	e0f7c104 	addi	r3,fp,-8444
 400ca24:	1885883a 	add	r2,r3,r2
 400ca28:	10879d04 	addi	r2,r2,7796
 400ca2c:	10800017 	ldw	r2,0(r2)
 400ca30:	80803f1e 	bne	r16,r2,400cb30 <main+0xc55c>
 400ca34:	e0b7c217 	ldw	r2,-8440(fp)
 400ca38:	10c00044 	addi	r3,r2,1
 400ca3c:	e0b7c117 	ldw	r2,-8444(fp)
 400ca40:	14000044 	addi	r16,r2,1
 400ca44:	01400504 	movi	r5,20
 400ca48:	1809883a 	mov	r4,r3
 400ca4c:	40191000 	call	4019100 <__mulsi3>
 400ca50:	1405883a 	add	r2,r2,r16
 400ca54:	1085883a 	add	r2,r2,r2
 400ca58:	1085883a 	add	r2,r2,r2
 400ca5c:	e0f7c104 	addi	r3,fp,-8444
 400ca60:	1885883a 	add	r2,r3,r2
 400ca64:	10879d04 	addi	r2,r2,7796
 400ca68:	14000017 	ldw	r16,0(r2)
 400ca6c:	e0b7c217 	ldw	r2,-8440(fp)
 400ca70:	10c00084 	addi	r3,r2,2
 400ca74:	e0b7c117 	ldw	r2,-8444(fp)
 400ca78:	14400084 	addi	r17,r2,2
 400ca7c:	01400504 	movi	r5,20
 400ca80:	1809883a 	mov	r4,r3
 400ca84:	40191000 	call	4019100 <__mulsi3>
 400ca88:	1445883a 	add	r2,r2,r17
 400ca8c:	1085883a 	add	r2,r2,r2
 400ca90:	1085883a 	add	r2,r2,r2
 400ca94:	e0f7c104 	addi	r3,fp,-8444
 400ca98:	1885883a 	add	r2,r3,r2
 400ca9c:	10879d04 	addi	r2,r2,7796
 400caa0:	10800017 	ldw	r2,0(r2)
 400caa4:	8080221e 	bne	r16,r2,400cb30 <main+0xc55c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400caa8:	e0b7c217 	ldw	r2,-8440(fp)
 400caac:	10c00084 	addi	r3,r2,2
 400cab0:	e0b95e04 	addi	r2,fp,-6792
 400cab4:	180f883a 	mov	r7,r3
 400cab8:	e1b7c117 	ldw	r6,-8444(fp)
 400cabc:	01403fc4 	movi	r5,255
 400cac0:	1009883a 	mov	r4,r2
 400cac4:	40003c80 	call	40003c8 <draw>
					draw(four, COLOR08_BLACK, x,y+2 );
 400cac8:	e0b7c217 	ldw	r2,-8440(fp)
 400cacc:	10800084 	addi	r2,r2,2
 400cad0:	100f883a 	mov	r7,r2
 400cad4:	e1b7c117 	ldw	r6,-8444(fp)
 400cad8:	000b883a 	mov	r5,zero
 400cadc:	010100f4 	movhi	r4,1027
 400cae0:	21372a04 	addi	r4,r4,-9048
 400cae4:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-14;
 400cae8:	e0b7c217 	ldw	r2,-8440(fp)
 400caec:	01400504 	movi	r5,20
 400caf0:	1009883a 	mov	r4,r2
 400caf4:	40191000 	call	4019100 <__mulsi3>
 400caf8:	1007883a 	mov	r3,r2
 400cafc:	e0b7c117 	ldw	r2,-8444(fp)
 400cb00:	1885883a 	add	r2,r3,r2
 400cb04:	1085883a 	add	r2,r2,r2
 400cb08:	1085883a 	add	r2,r2,r2
 400cb0c:	e0f7c104 	addi	r3,fp,-8444
 400cb10:	1885883a 	add	r2,r3,r2
 400cb14:	10879d04 	addi	r2,r2,7796
 400cb18:	00fffc84 	movi	r3,-14
 400cb1c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400cb20:	00c00044 	movi	r3,1
 400cb24:	008200b4 	movhi	r2,2050
 400cb28:	10841804 	addi	r2,r2,4192
 400cb2c:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y+1][x+1] && gameboard[y][x]== gameboard[y+2][x+2]) )//(x\\)
 400cb30:	e0b7c217 	ldw	r2,-8440(fp)
 400cb34:	01400504 	movi	r5,20
 400cb38:	1009883a 	mov	r4,r2
 400cb3c:	40191000 	call	4019100 <__mulsi3>
 400cb40:	1007883a 	mov	r3,r2
 400cb44:	e0b7c117 	ldw	r2,-8444(fp)
 400cb48:	1885883a 	add	r2,r3,r2
 400cb4c:	1085883a 	add	r2,r2,r2
 400cb50:	1085883a 	add	r2,r2,r2
 400cb54:	e0f7c104 	addi	r3,fp,-8444
 400cb58:	1885883a 	add	r2,r3,r2
 400cb5c:	10879d04 	addi	r2,r2,7796
 400cb60:	14000017 	ldw	r16,0(r2)
 400cb64:	e0b7c217 	ldw	r2,-8440(fp)
 400cb68:	10c00044 	addi	r3,r2,1
 400cb6c:	e0b7c117 	ldw	r2,-8444(fp)
 400cb70:	14400044 	addi	r17,r2,1
 400cb74:	01400504 	movi	r5,20
 400cb78:	1809883a 	mov	r4,r3
 400cb7c:	40191000 	call	4019100 <__mulsi3>
 400cb80:	1445883a 	add	r2,r2,r17
 400cb84:	1085883a 	add	r2,r2,r2
 400cb88:	1085883a 	add	r2,r2,r2
 400cb8c:	e0f7c104 	addi	r3,fp,-8444
 400cb90:	1885883a 	add	r2,r3,r2
 400cb94:	10879d04 	addi	r2,r2,7796
 400cb98:	10800017 	ldw	r2,0(r2)
 400cb9c:	80803e1e 	bne	r16,r2,400cc98 <main+0xc6c4>
 400cba0:	e0b7c217 	ldw	r2,-8440(fp)
 400cba4:	01400504 	movi	r5,20
 400cba8:	1009883a 	mov	r4,r2
 400cbac:	40191000 	call	4019100 <__mulsi3>
 400cbb0:	1007883a 	mov	r3,r2
 400cbb4:	e0b7c117 	ldw	r2,-8444(fp)
 400cbb8:	1885883a 	add	r2,r3,r2
 400cbbc:	1085883a 	add	r2,r2,r2
 400cbc0:	1085883a 	add	r2,r2,r2
 400cbc4:	e0f7c104 	addi	r3,fp,-8444
 400cbc8:	1885883a 	add	r2,r3,r2
 400cbcc:	10879d04 	addi	r2,r2,7796
 400cbd0:	14000017 	ldw	r16,0(r2)
 400cbd4:	e0b7c217 	ldw	r2,-8440(fp)
 400cbd8:	10c00084 	addi	r3,r2,2
 400cbdc:	e0b7c117 	ldw	r2,-8444(fp)
 400cbe0:	14400084 	addi	r17,r2,2
 400cbe4:	01400504 	movi	r5,20
 400cbe8:	1809883a 	mov	r4,r3
 400cbec:	40191000 	call	4019100 <__mulsi3>
 400cbf0:	1445883a 	add	r2,r2,r17
 400cbf4:	1085883a 	add	r2,r2,r2
 400cbf8:	1085883a 	add	r2,r2,r2
 400cbfc:	e0f7c104 	addi	r3,fp,-8444
 400cc00:	1885883a 	add	r2,r3,r2
 400cc04:	10879d04 	addi	r2,r2,7796
 400cc08:	10800017 	ldw	r2,0(r2)
 400cc0c:	8080221e 	bne	r16,r2,400cc98 <main+0xc6c4>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400cc10:	e0b7c217 	ldw	r2,-8440(fp)
 400cc14:	10c00084 	addi	r3,r2,2
 400cc18:	e0b95e04 	addi	r2,fp,-6792
 400cc1c:	180f883a 	mov	r7,r3
 400cc20:	e1b7c117 	ldw	r6,-8444(fp)
 400cc24:	01403fc4 	movi	r5,255
 400cc28:	1009883a 	mov	r4,r2
 400cc2c:	40003c80 	call	40003c8 <draw>
					draw(four, COLOR08_BLACK, x,y+2 );
 400cc30:	e0b7c217 	ldw	r2,-8440(fp)
 400cc34:	10800084 	addi	r2,r2,2
 400cc38:	100f883a 	mov	r7,r2
 400cc3c:	e1b7c117 	ldw	r6,-8444(fp)
 400cc40:	000b883a 	mov	r5,zero
 400cc44:	010100f4 	movhi	r4,1027
 400cc48:	21372a04 	addi	r4,r4,-9048
 400cc4c:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-14;
 400cc50:	e0b7c217 	ldw	r2,-8440(fp)
 400cc54:	01400504 	movi	r5,20
 400cc58:	1009883a 	mov	r4,r2
 400cc5c:	40191000 	call	4019100 <__mulsi3>
 400cc60:	1007883a 	mov	r3,r2
 400cc64:	e0b7c117 	ldw	r2,-8444(fp)
 400cc68:	1885883a 	add	r2,r3,r2
 400cc6c:	1085883a 	add	r2,r2,r2
 400cc70:	1085883a 	add	r2,r2,r2
 400cc74:	e0f7c104 	addi	r3,fp,-8444
 400cc78:	1885883a 	add	r2,r3,r2
 400cc7c:	10879d04 	addi	r2,r2,7796
 400cc80:	00fffc84 	movi	r3,-14
 400cc84:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400cc88:	00c00044 	movi	r3,1
 400cc8c:	008200b4 	movhi	r2,2050
 400cc90:	10841804 	addi	r2,r2,4192
 400cc94:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y-1][x-1] && gameboard[y][x]== gameboard[y-2][x-2]) )//(\\x)
 400cc98:	e0b7c217 	ldw	r2,-8440(fp)
 400cc9c:	01400504 	movi	r5,20
 400cca0:	1009883a 	mov	r4,r2
 400cca4:	40191000 	call	4019100 <__mulsi3>
 400cca8:	1007883a 	mov	r3,r2
 400ccac:	e0b7c117 	ldw	r2,-8444(fp)
 400ccb0:	1885883a 	add	r2,r3,r2
 400ccb4:	1085883a 	add	r2,r2,r2
 400ccb8:	1085883a 	add	r2,r2,r2
 400ccbc:	e0f7c104 	addi	r3,fp,-8444
 400ccc0:	1885883a 	add	r2,r3,r2
 400ccc4:	10879d04 	addi	r2,r2,7796
 400ccc8:	14000017 	ldw	r16,0(r2)
 400cccc:	e0b7c217 	ldw	r2,-8440(fp)
 400ccd0:	10ffffc4 	addi	r3,r2,-1
 400ccd4:	e0b7c117 	ldw	r2,-8444(fp)
 400ccd8:	147fffc4 	addi	r17,r2,-1
 400ccdc:	01400504 	movi	r5,20
 400cce0:	1809883a 	mov	r4,r3
 400cce4:	40191000 	call	4019100 <__mulsi3>
 400cce8:	1445883a 	add	r2,r2,r17
 400ccec:	1085883a 	add	r2,r2,r2
 400ccf0:	1085883a 	add	r2,r2,r2
 400ccf4:	e0f7c104 	addi	r3,fp,-8444
 400ccf8:	1885883a 	add	r2,r3,r2
 400ccfc:	10879d04 	addi	r2,r2,7796
 400cd00:	10800017 	ldw	r2,0(r2)
 400cd04:	80803e1e 	bne	r16,r2,400ce00 <main+0xc82c>
 400cd08:	e0b7c217 	ldw	r2,-8440(fp)
 400cd0c:	01400504 	movi	r5,20
 400cd10:	1009883a 	mov	r4,r2
 400cd14:	40191000 	call	4019100 <__mulsi3>
 400cd18:	1007883a 	mov	r3,r2
 400cd1c:	e0b7c117 	ldw	r2,-8444(fp)
 400cd20:	1885883a 	add	r2,r3,r2
 400cd24:	1085883a 	add	r2,r2,r2
 400cd28:	1085883a 	add	r2,r2,r2
 400cd2c:	e0f7c104 	addi	r3,fp,-8444
 400cd30:	1885883a 	add	r2,r3,r2
 400cd34:	10879d04 	addi	r2,r2,7796
 400cd38:	14000017 	ldw	r16,0(r2)
 400cd3c:	e0b7c217 	ldw	r2,-8440(fp)
 400cd40:	10ffff84 	addi	r3,r2,-2
 400cd44:	e0b7c117 	ldw	r2,-8444(fp)
 400cd48:	147fff84 	addi	r17,r2,-2
 400cd4c:	01400504 	movi	r5,20
 400cd50:	1809883a 	mov	r4,r3
 400cd54:	40191000 	call	4019100 <__mulsi3>
 400cd58:	1445883a 	add	r2,r2,r17
 400cd5c:	1085883a 	add	r2,r2,r2
 400cd60:	1085883a 	add	r2,r2,r2
 400cd64:	e0f7c104 	addi	r3,fp,-8444
 400cd68:	1885883a 	add	r2,r3,r2
 400cd6c:	10879d04 	addi	r2,r2,7796
 400cd70:	10800017 	ldw	r2,0(r2)
 400cd74:	8080221e 	bne	r16,r2,400ce00 <main+0xc82c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400cd78:	e0b7c217 	ldw	r2,-8440(fp)
 400cd7c:	10c00084 	addi	r3,r2,2
 400cd80:	e0b95e04 	addi	r2,fp,-6792
 400cd84:	180f883a 	mov	r7,r3
 400cd88:	e1b7c117 	ldw	r6,-8444(fp)
 400cd8c:	01403fc4 	movi	r5,255
 400cd90:	1009883a 	mov	r4,r2
 400cd94:	40003c80 	call	40003c8 <draw>
					draw(four, COLOR08_BLACK, x,y+2 );
 400cd98:	e0b7c217 	ldw	r2,-8440(fp)
 400cd9c:	10800084 	addi	r2,r2,2
 400cda0:	100f883a 	mov	r7,r2
 400cda4:	e1b7c117 	ldw	r6,-8444(fp)
 400cda8:	000b883a 	mov	r5,zero
 400cdac:	010100f4 	movhi	r4,1027
 400cdb0:	21372a04 	addi	r4,r4,-9048
 400cdb4:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-14;
 400cdb8:	e0b7c217 	ldw	r2,-8440(fp)
 400cdbc:	01400504 	movi	r5,20
 400cdc0:	1009883a 	mov	r4,r2
 400cdc4:	40191000 	call	4019100 <__mulsi3>
 400cdc8:	1007883a 	mov	r3,r2
 400cdcc:	e0b7c117 	ldw	r2,-8444(fp)
 400cdd0:	1885883a 	add	r2,r3,r2
 400cdd4:	1085883a 	add	r2,r2,r2
 400cdd8:	1085883a 	add	r2,r2,r2
 400cddc:	e0f7c104 	addi	r3,fp,-8444
 400cde0:	1885883a 	add	r2,r3,r2
 400cde4:	10879d04 	addi	r2,r2,7796
 400cde8:	00fffc84 	movi	r3,-14
 400cdec:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400cdf0:	00c00044 	movi	r3,1
 400cdf4:	008200b4 	movhi	r2,2050
 400cdf8:	10841804 	addi	r2,r2,4192
 400cdfc:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard[y][x]==4 && gameboard[y+1][x+1]==-14) || (gameboard[y][x]==4 && gameboard[y-1][x-1]==-14))//(\\x)
 400ce00:	e0b7c217 	ldw	r2,-8440(fp)
 400ce04:	01400504 	movi	r5,20
 400ce08:	1009883a 	mov	r4,r2
 400ce0c:	40191000 	call	4019100 <__mulsi3>
 400ce10:	1007883a 	mov	r3,r2
 400ce14:	e0b7c117 	ldw	r2,-8444(fp)
 400ce18:	1885883a 	add	r2,r3,r2
 400ce1c:	1085883a 	add	r2,r2,r2
 400ce20:	1085883a 	add	r2,r2,r2
 400ce24:	e0f7c104 	addi	r3,fp,-8444
 400ce28:	1885883a 	add	r2,r3,r2
 400ce2c:	10879d04 	addi	r2,r2,7796
 400ce30:	10800017 	ldw	r2,0(r2)
 400ce34:	10800118 	cmpnei	r2,r2,4
 400ce38:	1000101e 	bne	r2,zero,400ce7c <main+0xc8a8>
 400ce3c:	e0b7c217 	ldw	r2,-8440(fp)
 400ce40:	10c00044 	addi	r3,r2,1
 400ce44:	e0b7c117 	ldw	r2,-8444(fp)
 400ce48:	14000044 	addi	r16,r2,1
 400ce4c:	01400504 	movi	r5,20
 400ce50:	1809883a 	mov	r4,r3
 400ce54:	40191000 	call	4019100 <__mulsi3>
 400ce58:	1405883a 	add	r2,r2,r16
 400ce5c:	1085883a 	add	r2,r2,r2
 400ce60:	1085883a 	add	r2,r2,r2
 400ce64:	e0f7c104 	addi	r3,fp,-8444
 400ce68:	1885883a 	add	r2,r3,r2
 400ce6c:	10879d04 	addi	r2,r2,7796
 400ce70:	10800017 	ldw	r2,0(r2)
 400ce74:	10bffca0 	cmpeqi	r2,r2,-14
 400ce78:	10001f1e 	bne	r2,zero,400cef8 <main+0xc924>
 400ce7c:	e0b7c217 	ldw	r2,-8440(fp)
 400ce80:	01400504 	movi	r5,20
 400ce84:	1009883a 	mov	r4,r2
 400ce88:	40191000 	call	4019100 <__mulsi3>
 400ce8c:	1007883a 	mov	r3,r2
 400ce90:	e0b7c117 	ldw	r2,-8444(fp)
 400ce94:	1885883a 	add	r2,r3,r2
 400ce98:	1085883a 	add	r2,r2,r2
 400ce9c:	1085883a 	add	r2,r2,r2
 400cea0:	e0f7c104 	addi	r3,fp,-8444
 400cea4:	1885883a 	add	r2,r3,r2
 400cea8:	10879d04 	addi	r2,r2,7796
 400ceac:	10800017 	ldw	r2,0(r2)
 400ceb0:	10800118 	cmpnei	r2,r2,4
 400ceb4:	1000321e 	bne	r2,zero,400cf80 <main+0xc9ac>
 400ceb8:	e0b7c217 	ldw	r2,-8440(fp)
 400cebc:	10ffffc4 	addi	r3,r2,-1
 400cec0:	e0b7c117 	ldw	r2,-8444(fp)
 400cec4:	143fffc4 	addi	r16,r2,-1
 400cec8:	01400504 	movi	r5,20
 400cecc:	1809883a 	mov	r4,r3
 400ced0:	40191000 	call	4019100 <__mulsi3>
 400ced4:	1405883a 	add	r2,r2,r16
 400ced8:	1085883a 	add	r2,r2,r2
 400cedc:	1085883a 	add	r2,r2,r2
 400cee0:	e0f7c104 	addi	r3,fp,-8444
 400cee4:	1885883a 	add	r2,r3,r2
 400cee8:	10879d04 	addi	r2,r2,7796
 400ceec:	10800017 	ldw	r2,0(r2)
 400cef0:	10bffc98 	cmpnei	r2,r2,-14
 400cef4:	1000221e 	bne	r2,zero,400cf80 <main+0xc9ac>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400cef8:	e0b7c217 	ldw	r2,-8440(fp)
 400cefc:	10c00084 	addi	r3,r2,2
 400cf00:	e0b95e04 	addi	r2,fp,-6792
 400cf04:	180f883a 	mov	r7,r3
 400cf08:	e1b7c117 	ldw	r6,-8444(fp)
 400cf0c:	01403fc4 	movi	r5,255
 400cf10:	1009883a 	mov	r4,r2
 400cf14:	40003c80 	call	40003c8 <draw>
					draw(four, COLOR08_BLACK, x,y+2 );
 400cf18:	e0b7c217 	ldw	r2,-8440(fp)
 400cf1c:	10800084 	addi	r2,r2,2
 400cf20:	100f883a 	mov	r7,r2
 400cf24:	e1b7c117 	ldw	r6,-8444(fp)
 400cf28:	000b883a 	mov	r5,zero
 400cf2c:	010100f4 	movhi	r4,1027
 400cf30:	21372a04 	addi	r4,r4,-9048
 400cf34:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-14;
 400cf38:	e0b7c217 	ldw	r2,-8440(fp)
 400cf3c:	01400504 	movi	r5,20
 400cf40:	1009883a 	mov	r4,r2
 400cf44:	40191000 	call	4019100 <__mulsi3>
 400cf48:	1007883a 	mov	r3,r2
 400cf4c:	e0b7c117 	ldw	r2,-8444(fp)
 400cf50:	1885883a 	add	r2,r3,r2
 400cf54:	1085883a 	add	r2,r2,r2
 400cf58:	1085883a 	add	r2,r2,r2
 400cf5c:	e0f7c104 	addi	r3,fp,-8444
 400cf60:	1885883a 	add	r2,r3,r2
 400cf64:	10879d04 	addi	r2,r2,7796
 400cf68:	00fffc84 	movi	r3,-14
 400cf6c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400cf70:	00c00044 	movi	r3,1
 400cf74:	008200b4 	movhi	r2,2050
 400cf78:	10841804 	addi	r2,r2,4192
 400cf7c:	10c00035 	stwio	r3,0(r2)
				}
				if(gameboard[y][x]==4 && gameboard[y-1][x-1]==4 && gameboard[y-2][x-2]==-14)
 400cf80:	e0b7c217 	ldw	r2,-8440(fp)
 400cf84:	01400504 	movi	r5,20
 400cf88:	1009883a 	mov	r4,r2
 400cf8c:	40191000 	call	4019100 <__mulsi3>
 400cf90:	1007883a 	mov	r3,r2
 400cf94:	e0b7c117 	ldw	r2,-8444(fp)
 400cf98:	1885883a 	add	r2,r3,r2
 400cf9c:	1085883a 	add	r2,r2,r2
 400cfa0:	1085883a 	add	r2,r2,r2
 400cfa4:	e0f7c104 	addi	r3,fp,-8444
 400cfa8:	1885883a 	add	r2,r3,r2
 400cfac:	10879d04 	addi	r2,r2,7796
 400cfb0:	10800017 	ldw	r2,0(r2)
 400cfb4:	10800118 	cmpnei	r2,r2,4
 400cfb8:	1000421e 	bne	r2,zero,400d0c4 <main+0xcaf0>
 400cfbc:	e0b7c217 	ldw	r2,-8440(fp)
 400cfc0:	10ffffc4 	addi	r3,r2,-1
 400cfc4:	e0b7c117 	ldw	r2,-8444(fp)
 400cfc8:	143fffc4 	addi	r16,r2,-1
 400cfcc:	01400504 	movi	r5,20
 400cfd0:	1809883a 	mov	r4,r3
 400cfd4:	40191000 	call	4019100 <__mulsi3>
 400cfd8:	1405883a 	add	r2,r2,r16
 400cfdc:	1085883a 	add	r2,r2,r2
 400cfe0:	1085883a 	add	r2,r2,r2
 400cfe4:	e0f7c104 	addi	r3,fp,-8444
 400cfe8:	1885883a 	add	r2,r3,r2
 400cfec:	10879d04 	addi	r2,r2,7796
 400cff0:	10800017 	ldw	r2,0(r2)
 400cff4:	10800118 	cmpnei	r2,r2,4
 400cff8:	1000321e 	bne	r2,zero,400d0c4 <main+0xcaf0>
 400cffc:	e0b7c217 	ldw	r2,-8440(fp)
 400d000:	10ffff84 	addi	r3,r2,-2
 400d004:	e0b7c117 	ldw	r2,-8444(fp)
 400d008:	143fff84 	addi	r16,r2,-2
 400d00c:	01400504 	movi	r5,20
 400d010:	1809883a 	mov	r4,r3
 400d014:	40191000 	call	4019100 <__mulsi3>
 400d018:	1405883a 	add	r2,r2,r16
 400d01c:	1085883a 	add	r2,r2,r2
 400d020:	1085883a 	add	r2,r2,r2
 400d024:	e0f7c104 	addi	r3,fp,-8444
 400d028:	1885883a 	add	r2,r3,r2
 400d02c:	10879d04 	addi	r2,r2,7796
 400d030:	10800017 	ldw	r2,0(r2)
 400d034:	10bffc98 	cmpnei	r2,r2,-14
 400d038:	1000221e 	bne	r2,zero,400d0c4 <main+0xcaf0>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400d03c:	e0b7c217 	ldw	r2,-8440(fp)
 400d040:	10c00084 	addi	r3,r2,2
 400d044:	e0b95e04 	addi	r2,fp,-6792
 400d048:	180f883a 	mov	r7,r3
 400d04c:	e1b7c117 	ldw	r6,-8444(fp)
 400d050:	01403fc4 	movi	r5,255
 400d054:	1009883a 	mov	r4,r2
 400d058:	40003c80 	call	40003c8 <draw>
					draw(four, COLOR08_BLACK, x,y+2 );
 400d05c:	e0b7c217 	ldw	r2,-8440(fp)
 400d060:	10800084 	addi	r2,r2,2
 400d064:	100f883a 	mov	r7,r2
 400d068:	e1b7c117 	ldw	r6,-8444(fp)
 400d06c:	000b883a 	mov	r5,zero
 400d070:	010100f4 	movhi	r4,1027
 400d074:	21372a04 	addi	r4,r4,-9048
 400d078:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-14;
 400d07c:	e0b7c217 	ldw	r2,-8440(fp)
 400d080:	01400504 	movi	r5,20
 400d084:	1009883a 	mov	r4,r2
 400d088:	40191000 	call	4019100 <__mulsi3>
 400d08c:	1007883a 	mov	r3,r2
 400d090:	e0b7c117 	ldw	r2,-8444(fp)
 400d094:	1885883a 	add	r2,r3,r2
 400d098:	1085883a 	add	r2,r2,r2
 400d09c:	1085883a 	add	r2,r2,r2
 400d0a0:	e0f7c104 	addi	r3,fp,-8444
 400d0a4:	1885883a 	add	r2,r3,r2
 400d0a8:	10879d04 	addi	r2,r2,7796
 400d0ac:	00fffc84 	movi	r3,-14
 400d0b0:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400d0b4:	00c00044 	movi	r3,1
 400d0b8:	008200b4 	movhi	r2,2050
 400d0bc:	10841804 	addi	r2,r2,4192
 400d0c0:	10c00035 	stwio	r3,0(r2)
				}
				if(gameboard[y][x]==4 && gameboard[y+1][x+1]==4 && gameboard[y+2][x+2]==-14)
 400d0c4:	e0b7c217 	ldw	r2,-8440(fp)
 400d0c8:	01400504 	movi	r5,20
 400d0cc:	1009883a 	mov	r4,r2
 400d0d0:	40191000 	call	4019100 <__mulsi3>
 400d0d4:	1007883a 	mov	r3,r2
 400d0d8:	e0b7c117 	ldw	r2,-8444(fp)
 400d0dc:	1885883a 	add	r2,r3,r2
 400d0e0:	1085883a 	add	r2,r2,r2
 400d0e4:	1085883a 	add	r2,r2,r2
 400d0e8:	e0f7c104 	addi	r3,fp,-8444
 400d0ec:	1885883a 	add	r2,r3,r2
 400d0f0:	10879d04 	addi	r2,r2,7796
 400d0f4:	10800017 	ldw	r2,0(r2)
 400d0f8:	10800118 	cmpnei	r2,r2,4
 400d0fc:	1000421e 	bne	r2,zero,400d208 <main+0xcc34>
 400d100:	e0b7c217 	ldw	r2,-8440(fp)
 400d104:	10c00044 	addi	r3,r2,1
 400d108:	e0b7c117 	ldw	r2,-8444(fp)
 400d10c:	14000044 	addi	r16,r2,1
 400d110:	01400504 	movi	r5,20
 400d114:	1809883a 	mov	r4,r3
 400d118:	40191000 	call	4019100 <__mulsi3>
 400d11c:	1405883a 	add	r2,r2,r16
 400d120:	1085883a 	add	r2,r2,r2
 400d124:	1085883a 	add	r2,r2,r2
 400d128:	e0f7c104 	addi	r3,fp,-8444
 400d12c:	1885883a 	add	r2,r3,r2
 400d130:	10879d04 	addi	r2,r2,7796
 400d134:	10800017 	ldw	r2,0(r2)
 400d138:	10800118 	cmpnei	r2,r2,4
 400d13c:	1000321e 	bne	r2,zero,400d208 <main+0xcc34>
 400d140:	e0b7c217 	ldw	r2,-8440(fp)
 400d144:	10c00084 	addi	r3,r2,2
 400d148:	e0b7c117 	ldw	r2,-8444(fp)
 400d14c:	14000084 	addi	r16,r2,2
 400d150:	01400504 	movi	r5,20
 400d154:	1809883a 	mov	r4,r3
 400d158:	40191000 	call	4019100 <__mulsi3>
 400d15c:	1405883a 	add	r2,r2,r16
 400d160:	1085883a 	add	r2,r2,r2
 400d164:	1085883a 	add	r2,r2,r2
 400d168:	e0f7c104 	addi	r3,fp,-8444
 400d16c:	1885883a 	add	r2,r3,r2
 400d170:	10879d04 	addi	r2,r2,7796
 400d174:	10800017 	ldw	r2,0(r2)
 400d178:	10bffc98 	cmpnei	r2,r2,-14
 400d17c:	1000221e 	bne	r2,zero,400d208 <main+0xcc34>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400d180:	e0b7c217 	ldw	r2,-8440(fp)
 400d184:	10c00084 	addi	r3,r2,2
 400d188:	e0b95e04 	addi	r2,fp,-6792
 400d18c:	180f883a 	mov	r7,r3
 400d190:	e1b7c117 	ldw	r6,-8444(fp)
 400d194:	01403fc4 	movi	r5,255
 400d198:	1009883a 	mov	r4,r2
 400d19c:	40003c80 	call	40003c8 <draw>
					draw(four, COLOR08_BLACK, x,y+2 );
 400d1a0:	e0b7c217 	ldw	r2,-8440(fp)
 400d1a4:	10800084 	addi	r2,r2,2
 400d1a8:	100f883a 	mov	r7,r2
 400d1ac:	e1b7c117 	ldw	r6,-8444(fp)
 400d1b0:	000b883a 	mov	r5,zero
 400d1b4:	010100f4 	movhi	r4,1027
 400d1b8:	21372a04 	addi	r4,r4,-9048
 400d1bc:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-14;
 400d1c0:	e0b7c217 	ldw	r2,-8440(fp)
 400d1c4:	01400504 	movi	r5,20
 400d1c8:	1009883a 	mov	r4,r2
 400d1cc:	40191000 	call	4019100 <__mulsi3>
 400d1d0:	1007883a 	mov	r3,r2
 400d1d4:	e0b7c117 	ldw	r2,-8444(fp)
 400d1d8:	1885883a 	add	r2,r3,r2
 400d1dc:	1085883a 	add	r2,r2,r2
 400d1e0:	1085883a 	add	r2,r2,r2
 400d1e4:	e0f7c104 	addi	r3,fp,-8444
 400d1e8:	1885883a 	add	r2,r3,r2
 400d1ec:	10879d04 	addi	r2,r2,7796
 400d1f0:	00fffc84 	movi	r3,-14
 400d1f4:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400d1f8:	00c00044 	movi	r3,1
 400d1fc:	008200b4 	movhi	r2,2050
 400d200:	10841804 	addi	r2,r2,4192
 400d204:	10c00035 	stwio	r3,0(r2)
				}
				//////////////////////////////////////////////////////////

				//diagonal (/)4
				if (gameboard [y][x]==gameboard [y+1][x-1] && gameboard[y][x]== gameboard[y-1][x+1])//(/x/)
 400d208:	e0b7c217 	ldw	r2,-8440(fp)
 400d20c:	01400504 	movi	r5,20
 400d210:	1009883a 	mov	r4,r2
 400d214:	40191000 	call	4019100 <__mulsi3>
 400d218:	1007883a 	mov	r3,r2
 400d21c:	e0b7c117 	ldw	r2,-8444(fp)
 400d220:	1885883a 	add	r2,r3,r2
 400d224:	1085883a 	add	r2,r2,r2
 400d228:	1085883a 	add	r2,r2,r2
 400d22c:	e0f7c104 	addi	r3,fp,-8444
 400d230:	1885883a 	add	r2,r3,r2
 400d234:	10879d04 	addi	r2,r2,7796
 400d238:	14000017 	ldw	r16,0(r2)
 400d23c:	e0b7c217 	ldw	r2,-8440(fp)
 400d240:	10c00044 	addi	r3,r2,1
 400d244:	e0b7c117 	ldw	r2,-8444(fp)
 400d248:	147fffc4 	addi	r17,r2,-1
 400d24c:	01400504 	movi	r5,20
 400d250:	1809883a 	mov	r4,r3
 400d254:	40191000 	call	4019100 <__mulsi3>
 400d258:	1445883a 	add	r2,r2,r17
 400d25c:	1085883a 	add	r2,r2,r2
 400d260:	1085883a 	add	r2,r2,r2
 400d264:	e0f7c104 	addi	r3,fp,-8444
 400d268:	1885883a 	add	r2,r3,r2
 400d26c:	10879d04 	addi	r2,r2,7796
 400d270:	10800017 	ldw	r2,0(r2)
 400d274:	80803e1e 	bne	r16,r2,400d370 <main+0xcd9c>
 400d278:	e0b7c217 	ldw	r2,-8440(fp)
 400d27c:	01400504 	movi	r5,20
 400d280:	1009883a 	mov	r4,r2
 400d284:	40191000 	call	4019100 <__mulsi3>
 400d288:	1007883a 	mov	r3,r2
 400d28c:	e0b7c117 	ldw	r2,-8444(fp)
 400d290:	1885883a 	add	r2,r3,r2
 400d294:	1085883a 	add	r2,r2,r2
 400d298:	1085883a 	add	r2,r2,r2
 400d29c:	e0f7c104 	addi	r3,fp,-8444
 400d2a0:	1885883a 	add	r2,r3,r2
 400d2a4:	10879d04 	addi	r2,r2,7796
 400d2a8:	14000017 	ldw	r16,0(r2)
 400d2ac:	e0b7c217 	ldw	r2,-8440(fp)
 400d2b0:	10ffffc4 	addi	r3,r2,-1
 400d2b4:	e0b7c117 	ldw	r2,-8444(fp)
 400d2b8:	14400044 	addi	r17,r2,1
 400d2bc:	01400504 	movi	r5,20
 400d2c0:	1809883a 	mov	r4,r3
 400d2c4:	40191000 	call	4019100 <__mulsi3>
 400d2c8:	1445883a 	add	r2,r2,r17
 400d2cc:	1085883a 	add	r2,r2,r2
 400d2d0:	1085883a 	add	r2,r2,r2
 400d2d4:	e0f7c104 	addi	r3,fp,-8444
 400d2d8:	1885883a 	add	r2,r3,r2
 400d2dc:	10879d04 	addi	r2,r2,7796
 400d2e0:	10800017 	ldw	r2,0(r2)
 400d2e4:	8080221e 	bne	r16,r2,400d370 <main+0xcd9c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400d2e8:	e0b7c217 	ldw	r2,-8440(fp)
 400d2ec:	10c00084 	addi	r3,r2,2
 400d2f0:	e0b95e04 	addi	r2,fp,-6792
 400d2f4:	180f883a 	mov	r7,r3
 400d2f8:	e1b7c117 	ldw	r6,-8444(fp)
 400d2fc:	01403fc4 	movi	r5,255
 400d300:	1009883a 	mov	r4,r2
 400d304:	40003c80 	call	40003c8 <draw>
					draw(four, COLOR08_BLACK, x,y+2 );
 400d308:	e0b7c217 	ldw	r2,-8440(fp)
 400d30c:	10800084 	addi	r2,r2,2
 400d310:	100f883a 	mov	r7,r2
 400d314:	e1b7c117 	ldw	r6,-8444(fp)
 400d318:	000b883a 	mov	r5,zero
 400d31c:	010100f4 	movhi	r4,1027
 400d320:	21372a04 	addi	r4,r4,-9048
 400d324:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-14;
 400d328:	e0b7c217 	ldw	r2,-8440(fp)
 400d32c:	01400504 	movi	r5,20
 400d330:	1009883a 	mov	r4,r2
 400d334:	40191000 	call	4019100 <__mulsi3>
 400d338:	1007883a 	mov	r3,r2
 400d33c:	e0b7c117 	ldw	r2,-8444(fp)
 400d340:	1885883a 	add	r2,r3,r2
 400d344:	1085883a 	add	r2,r2,r2
 400d348:	1085883a 	add	r2,r2,r2
 400d34c:	e0f7c104 	addi	r3,fp,-8444
 400d350:	1885883a 	add	r2,r3,r2
 400d354:	10879d04 	addi	r2,r2,7796
 400d358:	00fffc84 	movi	r3,-14
 400d35c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400d360:	00c00044 	movi	r3,1
 400d364:	008200b4 	movhi	r2,2050
 400d368:	10841804 	addi	r2,r2,4192
 400d36c:	10c00035 	stwio	r3,0(r2)

				}
				if (gameboard [y][x]==gameboard [y-1][x+1] && gameboard[y][x]== gameboard[y-2][x+2])//(x//)
 400d370:	e0b7c217 	ldw	r2,-8440(fp)
 400d374:	01400504 	movi	r5,20
 400d378:	1009883a 	mov	r4,r2
 400d37c:	40191000 	call	4019100 <__mulsi3>
 400d380:	1007883a 	mov	r3,r2
 400d384:	e0b7c117 	ldw	r2,-8444(fp)
 400d388:	1885883a 	add	r2,r3,r2
 400d38c:	1085883a 	add	r2,r2,r2
 400d390:	1085883a 	add	r2,r2,r2
 400d394:	e0f7c104 	addi	r3,fp,-8444
 400d398:	1885883a 	add	r2,r3,r2
 400d39c:	10879d04 	addi	r2,r2,7796
 400d3a0:	14000017 	ldw	r16,0(r2)
 400d3a4:	e0b7c217 	ldw	r2,-8440(fp)
 400d3a8:	10ffffc4 	addi	r3,r2,-1
 400d3ac:	e0b7c117 	ldw	r2,-8444(fp)
 400d3b0:	14400044 	addi	r17,r2,1
 400d3b4:	01400504 	movi	r5,20
 400d3b8:	1809883a 	mov	r4,r3
 400d3bc:	40191000 	call	4019100 <__mulsi3>
 400d3c0:	1445883a 	add	r2,r2,r17
 400d3c4:	1085883a 	add	r2,r2,r2
 400d3c8:	1085883a 	add	r2,r2,r2
 400d3cc:	e0f7c104 	addi	r3,fp,-8444
 400d3d0:	1885883a 	add	r2,r3,r2
 400d3d4:	10879d04 	addi	r2,r2,7796
 400d3d8:	10800017 	ldw	r2,0(r2)
 400d3dc:	80803e1e 	bne	r16,r2,400d4d8 <main+0xcf04>
 400d3e0:	e0b7c217 	ldw	r2,-8440(fp)
 400d3e4:	01400504 	movi	r5,20
 400d3e8:	1009883a 	mov	r4,r2
 400d3ec:	40191000 	call	4019100 <__mulsi3>
 400d3f0:	1007883a 	mov	r3,r2
 400d3f4:	e0b7c117 	ldw	r2,-8444(fp)
 400d3f8:	1885883a 	add	r2,r3,r2
 400d3fc:	1085883a 	add	r2,r2,r2
 400d400:	1085883a 	add	r2,r2,r2
 400d404:	e0f7c104 	addi	r3,fp,-8444
 400d408:	1885883a 	add	r2,r3,r2
 400d40c:	10879d04 	addi	r2,r2,7796
 400d410:	14000017 	ldw	r16,0(r2)
 400d414:	e0b7c217 	ldw	r2,-8440(fp)
 400d418:	10ffff84 	addi	r3,r2,-2
 400d41c:	e0b7c117 	ldw	r2,-8444(fp)
 400d420:	14400084 	addi	r17,r2,2
 400d424:	01400504 	movi	r5,20
 400d428:	1809883a 	mov	r4,r3
 400d42c:	40191000 	call	4019100 <__mulsi3>
 400d430:	1445883a 	add	r2,r2,r17
 400d434:	1085883a 	add	r2,r2,r2
 400d438:	1085883a 	add	r2,r2,r2
 400d43c:	e0f7c104 	addi	r3,fp,-8444
 400d440:	1885883a 	add	r2,r3,r2
 400d444:	10879d04 	addi	r2,r2,7796
 400d448:	10800017 	ldw	r2,0(r2)
 400d44c:	8080221e 	bne	r16,r2,400d4d8 <main+0xcf04>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400d450:	e0b7c217 	ldw	r2,-8440(fp)
 400d454:	10c00084 	addi	r3,r2,2
 400d458:	e0b95e04 	addi	r2,fp,-6792
 400d45c:	180f883a 	mov	r7,r3
 400d460:	e1b7c117 	ldw	r6,-8444(fp)
 400d464:	01403fc4 	movi	r5,255
 400d468:	1009883a 	mov	r4,r2
 400d46c:	40003c80 	call	40003c8 <draw>
					draw(four, COLOR08_BLACK, x,y+2 );
 400d470:	e0b7c217 	ldw	r2,-8440(fp)
 400d474:	10800084 	addi	r2,r2,2
 400d478:	100f883a 	mov	r7,r2
 400d47c:	e1b7c117 	ldw	r6,-8444(fp)
 400d480:	000b883a 	mov	r5,zero
 400d484:	010100f4 	movhi	r4,1027
 400d488:	21372a04 	addi	r4,r4,-9048
 400d48c:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-14;
 400d490:	e0b7c217 	ldw	r2,-8440(fp)
 400d494:	01400504 	movi	r5,20
 400d498:	1009883a 	mov	r4,r2
 400d49c:	40191000 	call	4019100 <__mulsi3>
 400d4a0:	1007883a 	mov	r3,r2
 400d4a4:	e0b7c117 	ldw	r2,-8444(fp)
 400d4a8:	1885883a 	add	r2,r3,r2
 400d4ac:	1085883a 	add	r2,r2,r2
 400d4b0:	1085883a 	add	r2,r2,r2
 400d4b4:	e0f7c104 	addi	r3,fp,-8444
 400d4b8:	1885883a 	add	r2,r3,r2
 400d4bc:	10879d04 	addi	r2,r2,7796
 400d4c0:	00fffc84 	movi	r3,-14
 400d4c4:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400d4c8:	00c00044 	movi	r3,1
 400d4cc:	008200b4 	movhi	r2,2050
 400d4d0:	10841804 	addi	r2,r2,4192
 400d4d4:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard [y][x]==4 && gameboard [y+1][x-1]==-14) || (gameboard [y][x]==4 && gameboard [y-1][x+1]==-14))//(x//)
 400d4d8:	e0b7c217 	ldw	r2,-8440(fp)
 400d4dc:	01400504 	movi	r5,20
 400d4e0:	1009883a 	mov	r4,r2
 400d4e4:	40191000 	call	4019100 <__mulsi3>
 400d4e8:	1007883a 	mov	r3,r2
 400d4ec:	e0b7c117 	ldw	r2,-8444(fp)
 400d4f0:	1885883a 	add	r2,r3,r2
 400d4f4:	1085883a 	add	r2,r2,r2
 400d4f8:	1085883a 	add	r2,r2,r2
 400d4fc:	e0f7c104 	addi	r3,fp,-8444
 400d500:	1885883a 	add	r2,r3,r2
 400d504:	10879d04 	addi	r2,r2,7796
 400d508:	10800017 	ldw	r2,0(r2)
 400d50c:	10800118 	cmpnei	r2,r2,4
 400d510:	1000101e 	bne	r2,zero,400d554 <main+0xcf80>
 400d514:	e0b7c217 	ldw	r2,-8440(fp)
 400d518:	10c00044 	addi	r3,r2,1
 400d51c:	e0b7c117 	ldw	r2,-8444(fp)
 400d520:	143fffc4 	addi	r16,r2,-1
 400d524:	01400504 	movi	r5,20
 400d528:	1809883a 	mov	r4,r3
 400d52c:	40191000 	call	4019100 <__mulsi3>
 400d530:	1405883a 	add	r2,r2,r16
 400d534:	1085883a 	add	r2,r2,r2
 400d538:	1085883a 	add	r2,r2,r2
 400d53c:	e0f7c104 	addi	r3,fp,-8444
 400d540:	1885883a 	add	r2,r3,r2
 400d544:	10879d04 	addi	r2,r2,7796
 400d548:	10800017 	ldw	r2,0(r2)
 400d54c:	10bffca0 	cmpeqi	r2,r2,-14
 400d550:	10001f1e 	bne	r2,zero,400d5d0 <main+0xcffc>
 400d554:	e0b7c217 	ldw	r2,-8440(fp)
 400d558:	01400504 	movi	r5,20
 400d55c:	1009883a 	mov	r4,r2
 400d560:	40191000 	call	4019100 <__mulsi3>
 400d564:	1007883a 	mov	r3,r2
 400d568:	e0b7c117 	ldw	r2,-8444(fp)
 400d56c:	1885883a 	add	r2,r3,r2
 400d570:	1085883a 	add	r2,r2,r2
 400d574:	1085883a 	add	r2,r2,r2
 400d578:	e0f7c104 	addi	r3,fp,-8444
 400d57c:	1885883a 	add	r2,r3,r2
 400d580:	10879d04 	addi	r2,r2,7796
 400d584:	10800017 	ldw	r2,0(r2)
 400d588:	10800118 	cmpnei	r2,r2,4
 400d58c:	1000321e 	bne	r2,zero,400d658 <main+0xd084>
 400d590:	e0b7c217 	ldw	r2,-8440(fp)
 400d594:	10ffffc4 	addi	r3,r2,-1
 400d598:	e0b7c117 	ldw	r2,-8444(fp)
 400d59c:	14000044 	addi	r16,r2,1
 400d5a0:	01400504 	movi	r5,20
 400d5a4:	1809883a 	mov	r4,r3
 400d5a8:	40191000 	call	4019100 <__mulsi3>
 400d5ac:	1405883a 	add	r2,r2,r16
 400d5b0:	1085883a 	add	r2,r2,r2
 400d5b4:	1085883a 	add	r2,r2,r2
 400d5b8:	e0f7c104 	addi	r3,fp,-8444
 400d5bc:	1885883a 	add	r2,r3,r2
 400d5c0:	10879d04 	addi	r2,r2,7796
 400d5c4:	10800017 	ldw	r2,0(r2)
 400d5c8:	10bffc98 	cmpnei	r2,r2,-14
 400d5cc:	1000221e 	bne	r2,zero,400d658 <main+0xd084>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400d5d0:	e0b7c217 	ldw	r2,-8440(fp)
 400d5d4:	10c00084 	addi	r3,r2,2
 400d5d8:	e0b95e04 	addi	r2,fp,-6792
 400d5dc:	180f883a 	mov	r7,r3
 400d5e0:	e1b7c117 	ldw	r6,-8444(fp)
 400d5e4:	01403fc4 	movi	r5,255
 400d5e8:	1009883a 	mov	r4,r2
 400d5ec:	40003c80 	call	40003c8 <draw>
					draw(four, COLOR08_BLACK, x,y+2 );
 400d5f0:	e0b7c217 	ldw	r2,-8440(fp)
 400d5f4:	10800084 	addi	r2,r2,2
 400d5f8:	100f883a 	mov	r7,r2
 400d5fc:	e1b7c117 	ldw	r6,-8444(fp)
 400d600:	000b883a 	mov	r5,zero
 400d604:	010100f4 	movhi	r4,1027
 400d608:	21372a04 	addi	r4,r4,-9048
 400d60c:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-14;
 400d610:	e0b7c217 	ldw	r2,-8440(fp)
 400d614:	01400504 	movi	r5,20
 400d618:	1009883a 	mov	r4,r2
 400d61c:	40191000 	call	4019100 <__mulsi3>
 400d620:	1007883a 	mov	r3,r2
 400d624:	e0b7c117 	ldw	r2,-8444(fp)
 400d628:	1885883a 	add	r2,r3,r2
 400d62c:	1085883a 	add	r2,r2,r2
 400d630:	1085883a 	add	r2,r2,r2
 400d634:	e0f7c104 	addi	r3,fp,-8444
 400d638:	1885883a 	add	r2,r3,r2
 400d63c:	10879d04 	addi	r2,r2,7796
 400d640:	00fffc84 	movi	r3,-14
 400d644:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400d648:	00c00044 	movi	r3,1
 400d64c:	008200b4 	movhi	r2,2050
 400d650:	10841804 	addi	r2,r2,4192
 400d654:	10c00035 	stwio	r3,0(r2)
				}
				if(gameboard[y][x]==4 && gameboard[y+1][x-1]==4 && gameboard[y+2][x-2]==-14)
 400d658:	e0b7c217 	ldw	r2,-8440(fp)
 400d65c:	01400504 	movi	r5,20
 400d660:	1009883a 	mov	r4,r2
 400d664:	40191000 	call	4019100 <__mulsi3>
 400d668:	1007883a 	mov	r3,r2
 400d66c:	e0b7c117 	ldw	r2,-8444(fp)
 400d670:	1885883a 	add	r2,r3,r2
 400d674:	1085883a 	add	r2,r2,r2
 400d678:	1085883a 	add	r2,r2,r2
 400d67c:	e0f7c104 	addi	r3,fp,-8444
 400d680:	1885883a 	add	r2,r3,r2
 400d684:	10879d04 	addi	r2,r2,7796
 400d688:	10800017 	ldw	r2,0(r2)
 400d68c:	10800118 	cmpnei	r2,r2,4
 400d690:	1000421e 	bne	r2,zero,400d79c <main+0xd1c8>
 400d694:	e0b7c217 	ldw	r2,-8440(fp)
 400d698:	10c00044 	addi	r3,r2,1
 400d69c:	e0b7c117 	ldw	r2,-8444(fp)
 400d6a0:	143fffc4 	addi	r16,r2,-1
 400d6a4:	01400504 	movi	r5,20
 400d6a8:	1809883a 	mov	r4,r3
 400d6ac:	40191000 	call	4019100 <__mulsi3>
 400d6b0:	1405883a 	add	r2,r2,r16
 400d6b4:	1085883a 	add	r2,r2,r2
 400d6b8:	1085883a 	add	r2,r2,r2
 400d6bc:	e0f7c104 	addi	r3,fp,-8444
 400d6c0:	1885883a 	add	r2,r3,r2
 400d6c4:	10879d04 	addi	r2,r2,7796
 400d6c8:	10800017 	ldw	r2,0(r2)
 400d6cc:	10800118 	cmpnei	r2,r2,4
 400d6d0:	1000321e 	bne	r2,zero,400d79c <main+0xd1c8>
 400d6d4:	e0b7c217 	ldw	r2,-8440(fp)
 400d6d8:	10c00084 	addi	r3,r2,2
 400d6dc:	e0b7c117 	ldw	r2,-8444(fp)
 400d6e0:	143fff84 	addi	r16,r2,-2
 400d6e4:	01400504 	movi	r5,20
 400d6e8:	1809883a 	mov	r4,r3
 400d6ec:	40191000 	call	4019100 <__mulsi3>
 400d6f0:	1405883a 	add	r2,r2,r16
 400d6f4:	1085883a 	add	r2,r2,r2
 400d6f8:	1085883a 	add	r2,r2,r2
 400d6fc:	e0f7c104 	addi	r3,fp,-8444
 400d700:	1885883a 	add	r2,r3,r2
 400d704:	10879d04 	addi	r2,r2,7796
 400d708:	10800017 	ldw	r2,0(r2)
 400d70c:	10bffc98 	cmpnei	r2,r2,-14
 400d710:	1000221e 	bne	r2,zero,400d79c <main+0xd1c8>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400d714:	e0b7c217 	ldw	r2,-8440(fp)
 400d718:	10c00084 	addi	r3,r2,2
 400d71c:	e0b95e04 	addi	r2,fp,-6792
 400d720:	180f883a 	mov	r7,r3
 400d724:	e1b7c117 	ldw	r6,-8444(fp)
 400d728:	01403fc4 	movi	r5,255
 400d72c:	1009883a 	mov	r4,r2
 400d730:	40003c80 	call	40003c8 <draw>
					draw(four, COLOR08_BLACK, x,y+2 );
 400d734:	e0b7c217 	ldw	r2,-8440(fp)
 400d738:	10800084 	addi	r2,r2,2
 400d73c:	100f883a 	mov	r7,r2
 400d740:	e1b7c117 	ldw	r6,-8444(fp)
 400d744:	000b883a 	mov	r5,zero
 400d748:	010100f4 	movhi	r4,1027
 400d74c:	21372a04 	addi	r4,r4,-9048
 400d750:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-14;
 400d754:	e0b7c217 	ldw	r2,-8440(fp)
 400d758:	01400504 	movi	r5,20
 400d75c:	1009883a 	mov	r4,r2
 400d760:	40191000 	call	4019100 <__mulsi3>
 400d764:	1007883a 	mov	r3,r2
 400d768:	e0b7c117 	ldw	r2,-8444(fp)
 400d76c:	1885883a 	add	r2,r3,r2
 400d770:	1085883a 	add	r2,r2,r2
 400d774:	1085883a 	add	r2,r2,r2
 400d778:	e0f7c104 	addi	r3,fp,-8444
 400d77c:	1885883a 	add	r2,r3,r2
 400d780:	10879d04 	addi	r2,r2,7796
 400d784:	00fffc84 	movi	r3,-14
 400d788:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400d78c:	00c00044 	movi	r3,1
 400d790:	008200b4 	movhi	r2,2050
 400d794:	10841804 	addi	r2,r2,4192
 400d798:	10c00035 	stwio	r3,0(r2)
				}
				if(gameboard[y][x]==4 && gameboard[y-1][x+1]==4 && gameboard[y-2][x+2]==-14)
 400d79c:	e0b7c217 	ldw	r2,-8440(fp)
 400d7a0:	01400504 	movi	r5,20
 400d7a4:	1009883a 	mov	r4,r2
 400d7a8:	40191000 	call	4019100 <__mulsi3>
 400d7ac:	1007883a 	mov	r3,r2
 400d7b0:	e0b7c117 	ldw	r2,-8444(fp)
 400d7b4:	1885883a 	add	r2,r3,r2
 400d7b8:	1085883a 	add	r2,r2,r2
 400d7bc:	1085883a 	add	r2,r2,r2
 400d7c0:	e0f7c104 	addi	r3,fp,-8444
 400d7c4:	1885883a 	add	r2,r3,r2
 400d7c8:	10879d04 	addi	r2,r2,7796
 400d7cc:	10800017 	ldw	r2,0(r2)
 400d7d0:	10800118 	cmpnei	r2,r2,4
 400d7d4:	1000421e 	bne	r2,zero,400d8e0 <main+0xd30c>
 400d7d8:	e0b7c217 	ldw	r2,-8440(fp)
 400d7dc:	10ffffc4 	addi	r3,r2,-1
 400d7e0:	e0b7c117 	ldw	r2,-8444(fp)
 400d7e4:	14000044 	addi	r16,r2,1
 400d7e8:	01400504 	movi	r5,20
 400d7ec:	1809883a 	mov	r4,r3
 400d7f0:	40191000 	call	4019100 <__mulsi3>
 400d7f4:	1405883a 	add	r2,r2,r16
 400d7f8:	1085883a 	add	r2,r2,r2
 400d7fc:	1085883a 	add	r2,r2,r2
 400d800:	e0f7c104 	addi	r3,fp,-8444
 400d804:	1885883a 	add	r2,r3,r2
 400d808:	10879d04 	addi	r2,r2,7796
 400d80c:	10800017 	ldw	r2,0(r2)
 400d810:	10800118 	cmpnei	r2,r2,4
 400d814:	1000321e 	bne	r2,zero,400d8e0 <main+0xd30c>
 400d818:	e0b7c217 	ldw	r2,-8440(fp)
 400d81c:	10ffff84 	addi	r3,r2,-2
 400d820:	e0b7c117 	ldw	r2,-8444(fp)
 400d824:	14000084 	addi	r16,r2,2
 400d828:	01400504 	movi	r5,20
 400d82c:	1809883a 	mov	r4,r3
 400d830:	40191000 	call	4019100 <__mulsi3>
 400d834:	1405883a 	add	r2,r2,r16
 400d838:	1085883a 	add	r2,r2,r2
 400d83c:	1085883a 	add	r2,r2,r2
 400d840:	e0f7c104 	addi	r3,fp,-8444
 400d844:	1885883a 	add	r2,r3,r2
 400d848:	10879d04 	addi	r2,r2,7796
 400d84c:	10800017 	ldw	r2,0(r2)
 400d850:	10bffc98 	cmpnei	r2,r2,-14
 400d854:	1000221e 	bne	r2,zero,400d8e0 <main+0xd30c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400d858:	e0b7c217 	ldw	r2,-8440(fp)
 400d85c:	10c00084 	addi	r3,r2,2
 400d860:	e0b95e04 	addi	r2,fp,-6792
 400d864:	180f883a 	mov	r7,r3
 400d868:	e1b7c117 	ldw	r6,-8444(fp)
 400d86c:	01403fc4 	movi	r5,255
 400d870:	1009883a 	mov	r4,r2
 400d874:	40003c80 	call	40003c8 <draw>
					draw(four, COLOR08_BLACK, x,y+2 );
 400d878:	e0b7c217 	ldw	r2,-8440(fp)
 400d87c:	10800084 	addi	r2,r2,2
 400d880:	100f883a 	mov	r7,r2
 400d884:	e1b7c117 	ldw	r6,-8444(fp)
 400d888:	000b883a 	mov	r5,zero
 400d88c:	010100f4 	movhi	r4,1027
 400d890:	21372a04 	addi	r4,r4,-9048
 400d894:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-14;
 400d898:	e0b7c217 	ldw	r2,-8440(fp)
 400d89c:	01400504 	movi	r5,20
 400d8a0:	1009883a 	mov	r4,r2
 400d8a4:	40191000 	call	4019100 <__mulsi3>
 400d8a8:	1007883a 	mov	r3,r2
 400d8ac:	e0b7c117 	ldw	r2,-8444(fp)
 400d8b0:	1885883a 	add	r2,r3,r2
 400d8b4:	1085883a 	add	r2,r2,r2
 400d8b8:	1085883a 	add	r2,r2,r2
 400d8bc:	e0f7c104 	addi	r3,fp,-8444
 400d8c0:	1885883a 	add	r2,r3,r2
 400d8c4:	10879d04 	addi	r2,r2,7796
 400d8c8:	00fffc84 	movi	r3,-14
 400d8cc:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400d8d0:	00c00044 	movi	r3,1
 400d8d4:	008200b4 	movhi	r2,2050
 400d8d8:	10841804 	addi	r2,r2,4192
 400d8dc:	10c00035 	stwio	r3,0(r2)
				}
			}

			if(gameboard[y][x]==5)//5
 400d8e0:	e0b7c217 	ldw	r2,-8440(fp)
 400d8e4:	01400504 	movi	r5,20
 400d8e8:	1009883a 	mov	r4,r2
 400d8ec:	40191000 	call	4019100 <__mulsi3>
 400d8f0:	1007883a 	mov	r3,r2
 400d8f4:	e0b7c117 	ldw	r2,-8444(fp)
 400d8f8:	1885883a 	add	r2,r3,r2
 400d8fc:	1085883a 	add	r2,r2,r2
 400d900:	1085883a 	add	r2,r2,r2
 400d904:	e0f7c104 	addi	r3,fp,-8444
 400d908:	1885883a 	add	r2,r3,r2
 400d90c:	10879d04 	addi	r2,r2,7796
 400d910:	10800017 	ldw	r2,0(r2)
 400d914:	10800158 	cmpnei	r2,r2,5
 400d918:	1007351e 	bne	r2,zero,400f5f0 <main+0xf01c>
			{
				//horizontal5
				if ((gameboard [y][x]==gameboard [y][x+1] && gameboard [y][x+1]== gameboard [y][x+2]) || (gameboard[y][x]==5 && gameboard[y][x+1]==-15) )//(0,0,0)
 400d91c:	e0b7c217 	ldw	r2,-8440(fp)
 400d920:	01400504 	movi	r5,20
 400d924:	1009883a 	mov	r4,r2
 400d928:	40191000 	call	4019100 <__mulsi3>
 400d92c:	1007883a 	mov	r3,r2
 400d930:	e0b7c117 	ldw	r2,-8444(fp)
 400d934:	1885883a 	add	r2,r3,r2
 400d938:	1085883a 	add	r2,r2,r2
 400d93c:	1085883a 	add	r2,r2,r2
 400d940:	e0f7c104 	addi	r3,fp,-8444
 400d944:	1885883a 	add	r2,r3,r2
 400d948:	10879d04 	addi	r2,r2,7796
 400d94c:	14000017 	ldw	r16,0(r2)
 400d950:	e0b7c117 	ldw	r2,-8444(fp)
 400d954:	14400044 	addi	r17,r2,1
 400d958:	e0b7c217 	ldw	r2,-8440(fp)
 400d95c:	01400504 	movi	r5,20
 400d960:	1009883a 	mov	r4,r2
 400d964:	40191000 	call	4019100 <__mulsi3>
 400d968:	1445883a 	add	r2,r2,r17
 400d96c:	1085883a 	add	r2,r2,r2
 400d970:	1085883a 	add	r2,r2,r2
 400d974:	e0f7c104 	addi	r3,fp,-8444
 400d978:	1885883a 	add	r2,r3,r2
 400d97c:	10879d04 	addi	r2,r2,7796
 400d980:	10800017 	ldw	r2,0(r2)
 400d984:	80801b1e 	bne	r16,r2,400d9f4 <main+0xd420>
 400d988:	e0b7c117 	ldw	r2,-8444(fp)
 400d98c:	14000044 	addi	r16,r2,1
 400d990:	e0b7c217 	ldw	r2,-8440(fp)
 400d994:	01400504 	movi	r5,20
 400d998:	1009883a 	mov	r4,r2
 400d99c:	40191000 	call	4019100 <__mulsi3>
 400d9a0:	1405883a 	add	r2,r2,r16
 400d9a4:	1085883a 	add	r2,r2,r2
 400d9a8:	1085883a 	add	r2,r2,r2
 400d9ac:	e0f7c104 	addi	r3,fp,-8444
 400d9b0:	1885883a 	add	r2,r3,r2
 400d9b4:	10879d04 	addi	r2,r2,7796
 400d9b8:	14000017 	ldw	r16,0(r2)
 400d9bc:	e0b7c117 	ldw	r2,-8444(fp)
 400d9c0:	14400084 	addi	r17,r2,2
 400d9c4:	e0b7c217 	ldw	r2,-8440(fp)
 400d9c8:	01400504 	movi	r5,20
 400d9cc:	1009883a 	mov	r4,r2
 400d9d0:	40191000 	call	4019100 <__mulsi3>
 400d9d4:	1445883a 	add	r2,r2,r17
 400d9d8:	1085883a 	add	r2,r2,r2
 400d9dc:	1085883a 	add	r2,r2,r2
 400d9e0:	e0f7c104 	addi	r3,fp,-8444
 400d9e4:	1885883a 	add	r2,r3,r2
 400d9e8:	10879d04 	addi	r2,r2,7796
 400d9ec:	10800017 	ldw	r2,0(r2)
 400d9f0:	80801e26 	beq	r16,r2,400da6c <main+0xd498>
 400d9f4:	e0b7c217 	ldw	r2,-8440(fp)
 400d9f8:	01400504 	movi	r5,20
 400d9fc:	1009883a 	mov	r4,r2
 400da00:	40191000 	call	4019100 <__mulsi3>
 400da04:	1007883a 	mov	r3,r2
 400da08:	e0b7c117 	ldw	r2,-8444(fp)
 400da0c:	1885883a 	add	r2,r3,r2
 400da10:	1085883a 	add	r2,r2,r2
 400da14:	1085883a 	add	r2,r2,r2
 400da18:	e0f7c104 	addi	r3,fp,-8444
 400da1c:	1885883a 	add	r2,r3,r2
 400da20:	10879d04 	addi	r2,r2,7796
 400da24:	10800017 	ldw	r2,0(r2)
 400da28:	10800158 	cmpnei	r2,r2,5
 400da2c:	1000311e 	bne	r2,zero,400daf4 <main+0xd520>
 400da30:	e0b7c117 	ldw	r2,-8444(fp)
 400da34:	14000044 	addi	r16,r2,1
 400da38:	e0b7c217 	ldw	r2,-8440(fp)
 400da3c:	01400504 	movi	r5,20
 400da40:	1009883a 	mov	r4,r2
 400da44:	40191000 	call	4019100 <__mulsi3>
 400da48:	1405883a 	add	r2,r2,r16
 400da4c:	1085883a 	add	r2,r2,r2
 400da50:	1085883a 	add	r2,r2,r2
 400da54:	e0f7c104 	addi	r3,fp,-8444
 400da58:	1885883a 	add	r2,r3,r2
 400da5c:	10879d04 	addi	r2,r2,7796
 400da60:	10800017 	ldw	r2,0(r2)
 400da64:	10bffc58 	cmpnei	r2,r2,-15
 400da68:	1000221e 	bne	r2,zero,400daf4 <main+0xd520>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400da6c:	e0b7c217 	ldw	r2,-8440(fp)
 400da70:	10c00084 	addi	r3,r2,2
 400da74:	e0b95e04 	addi	r2,fp,-6792
 400da78:	180f883a 	mov	r7,r3
 400da7c:	e1b7c117 	ldw	r6,-8444(fp)
 400da80:	01403fc4 	movi	r5,255
 400da84:	1009883a 	mov	r4,r2
 400da88:	40003c80 	call	40003c8 <draw>
					draw(five, COLOR08_BLACK, x,y+2 );
 400da8c:	e0b7c217 	ldw	r2,-8440(fp)
 400da90:	10800084 	addi	r2,r2,2
 400da94:	100f883a 	mov	r7,r2
 400da98:	e1b7c117 	ldw	r6,-8444(fp)
 400da9c:	000b883a 	mov	r5,zero
 400daa0:	010100f4 	movhi	r4,1027
 400daa4:	2138aa04 	addi	r4,r4,-7512
 400daa8:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-15;
 400daac:	e0b7c217 	ldw	r2,-8440(fp)
 400dab0:	01400504 	movi	r5,20
 400dab4:	1009883a 	mov	r4,r2
 400dab8:	40191000 	call	4019100 <__mulsi3>
 400dabc:	1007883a 	mov	r3,r2
 400dac0:	e0b7c117 	ldw	r2,-8444(fp)
 400dac4:	1885883a 	add	r2,r3,r2
 400dac8:	1085883a 	add	r2,r2,r2
 400dacc:	1085883a 	add	r2,r2,r2
 400dad0:	e0f7c104 	addi	r3,fp,-8444
 400dad4:	1885883a 	add	r2,r3,r2
 400dad8:	10879d04 	addi	r2,r2,7796
 400dadc:	00fffc44 	movi	r3,-15
 400dae0:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400dae4:	00c00044 	movi	r3,1
 400dae8:	008200b4 	movhi	r2,2050
 400daec:	10841804 	addi	r2,r2,4192
 400daf0:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y][x-1] && gameboard [y][x]== gameboard [y][x+1]) || (gameboard [y][x]==5 && gameboard [y][x-1]==-15) || (gameboard [y][x]==5 && gameboard [y][x+1]==-15))//(
 400daf4:	e0b7c217 	ldw	r2,-8440(fp)
 400daf8:	01400504 	movi	r5,20
 400dafc:	1009883a 	mov	r4,r2
 400db00:	40191000 	call	4019100 <__mulsi3>
 400db04:	1007883a 	mov	r3,r2
 400db08:	e0b7c117 	ldw	r2,-8444(fp)
 400db0c:	1885883a 	add	r2,r3,r2
 400db10:	1085883a 	add	r2,r2,r2
 400db14:	1085883a 	add	r2,r2,r2
 400db18:	e0f7c104 	addi	r3,fp,-8444
 400db1c:	1885883a 	add	r2,r3,r2
 400db20:	10879d04 	addi	r2,r2,7796
 400db24:	14000017 	ldw	r16,0(r2)
 400db28:	e0b7c117 	ldw	r2,-8444(fp)
 400db2c:	147fffc4 	addi	r17,r2,-1
 400db30:	e0b7c217 	ldw	r2,-8440(fp)
 400db34:	01400504 	movi	r5,20
 400db38:	1009883a 	mov	r4,r2
 400db3c:	40191000 	call	4019100 <__mulsi3>
 400db40:	1445883a 	add	r2,r2,r17
 400db44:	1085883a 	add	r2,r2,r2
 400db48:	1085883a 	add	r2,r2,r2
 400db4c:	e0f7c104 	addi	r3,fp,-8444
 400db50:	1885883a 	add	r2,r3,r2
 400db54:	10879d04 	addi	r2,r2,7796
 400db58:	10800017 	ldw	r2,0(r2)
 400db5c:	80801b1e 	bne	r16,r2,400dbcc <main+0xd5f8>
 400db60:	e0b7c217 	ldw	r2,-8440(fp)
 400db64:	01400504 	movi	r5,20
 400db68:	1009883a 	mov	r4,r2
 400db6c:	40191000 	call	4019100 <__mulsi3>
 400db70:	1007883a 	mov	r3,r2
 400db74:	e0b7c117 	ldw	r2,-8444(fp)
 400db78:	1885883a 	add	r2,r3,r2
 400db7c:	1085883a 	add	r2,r2,r2
 400db80:	1085883a 	add	r2,r2,r2
 400db84:	e0f7c104 	addi	r3,fp,-8444
 400db88:	1885883a 	add	r2,r3,r2
 400db8c:	10879d04 	addi	r2,r2,7796
 400db90:	14000017 	ldw	r16,0(r2)
 400db94:	e0b7c117 	ldw	r2,-8444(fp)
 400db98:	14400044 	addi	r17,r2,1
 400db9c:	e0b7c217 	ldw	r2,-8440(fp)
 400dba0:	01400504 	movi	r5,20
 400dba4:	1009883a 	mov	r4,r2
 400dba8:	40191000 	call	4019100 <__mulsi3>
 400dbac:	1445883a 	add	r2,r2,r17
 400dbb0:	1085883a 	add	r2,r2,r2
 400dbb4:	1085883a 	add	r2,r2,r2
 400dbb8:	e0f7c104 	addi	r3,fp,-8444
 400dbbc:	1885883a 	add	r2,r3,r2
 400dbc0:	10879d04 	addi	r2,r2,7796
 400dbc4:	10800017 	ldw	r2,0(r2)
 400dbc8:	80803c26 	beq	r16,r2,400dcbc <main+0xd6e8>
 400dbcc:	e0b7c217 	ldw	r2,-8440(fp)
 400dbd0:	01400504 	movi	r5,20
 400dbd4:	1009883a 	mov	r4,r2
 400dbd8:	40191000 	call	4019100 <__mulsi3>
 400dbdc:	1007883a 	mov	r3,r2
 400dbe0:	e0b7c117 	ldw	r2,-8444(fp)
 400dbe4:	1885883a 	add	r2,r3,r2
 400dbe8:	1085883a 	add	r2,r2,r2
 400dbec:	1085883a 	add	r2,r2,r2
 400dbf0:	e0f7c104 	addi	r3,fp,-8444
 400dbf4:	1885883a 	add	r2,r3,r2
 400dbf8:	10879d04 	addi	r2,r2,7796
 400dbfc:	10800017 	ldw	r2,0(r2)
 400dc00:	10800158 	cmpnei	r2,r2,5
 400dc04:	10000f1e 	bne	r2,zero,400dc44 <main+0xd670>
 400dc08:	e0b7c117 	ldw	r2,-8444(fp)
 400dc0c:	143fffc4 	addi	r16,r2,-1
 400dc10:	e0b7c217 	ldw	r2,-8440(fp)
 400dc14:	01400504 	movi	r5,20
 400dc18:	1009883a 	mov	r4,r2
 400dc1c:	40191000 	call	4019100 <__mulsi3>
 400dc20:	1405883a 	add	r2,r2,r16
 400dc24:	1085883a 	add	r2,r2,r2
 400dc28:	1085883a 	add	r2,r2,r2
 400dc2c:	e0f7c104 	addi	r3,fp,-8444
 400dc30:	1885883a 	add	r2,r3,r2
 400dc34:	10879d04 	addi	r2,r2,7796
 400dc38:	10800017 	ldw	r2,0(r2)
 400dc3c:	10bffc60 	cmpeqi	r2,r2,-15
 400dc40:	10001e1e 	bne	r2,zero,400dcbc <main+0xd6e8>
 400dc44:	e0b7c217 	ldw	r2,-8440(fp)
 400dc48:	01400504 	movi	r5,20
 400dc4c:	1009883a 	mov	r4,r2
 400dc50:	40191000 	call	4019100 <__mulsi3>
 400dc54:	1007883a 	mov	r3,r2
 400dc58:	e0b7c117 	ldw	r2,-8444(fp)
 400dc5c:	1885883a 	add	r2,r3,r2
 400dc60:	1085883a 	add	r2,r2,r2
 400dc64:	1085883a 	add	r2,r2,r2
 400dc68:	e0f7c104 	addi	r3,fp,-8444
 400dc6c:	1885883a 	add	r2,r3,r2
 400dc70:	10879d04 	addi	r2,r2,7796
 400dc74:	10800017 	ldw	r2,0(r2)
 400dc78:	10800158 	cmpnei	r2,r2,5
 400dc7c:	1000311e 	bne	r2,zero,400dd44 <main+0xd770>
 400dc80:	e0b7c117 	ldw	r2,-8444(fp)
 400dc84:	14000044 	addi	r16,r2,1
 400dc88:	e0b7c217 	ldw	r2,-8440(fp)
 400dc8c:	01400504 	movi	r5,20
 400dc90:	1009883a 	mov	r4,r2
 400dc94:	40191000 	call	4019100 <__mulsi3>
 400dc98:	1405883a 	add	r2,r2,r16
 400dc9c:	1085883a 	add	r2,r2,r2
 400dca0:	1085883a 	add	r2,r2,r2
 400dca4:	e0f7c104 	addi	r3,fp,-8444
 400dca8:	1885883a 	add	r2,r3,r2
 400dcac:	10879d04 	addi	r2,r2,7796
 400dcb0:	10800017 	ldw	r2,0(r2)
 400dcb4:	10bffc58 	cmpnei	r2,r2,-15
 400dcb8:	1000221e 	bne	r2,zero,400dd44 <main+0xd770>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400dcbc:	e0b7c217 	ldw	r2,-8440(fp)
 400dcc0:	10c00084 	addi	r3,r2,2
 400dcc4:	e0b95e04 	addi	r2,fp,-6792
 400dcc8:	180f883a 	mov	r7,r3
 400dccc:	e1b7c117 	ldw	r6,-8444(fp)
 400dcd0:	01403fc4 	movi	r5,255
 400dcd4:	1009883a 	mov	r4,r2
 400dcd8:	40003c80 	call	40003c8 <draw>
					draw(five, COLOR08_BLACK, x,y+2 );
 400dcdc:	e0b7c217 	ldw	r2,-8440(fp)
 400dce0:	10800084 	addi	r2,r2,2
 400dce4:	100f883a 	mov	r7,r2
 400dce8:	e1b7c117 	ldw	r6,-8444(fp)
 400dcec:	000b883a 	mov	r5,zero
 400dcf0:	010100f4 	movhi	r4,1027
 400dcf4:	2138aa04 	addi	r4,r4,-7512
 400dcf8:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-15;
 400dcfc:	e0b7c217 	ldw	r2,-8440(fp)
 400dd00:	01400504 	movi	r5,20
 400dd04:	1009883a 	mov	r4,r2
 400dd08:	40191000 	call	4019100 <__mulsi3>
 400dd0c:	1007883a 	mov	r3,r2
 400dd10:	e0b7c117 	ldw	r2,-8444(fp)
 400dd14:	1885883a 	add	r2,r3,r2
 400dd18:	1085883a 	add	r2,r2,r2
 400dd1c:	1085883a 	add	r2,r2,r2
 400dd20:	e0f7c104 	addi	r3,fp,-8444
 400dd24:	1885883a 	add	r2,r3,r2
 400dd28:	10879d04 	addi	r2,r2,7796
 400dd2c:	00fffc44 	movi	r3,-15
 400dd30:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400dd34:	00c00044 	movi	r3,1
 400dd38:	008200b4 	movhi	r2,2050
 400dd3c:	10841804 	addi	r2,r2,4192
 400dd40:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y][x-1] && gameboard [y][x]== gameboard [y][x-2]))//00x
 400dd44:	e0b7c217 	ldw	r2,-8440(fp)
 400dd48:	01400504 	movi	r5,20
 400dd4c:	1009883a 	mov	r4,r2
 400dd50:	40191000 	call	4019100 <__mulsi3>
 400dd54:	1007883a 	mov	r3,r2
 400dd58:	e0b7c117 	ldw	r2,-8444(fp)
 400dd5c:	1885883a 	add	r2,r3,r2
 400dd60:	1085883a 	add	r2,r2,r2
 400dd64:	1085883a 	add	r2,r2,r2
 400dd68:	e0f7c104 	addi	r3,fp,-8444
 400dd6c:	1885883a 	add	r2,r3,r2
 400dd70:	10879d04 	addi	r2,r2,7796
 400dd74:	14000017 	ldw	r16,0(r2)
 400dd78:	e0b7c117 	ldw	r2,-8444(fp)
 400dd7c:	147fffc4 	addi	r17,r2,-1
 400dd80:	e0b7c217 	ldw	r2,-8440(fp)
 400dd84:	01400504 	movi	r5,20
 400dd88:	1009883a 	mov	r4,r2
 400dd8c:	40191000 	call	4019100 <__mulsi3>
 400dd90:	1445883a 	add	r2,r2,r17
 400dd94:	1085883a 	add	r2,r2,r2
 400dd98:	1085883a 	add	r2,r2,r2
 400dd9c:	e0f7c104 	addi	r3,fp,-8444
 400dda0:	1885883a 	add	r2,r3,r2
 400dda4:	10879d04 	addi	r2,r2,7796
 400dda8:	10800017 	ldw	r2,0(r2)
 400ddac:	80803d1e 	bne	r16,r2,400dea4 <main+0xd8d0>
 400ddb0:	e0b7c217 	ldw	r2,-8440(fp)
 400ddb4:	01400504 	movi	r5,20
 400ddb8:	1009883a 	mov	r4,r2
 400ddbc:	40191000 	call	4019100 <__mulsi3>
 400ddc0:	1007883a 	mov	r3,r2
 400ddc4:	e0b7c117 	ldw	r2,-8444(fp)
 400ddc8:	1885883a 	add	r2,r3,r2
 400ddcc:	1085883a 	add	r2,r2,r2
 400ddd0:	1085883a 	add	r2,r2,r2
 400ddd4:	e0f7c104 	addi	r3,fp,-8444
 400ddd8:	1885883a 	add	r2,r3,r2
 400dddc:	10879d04 	addi	r2,r2,7796
 400dde0:	14000017 	ldw	r16,0(r2)
 400dde4:	e0b7c117 	ldw	r2,-8444(fp)
 400dde8:	147fff84 	addi	r17,r2,-2
 400ddec:	e0b7c217 	ldw	r2,-8440(fp)
 400ddf0:	01400504 	movi	r5,20
 400ddf4:	1009883a 	mov	r4,r2
 400ddf8:	40191000 	call	4019100 <__mulsi3>
 400ddfc:	1445883a 	add	r2,r2,r17
 400de00:	1085883a 	add	r2,r2,r2
 400de04:	1085883a 	add	r2,r2,r2
 400de08:	e0f7c104 	addi	r3,fp,-8444
 400de0c:	1885883a 	add	r2,r3,r2
 400de10:	10879d04 	addi	r2,r2,7796
 400de14:	10800017 	ldw	r2,0(r2)
 400de18:	8080221e 	bne	r16,r2,400dea4 <main+0xd8d0>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400de1c:	e0b7c217 	ldw	r2,-8440(fp)
 400de20:	10c00084 	addi	r3,r2,2
 400de24:	e0b95e04 	addi	r2,fp,-6792
 400de28:	180f883a 	mov	r7,r3
 400de2c:	e1b7c117 	ldw	r6,-8444(fp)
 400de30:	01403fc4 	movi	r5,255
 400de34:	1009883a 	mov	r4,r2
 400de38:	40003c80 	call	40003c8 <draw>
					draw(five, COLOR08_BLACK, x,y+2 );
 400de3c:	e0b7c217 	ldw	r2,-8440(fp)
 400de40:	10800084 	addi	r2,r2,2
 400de44:	100f883a 	mov	r7,r2
 400de48:	e1b7c117 	ldw	r6,-8444(fp)
 400de4c:	000b883a 	mov	r5,zero
 400de50:	010100f4 	movhi	r4,1027
 400de54:	2138aa04 	addi	r4,r4,-7512
 400de58:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-15;
 400de5c:	e0b7c217 	ldw	r2,-8440(fp)
 400de60:	01400504 	movi	r5,20
 400de64:	1009883a 	mov	r4,r2
 400de68:	40191000 	call	4019100 <__mulsi3>
 400de6c:	1007883a 	mov	r3,r2
 400de70:	e0b7c117 	ldw	r2,-8444(fp)
 400de74:	1885883a 	add	r2,r3,r2
 400de78:	1085883a 	add	r2,r2,r2
 400de7c:	1085883a 	add	r2,r2,r2
 400de80:	e0f7c104 	addi	r3,fp,-8444
 400de84:	1885883a 	add	r2,r3,r2
 400de88:	10879d04 	addi	r2,r2,7796
 400de8c:	00fffc44 	movi	r3,-15
 400de90:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400de94:	00c00044 	movi	r3,1
 400de98:	008200b4 	movhi	r2,2050
 400de9c:	10841804 	addi	r2,r2,4192
 400dea0:	10c00035 	stwio	r3,0(r2)
				}
				if(gameboard[y][x]==5 && gameboard[y][x+1]==5 && gameboard[y][x+2]==-15)
 400dea4:	e0b7c217 	ldw	r2,-8440(fp)
 400dea8:	01400504 	movi	r5,20
 400deac:	1009883a 	mov	r4,r2
 400deb0:	40191000 	call	4019100 <__mulsi3>
 400deb4:	1007883a 	mov	r3,r2
 400deb8:	e0b7c117 	ldw	r2,-8444(fp)
 400debc:	1885883a 	add	r2,r3,r2
 400dec0:	1085883a 	add	r2,r2,r2
 400dec4:	1085883a 	add	r2,r2,r2
 400dec8:	e0f7c104 	addi	r3,fp,-8444
 400decc:	1885883a 	add	r2,r3,r2
 400ded0:	10879d04 	addi	r2,r2,7796
 400ded4:	10800017 	ldw	r2,0(r2)
 400ded8:	10800158 	cmpnei	r2,r2,5
 400dedc:	1000401e 	bne	r2,zero,400dfe0 <main+0xda0c>
 400dee0:	e0b7c117 	ldw	r2,-8444(fp)
 400dee4:	14000044 	addi	r16,r2,1
 400dee8:	e0b7c217 	ldw	r2,-8440(fp)
 400deec:	01400504 	movi	r5,20
 400def0:	1009883a 	mov	r4,r2
 400def4:	40191000 	call	4019100 <__mulsi3>
 400def8:	1405883a 	add	r2,r2,r16
 400defc:	1085883a 	add	r2,r2,r2
 400df00:	1085883a 	add	r2,r2,r2
 400df04:	e0f7c104 	addi	r3,fp,-8444
 400df08:	1885883a 	add	r2,r3,r2
 400df0c:	10879d04 	addi	r2,r2,7796
 400df10:	10800017 	ldw	r2,0(r2)
 400df14:	10800158 	cmpnei	r2,r2,5
 400df18:	1000311e 	bne	r2,zero,400dfe0 <main+0xda0c>
 400df1c:	e0b7c117 	ldw	r2,-8444(fp)
 400df20:	14000084 	addi	r16,r2,2
 400df24:	e0b7c217 	ldw	r2,-8440(fp)
 400df28:	01400504 	movi	r5,20
 400df2c:	1009883a 	mov	r4,r2
 400df30:	40191000 	call	4019100 <__mulsi3>
 400df34:	1405883a 	add	r2,r2,r16
 400df38:	1085883a 	add	r2,r2,r2
 400df3c:	1085883a 	add	r2,r2,r2
 400df40:	e0f7c104 	addi	r3,fp,-8444
 400df44:	1885883a 	add	r2,r3,r2
 400df48:	10879d04 	addi	r2,r2,7796
 400df4c:	10800017 	ldw	r2,0(r2)
 400df50:	10bffc58 	cmpnei	r2,r2,-15
 400df54:	1000221e 	bne	r2,zero,400dfe0 <main+0xda0c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400df58:	e0b7c217 	ldw	r2,-8440(fp)
 400df5c:	10c00084 	addi	r3,r2,2
 400df60:	e0b95e04 	addi	r2,fp,-6792
 400df64:	180f883a 	mov	r7,r3
 400df68:	e1b7c117 	ldw	r6,-8444(fp)
 400df6c:	01403fc4 	movi	r5,255
 400df70:	1009883a 	mov	r4,r2
 400df74:	40003c80 	call	40003c8 <draw>
					draw(five, COLOR08_BLACK, x,y+2 );
 400df78:	e0b7c217 	ldw	r2,-8440(fp)
 400df7c:	10800084 	addi	r2,r2,2
 400df80:	100f883a 	mov	r7,r2
 400df84:	e1b7c117 	ldw	r6,-8444(fp)
 400df88:	000b883a 	mov	r5,zero
 400df8c:	010100f4 	movhi	r4,1027
 400df90:	2138aa04 	addi	r4,r4,-7512
 400df94:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-15;
 400df98:	e0b7c217 	ldw	r2,-8440(fp)
 400df9c:	01400504 	movi	r5,20
 400dfa0:	1009883a 	mov	r4,r2
 400dfa4:	40191000 	call	4019100 <__mulsi3>
 400dfa8:	1007883a 	mov	r3,r2
 400dfac:	e0b7c117 	ldw	r2,-8444(fp)
 400dfb0:	1885883a 	add	r2,r3,r2
 400dfb4:	1085883a 	add	r2,r2,r2
 400dfb8:	1085883a 	add	r2,r2,r2
 400dfbc:	e0f7c104 	addi	r3,fp,-8444
 400dfc0:	1885883a 	add	r2,r3,r2
 400dfc4:	10879d04 	addi	r2,r2,7796
 400dfc8:	00fffc44 	movi	r3,-15
 400dfcc:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400dfd0:	00c00044 	movi	r3,1
 400dfd4:	008200b4 	movhi	r2,2050
 400dfd8:	10841804 	addi	r2,r2,4192
 400dfdc:	10c00035 	stwio	r3,0(r2)
				}
				/////////////////////////////////

				//vertical5
				if ((gameboard [y][x]==gameboard [y+1][x] && gameboard [y+1][x]== gameboard [y+2][x]) || (gameboard [y][x]==5 && gameboard [y+1][x]==-15))//xmb
 400dfe0:	e0b7c217 	ldw	r2,-8440(fp)
 400dfe4:	01400504 	movi	r5,20
 400dfe8:	1009883a 	mov	r4,r2
 400dfec:	40191000 	call	4019100 <__mulsi3>
 400dff0:	1007883a 	mov	r3,r2
 400dff4:	e0b7c117 	ldw	r2,-8444(fp)
 400dff8:	1885883a 	add	r2,r3,r2
 400dffc:	1085883a 	add	r2,r2,r2
 400e000:	1085883a 	add	r2,r2,r2
 400e004:	e0f7c104 	addi	r3,fp,-8444
 400e008:	1885883a 	add	r2,r3,r2
 400e00c:	10879d04 	addi	r2,r2,7796
 400e010:	14000017 	ldw	r16,0(r2)
 400e014:	e0b7c217 	ldw	r2,-8440(fp)
 400e018:	10800044 	addi	r2,r2,1
 400e01c:	01400504 	movi	r5,20
 400e020:	1009883a 	mov	r4,r2
 400e024:	40191000 	call	4019100 <__mulsi3>
 400e028:	1007883a 	mov	r3,r2
 400e02c:	e0b7c117 	ldw	r2,-8444(fp)
 400e030:	1885883a 	add	r2,r3,r2
 400e034:	1085883a 	add	r2,r2,r2
 400e038:	1085883a 	add	r2,r2,r2
 400e03c:	e0f7c104 	addi	r3,fp,-8444
 400e040:	1885883a 	add	r2,r3,r2
 400e044:	10879d04 	addi	r2,r2,7796
 400e048:	10800017 	ldw	r2,0(r2)
 400e04c:	80801d1e 	bne	r16,r2,400e0c4 <main+0xdaf0>
 400e050:	e0b7c217 	ldw	r2,-8440(fp)
 400e054:	10800044 	addi	r2,r2,1
 400e058:	01400504 	movi	r5,20
 400e05c:	1009883a 	mov	r4,r2
 400e060:	40191000 	call	4019100 <__mulsi3>
 400e064:	1007883a 	mov	r3,r2
 400e068:	e0b7c117 	ldw	r2,-8444(fp)
 400e06c:	1885883a 	add	r2,r3,r2
 400e070:	1085883a 	add	r2,r2,r2
 400e074:	1085883a 	add	r2,r2,r2
 400e078:	e0f7c104 	addi	r3,fp,-8444
 400e07c:	1885883a 	add	r2,r3,r2
 400e080:	10879d04 	addi	r2,r2,7796
 400e084:	14000017 	ldw	r16,0(r2)
 400e088:	e0b7c217 	ldw	r2,-8440(fp)
 400e08c:	10800084 	addi	r2,r2,2
 400e090:	01400504 	movi	r5,20
 400e094:	1009883a 	mov	r4,r2
 400e098:	40191000 	call	4019100 <__mulsi3>
 400e09c:	1007883a 	mov	r3,r2
 400e0a0:	e0b7c117 	ldw	r2,-8444(fp)
 400e0a4:	1885883a 	add	r2,r3,r2
 400e0a8:	1085883a 	add	r2,r2,r2
 400e0ac:	1085883a 	add	r2,r2,r2
 400e0b0:	e0f7c104 	addi	r3,fp,-8444
 400e0b4:	1885883a 	add	r2,r3,r2
 400e0b8:	10879d04 	addi	r2,r2,7796
 400e0bc:	10800017 	ldw	r2,0(r2)
 400e0c0:	80801f26 	beq	r16,r2,400e140 <main+0xdb6c>
 400e0c4:	e0b7c217 	ldw	r2,-8440(fp)
 400e0c8:	01400504 	movi	r5,20
 400e0cc:	1009883a 	mov	r4,r2
 400e0d0:	40191000 	call	4019100 <__mulsi3>
 400e0d4:	1007883a 	mov	r3,r2
 400e0d8:	e0b7c117 	ldw	r2,-8444(fp)
 400e0dc:	1885883a 	add	r2,r3,r2
 400e0e0:	1085883a 	add	r2,r2,r2
 400e0e4:	1085883a 	add	r2,r2,r2
 400e0e8:	e0f7c104 	addi	r3,fp,-8444
 400e0ec:	1885883a 	add	r2,r3,r2
 400e0f0:	10879d04 	addi	r2,r2,7796
 400e0f4:	10800017 	ldw	r2,0(r2)
 400e0f8:	10800158 	cmpnei	r2,r2,5
 400e0fc:	1000321e 	bne	r2,zero,400e1c8 <main+0xdbf4>
 400e100:	e0b7c217 	ldw	r2,-8440(fp)
 400e104:	10800044 	addi	r2,r2,1
 400e108:	01400504 	movi	r5,20
 400e10c:	1009883a 	mov	r4,r2
 400e110:	40191000 	call	4019100 <__mulsi3>
 400e114:	1007883a 	mov	r3,r2
 400e118:	e0b7c117 	ldw	r2,-8444(fp)
 400e11c:	1885883a 	add	r2,r3,r2
 400e120:	1085883a 	add	r2,r2,r2
 400e124:	1085883a 	add	r2,r2,r2
 400e128:	e0f7c104 	addi	r3,fp,-8444
 400e12c:	1885883a 	add	r2,r3,r2
 400e130:	10879d04 	addi	r2,r2,7796
 400e134:	10800017 	ldw	r2,0(r2)
 400e138:	10bffc58 	cmpnei	r2,r2,-15
 400e13c:	1000221e 	bne	r2,zero,400e1c8 <main+0xdbf4>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400e140:	e0b7c217 	ldw	r2,-8440(fp)
 400e144:	10c00084 	addi	r3,r2,2
 400e148:	e0b95e04 	addi	r2,fp,-6792
 400e14c:	180f883a 	mov	r7,r3
 400e150:	e1b7c117 	ldw	r6,-8444(fp)
 400e154:	01403fc4 	movi	r5,255
 400e158:	1009883a 	mov	r4,r2
 400e15c:	40003c80 	call	40003c8 <draw>
					draw(five, COLOR08_BLACK, x,y+2 );
 400e160:	e0b7c217 	ldw	r2,-8440(fp)
 400e164:	10800084 	addi	r2,r2,2
 400e168:	100f883a 	mov	r7,r2
 400e16c:	e1b7c117 	ldw	r6,-8444(fp)
 400e170:	000b883a 	mov	r5,zero
 400e174:	010100f4 	movhi	r4,1027
 400e178:	2138aa04 	addi	r4,r4,-7512
 400e17c:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-15;
 400e180:	e0b7c217 	ldw	r2,-8440(fp)
 400e184:	01400504 	movi	r5,20
 400e188:	1009883a 	mov	r4,r2
 400e18c:	40191000 	call	4019100 <__mulsi3>
 400e190:	1007883a 	mov	r3,r2
 400e194:	e0b7c117 	ldw	r2,-8444(fp)
 400e198:	1885883a 	add	r2,r3,r2
 400e19c:	1085883a 	add	r2,r2,r2
 400e1a0:	1085883a 	add	r2,r2,r2
 400e1a4:	e0f7c104 	addi	r3,fp,-8444
 400e1a8:	1885883a 	add	r2,r3,r2
 400e1ac:	10879d04 	addi	r2,r2,7796
 400e1b0:	00fffc44 	movi	r3,-15
 400e1b4:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400e1b8:	00c00044 	movi	r3,1
 400e1bc:	008200b4 	movhi	r2,2050
 400e1c0:	10841804 	addi	r2,r2,4192
 400e1c4:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y-1][x] && gameboard [y][x]== gameboard [y+1][x]) || (gameboard [y][x]==5 && gameboard [y+1][x]==-15))//txb
 400e1c8:	e0b7c217 	ldw	r2,-8440(fp)
 400e1cc:	01400504 	movi	r5,20
 400e1d0:	1009883a 	mov	r4,r2
 400e1d4:	40191000 	call	4019100 <__mulsi3>
 400e1d8:	1007883a 	mov	r3,r2
 400e1dc:	e0b7c117 	ldw	r2,-8444(fp)
 400e1e0:	1885883a 	add	r2,r3,r2
 400e1e4:	1085883a 	add	r2,r2,r2
 400e1e8:	1085883a 	add	r2,r2,r2
 400e1ec:	e0f7c104 	addi	r3,fp,-8444
 400e1f0:	1885883a 	add	r2,r3,r2
 400e1f4:	10879d04 	addi	r2,r2,7796
 400e1f8:	14000017 	ldw	r16,0(r2)
 400e1fc:	e0b7c217 	ldw	r2,-8440(fp)
 400e200:	10bfffc4 	addi	r2,r2,-1
 400e204:	01400504 	movi	r5,20
 400e208:	1009883a 	mov	r4,r2
 400e20c:	40191000 	call	4019100 <__mulsi3>
 400e210:	1007883a 	mov	r3,r2
 400e214:	e0b7c117 	ldw	r2,-8444(fp)
 400e218:	1885883a 	add	r2,r3,r2
 400e21c:	1085883a 	add	r2,r2,r2
 400e220:	1085883a 	add	r2,r2,r2
 400e224:	e0f7c104 	addi	r3,fp,-8444
 400e228:	1885883a 	add	r2,r3,r2
 400e22c:	10879d04 	addi	r2,r2,7796
 400e230:	10800017 	ldw	r2,0(r2)
 400e234:	80801c1e 	bne	r16,r2,400e2a8 <main+0xdcd4>
 400e238:	e0b7c217 	ldw	r2,-8440(fp)
 400e23c:	01400504 	movi	r5,20
 400e240:	1009883a 	mov	r4,r2
 400e244:	40191000 	call	4019100 <__mulsi3>
 400e248:	1007883a 	mov	r3,r2
 400e24c:	e0b7c117 	ldw	r2,-8444(fp)
 400e250:	1885883a 	add	r2,r3,r2
 400e254:	1085883a 	add	r2,r2,r2
 400e258:	1085883a 	add	r2,r2,r2
 400e25c:	e0f7c104 	addi	r3,fp,-8444
 400e260:	1885883a 	add	r2,r3,r2
 400e264:	10879d04 	addi	r2,r2,7796
 400e268:	14000017 	ldw	r16,0(r2)
 400e26c:	e0b7c217 	ldw	r2,-8440(fp)
 400e270:	10800044 	addi	r2,r2,1
 400e274:	01400504 	movi	r5,20
 400e278:	1009883a 	mov	r4,r2
 400e27c:	40191000 	call	4019100 <__mulsi3>
 400e280:	1007883a 	mov	r3,r2
 400e284:	e0b7c117 	ldw	r2,-8444(fp)
 400e288:	1885883a 	add	r2,r3,r2
 400e28c:	1085883a 	add	r2,r2,r2
 400e290:	1085883a 	add	r2,r2,r2
 400e294:	e0f7c104 	addi	r3,fp,-8444
 400e298:	1885883a 	add	r2,r3,r2
 400e29c:	10879d04 	addi	r2,r2,7796
 400e2a0:	10800017 	ldw	r2,0(r2)
 400e2a4:	80801f26 	beq	r16,r2,400e324 <main+0xdd50>
 400e2a8:	e0b7c217 	ldw	r2,-8440(fp)
 400e2ac:	01400504 	movi	r5,20
 400e2b0:	1009883a 	mov	r4,r2
 400e2b4:	40191000 	call	4019100 <__mulsi3>
 400e2b8:	1007883a 	mov	r3,r2
 400e2bc:	e0b7c117 	ldw	r2,-8444(fp)
 400e2c0:	1885883a 	add	r2,r3,r2
 400e2c4:	1085883a 	add	r2,r2,r2
 400e2c8:	1085883a 	add	r2,r2,r2
 400e2cc:	e0f7c104 	addi	r3,fp,-8444
 400e2d0:	1885883a 	add	r2,r3,r2
 400e2d4:	10879d04 	addi	r2,r2,7796
 400e2d8:	10800017 	ldw	r2,0(r2)
 400e2dc:	10800158 	cmpnei	r2,r2,5
 400e2e0:	1000321e 	bne	r2,zero,400e3ac <main+0xddd8>
 400e2e4:	e0b7c217 	ldw	r2,-8440(fp)
 400e2e8:	10800044 	addi	r2,r2,1
 400e2ec:	01400504 	movi	r5,20
 400e2f0:	1009883a 	mov	r4,r2
 400e2f4:	40191000 	call	4019100 <__mulsi3>
 400e2f8:	1007883a 	mov	r3,r2
 400e2fc:	e0b7c117 	ldw	r2,-8444(fp)
 400e300:	1885883a 	add	r2,r3,r2
 400e304:	1085883a 	add	r2,r2,r2
 400e308:	1085883a 	add	r2,r2,r2
 400e30c:	e0f7c104 	addi	r3,fp,-8444
 400e310:	1885883a 	add	r2,r3,r2
 400e314:	10879d04 	addi	r2,r2,7796
 400e318:	10800017 	ldw	r2,0(r2)
 400e31c:	10bffc58 	cmpnei	r2,r2,-15
 400e320:	1000221e 	bne	r2,zero,400e3ac <main+0xddd8>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400e324:	e0b7c217 	ldw	r2,-8440(fp)
 400e328:	10c00084 	addi	r3,r2,2
 400e32c:	e0b95e04 	addi	r2,fp,-6792
 400e330:	180f883a 	mov	r7,r3
 400e334:	e1b7c117 	ldw	r6,-8444(fp)
 400e338:	01403fc4 	movi	r5,255
 400e33c:	1009883a 	mov	r4,r2
 400e340:	40003c80 	call	40003c8 <draw>
					draw(five, COLOR08_BLACK, x,y+2 );
 400e344:	e0b7c217 	ldw	r2,-8440(fp)
 400e348:	10800084 	addi	r2,r2,2
 400e34c:	100f883a 	mov	r7,r2
 400e350:	e1b7c117 	ldw	r6,-8444(fp)
 400e354:	000b883a 	mov	r5,zero
 400e358:	010100f4 	movhi	r4,1027
 400e35c:	2138aa04 	addi	r4,r4,-7512
 400e360:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-15;
 400e364:	e0b7c217 	ldw	r2,-8440(fp)
 400e368:	01400504 	movi	r5,20
 400e36c:	1009883a 	mov	r4,r2
 400e370:	40191000 	call	4019100 <__mulsi3>
 400e374:	1007883a 	mov	r3,r2
 400e378:	e0b7c117 	ldw	r2,-8444(fp)
 400e37c:	1885883a 	add	r2,r3,r2
 400e380:	1085883a 	add	r2,r2,r2
 400e384:	1085883a 	add	r2,r2,r2
 400e388:	e0f7c104 	addi	r3,fp,-8444
 400e38c:	1885883a 	add	r2,r3,r2
 400e390:	10879d04 	addi	r2,r2,7796
 400e394:	00fffc44 	movi	r3,-15
 400e398:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400e39c:	00c00044 	movi	r3,1
 400e3a0:	008200b4 	movhi	r2,2050
 400e3a4:	10841804 	addi	r2,r2,4192
 400e3a8:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y-1][x] && gameboard [y][x]== gameboard [y-2][x]) || (gameboard [y][x]==5 && gameboard [y-1][x]==-15))//tmx
 400e3ac:	e0b7c217 	ldw	r2,-8440(fp)
 400e3b0:	01400504 	movi	r5,20
 400e3b4:	1009883a 	mov	r4,r2
 400e3b8:	40191000 	call	4019100 <__mulsi3>
 400e3bc:	1007883a 	mov	r3,r2
 400e3c0:	e0b7c117 	ldw	r2,-8444(fp)
 400e3c4:	1885883a 	add	r2,r3,r2
 400e3c8:	1085883a 	add	r2,r2,r2
 400e3cc:	1085883a 	add	r2,r2,r2
 400e3d0:	e0f7c104 	addi	r3,fp,-8444
 400e3d4:	1885883a 	add	r2,r3,r2
 400e3d8:	10879d04 	addi	r2,r2,7796
 400e3dc:	14000017 	ldw	r16,0(r2)
 400e3e0:	e0b7c217 	ldw	r2,-8440(fp)
 400e3e4:	10bfffc4 	addi	r2,r2,-1
 400e3e8:	01400504 	movi	r5,20
 400e3ec:	1009883a 	mov	r4,r2
 400e3f0:	40191000 	call	4019100 <__mulsi3>
 400e3f4:	1007883a 	mov	r3,r2
 400e3f8:	e0b7c117 	ldw	r2,-8444(fp)
 400e3fc:	1885883a 	add	r2,r3,r2
 400e400:	1085883a 	add	r2,r2,r2
 400e404:	1085883a 	add	r2,r2,r2
 400e408:	e0f7c104 	addi	r3,fp,-8444
 400e40c:	1885883a 	add	r2,r3,r2
 400e410:	10879d04 	addi	r2,r2,7796
 400e414:	10800017 	ldw	r2,0(r2)
 400e418:	80801c1e 	bne	r16,r2,400e48c <main+0xdeb8>
 400e41c:	e0b7c217 	ldw	r2,-8440(fp)
 400e420:	01400504 	movi	r5,20
 400e424:	1009883a 	mov	r4,r2
 400e428:	40191000 	call	4019100 <__mulsi3>
 400e42c:	1007883a 	mov	r3,r2
 400e430:	e0b7c117 	ldw	r2,-8444(fp)
 400e434:	1885883a 	add	r2,r3,r2
 400e438:	1085883a 	add	r2,r2,r2
 400e43c:	1085883a 	add	r2,r2,r2
 400e440:	e0f7c104 	addi	r3,fp,-8444
 400e444:	1885883a 	add	r2,r3,r2
 400e448:	10879d04 	addi	r2,r2,7796
 400e44c:	14000017 	ldw	r16,0(r2)
 400e450:	e0b7c217 	ldw	r2,-8440(fp)
 400e454:	10bfff84 	addi	r2,r2,-2
 400e458:	01400504 	movi	r5,20
 400e45c:	1009883a 	mov	r4,r2
 400e460:	40191000 	call	4019100 <__mulsi3>
 400e464:	1007883a 	mov	r3,r2
 400e468:	e0b7c117 	ldw	r2,-8444(fp)
 400e46c:	1885883a 	add	r2,r3,r2
 400e470:	1085883a 	add	r2,r2,r2
 400e474:	1085883a 	add	r2,r2,r2
 400e478:	e0f7c104 	addi	r3,fp,-8444
 400e47c:	1885883a 	add	r2,r3,r2
 400e480:	10879d04 	addi	r2,r2,7796
 400e484:	10800017 	ldw	r2,0(r2)
 400e488:	80801f26 	beq	r16,r2,400e508 <main+0xdf34>
 400e48c:	e0b7c217 	ldw	r2,-8440(fp)
 400e490:	01400504 	movi	r5,20
 400e494:	1009883a 	mov	r4,r2
 400e498:	40191000 	call	4019100 <__mulsi3>
 400e49c:	1007883a 	mov	r3,r2
 400e4a0:	e0b7c117 	ldw	r2,-8444(fp)
 400e4a4:	1885883a 	add	r2,r3,r2
 400e4a8:	1085883a 	add	r2,r2,r2
 400e4ac:	1085883a 	add	r2,r2,r2
 400e4b0:	e0f7c104 	addi	r3,fp,-8444
 400e4b4:	1885883a 	add	r2,r3,r2
 400e4b8:	10879d04 	addi	r2,r2,7796
 400e4bc:	10800017 	ldw	r2,0(r2)
 400e4c0:	10800158 	cmpnei	r2,r2,5
 400e4c4:	1000321e 	bne	r2,zero,400e590 <main+0xdfbc>
 400e4c8:	e0b7c217 	ldw	r2,-8440(fp)
 400e4cc:	10bfffc4 	addi	r2,r2,-1
 400e4d0:	01400504 	movi	r5,20
 400e4d4:	1009883a 	mov	r4,r2
 400e4d8:	40191000 	call	4019100 <__mulsi3>
 400e4dc:	1007883a 	mov	r3,r2
 400e4e0:	e0b7c117 	ldw	r2,-8444(fp)
 400e4e4:	1885883a 	add	r2,r3,r2
 400e4e8:	1085883a 	add	r2,r2,r2
 400e4ec:	1085883a 	add	r2,r2,r2
 400e4f0:	e0f7c104 	addi	r3,fp,-8444
 400e4f4:	1885883a 	add	r2,r3,r2
 400e4f8:	10879d04 	addi	r2,r2,7796
 400e4fc:	10800017 	ldw	r2,0(r2)
 400e500:	10bffc58 	cmpnei	r2,r2,-15
 400e504:	1000221e 	bne	r2,zero,400e590 <main+0xdfbc>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400e508:	e0b7c217 	ldw	r2,-8440(fp)
 400e50c:	10c00084 	addi	r3,r2,2
 400e510:	e0b95e04 	addi	r2,fp,-6792
 400e514:	180f883a 	mov	r7,r3
 400e518:	e1b7c117 	ldw	r6,-8444(fp)
 400e51c:	01403fc4 	movi	r5,255
 400e520:	1009883a 	mov	r4,r2
 400e524:	40003c80 	call	40003c8 <draw>
					draw(five, COLOR08_BLACK, x,y+2 );
 400e528:	e0b7c217 	ldw	r2,-8440(fp)
 400e52c:	10800084 	addi	r2,r2,2
 400e530:	100f883a 	mov	r7,r2
 400e534:	e1b7c117 	ldw	r6,-8444(fp)
 400e538:	000b883a 	mov	r5,zero
 400e53c:	010100f4 	movhi	r4,1027
 400e540:	2138aa04 	addi	r4,r4,-7512
 400e544:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-15;
 400e548:	e0b7c217 	ldw	r2,-8440(fp)
 400e54c:	01400504 	movi	r5,20
 400e550:	1009883a 	mov	r4,r2
 400e554:	40191000 	call	4019100 <__mulsi3>
 400e558:	1007883a 	mov	r3,r2
 400e55c:	e0b7c117 	ldw	r2,-8444(fp)
 400e560:	1885883a 	add	r2,r3,r2
 400e564:	1085883a 	add	r2,r2,r2
 400e568:	1085883a 	add	r2,r2,r2
 400e56c:	e0f7c104 	addi	r3,fp,-8444
 400e570:	1885883a 	add	r2,r3,r2
 400e574:	10879d04 	addi	r2,r2,7796
 400e578:	00fffc44 	movi	r3,-15
 400e57c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400e580:	00c00044 	movi	r3,1
 400e584:	008200b4 	movhi	r2,2050
 400e588:	10841804 	addi	r2,r2,4192
 400e58c:	10c00035 	stwio	r3,0(r2)
				}
				if(gameboard[y][x]==5 && gameboard[y-1][x]==5 && gameboard[y-2][x]==-15)
 400e590:	e0b7c217 	ldw	r2,-8440(fp)
 400e594:	01400504 	movi	r5,20
 400e598:	1009883a 	mov	r4,r2
 400e59c:	40191000 	call	4019100 <__mulsi3>
 400e5a0:	1007883a 	mov	r3,r2
 400e5a4:	e0b7c117 	ldw	r2,-8444(fp)
 400e5a8:	1885883a 	add	r2,r3,r2
 400e5ac:	1085883a 	add	r2,r2,r2
 400e5b0:	1085883a 	add	r2,r2,r2
 400e5b4:	e0f7c104 	addi	r3,fp,-8444
 400e5b8:	1885883a 	add	r2,r3,r2
 400e5bc:	10879d04 	addi	r2,r2,7796
 400e5c0:	10800017 	ldw	r2,0(r2)
 400e5c4:	10800158 	cmpnei	r2,r2,5
 400e5c8:	1000421e 	bne	r2,zero,400e6d4 <main+0xe100>
 400e5cc:	e0b7c217 	ldw	r2,-8440(fp)
 400e5d0:	10bfffc4 	addi	r2,r2,-1
 400e5d4:	01400504 	movi	r5,20
 400e5d8:	1009883a 	mov	r4,r2
 400e5dc:	40191000 	call	4019100 <__mulsi3>
 400e5e0:	1007883a 	mov	r3,r2
 400e5e4:	e0b7c117 	ldw	r2,-8444(fp)
 400e5e8:	1885883a 	add	r2,r3,r2
 400e5ec:	1085883a 	add	r2,r2,r2
 400e5f0:	1085883a 	add	r2,r2,r2
 400e5f4:	e0f7c104 	addi	r3,fp,-8444
 400e5f8:	1885883a 	add	r2,r3,r2
 400e5fc:	10879d04 	addi	r2,r2,7796
 400e600:	10800017 	ldw	r2,0(r2)
 400e604:	10800158 	cmpnei	r2,r2,5
 400e608:	1000321e 	bne	r2,zero,400e6d4 <main+0xe100>
 400e60c:	e0b7c217 	ldw	r2,-8440(fp)
 400e610:	10bfff84 	addi	r2,r2,-2
 400e614:	01400504 	movi	r5,20
 400e618:	1009883a 	mov	r4,r2
 400e61c:	40191000 	call	4019100 <__mulsi3>
 400e620:	1007883a 	mov	r3,r2
 400e624:	e0b7c117 	ldw	r2,-8444(fp)
 400e628:	1885883a 	add	r2,r3,r2
 400e62c:	1085883a 	add	r2,r2,r2
 400e630:	1085883a 	add	r2,r2,r2
 400e634:	e0f7c104 	addi	r3,fp,-8444
 400e638:	1885883a 	add	r2,r3,r2
 400e63c:	10879d04 	addi	r2,r2,7796
 400e640:	10800017 	ldw	r2,0(r2)
 400e644:	10bffc58 	cmpnei	r2,r2,-15
 400e648:	1000221e 	bne	r2,zero,400e6d4 <main+0xe100>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400e64c:	e0b7c217 	ldw	r2,-8440(fp)
 400e650:	10c00084 	addi	r3,r2,2
 400e654:	e0b95e04 	addi	r2,fp,-6792
 400e658:	180f883a 	mov	r7,r3
 400e65c:	e1b7c117 	ldw	r6,-8444(fp)
 400e660:	01403fc4 	movi	r5,255
 400e664:	1009883a 	mov	r4,r2
 400e668:	40003c80 	call	40003c8 <draw>
					draw(five, COLOR08_BLACK, x,y+2 );
 400e66c:	e0b7c217 	ldw	r2,-8440(fp)
 400e670:	10800084 	addi	r2,r2,2
 400e674:	100f883a 	mov	r7,r2
 400e678:	e1b7c117 	ldw	r6,-8444(fp)
 400e67c:	000b883a 	mov	r5,zero
 400e680:	010100f4 	movhi	r4,1027
 400e684:	2138aa04 	addi	r4,r4,-7512
 400e688:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-15;
 400e68c:	e0b7c217 	ldw	r2,-8440(fp)
 400e690:	01400504 	movi	r5,20
 400e694:	1009883a 	mov	r4,r2
 400e698:	40191000 	call	4019100 <__mulsi3>
 400e69c:	1007883a 	mov	r3,r2
 400e6a0:	e0b7c117 	ldw	r2,-8444(fp)
 400e6a4:	1885883a 	add	r2,r3,r2
 400e6a8:	1085883a 	add	r2,r2,r2
 400e6ac:	1085883a 	add	r2,r2,r2
 400e6b0:	e0f7c104 	addi	r3,fp,-8444
 400e6b4:	1885883a 	add	r2,r3,r2
 400e6b8:	10879d04 	addi	r2,r2,7796
 400e6bc:	00fffc44 	movi	r3,-15
 400e6c0:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400e6c4:	00c00044 	movi	r3,1
 400e6c8:	008200b4 	movhi	r2,2050
 400e6cc:	10841804 	addi	r2,r2,4192
 400e6d0:	10c00035 	stwio	r3,0(r2)
				}

//////////////////////////////////////////////////////////////////

				//diagonal (\)5
				if ((gameboard [y][x]==gameboard [y+1][x+1] && gameboard[y+1][x+1]== gameboard[y+2][x+2]))//(\x\)
 400e6d4:	e0b7c217 	ldw	r2,-8440(fp)
 400e6d8:	01400504 	movi	r5,20
 400e6dc:	1009883a 	mov	r4,r2
 400e6e0:	40191000 	call	4019100 <__mulsi3>
 400e6e4:	1007883a 	mov	r3,r2
 400e6e8:	e0b7c117 	ldw	r2,-8444(fp)
 400e6ec:	1885883a 	add	r2,r3,r2
 400e6f0:	1085883a 	add	r2,r2,r2
 400e6f4:	1085883a 	add	r2,r2,r2
 400e6f8:	e0f7c104 	addi	r3,fp,-8444
 400e6fc:	1885883a 	add	r2,r3,r2
 400e700:	10879d04 	addi	r2,r2,7796
 400e704:	14000017 	ldw	r16,0(r2)
 400e708:	e0b7c217 	ldw	r2,-8440(fp)
 400e70c:	10c00044 	addi	r3,r2,1
 400e710:	e0b7c117 	ldw	r2,-8444(fp)
 400e714:	14400044 	addi	r17,r2,1
 400e718:	01400504 	movi	r5,20
 400e71c:	1809883a 	mov	r4,r3
 400e720:	40191000 	call	4019100 <__mulsi3>
 400e724:	1445883a 	add	r2,r2,r17
 400e728:	1085883a 	add	r2,r2,r2
 400e72c:	1085883a 	add	r2,r2,r2
 400e730:	e0f7c104 	addi	r3,fp,-8444
 400e734:	1885883a 	add	r2,r3,r2
 400e738:	10879d04 	addi	r2,r2,7796
 400e73c:	10800017 	ldw	r2,0(r2)
 400e740:	80803f1e 	bne	r16,r2,400e840 <main+0xe26c>
 400e744:	e0b7c217 	ldw	r2,-8440(fp)
 400e748:	10c00044 	addi	r3,r2,1
 400e74c:	e0b7c117 	ldw	r2,-8444(fp)
 400e750:	14000044 	addi	r16,r2,1
 400e754:	01400504 	movi	r5,20
 400e758:	1809883a 	mov	r4,r3
 400e75c:	40191000 	call	4019100 <__mulsi3>
 400e760:	1405883a 	add	r2,r2,r16
 400e764:	1085883a 	add	r2,r2,r2
 400e768:	1085883a 	add	r2,r2,r2
 400e76c:	e0f7c104 	addi	r3,fp,-8444
 400e770:	1885883a 	add	r2,r3,r2
 400e774:	10879d04 	addi	r2,r2,7796
 400e778:	14000017 	ldw	r16,0(r2)
 400e77c:	e0b7c217 	ldw	r2,-8440(fp)
 400e780:	10c00084 	addi	r3,r2,2
 400e784:	e0b7c117 	ldw	r2,-8444(fp)
 400e788:	14400084 	addi	r17,r2,2
 400e78c:	01400504 	movi	r5,20
 400e790:	1809883a 	mov	r4,r3
 400e794:	40191000 	call	4019100 <__mulsi3>
 400e798:	1445883a 	add	r2,r2,r17
 400e79c:	1085883a 	add	r2,r2,r2
 400e7a0:	1085883a 	add	r2,r2,r2
 400e7a4:	e0f7c104 	addi	r3,fp,-8444
 400e7a8:	1885883a 	add	r2,r3,r2
 400e7ac:	10879d04 	addi	r2,r2,7796
 400e7b0:	10800017 	ldw	r2,0(r2)
 400e7b4:	8080221e 	bne	r16,r2,400e840 <main+0xe26c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400e7b8:	e0b7c217 	ldw	r2,-8440(fp)
 400e7bc:	10c00084 	addi	r3,r2,2
 400e7c0:	e0b95e04 	addi	r2,fp,-6792
 400e7c4:	180f883a 	mov	r7,r3
 400e7c8:	e1b7c117 	ldw	r6,-8444(fp)
 400e7cc:	01403fc4 	movi	r5,255
 400e7d0:	1009883a 	mov	r4,r2
 400e7d4:	40003c80 	call	40003c8 <draw>
					draw(five, COLOR08_BLACK, x,y+2 );
 400e7d8:	e0b7c217 	ldw	r2,-8440(fp)
 400e7dc:	10800084 	addi	r2,r2,2
 400e7e0:	100f883a 	mov	r7,r2
 400e7e4:	e1b7c117 	ldw	r6,-8444(fp)
 400e7e8:	000b883a 	mov	r5,zero
 400e7ec:	010100f4 	movhi	r4,1027
 400e7f0:	2138aa04 	addi	r4,r4,-7512
 400e7f4:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-15;
 400e7f8:	e0b7c217 	ldw	r2,-8440(fp)
 400e7fc:	01400504 	movi	r5,20
 400e800:	1009883a 	mov	r4,r2
 400e804:	40191000 	call	4019100 <__mulsi3>
 400e808:	1007883a 	mov	r3,r2
 400e80c:	e0b7c117 	ldw	r2,-8444(fp)
 400e810:	1885883a 	add	r2,r3,r2
 400e814:	1085883a 	add	r2,r2,r2
 400e818:	1085883a 	add	r2,r2,r2
 400e81c:	e0f7c104 	addi	r3,fp,-8444
 400e820:	1885883a 	add	r2,r3,r2
 400e824:	10879d04 	addi	r2,r2,7796
 400e828:	00fffc44 	movi	r3,-15
 400e82c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400e830:	00c00044 	movi	r3,1
 400e834:	008200b4 	movhi	r2,2050
 400e838:	10841804 	addi	r2,r2,4192
 400e83c:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y+1][x+1] && gameboard[y][x]== gameboard[y+2][x+2]) )//(x\\)
 400e840:	e0b7c217 	ldw	r2,-8440(fp)
 400e844:	01400504 	movi	r5,20
 400e848:	1009883a 	mov	r4,r2
 400e84c:	40191000 	call	4019100 <__mulsi3>
 400e850:	1007883a 	mov	r3,r2
 400e854:	e0b7c117 	ldw	r2,-8444(fp)
 400e858:	1885883a 	add	r2,r3,r2
 400e85c:	1085883a 	add	r2,r2,r2
 400e860:	1085883a 	add	r2,r2,r2
 400e864:	e0f7c104 	addi	r3,fp,-8444
 400e868:	1885883a 	add	r2,r3,r2
 400e86c:	10879d04 	addi	r2,r2,7796
 400e870:	14000017 	ldw	r16,0(r2)
 400e874:	e0b7c217 	ldw	r2,-8440(fp)
 400e878:	10c00044 	addi	r3,r2,1
 400e87c:	e0b7c117 	ldw	r2,-8444(fp)
 400e880:	14400044 	addi	r17,r2,1
 400e884:	01400504 	movi	r5,20
 400e888:	1809883a 	mov	r4,r3
 400e88c:	40191000 	call	4019100 <__mulsi3>
 400e890:	1445883a 	add	r2,r2,r17
 400e894:	1085883a 	add	r2,r2,r2
 400e898:	1085883a 	add	r2,r2,r2
 400e89c:	e0f7c104 	addi	r3,fp,-8444
 400e8a0:	1885883a 	add	r2,r3,r2
 400e8a4:	10879d04 	addi	r2,r2,7796
 400e8a8:	10800017 	ldw	r2,0(r2)
 400e8ac:	80803e1e 	bne	r16,r2,400e9a8 <main+0xe3d4>
 400e8b0:	e0b7c217 	ldw	r2,-8440(fp)
 400e8b4:	01400504 	movi	r5,20
 400e8b8:	1009883a 	mov	r4,r2
 400e8bc:	40191000 	call	4019100 <__mulsi3>
 400e8c0:	1007883a 	mov	r3,r2
 400e8c4:	e0b7c117 	ldw	r2,-8444(fp)
 400e8c8:	1885883a 	add	r2,r3,r2
 400e8cc:	1085883a 	add	r2,r2,r2
 400e8d0:	1085883a 	add	r2,r2,r2
 400e8d4:	e0f7c104 	addi	r3,fp,-8444
 400e8d8:	1885883a 	add	r2,r3,r2
 400e8dc:	10879d04 	addi	r2,r2,7796
 400e8e0:	14000017 	ldw	r16,0(r2)
 400e8e4:	e0b7c217 	ldw	r2,-8440(fp)
 400e8e8:	10c00084 	addi	r3,r2,2
 400e8ec:	e0b7c117 	ldw	r2,-8444(fp)
 400e8f0:	14400084 	addi	r17,r2,2
 400e8f4:	01400504 	movi	r5,20
 400e8f8:	1809883a 	mov	r4,r3
 400e8fc:	40191000 	call	4019100 <__mulsi3>
 400e900:	1445883a 	add	r2,r2,r17
 400e904:	1085883a 	add	r2,r2,r2
 400e908:	1085883a 	add	r2,r2,r2
 400e90c:	e0f7c104 	addi	r3,fp,-8444
 400e910:	1885883a 	add	r2,r3,r2
 400e914:	10879d04 	addi	r2,r2,7796
 400e918:	10800017 	ldw	r2,0(r2)
 400e91c:	8080221e 	bne	r16,r2,400e9a8 <main+0xe3d4>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400e920:	e0b7c217 	ldw	r2,-8440(fp)
 400e924:	10c00084 	addi	r3,r2,2
 400e928:	e0b95e04 	addi	r2,fp,-6792
 400e92c:	180f883a 	mov	r7,r3
 400e930:	e1b7c117 	ldw	r6,-8444(fp)
 400e934:	01403fc4 	movi	r5,255
 400e938:	1009883a 	mov	r4,r2
 400e93c:	40003c80 	call	40003c8 <draw>
					draw(five, COLOR08_BLACK, x,y+2 );
 400e940:	e0b7c217 	ldw	r2,-8440(fp)
 400e944:	10800084 	addi	r2,r2,2
 400e948:	100f883a 	mov	r7,r2
 400e94c:	e1b7c117 	ldw	r6,-8444(fp)
 400e950:	000b883a 	mov	r5,zero
 400e954:	010100f4 	movhi	r4,1027
 400e958:	2138aa04 	addi	r4,r4,-7512
 400e95c:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-15;
 400e960:	e0b7c217 	ldw	r2,-8440(fp)
 400e964:	01400504 	movi	r5,20
 400e968:	1009883a 	mov	r4,r2
 400e96c:	40191000 	call	4019100 <__mulsi3>
 400e970:	1007883a 	mov	r3,r2
 400e974:	e0b7c117 	ldw	r2,-8444(fp)
 400e978:	1885883a 	add	r2,r3,r2
 400e97c:	1085883a 	add	r2,r2,r2
 400e980:	1085883a 	add	r2,r2,r2
 400e984:	e0f7c104 	addi	r3,fp,-8444
 400e988:	1885883a 	add	r2,r3,r2
 400e98c:	10879d04 	addi	r2,r2,7796
 400e990:	00fffc44 	movi	r3,-15
 400e994:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400e998:	00c00044 	movi	r3,1
 400e99c:	008200b4 	movhi	r2,2050
 400e9a0:	10841804 	addi	r2,r2,4192
 400e9a4:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y-1][x-1] && gameboard[y][x]== gameboard[y-2][x-2]) )//(\\x)
 400e9a8:	e0b7c217 	ldw	r2,-8440(fp)
 400e9ac:	01400504 	movi	r5,20
 400e9b0:	1009883a 	mov	r4,r2
 400e9b4:	40191000 	call	4019100 <__mulsi3>
 400e9b8:	1007883a 	mov	r3,r2
 400e9bc:	e0b7c117 	ldw	r2,-8444(fp)
 400e9c0:	1885883a 	add	r2,r3,r2
 400e9c4:	1085883a 	add	r2,r2,r2
 400e9c8:	1085883a 	add	r2,r2,r2
 400e9cc:	e0f7c104 	addi	r3,fp,-8444
 400e9d0:	1885883a 	add	r2,r3,r2
 400e9d4:	10879d04 	addi	r2,r2,7796
 400e9d8:	14000017 	ldw	r16,0(r2)
 400e9dc:	e0b7c217 	ldw	r2,-8440(fp)
 400e9e0:	10ffffc4 	addi	r3,r2,-1
 400e9e4:	e0b7c117 	ldw	r2,-8444(fp)
 400e9e8:	147fffc4 	addi	r17,r2,-1
 400e9ec:	01400504 	movi	r5,20
 400e9f0:	1809883a 	mov	r4,r3
 400e9f4:	40191000 	call	4019100 <__mulsi3>
 400e9f8:	1445883a 	add	r2,r2,r17
 400e9fc:	1085883a 	add	r2,r2,r2
 400ea00:	1085883a 	add	r2,r2,r2
 400ea04:	e0f7c104 	addi	r3,fp,-8444
 400ea08:	1885883a 	add	r2,r3,r2
 400ea0c:	10879d04 	addi	r2,r2,7796
 400ea10:	10800017 	ldw	r2,0(r2)
 400ea14:	80803e1e 	bne	r16,r2,400eb10 <main+0xe53c>
 400ea18:	e0b7c217 	ldw	r2,-8440(fp)
 400ea1c:	01400504 	movi	r5,20
 400ea20:	1009883a 	mov	r4,r2
 400ea24:	40191000 	call	4019100 <__mulsi3>
 400ea28:	1007883a 	mov	r3,r2
 400ea2c:	e0b7c117 	ldw	r2,-8444(fp)
 400ea30:	1885883a 	add	r2,r3,r2
 400ea34:	1085883a 	add	r2,r2,r2
 400ea38:	1085883a 	add	r2,r2,r2
 400ea3c:	e0f7c104 	addi	r3,fp,-8444
 400ea40:	1885883a 	add	r2,r3,r2
 400ea44:	10879d04 	addi	r2,r2,7796
 400ea48:	14000017 	ldw	r16,0(r2)
 400ea4c:	e0b7c217 	ldw	r2,-8440(fp)
 400ea50:	10ffff84 	addi	r3,r2,-2
 400ea54:	e0b7c117 	ldw	r2,-8444(fp)
 400ea58:	147fff84 	addi	r17,r2,-2
 400ea5c:	01400504 	movi	r5,20
 400ea60:	1809883a 	mov	r4,r3
 400ea64:	40191000 	call	4019100 <__mulsi3>
 400ea68:	1445883a 	add	r2,r2,r17
 400ea6c:	1085883a 	add	r2,r2,r2
 400ea70:	1085883a 	add	r2,r2,r2
 400ea74:	e0f7c104 	addi	r3,fp,-8444
 400ea78:	1885883a 	add	r2,r3,r2
 400ea7c:	10879d04 	addi	r2,r2,7796
 400ea80:	10800017 	ldw	r2,0(r2)
 400ea84:	8080221e 	bne	r16,r2,400eb10 <main+0xe53c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400ea88:	e0b7c217 	ldw	r2,-8440(fp)
 400ea8c:	10c00084 	addi	r3,r2,2
 400ea90:	e0b95e04 	addi	r2,fp,-6792
 400ea94:	180f883a 	mov	r7,r3
 400ea98:	e1b7c117 	ldw	r6,-8444(fp)
 400ea9c:	01403fc4 	movi	r5,255
 400eaa0:	1009883a 	mov	r4,r2
 400eaa4:	40003c80 	call	40003c8 <draw>
					draw(five, COLOR08_BLACK, x,y+2 );
 400eaa8:	e0b7c217 	ldw	r2,-8440(fp)
 400eaac:	10800084 	addi	r2,r2,2
 400eab0:	100f883a 	mov	r7,r2
 400eab4:	e1b7c117 	ldw	r6,-8444(fp)
 400eab8:	000b883a 	mov	r5,zero
 400eabc:	010100f4 	movhi	r4,1027
 400eac0:	2138aa04 	addi	r4,r4,-7512
 400eac4:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-15;
 400eac8:	e0b7c217 	ldw	r2,-8440(fp)
 400eacc:	01400504 	movi	r5,20
 400ead0:	1009883a 	mov	r4,r2
 400ead4:	40191000 	call	4019100 <__mulsi3>
 400ead8:	1007883a 	mov	r3,r2
 400eadc:	e0b7c117 	ldw	r2,-8444(fp)
 400eae0:	1885883a 	add	r2,r3,r2
 400eae4:	1085883a 	add	r2,r2,r2
 400eae8:	1085883a 	add	r2,r2,r2
 400eaec:	e0f7c104 	addi	r3,fp,-8444
 400eaf0:	1885883a 	add	r2,r3,r2
 400eaf4:	10879d04 	addi	r2,r2,7796
 400eaf8:	00fffc44 	movi	r3,-15
 400eafc:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400eb00:	00c00044 	movi	r3,1
 400eb04:	008200b4 	movhi	r2,2050
 400eb08:	10841804 	addi	r2,r2,4192
 400eb0c:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard[y][x]==5 && gameboard[y+1][x+1]==-15) || (gameboard[y][x]==5 && gameboard[y-1][x-1]==-15))//(\\x)
 400eb10:	e0b7c217 	ldw	r2,-8440(fp)
 400eb14:	01400504 	movi	r5,20
 400eb18:	1009883a 	mov	r4,r2
 400eb1c:	40191000 	call	4019100 <__mulsi3>
 400eb20:	1007883a 	mov	r3,r2
 400eb24:	e0b7c117 	ldw	r2,-8444(fp)
 400eb28:	1885883a 	add	r2,r3,r2
 400eb2c:	1085883a 	add	r2,r2,r2
 400eb30:	1085883a 	add	r2,r2,r2
 400eb34:	e0f7c104 	addi	r3,fp,-8444
 400eb38:	1885883a 	add	r2,r3,r2
 400eb3c:	10879d04 	addi	r2,r2,7796
 400eb40:	10800017 	ldw	r2,0(r2)
 400eb44:	10800158 	cmpnei	r2,r2,5
 400eb48:	1000101e 	bne	r2,zero,400eb8c <main+0xe5b8>
 400eb4c:	e0b7c217 	ldw	r2,-8440(fp)
 400eb50:	10c00044 	addi	r3,r2,1
 400eb54:	e0b7c117 	ldw	r2,-8444(fp)
 400eb58:	14000044 	addi	r16,r2,1
 400eb5c:	01400504 	movi	r5,20
 400eb60:	1809883a 	mov	r4,r3
 400eb64:	40191000 	call	4019100 <__mulsi3>
 400eb68:	1405883a 	add	r2,r2,r16
 400eb6c:	1085883a 	add	r2,r2,r2
 400eb70:	1085883a 	add	r2,r2,r2
 400eb74:	e0f7c104 	addi	r3,fp,-8444
 400eb78:	1885883a 	add	r2,r3,r2
 400eb7c:	10879d04 	addi	r2,r2,7796
 400eb80:	10800017 	ldw	r2,0(r2)
 400eb84:	10bffc60 	cmpeqi	r2,r2,-15
 400eb88:	10001f1e 	bne	r2,zero,400ec08 <main+0xe634>
 400eb8c:	e0b7c217 	ldw	r2,-8440(fp)
 400eb90:	01400504 	movi	r5,20
 400eb94:	1009883a 	mov	r4,r2
 400eb98:	40191000 	call	4019100 <__mulsi3>
 400eb9c:	1007883a 	mov	r3,r2
 400eba0:	e0b7c117 	ldw	r2,-8444(fp)
 400eba4:	1885883a 	add	r2,r3,r2
 400eba8:	1085883a 	add	r2,r2,r2
 400ebac:	1085883a 	add	r2,r2,r2
 400ebb0:	e0f7c104 	addi	r3,fp,-8444
 400ebb4:	1885883a 	add	r2,r3,r2
 400ebb8:	10879d04 	addi	r2,r2,7796
 400ebbc:	10800017 	ldw	r2,0(r2)
 400ebc0:	10800158 	cmpnei	r2,r2,5
 400ebc4:	1000321e 	bne	r2,zero,400ec90 <main+0xe6bc>
 400ebc8:	e0b7c217 	ldw	r2,-8440(fp)
 400ebcc:	10ffffc4 	addi	r3,r2,-1
 400ebd0:	e0b7c117 	ldw	r2,-8444(fp)
 400ebd4:	143fffc4 	addi	r16,r2,-1
 400ebd8:	01400504 	movi	r5,20
 400ebdc:	1809883a 	mov	r4,r3
 400ebe0:	40191000 	call	4019100 <__mulsi3>
 400ebe4:	1405883a 	add	r2,r2,r16
 400ebe8:	1085883a 	add	r2,r2,r2
 400ebec:	1085883a 	add	r2,r2,r2
 400ebf0:	e0f7c104 	addi	r3,fp,-8444
 400ebf4:	1885883a 	add	r2,r3,r2
 400ebf8:	10879d04 	addi	r2,r2,7796
 400ebfc:	10800017 	ldw	r2,0(r2)
 400ec00:	10bffc58 	cmpnei	r2,r2,-15
 400ec04:	1000221e 	bne	r2,zero,400ec90 <main+0xe6bc>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400ec08:	e0b7c217 	ldw	r2,-8440(fp)
 400ec0c:	10c00084 	addi	r3,r2,2
 400ec10:	e0b95e04 	addi	r2,fp,-6792
 400ec14:	180f883a 	mov	r7,r3
 400ec18:	e1b7c117 	ldw	r6,-8444(fp)
 400ec1c:	01403fc4 	movi	r5,255
 400ec20:	1009883a 	mov	r4,r2
 400ec24:	40003c80 	call	40003c8 <draw>
					draw(five, COLOR08_BLACK, x,y+2 );
 400ec28:	e0b7c217 	ldw	r2,-8440(fp)
 400ec2c:	10800084 	addi	r2,r2,2
 400ec30:	100f883a 	mov	r7,r2
 400ec34:	e1b7c117 	ldw	r6,-8444(fp)
 400ec38:	000b883a 	mov	r5,zero
 400ec3c:	010100f4 	movhi	r4,1027
 400ec40:	2138aa04 	addi	r4,r4,-7512
 400ec44:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-15;
 400ec48:	e0b7c217 	ldw	r2,-8440(fp)
 400ec4c:	01400504 	movi	r5,20
 400ec50:	1009883a 	mov	r4,r2
 400ec54:	40191000 	call	4019100 <__mulsi3>
 400ec58:	1007883a 	mov	r3,r2
 400ec5c:	e0b7c117 	ldw	r2,-8444(fp)
 400ec60:	1885883a 	add	r2,r3,r2
 400ec64:	1085883a 	add	r2,r2,r2
 400ec68:	1085883a 	add	r2,r2,r2
 400ec6c:	e0f7c104 	addi	r3,fp,-8444
 400ec70:	1885883a 	add	r2,r3,r2
 400ec74:	10879d04 	addi	r2,r2,7796
 400ec78:	00fffc44 	movi	r3,-15
 400ec7c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400ec80:	00c00044 	movi	r3,1
 400ec84:	008200b4 	movhi	r2,2050
 400ec88:	10841804 	addi	r2,r2,4192
 400ec8c:	10c00035 	stwio	r3,0(r2)
				}
				if(gameboard[y][x]==5 && gameboard[y-1][x-1]==5 && gameboard[y-2][x-2]==-15)
 400ec90:	e0b7c217 	ldw	r2,-8440(fp)
 400ec94:	01400504 	movi	r5,20
 400ec98:	1009883a 	mov	r4,r2
 400ec9c:	40191000 	call	4019100 <__mulsi3>
 400eca0:	1007883a 	mov	r3,r2
 400eca4:	e0b7c117 	ldw	r2,-8444(fp)
 400eca8:	1885883a 	add	r2,r3,r2
 400ecac:	1085883a 	add	r2,r2,r2
 400ecb0:	1085883a 	add	r2,r2,r2
 400ecb4:	e0f7c104 	addi	r3,fp,-8444
 400ecb8:	1885883a 	add	r2,r3,r2
 400ecbc:	10879d04 	addi	r2,r2,7796
 400ecc0:	10800017 	ldw	r2,0(r2)
 400ecc4:	10800158 	cmpnei	r2,r2,5
 400ecc8:	1000421e 	bne	r2,zero,400edd4 <main+0xe800>
 400eccc:	e0b7c217 	ldw	r2,-8440(fp)
 400ecd0:	10ffffc4 	addi	r3,r2,-1
 400ecd4:	e0b7c117 	ldw	r2,-8444(fp)
 400ecd8:	143fffc4 	addi	r16,r2,-1
 400ecdc:	01400504 	movi	r5,20
 400ece0:	1809883a 	mov	r4,r3
 400ece4:	40191000 	call	4019100 <__mulsi3>
 400ece8:	1405883a 	add	r2,r2,r16
 400ecec:	1085883a 	add	r2,r2,r2
 400ecf0:	1085883a 	add	r2,r2,r2
 400ecf4:	e0f7c104 	addi	r3,fp,-8444
 400ecf8:	1885883a 	add	r2,r3,r2
 400ecfc:	10879d04 	addi	r2,r2,7796
 400ed00:	10800017 	ldw	r2,0(r2)
 400ed04:	10800158 	cmpnei	r2,r2,5
 400ed08:	1000321e 	bne	r2,zero,400edd4 <main+0xe800>
 400ed0c:	e0b7c217 	ldw	r2,-8440(fp)
 400ed10:	10ffff84 	addi	r3,r2,-2
 400ed14:	e0b7c117 	ldw	r2,-8444(fp)
 400ed18:	143fff84 	addi	r16,r2,-2
 400ed1c:	01400504 	movi	r5,20
 400ed20:	1809883a 	mov	r4,r3
 400ed24:	40191000 	call	4019100 <__mulsi3>
 400ed28:	1405883a 	add	r2,r2,r16
 400ed2c:	1085883a 	add	r2,r2,r2
 400ed30:	1085883a 	add	r2,r2,r2
 400ed34:	e0f7c104 	addi	r3,fp,-8444
 400ed38:	1885883a 	add	r2,r3,r2
 400ed3c:	10879d04 	addi	r2,r2,7796
 400ed40:	10800017 	ldw	r2,0(r2)
 400ed44:	10bffc58 	cmpnei	r2,r2,-15
 400ed48:	1000221e 	bne	r2,zero,400edd4 <main+0xe800>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400ed4c:	e0b7c217 	ldw	r2,-8440(fp)
 400ed50:	10c00084 	addi	r3,r2,2
 400ed54:	e0b95e04 	addi	r2,fp,-6792
 400ed58:	180f883a 	mov	r7,r3
 400ed5c:	e1b7c117 	ldw	r6,-8444(fp)
 400ed60:	01403fc4 	movi	r5,255
 400ed64:	1009883a 	mov	r4,r2
 400ed68:	40003c80 	call	40003c8 <draw>
					draw(five, COLOR08_BLACK, x,y+2 );
 400ed6c:	e0b7c217 	ldw	r2,-8440(fp)
 400ed70:	10800084 	addi	r2,r2,2
 400ed74:	100f883a 	mov	r7,r2
 400ed78:	e1b7c117 	ldw	r6,-8444(fp)
 400ed7c:	000b883a 	mov	r5,zero
 400ed80:	010100f4 	movhi	r4,1027
 400ed84:	2138aa04 	addi	r4,r4,-7512
 400ed88:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-15;
 400ed8c:	e0b7c217 	ldw	r2,-8440(fp)
 400ed90:	01400504 	movi	r5,20
 400ed94:	1009883a 	mov	r4,r2
 400ed98:	40191000 	call	4019100 <__mulsi3>
 400ed9c:	1007883a 	mov	r3,r2
 400eda0:	e0b7c117 	ldw	r2,-8444(fp)
 400eda4:	1885883a 	add	r2,r3,r2
 400eda8:	1085883a 	add	r2,r2,r2
 400edac:	1085883a 	add	r2,r2,r2
 400edb0:	e0f7c104 	addi	r3,fp,-8444
 400edb4:	1885883a 	add	r2,r3,r2
 400edb8:	10879d04 	addi	r2,r2,7796
 400edbc:	00fffc44 	movi	r3,-15
 400edc0:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400edc4:	00c00044 	movi	r3,1
 400edc8:	008200b4 	movhi	r2,2050
 400edcc:	10841804 	addi	r2,r2,4192
 400edd0:	10c00035 	stwio	r3,0(r2)
				}
				if(gameboard[y][x]==5 && gameboard[y+1][x+1]==5 && gameboard[y+2][x+2]==-15)
 400edd4:	e0b7c217 	ldw	r2,-8440(fp)
 400edd8:	01400504 	movi	r5,20
 400eddc:	1009883a 	mov	r4,r2
 400ede0:	40191000 	call	4019100 <__mulsi3>
 400ede4:	1007883a 	mov	r3,r2
 400ede8:	e0b7c117 	ldw	r2,-8444(fp)
 400edec:	1885883a 	add	r2,r3,r2
 400edf0:	1085883a 	add	r2,r2,r2
 400edf4:	1085883a 	add	r2,r2,r2
 400edf8:	e0f7c104 	addi	r3,fp,-8444
 400edfc:	1885883a 	add	r2,r3,r2
 400ee00:	10879d04 	addi	r2,r2,7796
 400ee04:	10800017 	ldw	r2,0(r2)
 400ee08:	10800158 	cmpnei	r2,r2,5
 400ee0c:	1000421e 	bne	r2,zero,400ef18 <main+0xe944>
 400ee10:	e0b7c217 	ldw	r2,-8440(fp)
 400ee14:	10c00044 	addi	r3,r2,1
 400ee18:	e0b7c117 	ldw	r2,-8444(fp)
 400ee1c:	14000044 	addi	r16,r2,1
 400ee20:	01400504 	movi	r5,20
 400ee24:	1809883a 	mov	r4,r3
 400ee28:	40191000 	call	4019100 <__mulsi3>
 400ee2c:	1405883a 	add	r2,r2,r16
 400ee30:	1085883a 	add	r2,r2,r2
 400ee34:	1085883a 	add	r2,r2,r2
 400ee38:	e0f7c104 	addi	r3,fp,-8444
 400ee3c:	1885883a 	add	r2,r3,r2
 400ee40:	10879d04 	addi	r2,r2,7796
 400ee44:	10800017 	ldw	r2,0(r2)
 400ee48:	10800158 	cmpnei	r2,r2,5
 400ee4c:	1000321e 	bne	r2,zero,400ef18 <main+0xe944>
 400ee50:	e0b7c217 	ldw	r2,-8440(fp)
 400ee54:	10c00084 	addi	r3,r2,2
 400ee58:	e0b7c117 	ldw	r2,-8444(fp)
 400ee5c:	14000084 	addi	r16,r2,2
 400ee60:	01400504 	movi	r5,20
 400ee64:	1809883a 	mov	r4,r3
 400ee68:	40191000 	call	4019100 <__mulsi3>
 400ee6c:	1405883a 	add	r2,r2,r16
 400ee70:	1085883a 	add	r2,r2,r2
 400ee74:	1085883a 	add	r2,r2,r2
 400ee78:	e0f7c104 	addi	r3,fp,-8444
 400ee7c:	1885883a 	add	r2,r3,r2
 400ee80:	10879d04 	addi	r2,r2,7796
 400ee84:	10800017 	ldw	r2,0(r2)
 400ee88:	10bffc58 	cmpnei	r2,r2,-15
 400ee8c:	1000221e 	bne	r2,zero,400ef18 <main+0xe944>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400ee90:	e0b7c217 	ldw	r2,-8440(fp)
 400ee94:	10c00084 	addi	r3,r2,2
 400ee98:	e0b95e04 	addi	r2,fp,-6792
 400ee9c:	180f883a 	mov	r7,r3
 400eea0:	e1b7c117 	ldw	r6,-8444(fp)
 400eea4:	01403fc4 	movi	r5,255
 400eea8:	1009883a 	mov	r4,r2
 400eeac:	40003c80 	call	40003c8 <draw>
					draw(five, COLOR08_BLACK, x,y+2 );
 400eeb0:	e0b7c217 	ldw	r2,-8440(fp)
 400eeb4:	10800084 	addi	r2,r2,2
 400eeb8:	100f883a 	mov	r7,r2
 400eebc:	e1b7c117 	ldw	r6,-8444(fp)
 400eec0:	000b883a 	mov	r5,zero
 400eec4:	010100f4 	movhi	r4,1027
 400eec8:	2138aa04 	addi	r4,r4,-7512
 400eecc:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-15;
 400eed0:	e0b7c217 	ldw	r2,-8440(fp)
 400eed4:	01400504 	movi	r5,20
 400eed8:	1009883a 	mov	r4,r2
 400eedc:	40191000 	call	4019100 <__mulsi3>
 400eee0:	1007883a 	mov	r3,r2
 400eee4:	e0b7c117 	ldw	r2,-8444(fp)
 400eee8:	1885883a 	add	r2,r3,r2
 400eeec:	1085883a 	add	r2,r2,r2
 400eef0:	1085883a 	add	r2,r2,r2
 400eef4:	e0f7c104 	addi	r3,fp,-8444
 400eef8:	1885883a 	add	r2,r3,r2
 400eefc:	10879d04 	addi	r2,r2,7796
 400ef00:	00fffc44 	movi	r3,-15
 400ef04:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400ef08:	00c00044 	movi	r3,1
 400ef0c:	008200b4 	movhi	r2,2050
 400ef10:	10841804 	addi	r2,r2,4192
 400ef14:	10c00035 	stwio	r3,0(r2)
				}
				//////////////////////////////////////////////////////////

				//diagonal (/)5
				if (gameboard [y][x]==gameboard [y+1][x-1] && gameboard[y][x]== gameboard[y-1][x+1])//(/x/)
 400ef18:	e0b7c217 	ldw	r2,-8440(fp)
 400ef1c:	01400504 	movi	r5,20
 400ef20:	1009883a 	mov	r4,r2
 400ef24:	40191000 	call	4019100 <__mulsi3>
 400ef28:	1007883a 	mov	r3,r2
 400ef2c:	e0b7c117 	ldw	r2,-8444(fp)
 400ef30:	1885883a 	add	r2,r3,r2
 400ef34:	1085883a 	add	r2,r2,r2
 400ef38:	1085883a 	add	r2,r2,r2
 400ef3c:	e0f7c104 	addi	r3,fp,-8444
 400ef40:	1885883a 	add	r2,r3,r2
 400ef44:	10879d04 	addi	r2,r2,7796
 400ef48:	14000017 	ldw	r16,0(r2)
 400ef4c:	e0b7c217 	ldw	r2,-8440(fp)
 400ef50:	10c00044 	addi	r3,r2,1
 400ef54:	e0b7c117 	ldw	r2,-8444(fp)
 400ef58:	147fffc4 	addi	r17,r2,-1
 400ef5c:	01400504 	movi	r5,20
 400ef60:	1809883a 	mov	r4,r3
 400ef64:	40191000 	call	4019100 <__mulsi3>
 400ef68:	1445883a 	add	r2,r2,r17
 400ef6c:	1085883a 	add	r2,r2,r2
 400ef70:	1085883a 	add	r2,r2,r2
 400ef74:	e0f7c104 	addi	r3,fp,-8444
 400ef78:	1885883a 	add	r2,r3,r2
 400ef7c:	10879d04 	addi	r2,r2,7796
 400ef80:	10800017 	ldw	r2,0(r2)
 400ef84:	80803e1e 	bne	r16,r2,400f080 <main+0xeaac>
 400ef88:	e0b7c217 	ldw	r2,-8440(fp)
 400ef8c:	01400504 	movi	r5,20
 400ef90:	1009883a 	mov	r4,r2
 400ef94:	40191000 	call	4019100 <__mulsi3>
 400ef98:	1007883a 	mov	r3,r2
 400ef9c:	e0b7c117 	ldw	r2,-8444(fp)
 400efa0:	1885883a 	add	r2,r3,r2
 400efa4:	1085883a 	add	r2,r2,r2
 400efa8:	1085883a 	add	r2,r2,r2
 400efac:	e0f7c104 	addi	r3,fp,-8444
 400efb0:	1885883a 	add	r2,r3,r2
 400efb4:	10879d04 	addi	r2,r2,7796
 400efb8:	14000017 	ldw	r16,0(r2)
 400efbc:	e0b7c217 	ldw	r2,-8440(fp)
 400efc0:	10ffffc4 	addi	r3,r2,-1
 400efc4:	e0b7c117 	ldw	r2,-8444(fp)
 400efc8:	14400044 	addi	r17,r2,1
 400efcc:	01400504 	movi	r5,20
 400efd0:	1809883a 	mov	r4,r3
 400efd4:	40191000 	call	4019100 <__mulsi3>
 400efd8:	1445883a 	add	r2,r2,r17
 400efdc:	1085883a 	add	r2,r2,r2
 400efe0:	1085883a 	add	r2,r2,r2
 400efe4:	e0f7c104 	addi	r3,fp,-8444
 400efe8:	1885883a 	add	r2,r3,r2
 400efec:	10879d04 	addi	r2,r2,7796
 400eff0:	10800017 	ldw	r2,0(r2)
 400eff4:	8080221e 	bne	r16,r2,400f080 <main+0xeaac>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400eff8:	e0b7c217 	ldw	r2,-8440(fp)
 400effc:	10c00084 	addi	r3,r2,2
 400f000:	e0b95e04 	addi	r2,fp,-6792
 400f004:	180f883a 	mov	r7,r3
 400f008:	e1b7c117 	ldw	r6,-8444(fp)
 400f00c:	01403fc4 	movi	r5,255
 400f010:	1009883a 	mov	r4,r2
 400f014:	40003c80 	call	40003c8 <draw>
					draw(five, COLOR08_BLACK, x,y+2 );
 400f018:	e0b7c217 	ldw	r2,-8440(fp)
 400f01c:	10800084 	addi	r2,r2,2
 400f020:	100f883a 	mov	r7,r2
 400f024:	e1b7c117 	ldw	r6,-8444(fp)
 400f028:	000b883a 	mov	r5,zero
 400f02c:	010100f4 	movhi	r4,1027
 400f030:	2138aa04 	addi	r4,r4,-7512
 400f034:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-15;
 400f038:	e0b7c217 	ldw	r2,-8440(fp)
 400f03c:	01400504 	movi	r5,20
 400f040:	1009883a 	mov	r4,r2
 400f044:	40191000 	call	4019100 <__mulsi3>
 400f048:	1007883a 	mov	r3,r2
 400f04c:	e0b7c117 	ldw	r2,-8444(fp)
 400f050:	1885883a 	add	r2,r3,r2
 400f054:	1085883a 	add	r2,r2,r2
 400f058:	1085883a 	add	r2,r2,r2
 400f05c:	e0f7c104 	addi	r3,fp,-8444
 400f060:	1885883a 	add	r2,r3,r2
 400f064:	10879d04 	addi	r2,r2,7796
 400f068:	00fffc44 	movi	r3,-15
 400f06c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400f070:	00c00044 	movi	r3,1
 400f074:	008200b4 	movhi	r2,2050
 400f078:	10841804 	addi	r2,r2,4192
 400f07c:	10c00035 	stwio	r3,0(r2)

				}
				if (gameboard [y][x]==gameboard [y-1][x+1] && gameboard[y][x]== gameboard[y-2][x+2])//(x//)
 400f080:	e0b7c217 	ldw	r2,-8440(fp)
 400f084:	01400504 	movi	r5,20
 400f088:	1009883a 	mov	r4,r2
 400f08c:	40191000 	call	4019100 <__mulsi3>
 400f090:	1007883a 	mov	r3,r2
 400f094:	e0b7c117 	ldw	r2,-8444(fp)
 400f098:	1885883a 	add	r2,r3,r2
 400f09c:	1085883a 	add	r2,r2,r2
 400f0a0:	1085883a 	add	r2,r2,r2
 400f0a4:	e0f7c104 	addi	r3,fp,-8444
 400f0a8:	1885883a 	add	r2,r3,r2
 400f0ac:	10879d04 	addi	r2,r2,7796
 400f0b0:	14000017 	ldw	r16,0(r2)
 400f0b4:	e0b7c217 	ldw	r2,-8440(fp)
 400f0b8:	10ffffc4 	addi	r3,r2,-1
 400f0bc:	e0b7c117 	ldw	r2,-8444(fp)
 400f0c0:	14400044 	addi	r17,r2,1
 400f0c4:	01400504 	movi	r5,20
 400f0c8:	1809883a 	mov	r4,r3
 400f0cc:	40191000 	call	4019100 <__mulsi3>
 400f0d0:	1445883a 	add	r2,r2,r17
 400f0d4:	1085883a 	add	r2,r2,r2
 400f0d8:	1085883a 	add	r2,r2,r2
 400f0dc:	e0f7c104 	addi	r3,fp,-8444
 400f0e0:	1885883a 	add	r2,r3,r2
 400f0e4:	10879d04 	addi	r2,r2,7796
 400f0e8:	10800017 	ldw	r2,0(r2)
 400f0ec:	80803e1e 	bne	r16,r2,400f1e8 <main+0xec14>
 400f0f0:	e0b7c217 	ldw	r2,-8440(fp)
 400f0f4:	01400504 	movi	r5,20
 400f0f8:	1009883a 	mov	r4,r2
 400f0fc:	40191000 	call	4019100 <__mulsi3>
 400f100:	1007883a 	mov	r3,r2
 400f104:	e0b7c117 	ldw	r2,-8444(fp)
 400f108:	1885883a 	add	r2,r3,r2
 400f10c:	1085883a 	add	r2,r2,r2
 400f110:	1085883a 	add	r2,r2,r2
 400f114:	e0f7c104 	addi	r3,fp,-8444
 400f118:	1885883a 	add	r2,r3,r2
 400f11c:	10879d04 	addi	r2,r2,7796
 400f120:	14000017 	ldw	r16,0(r2)
 400f124:	e0b7c217 	ldw	r2,-8440(fp)
 400f128:	10ffff84 	addi	r3,r2,-2
 400f12c:	e0b7c117 	ldw	r2,-8444(fp)
 400f130:	14400084 	addi	r17,r2,2
 400f134:	01400504 	movi	r5,20
 400f138:	1809883a 	mov	r4,r3
 400f13c:	40191000 	call	4019100 <__mulsi3>
 400f140:	1445883a 	add	r2,r2,r17
 400f144:	1085883a 	add	r2,r2,r2
 400f148:	1085883a 	add	r2,r2,r2
 400f14c:	e0f7c104 	addi	r3,fp,-8444
 400f150:	1885883a 	add	r2,r3,r2
 400f154:	10879d04 	addi	r2,r2,7796
 400f158:	10800017 	ldw	r2,0(r2)
 400f15c:	8080221e 	bne	r16,r2,400f1e8 <main+0xec14>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400f160:	e0b7c217 	ldw	r2,-8440(fp)
 400f164:	10c00084 	addi	r3,r2,2
 400f168:	e0b95e04 	addi	r2,fp,-6792
 400f16c:	180f883a 	mov	r7,r3
 400f170:	e1b7c117 	ldw	r6,-8444(fp)
 400f174:	01403fc4 	movi	r5,255
 400f178:	1009883a 	mov	r4,r2
 400f17c:	40003c80 	call	40003c8 <draw>
					draw(five, COLOR08_BLACK, x,y+2 );
 400f180:	e0b7c217 	ldw	r2,-8440(fp)
 400f184:	10800084 	addi	r2,r2,2
 400f188:	100f883a 	mov	r7,r2
 400f18c:	e1b7c117 	ldw	r6,-8444(fp)
 400f190:	000b883a 	mov	r5,zero
 400f194:	010100f4 	movhi	r4,1027
 400f198:	2138aa04 	addi	r4,r4,-7512
 400f19c:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-15;
 400f1a0:	e0b7c217 	ldw	r2,-8440(fp)
 400f1a4:	01400504 	movi	r5,20
 400f1a8:	1009883a 	mov	r4,r2
 400f1ac:	40191000 	call	4019100 <__mulsi3>
 400f1b0:	1007883a 	mov	r3,r2
 400f1b4:	e0b7c117 	ldw	r2,-8444(fp)
 400f1b8:	1885883a 	add	r2,r3,r2
 400f1bc:	1085883a 	add	r2,r2,r2
 400f1c0:	1085883a 	add	r2,r2,r2
 400f1c4:	e0f7c104 	addi	r3,fp,-8444
 400f1c8:	1885883a 	add	r2,r3,r2
 400f1cc:	10879d04 	addi	r2,r2,7796
 400f1d0:	00fffc44 	movi	r3,-15
 400f1d4:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400f1d8:	00c00044 	movi	r3,1
 400f1dc:	008200b4 	movhi	r2,2050
 400f1e0:	10841804 	addi	r2,r2,4192
 400f1e4:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard [y][x]==5 && gameboard [y+1][x-1]==-15) || (gameboard [y][x]==5 && gameboard [y-1][x+1]==-15))//(x//)
 400f1e8:	e0b7c217 	ldw	r2,-8440(fp)
 400f1ec:	01400504 	movi	r5,20
 400f1f0:	1009883a 	mov	r4,r2
 400f1f4:	40191000 	call	4019100 <__mulsi3>
 400f1f8:	1007883a 	mov	r3,r2
 400f1fc:	e0b7c117 	ldw	r2,-8444(fp)
 400f200:	1885883a 	add	r2,r3,r2
 400f204:	1085883a 	add	r2,r2,r2
 400f208:	1085883a 	add	r2,r2,r2
 400f20c:	e0f7c104 	addi	r3,fp,-8444
 400f210:	1885883a 	add	r2,r3,r2
 400f214:	10879d04 	addi	r2,r2,7796
 400f218:	10800017 	ldw	r2,0(r2)
 400f21c:	10800158 	cmpnei	r2,r2,5
 400f220:	1000101e 	bne	r2,zero,400f264 <main+0xec90>
 400f224:	e0b7c217 	ldw	r2,-8440(fp)
 400f228:	10c00044 	addi	r3,r2,1
 400f22c:	e0b7c117 	ldw	r2,-8444(fp)
 400f230:	143fffc4 	addi	r16,r2,-1
 400f234:	01400504 	movi	r5,20
 400f238:	1809883a 	mov	r4,r3
 400f23c:	40191000 	call	4019100 <__mulsi3>
 400f240:	1405883a 	add	r2,r2,r16
 400f244:	1085883a 	add	r2,r2,r2
 400f248:	1085883a 	add	r2,r2,r2
 400f24c:	e0f7c104 	addi	r3,fp,-8444
 400f250:	1885883a 	add	r2,r3,r2
 400f254:	10879d04 	addi	r2,r2,7796
 400f258:	10800017 	ldw	r2,0(r2)
 400f25c:	10bffc60 	cmpeqi	r2,r2,-15
 400f260:	10001f1e 	bne	r2,zero,400f2e0 <main+0xed0c>
 400f264:	e0b7c217 	ldw	r2,-8440(fp)
 400f268:	01400504 	movi	r5,20
 400f26c:	1009883a 	mov	r4,r2
 400f270:	40191000 	call	4019100 <__mulsi3>
 400f274:	1007883a 	mov	r3,r2
 400f278:	e0b7c117 	ldw	r2,-8444(fp)
 400f27c:	1885883a 	add	r2,r3,r2
 400f280:	1085883a 	add	r2,r2,r2
 400f284:	1085883a 	add	r2,r2,r2
 400f288:	e0f7c104 	addi	r3,fp,-8444
 400f28c:	1885883a 	add	r2,r3,r2
 400f290:	10879d04 	addi	r2,r2,7796
 400f294:	10800017 	ldw	r2,0(r2)
 400f298:	10800158 	cmpnei	r2,r2,5
 400f29c:	1000321e 	bne	r2,zero,400f368 <main+0xed94>
 400f2a0:	e0b7c217 	ldw	r2,-8440(fp)
 400f2a4:	10ffffc4 	addi	r3,r2,-1
 400f2a8:	e0b7c117 	ldw	r2,-8444(fp)
 400f2ac:	14000044 	addi	r16,r2,1
 400f2b0:	01400504 	movi	r5,20
 400f2b4:	1809883a 	mov	r4,r3
 400f2b8:	40191000 	call	4019100 <__mulsi3>
 400f2bc:	1405883a 	add	r2,r2,r16
 400f2c0:	1085883a 	add	r2,r2,r2
 400f2c4:	1085883a 	add	r2,r2,r2
 400f2c8:	e0f7c104 	addi	r3,fp,-8444
 400f2cc:	1885883a 	add	r2,r3,r2
 400f2d0:	10879d04 	addi	r2,r2,7796
 400f2d4:	10800017 	ldw	r2,0(r2)
 400f2d8:	10bffc58 	cmpnei	r2,r2,-15
 400f2dc:	1000221e 	bne	r2,zero,400f368 <main+0xed94>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400f2e0:	e0b7c217 	ldw	r2,-8440(fp)
 400f2e4:	10c00084 	addi	r3,r2,2
 400f2e8:	e0b95e04 	addi	r2,fp,-6792
 400f2ec:	180f883a 	mov	r7,r3
 400f2f0:	e1b7c117 	ldw	r6,-8444(fp)
 400f2f4:	01403fc4 	movi	r5,255
 400f2f8:	1009883a 	mov	r4,r2
 400f2fc:	40003c80 	call	40003c8 <draw>
					draw(five, COLOR08_BLACK, x,y+2 );
 400f300:	e0b7c217 	ldw	r2,-8440(fp)
 400f304:	10800084 	addi	r2,r2,2
 400f308:	100f883a 	mov	r7,r2
 400f30c:	e1b7c117 	ldw	r6,-8444(fp)
 400f310:	000b883a 	mov	r5,zero
 400f314:	010100f4 	movhi	r4,1027
 400f318:	2138aa04 	addi	r4,r4,-7512
 400f31c:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-15;
 400f320:	e0b7c217 	ldw	r2,-8440(fp)
 400f324:	01400504 	movi	r5,20
 400f328:	1009883a 	mov	r4,r2
 400f32c:	40191000 	call	4019100 <__mulsi3>
 400f330:	1007883a 	mov	r3,r2
 400f334:	e0b7c117 	ldw	r2,-8444(fp)
 400f338:	1885883a 	add	r2,r3,r2
 400f33c:	1085883a 	add	r2,r2,r2
 400f340:	1085883a 	add	r2,r2,r2
 400f344:	e0f7c104 	addi	r3,fp,-8444
 400f348:	1885883a 	add	r2,r3,r2
 400f34c:	10879d04 	addi	r2,r2,7796
 400f350:	00fffc44 	movi	r3,-15
 400f354:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400f358:	00c00044 	movi	r3,1
 400f35c:	008200b4 	movhi	r2,2050
 400f360:	10841804 	addi	r2,r2,4192
 400f364:	10c00035 	stwio	r3,0(r2)
				}
				if(gameboard[y][x]==5 && gameboard[y+1][x-1]==5 && gameboard[y+2][x-2]==-15)
 400f368:	e0b7c217 	ldw	r2,-8440(fp)
 400f36c:	01400504 	movi	r5,20
 400f370:	1009883a 	mov	r4,r2
 400f374:	40191000 	call	4019100 <__mulsi3>
 400f378:	1007883a 	mov	r3,r2
 400f37c:	e0b7c117 	ldw	r2,-8444(fp)
 400f380:	1885883a 	add	r2,r3,r2
 400f384:	1085883a 	add	r2,r2,r2
 400f388:	1085883a 	add	r2,r2,r2
 400f38c:	e0f7c104 	addi	r3,fp,-8444
 400f390:	1885883a 	add	r2,r3,r2
 400f394:	10879d04 	addi	r2,r2,7796
 400f398:	10800017 	ldw	r2,0(r2)
 400f39c:	10800158 	cmpnei	r2,r2,5
 400f3a0:	1000421e 	bne	r2,zero,400f4ac <main+0xeed8>
 400f3a4:	e0b7c217 	ldw	r2,-8440(fp)
 400f3a8:	10c00044 	addi	r3,r2,1
 400f3ac:	e0b7c117 	ldw	r2,-8444(fp)
 400f3b0:	143fffc4 	addi	r16,r2,-1
 400f3b4:	01400504 	movi	r5,20
 400f3b8:	1809883a 	mov	r4,r3
 400f3bc:	40191000 	call	4019100 <__mulsi3>
 400f3c0:	1405883a 	add	r2,r2,r16
 400f3c4:	1085883a 	add	r2,r2,r2
 400f3c8:	1085883a 	add	r2,r2,r2
 400f3cc:	e0f7c104 	addi	r3,fp,-8444
 400f3d0:	1885883a 	add	r2,r3,r2
 400f3d4:	10879d04 	addi	r2,r2,7796
 400f3d8:	10800017 	ldw	r2,0(r2)
 400f3dc:	10800158 	cmpnei	r2,r2,5
 400f3e0:	1000321e 	bne	r2,zero,400f4ac <main+0xeed8>
 400f3e4:	e0b7c217 	ldw	r2,-8440(fp)
 400f3e8:	10c00084 	addi	r3,r2,2
 400f3ec:	e0b7c117 	ldw	r2,-8444(fp)
 400f3f0:	143fff84 	addi	r16,r2,-2
 400f3f4:	01400504 	movi	r5,20
 400f3f8:	1809883a 	mov	r4,r3
 400f3fc:	40191000 	call	4019100 <__mulsi3>
 400f400:	1405883a 	add	r2,r2,r16
 400f404:	1085883a 	add	r2,r2,r2
 400f408:	1085883a 	add	r2,r2,r2
 400f40c:	e0f7c104 	addi	r3,fp,-8444
 400f410:	1885883a 	add	r2,r3,r2
 400f414:	10879d04 	addi	r2,r2,7796
 400f418:	10800017 	ldw	r2,0(r2)
 400f41c:	10bffc58 	cmpnei	r2,r2,-15
 400f420:	1000221e 	bne	r2,zero,400f4ac <main+0xeed8>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400f424:	e0b7c217 	ldw	r2,-8440(fp)
 400f428:	10c00084 	addi	r3,r2,2
 400f42c:	e0b95e04 	addi	r2,fp,-6792
 400f430:	180f883a 	mov	r7,r3
 400f434:	e1b7c117 	ldw	r6,-8444(fp)
 400f438:	01403fc4 	movi	r5,255
 400f43c:	1009883a 	mov	r4,r2
 400f440:	40003c80 	call	40003c8 <draw>
					draw(five, COLOR08_BLACK, x,y+2 );
 400f444:	e0b7c217 	ldw	r2,-8440(fp)
 400f448:	10800084 	addi	r2,r2,2
 400f44c:	100f883a 	mov	r7,r2
 400f450:	e1b7c117 	ldw	r6,-8444(fp)
 400f454:	000b883a 	mov	r5,zero
 400f458:	010100f4 	movhi	r4,1027
 400f45c:	2138aa04 	addi	r4,r4,-7512
 400f460:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-15;
 400f464:	e0b7c217 	ldw	r2,-8440(fp)
 400f468:	01400504 	movi	r5,20
 400f46c:	1009883a 	mov	r4,r2
 400f470:	40191000 	call	4019100 <__mulsi3>
 400f474:	1007883a 	mov	r3,r2
 400f478:	e0b7c117 	ldw	r2,-8444(fp)
 400f47c:	1885883a 	add	r2,r3,r2
 400f480:	1085883a 	add	r2,r2,r2
 400f484:	1085883a 	add	r2,r2,r2
 400f488:	e0f7c104 	addi	r3,fp,-8444
 400f48c:	1885883a 	add	r2,r3,r2
 400f490:	10879d04 	addi	r2,r2,7796
 400f494:	00fffc44 	movi	r3,-15
 400f498:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400f49c:	00c00044 	movi	r3,1
 400f4a0:	008200b4 	movhi	r2,2050
 400f4a4:	10841804 	addi	r2,r2,4192
 400f4a8:	10c00035 	stwio	r3,0(r2)
				}
				if(gameboard[y][x]==5 && gameboard[y-1][x+1]==5 && gameboard[y-2][x+2]==-15)
 400f4ac:	e0b7c217 	ldw	r2,-8440(fp)
 400f4b0:	01400504 	movi	r5,20
 400f4b4:	1009883a 	mov	r4,r2
 400f4b8:	40191000 	call	4019100 <__mulsi3>
 400f4bc:	1007883a 	mov	r3,r2
 400f4c0:	e0b7c117 	ldw	r2,-8444(fp)
 400f4c4:	1885883a 	add	r2,r3,r2
 400f4c8:	1085883a 	add	r2,r2,r2
 400f4cc:	1085883a 	add	r2,r2,r2
 400f4d0:	e0f7c104 	addi	r3,fp,-8444
 400f4d4:	1885883a 	add	r2,r3,r2
 400f4d8:	10879d04 	addi	r2,r2,7796
 400f4dc:	10800017 	ldw	r2,0(r2)
 400f4e0:	10800158 	cmpnei	r2,r2,5
 400f4e4:	1000421e 	bne	r2,zero,400f5f0 <main+0xf01c>
 400f4e8:	e0b7c217 	ldw	r2,-8440(fp)
 400f4ec:	10ffffc4 	addi	r3,r2,-1
 400f4f0:	e0b7c117 	ldw	r2,-8444(fp)
 400f4f4:	14000044 	addi	r16,r2,1
 400f4f8:	01400504 	movi	r5,20
 400f4fc:	1809883a 	mov	r4,r3
 400f500:	40191000 	call	4019100 <__mulsi3>
 400f504:	1405883a 	add	r2,r2,r16
 400f508:	1085883a 	add	r2,r2,r2
 400f50c:	1085883a 	add	r2,r2,r2
 400f510:	e0f7c104 	addi	r3,fp,-8444
 400f514:	1885883a 	add	r2,r3,r2
 400f518:	10879d04 	addi	r2,r2,7796
 400f51c:	10800017 	ldw	r2,0(r2)
 400f520:	10800158 	cmpnei	r2,r2,5
 400f524:	1000321e 	bne	r2,zero,400f5f0 <main+0xf01c>
 400f528:	e0b7c217 	ldw	r2,-8440(fp)
 400f52c:	10ffff84 	addi	r3,r2,-2
 400f530:	e0b7c117 	ldw	r2,-8444(fp)
 400f534:	14000084 	addi	r16,r2,2
 400f538:	01400504 	movi	r5,20
 400f53c:	1809883a 	mov	r4,r3
 400f540:	40191000 	call	4019100 <__mulsi3>
 400f544:	1405883a 	add	r2,r2,r16
 400f548:	1085883a 	add	r2,r2,r2
 400f54c:	1085883a 	add	r2,r2,r2
 400f550:	e0f7c104 	addi	r3,fp,-8444
 400f554:	1885883a 	add	r2,r3,r2
 400f558:	10879d04 	addi	r2,r2,7796
 400f55c:	10800017 	ldw	r2,0(r2)
 400f560:	10bffc58 	cmpnei	r2,r2,-15
 400f564:	1000221e 	bne	r2,zero,400f5f0 <main+0xf01c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400f568:	e0b7c217 	ldw	r2,-8440(fp)
 400f56c:	10c00084 	addi	r3,r2,2
 400f570:	e0b95e04 	addi	r2,fp,-6792
 400f574:	180f883a 	mov	r7,r3
 400f578:	e1b7c117 	ldw	r6,-8444(fp)
 400f57c:	01403fc4 	movi	r5,255
 400f580:	1009883a 	mov	r4,r2
 400f584:	40003c80 	call	40003c8 <draw>
					draw(five, COLOR08_BLACK, x,y+2 );
 400f588:	e0b7c217 	ldw	r2,-8440(fp)
 400f58c:	10800084 	addi	r2,r2,2
 400f590:	100f883a 	mov	r7,r2
 400f594:	e1b7c117 	ldw	r6,-8444(fp)
 400f598:	000b883a 	mov	r5,zero
 400f59c:	010100f4 	movhi	r4,1027
 400f5a0:	2138aa04 	addi	r4,r4,-7512
 400f5a4:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-15;
 400f5a8:	e0b7c217 	ldw	r2,-8440(fp)
 400f5ac:	01400504 	movi	r5,20
 400f5b0:	1009883a 	mov	r4,r2
 400f5b4:	40191000 	call	4019100 <__mulsi3>
 400f5b8:	1007883a 	mov	r3,r2
 400f5bc:	e0b7c117 	ldw	r2,-8444(fp)
 400f5c0:	1885883a 	add	r2,r3,r2
 400f5c4:	1085883a 	add	r2,r2,r2
 400f5c8:	1085883a 	add	r2,r2,r2
 400f5cc:	e0f7c104 	addi	r3,fp,-8444
 400f5d0:	1885883a 	add	r2,r3,r2
 400f5d4:	10879d04 	addi	r2,r2,7796
 400f5d8:	00fffc44 	movi	r3,-15
 400f5dc:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400f5e0:	00c00044 	movi	r3,1
 400f5e4:	008200b4 	movhi	r2,2050
 400f5e8:	10841804 	addi	r2,r2,4192
 400f5ec:	10c00035 	stwio	r3,0(r2)
				}
			}

			if(gameboard[y][x]==6)//6
 400f5f0:	e0b7c217 	ldw	r2,-8440(fp)
 400f5f4:	01400504 	movi	r5,20
 400f5f8:	1009883a 	mov	r4,r2
 400f5fc:	40191000 	call	4019100 <__mulsi3>
 400f600:	1007883a 	mov	r3,r2
 400f604:	e0b7c117 	ldw	r2,-8444(fp)
 400f608:	1885883a 	add	r2,r3,r2
 400f60c:	1085883a 	add	r2,r2,r2
 400f610:	1085883a 	add	r2,r2,r2
 400f614:	e0f7c104 	addi	r3,fp,-8444
 400f618:	1885883a 	add	r2,r3,r2
 400f61c:	10879d04 	addi	r2,r2,7796
 400f620:	10800017 	ldw	r2,0(r2)
 400f624:	10800198 	cmpnei	r2,r2,6
 400f628:	1005511e 	bne	r2,zero,4010b70 <main+0x1059c>
			{
				//horizontal6
				if ((gameboard [y][x]==gameboard [y][x+1] && gameboard [y][x+1]== gameboard [y][x+2]) || (gameboard[y][x]==6 && gameboard[y][x+1]==-16) )//(0,0,0)
 400f62c:	e0b7c217 	ldw	r2,-8440(fp)
 400f630:	01400504 	movi	r5,20
 400f634:	1009883a 	mov	r4,r2
 400f638:	40191000 	call	4019100 <__mulsi3>
 400f63c:	1007883a 	mov	r3,r2
 400f640:	e0b7c117 	ldw	r2,-8444(fp)
 400f644:	1885883a 	add	r2,r3,r2
 400f648:	1085883a 	add	r2,r2,r2
 400f64c:	1085883a 	add	r2,r2,r2
 400f650:	e0f7c104 	addi	r3,fp,-8444
 400f654:	1885883a 	add	r2,r3,r2
 400f658:	10879d04 	addi	r2,r2,7796
 400f65c:	14000017 	ldw	r16,0(r2)
 400f660:	e0b7c117 	ldw	r2,-8444(fp)
 400f664:	14400044 	addi	r17,r2,1
 400f668:	e0b7c217 	ldw	r2,-8440(fp)
 400f66c:	01400504 	movi	r5,20
 400f670:	1009883a 	mov	r4,r2
 400f674:	40191000 	call	4019100 <__mulsi3>
 400f678:	1445883a 	add	r2,r2,r17
 400f67c:	1085883a 	add	r2,r2,r2
 400f680:	1085883a 	add	r2,r2,r2
 400f684:	e0f7c104 	addi	r3,fp,-8444
 400f688:	1885883a 	add	r2,r3,r2
 400f68c:	10879d04 	addi	r2,r2,7796
 400f690:	10800017 	ldw	r2,0(r2)
 400f694:	80801b1e 	bne	r16,r2,400f704 <main+0xf130>
 400f698:	e0b7c117 	ldw	r2,-8444(fp)
 400f69c:	14000044 	addi	r16,r2,1
 400f6a0:	e0b7c217 	ldw	r2,-8440(fp)
 400f6a4:	01400504 	movi	r5,20
 400f6a8:	1009883a 	mov	r4,r2
 400f6ac:	40191000 	call	4019100 <__mulsi3>
 400f6b0:	1405883a 	add	r2,r2,r16
 400f6b4:	1085883a 	add	r2,r2,r2
 400f6b8:	1085883a 	add	r2,r2,r2
 400f6bc:	e0f7c104 	addi	r3,fp,-8444
 400f6c0:	1885883a 	add	r2,r3,r2
 400f6c4:	10879d04 	addi	r2,r2,7796
 400f6c8:	14000017 	ldw	r16,0(r2)
 400f6cc:	e0b7c117 	ldw	r2,-8444(fp)
 400f6d0:	14400084 	addi	r17,r2,2
 400f6d4:	e0b7c217 	ldw	r2,-8440(fp)
 400f6d8:	01400504 	movi	r5,20
 400f6dc:	1009883a 	mov	r4,r2
 400f6e0:	40191000 	call	4019100 <__mulsi3>
 400f6e4:	1445883a 	add	r2,r2,r17
 400f6e8:	1085883a 	add	r2,r2,r2
 400f6ec:	1085883a 	add	r2,r2,r2
 400f6f0:	e0f7c104 	addi	r3,fp,-8444
 400f6f4:	1885883a 	add	r2,r3,r2
 400f6f8:	10879d04 	addi	r2,r2,7796
 400f6fc:	10800017 	ldw	r2,0(r2)
 400f700:	80801e26 	beq	r16,r2,400f77c <main+0xf1a8>
 400f704:	e0b7c217 	ldw	r2,-8440(fp)
 400f708:	01400504 	movi	r5,20
 400f70c:	1009883a 	mov	r4,r2
 400f710:	40191000 	call	4019100 <__mulsi3>
 400f714:	1007883a 	mov	r3,r2
 400f718:	e0b7c117 	ldw	r2,-8444(fp)
 400f71c:	1885883a 	add	r2,r3,r2
 400f720:	1085883a 	add	r2,r2,r2
 400f724:	1085883a 	add	r2,r2,r2
 400f728:	e0f7c104 	addi	r3,fp,-8444
 400f72c:	1885883a 	add	r2,r3,r2
 400f730:	10879d04 	addi	r2,r2,7796
 400f734:	10800017 	ldw	r2,0(r2)
 400f738:	10800198 	cmpnei	r2,r2,6
 400f73c:	1000311e 	bne	r2,zero,400f804 <main+0xf230>
 400f740:	e0b7c117 	ldw	r2,-8444(fp)
 400f744:	14000044 	addi	r16,r2,1
 400f748:	e0b7c217 	ldw	r2,-8440(fp)
 400f74c:	01400504 	movi	r5,20
 400f750:	1009883a 	mov	r4,r2
 400f754:	40191000 	call	4019100 <__mulsi3>
 400f758:	1405883a 	add	r2,r2,r16
 400f75c:	1085883a 	add	r2,r2,r2
 400f760:	1085883a 	add	r2,r2,r2
 400f764:	e0f7c104 	addi	r3,fp,-8444
 400f768:	1885883a 	add	r2,r3,r2
 400f76c:	10879d04 	addi	r2,r2,7796
 400f770:	10800017 	ldw	r2,0(r2)
 400f774:	10bffc18 	cmpnei	r2,r2,-16
 400f778:	1000221e 	bne	r2,zero,400f804 <main+0xf230>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400f77c:	e0b7c217 	ldw	r2,-8440(fp)
 400f780:	10c00084 	addi	r3,r2,2
 400f784:	e0b95e04 	addi	r2,fp,-6792
 400f788:	180f883a 	mov	r7,r3
 400f78c:	e1b7c117 	ldw	r6,-8444(fp)
 400f790:	01403fc4 	movi	r5,255
 400f794:	1009883a 	mov	r4,r2
 400f798:	40003c80 	call	40003c8 <draw>
					draw(six, COLOR08_BLACK, x,y+2 );
 400f79c:	e0b7c217 	ldw	r2,-8440(fp)
 400f7a0:	10800084 	addi	r2,r2,2
 400f7a4:	100f883a 	mov	r7,r2
 400f7a8:	e1b7c117 	ldw	r6,-8444(fp)
 400f7ac:	000b883a 	mov	r5,zero
 400f7b0:	010100f4 	movhi	r4,1027
 400f7b4:	213a2a04 	addi	r4,r4,-5976
 400f7b8:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-16;
 400f7bc:	e0b7c217 	ldw	r2,-8440(fp)
 400f7c0:	01400504 	movi	r5,20
 400f7c4:	1009883a 	mov	r4,r2
 400f7c8:	40191000 	call	4019100 <__mulsi3>
 400f7cc:	1007883a 	mov	r3,r2
 400f7d0:	e0b7c117 	ldw	r2,-8444(fp)
 400f7d4:	1885883a 	add	r2,r3,r2
 400f7d8:	1085883a 	add	r2,r2,r2
 400f7dc:	1085883a 	add	r2,r2,r2
 400f7e0:	e0f7c104 	addi	r3,fp,-8444
 400f7e4:	1885883a 	add	r2,r3,r2
 400f7e8:	10879d04 	addi	r2,r2,7796
 400f7ec:	00fffc04 	movi	r3,-16
 400f7f0:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400f7f4:	00c00044 	movi	r3,1
 400f7f8:	008200b4 	movhi	r2,2050
 400f7fc:	10841804 	addi	r2,r2,4192
 400f800:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y][x-1] && gameboard [y][x]== gameboard [y][x+1]) || (gameboard [y][x]==6 && gameboard [y][x-1]==-16) || (gameboard [y][x]==6 && gameboard [y][x+1]==-16))//(
 400f804:	e0b7c217 	ldw	r2,-8440(fp)
 400f808:	01400504 	movi	r5,20
 400f80c:	1009883a 	mov	r4,r2
 400f810:	40191000 	call	4019100 <__mulsi3>
 400f814:	1007883a 	mov	r3,r2
 400f818:	e0b7c117 	ldw	r2,-8444(fp)
 400f81c:	1885883a 	add	r2,r3,r2
 400f820:	1085883a 	add	r2,r2,r2
 400f824:	1085883a 	add	r2,r2,r2
 400f828:	e0f7c104 	addi	r3,fp,-8444
 400f82c:	1885883a 	add	r2,r3,r2
 400f830:	10879d04 	addi	r2,r2,7796
 400f834:	14000017 	ldw	r16,0(r2)
 400f838:	e0b7c117 	ldw	r2,-8444(fp)
 400f83c:	147fffc4 	addi	r17,r2,-1
 400f840:	e0b7c217 	ldw	r2,-8440(fp)
 400f844:	01400504 	movi	r5,20
 400f848:	1009883a 	mov	r4,r2
 400f84c:	40191000 	call	4019100 <__mulsi3>
 400f850:	1445883a 	add	r2,r2,r17
 400f854:	1085883a 	add	r2,r2,r2
 400f858:	1085883a 	add	r2,r2,r2
 400f85c:	e0f7c104 	addi	r3,fp,-8444
 400f860:	1885883a 	add	r2,r3,r2
 400f864:	10879d04 	addi	r2,r2,7796
 400f868:	10800017 	ldw	r2,0(r2)
 400f86c:	80801b1e 	bne	r16,r2,400f8dc <main+0xf308>
 400f870:	e0b7c217 	ldw	r2,-8440(fp)
 400f874:	01400504 	movi	r5,20
 400f878:	1009883a 	mov	r4,r2
 400f87c:	40191000 	call	4019100 <__mulsi3>
 400f880:	1007883a 	mov	r3,r2
 400f884:	e0b7c117 	ldw	r2,-8444(fp)
 400f888:	1885883a 	add	r2,r3,r2
 400f88c:	1085883a 	add	r2,r2,r2
 400f890:	1085883a 	add	r2,r2,r2
 400f894:	e0f7c104 	addi	r3,fp,-8444
 400f898:	1885883a 	add	r2,r3,r2
 400f89c:	10879d04 	addi	r2,r2,7796
 400f8a0:	14000017 	ldw	r16,0(r2)
 400f8a4:	e0b7c117 	ldw	r2,-8444(fp)
 400f8a8:	14400044 	addi	r17,r2,1
 400f8ac:	e0b7c217 	ldw	r2,-8440(fp)
 400f8b0:	01400504 	movi	r5,20
 400f8b4:	1009883a 	mov	r4,r2
 400f8b8:	40191000 	call	4019100 <__mulsi3>
 400f8bc:	1445883a 	add	r2,r2,r17
 400f8c0:	1085883a 	add	r2,r2,r2
 400f8c4:	1085883a 	add	r2,r2,r2
 400f8c8:	e0f7c104 	addi	r3,fp,-8444
 400f8cc:	1885883a 	add	r2,r3,r2
 400f8d0:	10879d04 	addi	r2,r2,7796
 400f8d4:	10800017 	ldw	r2,0(r2)
 400f8d8:	80803c26 	beq	r16,r2,400f9cc <main+0xf3f8>
 400f8dc:	e0b7c217 	ldw	r2,-8440(fp)
 400f8e0:	01400504 	movi	r5,20
 400f8e4:	1009883a 	mov	r4,r2
 400f8e8:	40191000 	call	4019100 <__mulsi3>
 400f8ec:	1007883a 	mov	r3,r2
 400f8f0:	e0b7c117 	ldw	r2,-8444(fp)
 400f8f4:	1885883a 	add	r2,r3,r2
 400f8f8:	1085883a 	add	r2,r2,r2
 400f8fc:	1085883a 	add	r2,r2,r2
 400f900:	e0f7c104 	addi	r3,fp,-8444
 400f904:	1885883a 	add	r2,r3,r2
 400f908:	10879d04 	addi	r2,r2,7796
 400f90c:	10800017 	ldw	r2,0(r2)
 400f910:	10800198 	cmpnei	r2,r2,6
 400f914:	10000f1e 	bne	r2,zero,400f954 <main+0xf380>
 400f918:	e0b7c117 	ldw	r2,-8444(fp)
 400f91c:	143fffc4 	addi	r16,r2,-1
 400f920:	e0b7c217 	ldw	r2,-8440(fp)
 400f924:	01400504 	movi	r5,20
 400f928:	1009883a 	mov	r4,r2
 400f92c:	40191000 	call	4019100 <__mulsi3>
 400f930:	1405883a 	add	r2,r2,r16
 400f934:	1085883a 	add	r2,r2,r2
 400f938:	1085883a 	add	r2,r2,r2
 400f93c:	e0f7c104 	addi	r3,fp,-8444
 400f940:	1885883a 	add	r2,r3,r2
 400f944:	10879d04 	addi	r2,r2,7796
 400f948:	10800017 	ldw	r2,0(r2)
 400f94c:	10bffc20 	cmpeqi	r2,r2,-16
 400f950:	10001e1e 	bne	r2,zero,400f9cc <main+0xf3f8>
 400f954:	e0b7c217 	ldw	r2,-8440(fp)
 400f958:	01400504 	movi	r5,20
 400f95c:	1009883a 	mov	r4,r2
 400f960:	40191000 	call	4019100 <__mulsi3>
 400f964:	1007883a 	mov	r3,r2
 400f968:	e0b7c117 	ldw	r2,-8444(fp)
 400f96c:	1885883a 	add	r2,r3,r2
 400f970:	1085883a 	add	r2,r2,r2
 400f974:	1085883a 	add	r2,r2,r2
 400f978:	e0f7c104 	addi	r3,fp,-8444
 400f97c:	1885883a 	add	r2,r3,r2
 400f980:	10879d04 	addi	r2,r2,7796
 400f984:	10800017 	ldw	r2,0(r2)
 400f988:	10800198 	cmpnei	r2,r2,6
 400f98c:	1000311e 	bne	r2,zero,400fa54 <main+0xf480>
 400f990:	e0b7c117 	ldw	r2,-8444(fp)
 400f994:	14000044 	addi	r16,r2,1
 400f998:	e0b7c217 	ldw	r2,-8440(fp)
 400f99c:	01400504 	movi	r5,20
 400f9a0:	1009883a 	mov	r4,r2
 400f9a4:	40191000 	call	4019100 <__mulsi3>
 400f9a8:	1405883a 	add	r2,r2,r16
 400f9ac:	1085883a 	add	r2,r2,r2
 400f9b0:	1085883a 	add	r2,r2,r2
 400f9b4:	e0f7c104 	addi	r3,fp,-8444
 400f9b8:	1885883a 	add	r2,r3,r2
 400f9bc:	10879d04 	addi	r2,r2,7796
 400f9c0:	10800017 	ldw	r2,0(r2)
 400f9c4:	10bffc18 	cmpnei	r2,r2,-16
 400f9c8:	1000221e 	bne	r2,zero,400fa54 <main+0xf480>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400f9cc:	e0b7c217 	ldw	r2,-8440(fp)
 400f9d0:	10c00084 	addi	r3,r2,2
 400f9d4:	e0b95e04 	addi	r2,fp,-6792
 400f9d8:	180f883a 	mov	r7,r3
 400f9dc:	e1b7c117 	ldw	r6,-8444(fp)
 400f9e0:	01403fc4 	movi	r5,255
 400f9e4:	1009883a 	mov	r4,r2
 400f9e8:	40003c80 	call	40003c8 <draw>
					draw(six, COLOR08_BLACK, x,y+2 );
 400f9ec:	e0b7c217 	ldw	r2,-8440(fp)
 400f9f0:	10800084 	addi	r2,r2,2
 400f9f4:	100f883a 	mov	r7,r2
 400f9f8:	e1b7c117 	ldw	r6,-8444(fp)
 400f9fc:	000b883a 	mov	r5,zero
 400fa00:	010100f4 	movhi	r4,1027
 400fa04:	213a2a04 	addi	r4,r4,-5976
 400fa08:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-16;
 400fa0c:	e0b7c217 	ldw	r2,-8440(fp)
 400fa10:	01400504 	movi	r5,20
 400fa14:	1009883a 	mov	r4,r2
 400fa18:	40191000 	call	4019100 <__mulsi3>
 400fa1c:	1007883a 	mov	r3,r2
 400fa20:	e0b7c117 	ldw	r2,-8444(fp)
 400fa24:	1885883a 	add	r2,r3,r2
 400fa28:	1085883a 	add	r2,r2,r2
 400fa2c:	1085883a 	add	r2,r2,r2
 400fa30:	e0f7c104 	addi	r3,fp,-8444
 400fa34:	1885883a 	add	r2,r3,r2
 400fa38:	10879d04 	addi	r2,r2,7796
 400fa3c:	00fffc04 	movi	r3,-16
 400fa40:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400fa44:	00c00044 	movi	r3,1
 400fa48:	008200b4 	movhi	r2,2050
 400fa4c:	10841804 	addi	r2,r2,4192
 400fa50:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y][x-1] && gameboard [y][x]== gameboard [y][x-2]))//00x
 400fa54:	e0b7c217 	ldw	r2,-8440(fp)
 400fa58:	01400504 	movi	r5,20
 400fa5c:	1009883a 	mov	r4,r2
 400fa60:	40191000 	call	4019100 <__mulsi3>
 400fa64:	1007883a 	mov	r3,r2
 400fa68:	e0b7c117 	ldw	r2,-8444(fp)
 400fa6c:	1885883a 	add	r2,r3,r2
 400fa70:	1085883a 	add	r2,r2,r2
 400fa74:	1085883a 	add	r2,r2,r2
 400fa78:	e0f7c104 	addi	r3,fp,-8444
 400fa7c:	1885883a 	add	r2,r3,r2
 400fa80:	10879d04 	addi	r2,r2,7796
 400fa84:	14000017 	ldw	r16,0(r2)
 400fa88:	e0b7c117 	ldw	r2,-8444(fp)
 400fa8c:	147fffc4 	addi	r17,r2,-1
 400fa90:	e0b7c217 	ldw	r2,-8440(fp)
 400fa94:	01400504 	movi	r5,20
 400fa98:	1009883a 	mov	r4,r2
 400fa9c:	40191000 	call	4019100 <__mulsi3>
 400faa0:	1445883a 	add	r2,r2,r17
 400faa4:	1085883a 	add	r2,r2,r2
 400faa8:	1085883a 	add	r2,r2,r2
 400faac:	e0f7c104 	addi	r3,fp,-8444
 400fab0:	1885883a 	add	r2,r3,r2
 400fab4:	10879d04 	addi	r2,r2,7796
 400fab8:	10800017 	ldw	r2,0(r2)
 400fabc:	80803d1e 	bne	r16,r2,400fbb4 <main+0xf5e0>
 400fac0:	e0b7c217 	ldw	r2,-8440(fp)
 400fac4:	01400504 	movi	r5,20
 400fac8:	1009883a 	mov	r4,r2
 400facc:	40191000 	call	4019100 <__mulsi3>
 400fad0:	1007883a 	mov	r3,r2
 400fad4:	e0b7c117 	ldw	r2,-8444(fp)
 400fad8:	1885883a 	add	r2,r3,r2
 400fadc:	1085883a 	add	r2,r2,r2
 400fae0:	1085883a 	add	r2,r2,r2
 400fae4:	e0f7c104 	addi	r3,fp,-8444
 400fae8:	1885883a 	add	r2,r3,r2
 400faec:	10879d04 	addi	r2,r2,7796
 400faf0:	14000017 	ldw	r16,0(r2)
 400faf4:	e0b7c117 	ldw	r2,-8444(fp)
 400faf8:	147fff84 	addi	r17,r2,-2
 400fafc:	e0b7c217 	ldw	r2,-8440(fp)
 400fb00:	01400504 	movi	r5,20
 400fb04:	1009883a 	mov	r4,r2
 400fb08:	40191000 	call	4019100 <__mulsi3>
 400fb0c:	1445883a 	add	r2,r2,r17
 400fb10:	1085883a 	add	r2,r2,r2
 400fb14:	1085883a 	add	r2,r2,r2
 400fb18:	e0f7c104 	addi	r3,fp,-8444
 400fb1c:	1885883a 	add	r2,r3,r2
 400fb20:	10879d04 	addi	r2,r2,7796
 400fb24:	10800017 	ldw	r2,0(r2)
 400fb28:	8080221e 	bne	r16,r2,400fbb4 <main+0xf5e0>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400fb2c:	e0b7c217 	ldw	r2,-8440(fp)
 400fb30:	10c00084 	addi	r3,r2,2
 400fb34:	e0b95e04 	addi	r2,fp,-6792
 400fb38:	180f883a 	mov	r7,r3
 400fb3c:	e1b7c117 	ldw	r6,-8444(fp)
 400fb40:	01403fc4 	movi	r5,255
 400fb44:	1009883a 	mov	r4,r2
 400fb48:	40003c80 	call	40003c8 <draw>
					draw(six, COLOR08_BLACK, x,y+2 );
 400fb4c:	e0b7c217 	ldw	r2,-8440(fp)
 400fb50:	10800084 	addi	r2,r2,2
 400fb54:	100f883a 	mov	r7,r2
 400fb58:	e1b7c117 	ldw	r6,-8444(fp)
 400fb5c:	000b883a 	mov	r5,zero
 400fb60:	010100f4 	movhi	r4,1027
 400fb64:	213a2a04 	addi	r4,r4,-5976
 400fb68:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-16;
 400fb6c:	e0b7c217 	ldw	r2,-8440(fp)
 400fb70:	01400504 	movi	r5,20
 400fb74:	1009883a 	mov	r4,r2
 400fb78:	40191000 	call	4019100 <__mulsi3>
 400fb7c:	1007883a 	mov	r3,r2
 400fb80:	e0b7c117 	ldw	r2,-8444(fp)
 400fb84:	1885883a 	add	r2,r3,r2
 400fb88:	1085883a 	add	r2,r2,r2
 400fb8c:	1085883a 	add	r2,r2,r2
 400fb90:	e0f7c104 	addi	r3,fp,-8444
 400fb94:	1885883a 	add	r2,r3,r2
 400fb98:	10879d04 	addi	r2,r2,7796
 400fb9c:	00fffc04 	movi	r3,-16
 400fba0:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400fba4:	00c00044 	movi	r3,1
 400fba8:	008200b4 	movhi	r2,2050
 400fbac:	10841804 	addi	r2,r2,4192
 400fbb0:	10c00035 	stwio	r3,0(r2)
				}
				/////////////////////////////////

				//vertical6
				if ((gameboard [y][x]==gameboard [y+1][x] && gameboard [y+1][x]== gameboard [y+2][x]) || (gameboard [y][x]==6 && gameboard [y+1][x]==-16))//xmb
 400fbb4:	e0b7c217 	ldw	r2,-8440(fp)
 400fbb8:	01400504 	movi	r5,20
 400fbbc:	1009883a 	mov	r4,r2
 400fbc0:	40191000 	call	4019100 <__mulsi3>
 400fbc4:	1007883a 	mov	r3,r2
 400fbc8:	e0b7c117 	ldw	r2,-8444(fp)
 400fbcc:	1885883a 	add	r2,r3,r2
 400fbd0:	1085883a 	add	r2,r2,r2
 400fbd4:	1085883a 	add	r2,r2,r2
 400fbd8:	e0f7c104 	addi	r3,fp,-8444
 400fbdc:	1885883a 	add	r2,r3,r2
 400fbe0:	10879d04 	addi	r2,r2,7796
 400fbe4:	14000017 	ldw	r16,0(r2)
 400fbe8:	e0b7c217 	ldw	r2,-8440(fp)
 400fbec:	10800044 	addi	r2,r2,1
 400fbf0:	01400504 	movi	r5,20
 400fbf4:	1009883a 	mov	r4,r2
 400fbf8:	40191000 	call	4019100 <__mulsi3>
 400fbfc:	1007883a 	mov	r3,r2
 400fc00:	e0b7c117 	ldw	r2,-8444(fp)
 400fc04:	1885883a 	add	r2,r3,r2
 400fc08:	1085883a 	add	r2,r2,r2
 400fc0c:	1085883a 	add	r2,r2,r2
 400fc10:	e0f7c104 	addi	r3,fp,-8444
 400fc14:	1885883a 	add	r2,r3,r2
 400fc18:	10879d04 	addi	r2,r2,7796
 400fc1c:	10800017 	ldw	r2,0(r2)
 400fc20:	80801d1e 	bne	r16,r2,400fc98 <main+0xf6c4>
 400fc24:	e0b7c217 	ldw	r2,-8440(fp)
 400fc28:	10800044 	addi	r2,r2,1
 400fc2c:	01400504 	movi	r5,20
 400fc30:	1009883a 	mov	r4,r2
 400fc34:	40191000 	call	4019100 <__mulsi3>
 400fc38:	1007883a 	mov	r3,r2
 400fc3c:	e0b7c117 	ldw	r2,-8444(fp)
 400fc40:	1885883a 	add	r2,r3,r2
 400fc44:	1085883a 	add	r2,r2,r2
 400fc48:	1085883a 	add	r2,r2,r2
 400fc4c:	e0f7c104 	addi	r3,fp,-8444
 400fc50:	1885883a 	add	r2,r3,r2
 400fc54:	10879d04 	addi	r2,r2,7796
 400fc58:	14000017 	ldw	r16,0(r2)
 400fc5c:	e0b7c217 	ldw	r2,-8440(fp)
 400fc60:	10800084 	addi	r2,r2,2
 400fc64:	01400504 	movi	r5,20
 400fc68:	1009883a 	mov	r4,r2
 400fc6c:	40191000 	call	4019100 <__mulsi3>
 400fc70:	1007883a 	mov	r3,r2
 400fc74:	e0b7c117 	ldw	r2,-8444(fp)
 400fc78:	1885883a 	add	r2,r3,r2
 400fc7c:	1085883a 	add	r2,r2,r2
 400fc80:	1085883a 	add	r2,r2,r2
 400fc84:	e0f7c104 	addi	r3,fp,-8444
 400fc88:	1885883a 	add	r2,r3,r2
 400fc8c:	10879d04 	addi	r2,r2,7796
 400fc90:	10800017 	ldw	r2,0(r2)
 400fc94:	80801f26 	beq	r16,r2,400fd14 <main+0xf740>
 400fc98:	e0b7c217 	ldw	r2,-8440(fp)
 400fc9c:	01400504 	movi	r5,20
 400fca0:	1009883a 	mov	r4,r2
 400fca4:	40191000 	call	4019100 <__mulsi3>
 400fca8:	1007883a 	mov	r3,r2
 400fcac:	e0b7c117 	ldw	r2,-8444(fp)
 400fcb0:	1885883a 	add	r2,r3,r2
 400fcb4:	1085883a 	add	r2,r2,r2
 400fcb8:	1085883a 	add	r2,r2,r2
 400fcbc:	e0f7c104 	addi	r3,fp,-8444
 400fcc0:	1885883a 	add	r2,r3,r2
 400fcc4:	10879d04 	addi	r2,r2,7796
 400fcc8:	10800017 	ldw	r2,0(r2)
 400fccc:	10800198 	cmpnei	r2,r2,6
 400fcd0:	1000321e 	bne	r2,zero,400fd9c <main+0xf7c8>
 400fcd4:	e0b7c217 	ldw	r2,-8440(fp)
 400fcd8:	10800044 	addi	r2,r2,1
 400fcdc:	01400504 	movi	r5,20
 400fce0:	1009883a 	mov	r4,r2
 400fce4:	40191000 	call	4019100 <__mulsi3>
 400fce8:	1007883a 	mov	r3,r2
 400fcec:	e0b7c117 	ldw	r2,-8444(fp)
 400fcf0:	1885883a 	add	r2,r3,r2
 400fcf4:	1085883a 	add	r2,r2,r2
 400fcf8:	1085883a 	add	r2,r2,r2
 400fcfc:	e0f7c104 	addi	r3,fp,-8444
 400fd00:	1885883a 	add	r2,r3,r2
 400fd04:	10879d04 	addi	r2,r2,7796
 400fd08:	10800017 	ldw	r2,0(r2)
 400fd0c:	10bffc18 	cmpnei	r2,r2,-16
 400fd10:	1000221e 	bne	r2,zero,400fd9c <main+0xf7c8>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400fd14:	e0b7c217 	ldw	r2,-8440(fp)
 400fd18:	10c00084 	addi	r3,r2,2
 400fd1c:	e0b95e04 	addi	r2,fp,-6792
 400fd20:	180f883a 	mov	r7,r3
 400fd24:	e1b7c117 	ldw	r6,-8444(fp)
 400fd28:	01403fc4 	movi	r5,255
 400fd2c:	1009883a 	mov	r4,r2
 400fd30:	40003c80 	call	40003c8 <draw>
					draw(six, COLOR08_BLACK, x,y+2 );
 400fd34:	e0b7c217 	ldw	r2,-8440(fp)
 400fd38:	10800084 	addi	r2,r2,2
 400fd3c:	100f883a 	mov	r7,r2
 400fd40:	e1b7c117 	ldw	r6,-8444(fp)
 400fd44:	000b883a 	mov	r5,zero
 400fd48:	010100f4 	movhi	r4,1027
 400fd4c:	213a2a04 	addi	r4,r4,-5976
 400fd50:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-16;
 400fd54:	e0b7c217 	ldw	r2,-8440(fp)
 400fd58:	01400504 	movi	r5,20
 400fd5c:	1009883a 	mov	r4,r2
 400fd60:	40191000 	call	4019100 <__mulsi3>
 400fd64:	1007883a 	mov	r3,r2
 400fd68:	e0b7c117 	ldw	r2,-8444(fp)
 400fd6c:	1885883a 	add	r2,r3,r2
 400fd70:	1085883a 	add	r2,r2,r2
 400fd74:	1085883a 	add	r2,r2,r2
 400fd78:	e0f7c104 	addi	r3,fp,-8444
 400fd7c:	1885883a 	add	r2,r3,r2
 400fd80:	10879d04 	addi	r2,r2,7796
 400fd84:	00fffc04 	movi	r3,-16
 400fd88:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400fd8c:	00c00044 	movi	r3,1
 400fd90:	008200b4 	movhi	r2,2050
 400fd94:	10841804 	addi	r2,r2,4192
 400fd98:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y-1][x] && gameboard [y][x]== gameboard [y+1][x]) || (gameboard [y][x]==6 && gameboard [y+1][x]==-16))//txb
 400fd9c:	e0b7c217 	ldw	r2,-8440(fp)
 400fda0:	01400504 	movi	r5,20
 400fda4:	1009883a 	mov	r4,r2
 400fda8:	40191000 	call	4019100 <__mulsi3>
 400fdac:	1007883a 	mov	r3,r2
 400fdb0:	e0b7c117 	ldw	r2,-8444(fp)
 400fdb4:	1885883a 	add	r2,r3,r2
 400fdb8:	1085883a 	add	r2,r2,r2
 400fdbc:	1085883a 	add	r2,r2,r2
 400fdc0:	e0f7c104 	addi	r3,fp,-8444
 400fdc4:	1885883a 	add	r2,r3,r2
 400fdc8:	10879d04 	addi	r2,r2,7796
 400fdcc:	14000017 	ldw	r16,0(r2)
 400fdd0:	e0b7c217 	ldw	r2,-8440(fp)
 400fdd4:	10bfffc4 	addi	r2,r2,-1
 400fdd8:	01400504 	movi	r5,20
 400fddc:	1009883a 	mov	r4,r2
 400fde0:	40191000 	call	4019100 <__mulsi3>
 400fde4:	1007883a 	mov	r3,r2
 400fde8:	e0b7c117 	ldw	r2,-8444(fp)
 400fdec:	1885883a 	add	r2,r3,r2
 400fdf0:	1085883a 	add	r2,r2,r2
 400fdf4:	1085883a 	add	r2,r2,r2
 400fdf8:	e0f7c104 	addi	r3,fp,-8444
 400fdfc:	1885883a 	add	r2,r3,r2
 400fe00:	10879d04 	addi	r2,r2,7796
 400fe04:	10800017 	ldw	r2,0(r2)
 400fe08:	80801c1e 	bne	r16,r2,400fe7c <main+0xf8a8>
 400fe0c:	e0b7c217 	ldw	r2,-8440(fp)
 400fe10:	01400504 	movi	r5,20
 400fe14:	1009883a 	mov	r4,r2
 400fe18:	40191000 	call	4019100 <__mulsi3>
 400fe1c:	1007883a 	mov	r3,r2
 400fe20:	e0b7c117 	ldw	r2,-8444(fp)
 400fe24:	1885883a 	add	r2,r3,r2
 400fe28:	1085883a 	add	r2,r2,r2
 400fe2c:	1085883a 	add	r2,r2,r2
 400fe30:	e0f7c104 	addi	r3,fp,-8444
 400fe34:	1885883a 	add	r2,r3,r2
 400fe38:	10879d04 	addi	r2,r2,7796
 400fe3c:	14000017 	ldw	r16,0(r2)
 400fe40:	e0b7c217 	ldw	r2,-8440(fp)
 400fe44:	10800044 	addi	r2,r2,1
 400fe48:	01400504 	movi	r5,20
 400fe4c:	1009883a 	mov	r4,r2
 400fe50:	40191000 	call	4019100 <__mulsi3>
 400fe54:	1007883a 	mov	r3,r2
 400fe58:	e0b7c117 	ldw	r2,-8444(fp)
 400fe5c:	1885883a 	add	r2,r3,r2
 400fe60:	1085883a 	add	r2,r2,r2
 400fe64:	1085883a 	add	r2,r2,r2
 400fe68:	e0f7c104 	addi	r3,fp,-8444
 400fe6c:	1885883a 	add	r2,r3,r2
 400fe70:	10879d04 	addi	r2,r2,7796
 400fe74:	10800017 	ldw	r2,0(r2)
 400fe78:	80801f26 	beq	r16,r2,400fef8 <main+0xf924>
 400fe7c:	e0b7c217 	ldw	r2,-8440(fp)
 400fe80:	01400504 	movi	r5,20
 400fe84:	1009883a 	mov	r4,r2
 400fe88:	40191000 	call	4019100 <__mulsi3>
 400fe8c:	1007883a 	mov	r3,r2
 400fe90:	e0b7c117 	ldw	r2,-8444(fp)
 400fe94:	1885883a 	add	r2,r3,r2
 400fe98:	1085883a 	add	r2,r2,r2
 400fe9c:	1085883a 	add	r2,r2,r2
 400fea0:	e0f7c104 	addi	r3,fp,-8444
 400fea4:	1885883a 	add	r2,r3,r2
 400fea8:	10879d04 	addi	r2,r2,7796
 400feac:	10800017 	ldw	r2,0(r2)
 400feb0:	10800198 	cmpnei	r2,r2,6
 400feb4:	1000321e 	bne	r2,zero,400ff80 <main+0xf9ac>
 400feb8:	e0b7c217 	ldw	r2,-8440(fp)
 400febc:	10800044 	addi	r2,r2,1
 400fec0:	01400504 	movi	r5,20
 400fec4:	1009883a 	mov	r4,r2
 400fec8:	40191000 	call	4019100 <__mulsi3>
 400fecc:	1007883a 	mov	r3,r2
 400fed0:	e0b7c117 	ldw	r2,-8444(fp)
 400fed4:	1885883a 	add	r2,r3,r2
 400fed8:	1085883a 	add	r2,r2,r2
 400fedc:	1085883a 	add	r2,r2,r2
 400fee0:	e0f7c104 	addi	r3,fp,-8444
 400fee4:	1885883a 	add	r2,r3,r2
 400fee8:	10879d04 	addi	r2,r2,7796
 400feec:	10800017 	ldw	r2,0(r2)
 400fef0:	10bffc18 	cmpnei	r2,r2,-16
 400fef4:	1000221e 	bne	r2,zero,400ff80 <main+0xf9ac>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 400fef8:	e0b7c217 	ldw	r2,-8440(fp)
 400fefc:	10c00084 	addi	r3,r2,2
 400ff00:	e0b95e04 	addi	r2,fp,-6792
 400ff04:	180f883a 	mov	r7,r3
 400ff08:	e1b7c117 	ldw	r6,-8444(fp)
 400ff0c:	01403fc4 	movi	r5,255
 400ff10:	1009883a 	mov	r4,r2
 400ff14:	40003c80 	call	40003c8 <draw>
					draw(six, COLOR08_BLACK, x,y+2 );
 400ff18:	e0b7c217 	ldw	r2,-8440(fp)
 400ff1c:	10800084 	addi	r2,r2,2
 400ff20:	100f883a 	mov	r7,r2
 400ff24:	e1b7c117 	ldw	r6,-8444(fp)
 400ff28:	000b883a 	mov	r5,zero
 400ff2c:	010100f4 	movhi	r4,1027
 400ff30:	213a2a04 	addi	r4,r4,-5976
 400ff34:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-16;
 400ff38:	e0b7c217 	ldw	r2,-8440(fp)
 400ff3c:	01400504 	movi	r5,20
 400ff40:	1009883a 	mov	r4,r2
 400ff44:	40191000 	call	4019100 <__mulsi3>
 400ff48:	1007883a 	mov	r3,r2
 400ff4c:	e0b7c117 	ldw	r2,-8444(fp)
 400ff50:	1885883a 	add	r2,r3,r2
 400ff54:	1085883a 	add	r2,r2,r2
 400ff58:	1085883a 	add	r2,r2,r2
 400ff5c:	e0f7c104 	addi	r3,fp,-8444
 400ff60:	1885883a 	add	r2,r3,r2
 400ff64:	10879d04 	addi	r2,r2,7796
 400ff68:	00fffc04 	movi	r3,-16
 400ff6c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 400ff70:	00c00044 	movi	r3,1
 400ff74:	008200b4 	movhi	r2,2050
 400ff78:	10841804 	addi	r2,r2,4192
 400ff7c:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y-1][x] && gameboard [y][x]== gameboard [y-2][x]) || (gameboard [y][x]==6 && gameboard [y-1][x]==-16))//tmx
 400ff80:	e0b7c217 	ldw	r2,-8440(fp)
 400ff84:	01400504 	movi	r5,20
 400ff88:	1009883a 	mov	r4,r2
 400ff8c:	40191000 	call	4019100 <__mulsi3>
 400ff90:	1007883a 	mov	r3,r2
 400ff94:	e0b7c117 	ldw	r2,-8444(fp)
 400ff98:	1885883a 	add	r2,r3,r2
 400ff9c:	1085883a 	add	r2,r2,r2
 400ffa0:	1085883a 	add	r2,r2,r2
 400ffa4:	e0f7c104 	addi	r3,fp,-8444
 400ffa8:	1885883a 	add	r2,r3,r2
 400ffac:	10879d04 	addi	r2,r2,7796
 400ffb0:	14000017 	ldw	r16,0(r2)
 400ffb4:	e0b7c217 	ldw	r2,-8440(fp)
 400ffb8:	10bfffc4 	addi	r2,r2,-1
 400ffbc:	01400504 	movi	r5,20
 400ffc0:	1009883a 	mov	r4,r2
 400ffc4:	40191000 	call	4019100 <__mulsi3>
 400ffc8:	1007883a 	mov	r3,r2
 400ffcc:	e0b7c117 	ldw	r2,-8444(fp)
 400ffd0:	1885883a 	add	r2,r3,r2
 400ffd4:	1085883a 	add	r2,r2,r2
 400ffd8:	1085883a 	add	r2,r2,r2
 400ffdc:	e0f7c104 	addi	r3,fp,-8444
 400ffe0:	1885883a 	add	r2,r3,r2
 400ffe4:	10879d04 	addi	r2,r2,7796
 400ffe8:	10800017 	ldw	r2,0(r2)
 400ffec:	80801c1e 	bne	r16,r2,4010060 <main+0xfa8c>
 400fff0:	e0b7c217 	ldw	r2,-8440(fp)
 400fff4:	01400504 	movi	r5,20
 400fff8:	1009883a 	mov	r4,r2
 400fffc:	40191000 	call	4019100 <__mulsi3>
 4010000:	1007883a 	mov	r3,r2
 4010004:	e0b7c117 	ldw	r2,-8444(fp)
 4010008:	1885883a 	add	r2,r3,r2
 401000c:	1085883a 	add	r2,r2,r2
 4010010:	1085883a 	add	r2,r2,r2
 4010014:	e0f7c104 	addi	r3,fp,-8444
 4010018:	1885883a 	add	r2,r3,r2
 401001c:	10879d04 	addi	r2,r2,7796
 4010020:	14000017 	ldw	r16,0(r2)
 4010024:	e0b7c217 	ldw	r2,-8440(fp)
 4010028:	10bfff84 	addi	r2,r2,-2
 401002c:	01400504 	movi	r5,20
 4010030:	1009883a 	mov	r4,r2
 4010034:	40191000 	call	4019100 <__mulsi3>
 4010038:	1007883a 	mov	r3,r2
 401003c:	e0b7c117 	ldw	r2,-8444(fp)
 4010040:	1885883a 	add	r2,r3,r2
 4010044:	1085883a 	add	r2,r2,r2
 4010048:	1085883a 	add	r2,r2,r2
 401004c:	e0f7c104 	addi	r3,fp,-8444
 4010050:	1885883a 	add	r2,r3,r2
 4010054:	10879d04 	addi	r2,r2,7796
 4010058:	10800017 	ldw	r2,0(r2)
 401005c:	80801f26 	beq	r16,r2,40100dc <main+0xfb08>
 4010060:	e0b7c217 	ldw	r2,-8440(fp)
 4010064:	01400504 	movi	r5,20
 4010068:	1009883a 	mov	r4,r2
 401006c:	40191000 	call	4019100 <__mulsi3>
 4010070:	1007883a 	mov	r3,r2
 4010074:	e0b7c117 	ldw	r2,-8444(fp)
 4010078:	1885883a 	add	r2,r3,r2
 401007c:	1085883a 	add	r2,r2,r2
 4010080:	1085883a 	add	r2,r2,r2
 4010084:	e0f7c104 	addi	r3,fp,-8444
 4010088:	1885883a 	add	r2,r3,r2
 401008c:	10879d04 	addi	r2,r2,7796
 4010090:	10800017 	ldw	r2,0(r2)
 4010094:	10800198 	cmpnei	r2,r2,6
 4010098:	1000321e 	bne	r2,zero,4010164 <main+0xfb90>
 401009c:	e0b7c217 	ldw	r2,-8440(fp)
 40100a0:	10bfffc4 	addi	r2,r2,-1
 40100a4:	01400504 	movi	r5,20
 40100a8:	1009883a 	mov	r4,r2
 40100ac:	40191000 	call	4019100 <__mulsi3>
 40100b0:	1007883a 	mov	r3,r2
 40100b4:	e0b7c117 	ldw	r2,-8444(fp)
 40100b8:	1885883a 	add	r2,r3,r2
 40100bc:	1085883a 	add	r2,r2,r2
 40100c0:	1085883a 	add	r2,r2,r2
 40100c4:	e0f7c104 	addi	r3,fp,-8444
 40100c8:	1885883a 	add	r2,r3,r2
 40100cc:	10879d04 	addi	r2,r2,7796
 40100d0:	10800017 	ldw	r2,0(r2)
 40100d4:	10bffc18 	cmpnei	r2,r2,-16
 40100d8:	1000221e 	bne	r2,zero,4010164 <main+0xfb90>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 40100dc:	e0b7c217 	ldw	r2,-8440(fp)
 40100e0:	10c00084 	addi	r3,r2,2
 40100e4:	e0b95e04 	addi	r2,fp,-6792
 40100e8:	180f883a 	mov	r7,r3
 40100ec:	e1b7c117 	ldw	r6,-8444(fp)
 40100f0:	01403fc4 	movi	r5,255
 40100f4:	1009883a 	mov	r4,r2
 40100f8:	40003c80 	call	40003c8 <draw>
					draw(six, COLOR08_BLACK, x,y+2 );
 40100fc:	e0b7c217 	ldw	r2,-8440(fp)
 4010100:	10800084 	addi	r2,r2,2
 4010104:	100f883a 	mov	r7,r2
 4010108:	e1b7c117 	ldw	r6,-8444(fp)
 401010c:	000b883a 	mov	r5,zero
 4010110:	010100f4 	movhi	r4,1027
 4010114:	213a2a04 	addi	r4,r4,-5976
 4010118:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-16;
 401011c:	e0b7c217 	ldw	r2,-8440(fp)
 4010120:	01400504 	movi	r5,20
 4010124:	1009883a 	mov	r4,r2
 4010128:	40191000 	call	4019100 <__mulsi3>
 401012c:	1007883a 	mov	r3,r2
 4010130:	e0b7c117 	ldw	r2,-8444(fp)
 4010134:	1885883a 	add	r2,r3,r2
 4010138:	1085883a 	add	r2,r2,r2
 401013c:	1085883a 	add	r2,r2,r2
 4010140:	e0f7c104 	addi	r3,fp,-8444
 4010144:	1885883a 	add	r2,r3,r2
 4010148:	10879d04 	addi	r2,r2,7796
 401014c:	00fffc04 	movi	r3,-16
 4010150:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4010154:	00c00044 	movi	r3,1
 4010158:	008200b4 	movhi	r2,2050
 401015c:	10841804 	addi	r2,r2,4192
 4010160:	10c00035 	stwio	r3,0(r2)
				}

//////////////////////////////////////////////////////////////////

				//diagonal (\)6
				if ((gameboard [y][x]==gameboard [y+1][x+1] && gameboard[y+1][x+1]== gameboard[y+2][x+2]))//(\x\)
 4010164:	e0b7c217 	ldw	r2,-8440(fp)
 4010168:	01400504 	movi	r5,20
 401016c:	1009883a 	mov	r4,r2
 4010170:	40191000 	call	4019100 <__mulsi3>
 4010174:	1007883a 	mov	r3,r2
 4010178:	e0b7c117 	ldw	r2,-8444(fp)
 401017c:	1885883a 	add	r2,r3,r2
 4010180:	1085883a 	add	r2,r2,r2
 4010184:	1085883a 	add	r2,r2,r2
 4010188:	e0f7c104 	addi	r3,fp,-8444
 401018c:	1885883a 	add	r2,r3,r2
 4010190:	10879d04 	addi	r2,r2,7796
 4010194:	14000017 	ldw	r16,0(r2)
 4010198:	e0b7c217 	ldw	r2,-8440(fp)
 401019c:	10c00044 	addi	r3,r2,1
 40101a0:	e0b7c117 	ldw	r2,-8444(fp)
 40101a4:	14400044 	addi	r17,r2,1
 40101a8:	01400504 	movi	r5,20
 40101ac:	1809883a 	mov	r4,r3
 40101b0:	40191000 	call	4019100 <__mulsi3>
 40101b4:	1445883a 	add	r2,r2,r17
 40101b8:	1085883a 	add	r2,r2,r2
 40101bc:	1085883a 	add	r2,r2,r2
 40101c0:	e0f7c104 	addi	r3,fp,-8444
 40101c4:	1885883a 	add	r2,r3,r2
 40101c8:	10879d04 	addi	r2,r2,7796
 40101cc:	10800017 	ldw	r2,0(r2)
 40101d0:	80803f1e 	bne	r16,r2,40102d0 <main+0xfcfc>
 40101d4:	e0b7c217 	ldw	r2,-8440(fp)
 40101d8:	10c00044 	addi	r3,r2,1
 40101dc:	e0b7c117 	ldw	r2,-8444(fp)
 40101e0:	14000044 	addi	r16,r2,1
 40101e4:	01400504 	movi	r5,20
 40101e8:	1809883a 	mov	r4,r3
 40101ec:	40191000 	call	4019100 <__mulsi3>
 40101f0:	1405883a 	add	r2,r2,r16
 40101f4:	1085883a 	add	r2,r2,r2
 40101f8:	1085883a 	add	r2,r2,r2
 40101fc:	e0f7c104 	addi	r3,fp,-8444
 4010200:	1885883a 	add	r2,r3,r2
 4010204:	10879d04 	addi	r2,r2,7796
 4010208:	14000017 	ldw	r16,0(r2)
 401020c:	e0b7c217 	ldw	r2,-8440(fp)
 4010210:	10c00084 	addi	r3,r2,2
 4010214:	e0b7c117 	ldw	r2,-8444(fp)
 4010218:	14400084 	addi	r17,r2,2
 401021c:	01400504 	movi	r5,20
 4010220:	1809883a 	mov	r4,r3
 4010224:	40191000 	call	4019100 <__mulsi3>
 4010228:	1445883a 	add	r2,r2,r17
 401022c:	1085883a 	add	r2,r2,r2
 4010230:	1085883a 	add	r2,r2,r2
 4010234:	e0f7c104 	addi	r3,fp,-8444
 4010238:	1885883a 	add	r2,r3,r2
 401023c:	10879d04 	addi	r2,r2,7796
 4010240:	10800017 	ldw	r2,0(r2)
 4010244:	8080221e 	bne	r16,r2,40102d0 <main+0xfcfc>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4010248:	e0b7c217 	ldw	r2,-8440(fp)
 401024c:	10c00084 	addi	r3,r2,2
 4010250:	e0b95e04 	addi	r2,fp,-6792
 4010254:	180f883a 	mov	r7,r3
 4010258:	e1b7c117 	ldw	r6,-8444(fp)
 401025c:	01403fc4 	movi	r5,255
 4010260:	1009883a 	mov	r4,r2
 4010264:	40003c80 	call	40003c8 <draw>
					draw(six, COLOR08_BLACK, x,y+2 );
 4010268:	e0b7c217 	ldw	r2,-8440(fp)
 401026c:	10800084 	addi	r2,r2,2
 4010270:	100f883a 	mov	r7,r2
 4010274:	e1b7c117 	ldw	r6,-8444(fp)
 4010278:	000b883a 	mov	r5,zero
 401027c:	010100f4 	movhi	r4,1027
 4010280:	213a2a04 	addi	r4,r4,-5976
 4010284:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-16;
 4010288:	e0b7c217 	ldw	r2,-8440(fp)
 401028c:	01400504 	movi	r5,20
 4010290:	1009883a 	mov	r4,r2
 4010294:	40191000 	call	4019100 <__mulsi3>
 4010298:	1007883a 	mov	r3,r2
 401029c:	e0b7c117 	ldw	r2,-8444(fp)
 40102a0:	1885883a 	add	r2,r3,r2
 40102a4:	1085883a 	add	r2,r2,r2
 40102a8:	1085883a 	add	r2,r2,r2
 40102ac:	e0f7c104 	addi	r3,fp,-8444
 40102b0:	1885883a 	add	r2,r3,r2
 40102b4:	10879d04 	addi	r2,r2,7796
 40102b8:	00fffc04 	movi	r3,-16
 40102bc:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40102c0:	00c00044 	movi	r3,1
 40102c4:	008200b4 	movhi	r2,2050
 40102c8:	10841804 	addi	r2,r2,4192
 40102cc:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y+1][x+1] && gameboard[y][x]== gameboard[y+2][x+2]) )//(x\\)
 40102d0:	e0b7c217 	ldw	r2,-8440(fp)
 40102d4:	01400504 	movi	r5,20
 40102d8:	1009883a 	mov	r4,r2
 40102dc:	40191000 	call	4019100 <__mulsi3>
 40102e0:	1007883a 	mov	r3,r2
 40102e4:	e0b7c117 	ldw	r2,-8444(fp)
 40102e8:	1885883a 	add	r2,r3,r2
 40102ec:	1085883a 	add	r2,r2,r2
 40102f0:	1085883a 	add	r2,r2,r2
 40102f4:	e0f7c104 	addi	r3,fp,-8444
 40102f8:	1885883a 	add	r2,r3,r2
 40102fc:	10879d04 	addi	r2,r2,7796
 4010300:	14000017 	ldw	r16,0(r2)
 4010304:	e0b7c217 	ldw	r2,-8440(fp)
 4010308:	10c00044 	addi	r3,r2,1
 401030c:	e0b7c117 	ldw	r2,-8444(fp)
 4010310:	14400044 	addi	r17,r2,1
 4010314:	01400504 	movi	r5,20
 4010318:	1809883a 	mov	r4,r3
 401031c:	40191000 	call	4019100 <__mulsi3>
 4010320:	1445883a 	add	r2,r2,r17
 4010324:	1085883a 	add	r2,r2,r2
 4010328:	1085883a 	add	r2,r2,r2
 401032c:	e0f7c104 	addi	r3,fp,-8444
 4010330:	1885883a 	add	r2,r3,r2
 4010334:	10879d04 	addi	r2,r2,7796
 4010338:	10800017 	ldw	r2,0(r2)
 401033c:	80803e1e 	bne	r16,r2,4010438 <main+0xfe64>
 4010340:	e0b7c217 	ldw	r2,-8440(fp)
 4010344:	01400504 	movi	r5,20
 4010348:	1009883a 	mov	r4,r2
 401034c:	40191000 	call	4019100 <__mulsi3>
 4010350:	1007883a 	mov	r3,r2
 4010354:	e0b7c117 	ldw	r2,-8444(fp)
 4010358:	1885883a 	add	r2,r3,r2
 401035c:	1085883a 	add	r2,r2,r2
 4010360:	1085883a 	add	r2,r2,r2
 4010364:	e0f7c104 	addi	r3,fp,-8444
 4010368:	1885883a 	add	r2,r3,r2
 401036c:	10879d04 	addi	r2,r2,7796
 4010370:	14000017 	ldw	r16,0(r2)
 4010374:	e0b7c217 	ldw	r2,-8440(fp)
 4010378:	10c00084 	addi	r3,r2,2
 401037c:	e0b7c117 	ldw	r2,-8444(fp)
 4010380:	14400084 	addi	r17,r2,2
 4010384:	01400504 	movi	r5,20
 4010388:	1809883a 	mov	r4,r3
 401038c:	40191000 	call	4019100 <__mulsi3>
 4010390:	1445883a 	add	r2,r2,r17
 4010394:	1085883a 	add	r2,r2,r2
 4010398:	1085883a 	add	r2,r2,r2
 401039c:	e0f7c104 	addi	r3,fp,-8444
 40103a0:	1885883a 	add	r2,r3,r2
 40103a4:	10879d04 	addi	r2,r2,7796
 40103a8:	10800017 	ldw	r2,0(r2)
 40103ac:	8080221e 	bne	r16,r2,4010438 <main+0xfe64>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 40103b0:	e0b7c217 	ldw	r2,-8440(fp)
 40103b4:	10c00084 	addi	r3,r2,2
 40103b8:	e0b95e04 	addi	r2,fp,-6792
 40103bc:	180f883a 	mov	r7,r3
 40103c0:	e1b7c117 	ldw	r6,-8444(fp)
 40103c4:	01403fc4 	movi	r5,255
 40103c8:	1009883a 	mov	r4,r2
 40103cc:	40003c80 	call	40003c8 <draw>
					draw(six, COLOR08_BLACK, x,y+2 );
 40103d0:	e0b7c217 	ldw	r2,-8440(fp)
 40103d4:	10800084 	addi	r2,r2,2
 40103d8:	100f883a 	mov	r7,r2
 40103dc:	e1b7c117 	ldw	r6,-8444(fp)
 40103e0:	000b883a 	mov	r5,zero
 40103e4:	010100f4 	movhi	r4,1027
 40103e8:	213a2a04 	addi	r4,r4,-5976
 40103ec:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-16;
 40103f0:	e0b7c217 	ldw	r2,-8440(fp)
 40103f4:	01400504 	movi	r5,20
 40103f8:	1009883a 	mov	r4,r2
 40103fc:	40191000 	call	4019100 <__mulsi3>
 4010400:	1007883a 	mov	r3,r2
 4010404:	e0b7c117 	ldw	r2,-8444(fp)
 4010408:	1885883a 	add	r2,r3,r2
 401040c:	1085883a 	add	r2,r2,r2
 4010410:	1085883a 	add	r2,r2,r2
 4010414:	e0f7c104 	addi	r3,fp,-8444
 4010418:	1885883a 	add	r2,r3,r2
 401041c:	10879d04 	addi	r2,r2,7796
 4010420:	00fffc04 	movi	r3,-16
 4010424:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4010428:	00c00044 	movi	r3,1
 401042c:	008200b4 	movhi	r2,2050
 4010430:	10841804 	addi	r2,r2,4192
 4010434:	10c00035 	stwio	r3,0(r2)
				}

				if ((gameboard [y][x]==gameboard [y-1][x-1] && gameboard[y][x]== gameboard[y-2][x-2]) )//(\\x)
 4010438:	e0b7c217 	ldw	r2,-8440(fp)
 401043c:	01400504 	movi	r5,20
 4010440:	1009883a 	mov	r4,r2
 4010444:	40191000 	call	4019100 <__mulsi3>
 4010448:	1007883a 	mov	r3,r2
 401044c:	e0b7c117 	ldw	r2,-8444(fp)
 4010450:	1885883a 	add	r2,r3,r2
 4010454:	1085883a 	add	r2,r2,r2
 4010458:	1085883a 	add	r2,r2,r2
 401045c:	e0f7c104 	addi	r3,fp,-8444
 4010460:	1885883a 	add	r2,r3,r2
 4010464:	10879d04 	addi	r2,r2,7796
 4010468:	14000017 	ldw	r16,0(r2)
 401046c:	e0b7c217 	ldw	r2,-8440(fp)
 4010470:	10ffffc4 	addi	r3,r2,-1
 4010474:	e0b7c117 	ldw	r2,-8444(fp)
 4010478:	147fffc4 	addi	r17,r2,-1
 401047c:	01400504 	movi	r5,20
 4010480:	1809883a 	mov	r4,r3
 4010484:	40191000 	call	4019100 <__mulsi3>
 4010488:	1445883a 	add	r2,r2,r17
 401048c:	1085883a 	add	r2,r2,r2
 4010490:	1085883a 	add	r2,r2,r2
 4010494:	e0f7c104 	addi	r3,fp,-8444
 4010498:	1885883a 	add	r2,r3,r2
 401049c:	10879d04 	addi	r2,r2,7796
 40104a0:	10800017 	ldw	r2,0(r2)
 40104a4:	80803e1e 	bne	r16,r2,40105a0 <main+0xffcc>
 40104a8:	e0b7c217 	ldw	r2,-8440(fp)
 40104ac:	01400504 	movi	r5,20
 40104b0:	1009883a 	mov	r4,r2
 40104b4:	40191000 	call	4019100 <__mulsi3>
 40104b8:	1007883a 	mov	r3,r2
 40104bc:	e0b7c117 	ldw	r2,-8444(fp)
 40104c0:	1885883a 	add	r2,r3,r2
 40104c4:	1085883a 	add	r2,r2,r2
 40104c8:	1085883a 	add	r2,r2,r2
 40104cc:	e0f7c104 	addi	r3,fp,-8444
 40104d0:	1885883a 	add	r2,r3,r2
 40104d4:	10879d04 	addi	r2,r2,7796
 40104d8:	14000017 	ldw	r16,0(r2)
 40104dc:	e0b7c217 	ldw	r2,-8440(fp)
 40104e0:	10ffff84 	addi	r3,r2,-2
 40104e4:	e0b7c117 	ldw	r2,-8444(fp)
 40104e8:	147fff84 	addi	r17,r2,-2
 40104ec:	01400504 	movi	r5,20
 40104f0:	1809883a 	mov	r4,r3
 40104f4:	40191000 	call	4019100 <__mulsi3>
 40104f8:	1445883a 	add	r2,r2,r17
 40104fc:	1085883a 	add	r2,r2,r2
 4010500:	1085883a 	add	r2,r2,r2
 4010504:	e0f7c104 	addi	r3,fp,-8444
 4010508:	1885883a 	add	r2,r3,r2
 401050c:	10879d04 	addi	r2,r2,7796
 4010510:	10800017 	ldw	r2,0(r2)
 4010514:	8080221e 	bne	r16,r2,40105a0 <main+0xffcc>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4010518:	e0b7c217 	ldw	r2,-8440(fp)
 401051c:	10c00084 	addi	r3,r2,2
 4010520:	e0b95e04 	addi	r2,fp,-6792
 4010524:	180f883a 	mov	r7,r3
 4010528:	e1b7c117 	ldw	r6,-8444(fp)
 401052c:	01403fc4 	movi	r5,255
 4010530:	1009883a 	mov	r4,r2
 4010534:	40003c80 	call	40003c8 <draw>
					draw(six, COLOR08_BLACK, x,y+2 );
 4010538:	e0b7c217 	ldw	r2,-8440(fp)
 401053c:	10800084 	addi	r2,r2,2
 4010540:	100f883a 	mov	r7,r2
 4010544:	e1b7c117 	ldw	r6,-8444(fp)
 4010548:	000b883a 	mov	r5,zero
 401054c:	010100f4 	movhi	r4,1027
 4010550:	213a2a04 	addi	r4,r4,-5976
 4010554:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-16;
 4010558:	e0b7c217 	ldw	r2,-8440(fp)
 401055c:	01400504 	movi	r5,20
 4010560:	1009883a 	mov	r4,r2
 4010564:	40191000 	call	4019100 <__mulsi3>
 4010568:	1007883a 	mov	r3,r2
 401056c:	e0b7c117 	ldw	r2,-8444(fp)
 4010570:	1885883a 	add	r2,r3,r2
 4010574:	1085883a 	add	r2,r2,r2
 4010578:	1085883a 	add	r2,r2,r2
 401057c:	e0f7c104 	addi	r3,fp,-8444
 4010580:	1885883a 	add	r2,r3,r2
 4010584:	10879d04 	addi	r2,r2,7796
 4010588:	00fffc04 	movi	r3,-16
 401058c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4010590:	00c00044 	movi	r3,1
 4010594:	008200b4 	movhi	r2,2050
 4010598:	10841804 	addi	r2,r2,4192
 401059c:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard[y][x]==6 && gameboard[y+1][x+1]==-16) || (gameboard[y][x]==6 && gameboard[y-1][x-1]==-16))//(\\x)
 40105a0:	e0b7c217 	ldw	r2,-8440(fp)
 40105a4:	01400504 	movi	r5,20
 40105a8:	1009883a 	mov	r4,r2
 40105ac:	40191000 	call	4019100 <__mulsi3>
 40105b0:	1007883a 	mov	r3,r2
 40105b4:	e0b7c117 	ldw	r2,-8444(fp)
 40105b8:	1885883a 	add	r2,r3,r2
 40105bc:	1085883a 	add	r2,r2,r2
 40105c0:	1085883a 	add	r2,r2,r2
 40105c4:	e0f7c104 	addi	r3,fp,-8444
 40105c8:	1885883a 	add	r2,r3,r2
 40105cc:	10879d04 	addi	r2,r2,7796
 40105d0:	10800017 	ldw	r2,0(r2)
 40105d4:	10800198 	cmpnei	r2,r2,6
 40105d8:	1000101e 	bne	r2,zero,401061c <main+0x10048>
 40105dc:	e0b7c217 	ldw	r2,-8440(fp)
 40105e0:	10c00044 	addi	r3,r2,1
 40105e4:	e0b7c117 	ldw	r2,-8444(fp)
 40105e8:	14000044 	addi	r16,r2,1
 40105ec:	01400504 	movi	r5,20
 40105f0:	1809883a 	mov	r4,r3
 40105f4:	40191000 	call	4019100 <__mulsi3>
 40105f8:	1405883a 	add	r2,r2,r16
 40105fc:	1085883a 	add	r2,r2,r2
 4010600:	1085883a 	add	r2,r2,r2
 4010604:	e0f7c104 	addi	r3,fp,-8444
 4010608:	1885883a 	add	r2,r3,r2
 401060c:	10879d04 	addi	r2,r2,7796
 4010610:	10800017 	ldw	r2,0(r2)
 4010614:	10bffc20 	cmpeqi	r2,r2,-16
 4010618:	10001f1e 	bne	r2,zero,4010698 <main+0x100c4>
 401061c:	e0b7c217 	ldw	r2,-8440(fp)
 4010620:	01400504 	movi	r5,20
 4010624:	1009883a 	mov	r4,r2
 4010628:	40191000 	call	4019100 <__mulsi3>
 401062c:	1007883a 	mov	r3,r2
 4010630:	e0b7c117 	ldw	r2,-8444(fp)
 4010634:	1885883a 	add	r2,r3,r2
 4010638:	1085883a 	add	r2,r2,r2
 401063c:	1085883a 	add	r2,r2,r2
 4010640:	e0f7c104 	addi	r3,fp,-8444
 4010644:	1885883a 	add	r2,r3,r2
 4010648:	10879d04 	addi	r2,r2,7796
 401064c:	10800017 	ldw	r2,0(r2)
 4010650:	10800198 	cmpnei	r2,r2,6
 4010654:	1000321e 	bne	r2,zero,4010720 <main+0x1014c>
 4010658:	e0b7c217 	ldw	r2,-8440(fp)
 401065c:	10ffffc4 	addi	r3,r2,-1
 4010660:	e0b7c117 	ldw	r2,-8444(fp)
 4010664:	143fffc4 	addi	r16,r2,-1
 4010668:	01400504 	movi	r5,20
 401066c:	1809883a 	mov	r4,r3
 4010670:	40191000 	call	4019100 <__mulsi3>
 4010674:	1405883a 	add	r2,r2,r16
 4010678:	1085883a 	add	r2,r2,r2
 401067c:	1085883a 	add	r2,r2,r2
 4010680:	e0f7c104 	addi	r3,fp,-8444
 4010684:	1885883a 	add	r2,r3,r2
 4010688:	10879d04 	addi	r2,r2,7796
 401068c:	10800017 	ldw	r2,0(r2)
 4010690:	10bffc18 	cmpnei	r2,r2,-16
 4010694:	1000221e 	bne	r2,zero,4010720 <main+0x1014c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4010698:	e0b7c217 	ldw	r2,-8440(fp)
 401069c:	10c00084 	addi	r3,r2,2
 40106a0:	e0b95e04 	addi	r2,fp,-6792
 40106a4:	180f883a 	mov	r7,r3
 40106a8:	e1b7c117 	ldw	r6,-8444(fp)
 40106ac:	01403fc4 	movi	r5,255
 40106b0:	1009883a 	mov	r4,r2
 40106b4:	40003c80 	call	40003c8 <draw>
					draw(six, COLOR08_BLACK, x,y+2 );
 40106b8:	e0b7c217 	ldw	r2,-8440(fp)
 40106bc:	10800084 	addi	r2,r2,2
 40106c0:	100f883a 	mov	r7,r2
 40106c4:	e1b7c117 	ldw	r6,-8444(fp)
 40106c8:	000b883a 	mov	r5,zero
 40106cc:	010100f4 	movhi	r4,1027
 40106d0:	213a2a04 	addi	r4,r4,-5976
 40106d4:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-16;
 40106d8:	e0b7c217 	ldw	r2,-8440(fp)
 40106dc:	01400504 	movi	r5,20
 40106e0:	1009883a 	mov	r4,r2
 40106e4:	40191000 	call	4019100 <__mulsi3>
 40106e8:	1007883a 	mov	r3,r2
 40106ec:	e0b7c117 	ldw	r2,-8444(fp)
 40106f0:	1885883a 	add	r2,r3,r2
 40106f4:	1085883a 	add	r2,r2,r2
 40106f8:	1085883a 	add	r2,r2,r2
 40106fc:	e0f7c104 	addi	r3,fp,-8444
 4010700:	1885883a 	add	r2,r3,r2
 4010704:	10879d04 	addi	r2,r2,7796
 4010708:	00fffc04 	movi	r3,-16
 401070c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4010710:	00c00044 	movi	r3,1
 4010714:	008200b4 	movhi	r2,2050
 4010718:	10841804 	addi	r2,r2,4192
 401071c:	10c00035 	stwio	r3,0(r2)
				}

				//////////////////////////////////////////////////////////

				//diagonal (/)6
				if (gameboard [y][x]==gameboard [y+1][x-1] && gameboard[y][x]== gameboard[y-1][x+1])//(/x/)
 4010720:	e0b7c217 	ldw	r2,-8440(fp)
 4010724:	01400504 	movi	r5,20
 4010728:	1009883a 	mov	r4,r2
 401072c:	40191000 	call	4019100 <__mulsi3>
 4010730:	1007883a 	mov	r3,r2
 4010734:	e0b7c117 	ldw	r2,-8444(fp)
 4010738:	1885883a 	add	r2,r3,r2
 401073c:	1085883a 	add	r2,r2,r2
 4010740:	1085883a 	add	r2,r2,r2
 4010744:	e0f7c104 	addi	r3,fp,-8444
 4010748:	1885883a 	add	r2,r3,r2
 401074c:	10879d04 	addi	r2,r2,7796
 4010750:	14000017 	ldw	r16,0(r2)
 4010754:	e0b7c217 	ldw	r2,-8440(fp)
 4010758:	10c00044 	addi	r3,r2,1
 401075c:	e0b7c117 	ldw	r2,-8444(fp)
 4010760:	147fffc4 	addi	r17,r2,-1
 4010764:	01400504 	movi	r5,20
 4010768:	1809883a 	mov	r4,r3
 401076c:	40191000 	call	4019100 <__mulsi3>
 4010770:	1445883a 	add	r2,r2,r17
 4010774:	1085883a 	add	r2,r2,r2
 4010778:	1085883a 	add	r2,r2,r2
 401077c:	e0f7c104 	addi	r3,fp,-8444
 4010780:	1885883a 	add	r2,r3,r2
 4010784:	10879d04 	addi	r2,r2,7796
 4010788:	10800017 	ldw	r2,0(r2)
 401078c:	80803e1e 	bne	r16,r2,4010888 <main+0x102b4>
 4010790:	e0b7c217 	ldw	r2,-8440(fp)
 4010794:	01400504 	movi	r5,20
 4010798:	1009883a 	mov	r4,r2
 401079c:	40191000 	call	4019100 <__mulsi3>
 40107a0:	1007883a 	mov	r3,r2
 40107a4:	e0b7c117 	ldw	r2,-8444(fp)
 40107a8:	1885883a 	add	r2,r3,r2
 40107ac:	1085883a 	add	r2,r2,r2
 40107b0:	1085883a 	add	r2,r2,r2
 40107b4:	e0f7c104 	addi	r3,fp,-8444
 40107b8:	1885883a 	add	r2,r3,r2
 40107bc:	10879d04 	addi	r2,r2,7796
 40107c0:	14000017 	ldw	r16,0(r2)
 40107c4:	e0b7c217 	ldw	r2,-8440(fp)
 40107c8:	10ffffc4 	addi	r3,r2,-1
 40107cc:	e0b7c117 	ldw	r2,-8444(fp)
 40107d0:	14400044 	addi	r17,r2,1
 40107d4:	01400504 	movi	r5,20
 40107d8:	1809883a 	mov	r4,r3
 40107dc:	40191000 	call	4019100 <__mulsi3>
 40107e0:	1445883a 	add	r2,r2,r17
 40107e4:	1085883a 	add	r2,r2,r2
 40107e8:	1085883a 	add	r2,r2,r2
 40107ec:	e0f7c104 	addi	r3,fp,-8444
 40107f0:	1885883a 	add	r2,r3,r2
 40107f4:	10879d04 	addi	r2,r2,7796
 40107f8:	10800017 	ldw	r2,0(r2)
 40107fc:	8080221e 	bne	r16,r2,4010888 <main+0x102b4>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4010800:	e0b7c217 	ldw	r2,-8440(fp)
 4010804:	10c00084 	addi	r3,r2,2
 4010808:	e0b95e04 	addi	r2,fp,-6792
 401080c:	180f883a 	mov	r7,r3
 4010810:	e1b7c117 	ldw	r6,-8444(fp)
 4010814:	01403fc4 	movi	r5,255
 4010818:	1009883a 	mov	r4,r2
 401081c:	40003c80 	call	40003c8 <draw>
					draw(six, COLOR08_BLACK, x,y+2 );
 4010820:	e0b7c217 	ldw	r2,-8440(fp)
 4010824:	10800084 	addi	r2,r2,2
 4010828:	100f883a 	mov	r7,r2
 401082c:	e1b7c117 	ldw	r6,-8444(fp)
 4010830:	000b883a 	mov	r5,zero
 4010834:	010100f4 	movhi	r4,1027
 4010838:	213a2a04 	addi	r4,r4,-5976
 401083c:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-16;
 4010840:	e0b7c217 	ldw	r2,-8440(fp)
 4010844:	01400504 	movi	r5,20
 4010848:	1009883a 	mov	r4,r2
 401084c:	40191000 	call	4019100 <__mulsi3>
 4010850:	1007883a 	mov	r3,r2
 4010854:	e0b7c117 	ldw	r2,-8444(fp)
 4010858:	1885883a 	add	r2,r3,r2
 401085c:	1085883a 	add	r2,r2,r2
 4010860:	1085883a 	add	r2,r2,r2
 4010864:	e0f7c104 	addi	r3,fp,-8444
 4010868:	1885883a 	add	r2,r3,r2
 401086c:	10879d04 	addi	r2,r2,7796
 4010870:	00fffc04 	movi	r3,-16
 4010874:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4010878:	00c00044 	movi	r3,1
 401087c:	008200b4 	movhi	r2,2050
 4010880:	10841804 	addi	r2,r2,4192
 4010884:	10c00035 	stwio	r3,0(r2)

				}
				if (gameboard [y][x]==gameboard [y+1][x-1] && gameboard[y][x]== gameboard[y+2][x-2])//(x//)
 4010888:	e0b7c217 	ldw	r2,-8440(fp)
 401088c:	01400504 	movi	r5,20
 4010890:	1009883a 	mov	r4,r2
 4010894:	40191000 	call	4019100 <__mulsi3>
 4010898:	1007883a 	mov	r3,r2
 401089c:	e0b7c117 	ldw	r2,-8444(fp)
 40108a0:	1885883a 	add	r2,r3,r2
 40108a4:	1085883a 	add	r2,r2,r2
 40108a8:	1085883a 	add	r2,r2,r2
 40108ac:	e0f7c104 	addi	r3,fp,-8444
 40108b0:	1885883a 	add	r2,r3,r2
 40108b4:	10879d04 	addi	r2,r2,7796
 40108b8:	14000017 	ldw	r16,0(r2)
 40108bc:	e0b7c217 	ldw	r2,-8440(fp)
 40108c0:	10c00044 	addi	r3,r2,1
 40108c4:	e0b7c117 	ldw	r2,-8444(fp)
 40108c8:	147fffc4 	addi	r17,r2,-1
 40108cc:	01400504 	movi	r5,20
 40108d0:	1809883a 	mov	r4,r3
 40108d4:	40191000 	call	4019100 <__mulsi3>
 40108d8:	1445883a 	add	r2,r2,r17
 40108dc:	1085883a 	add	r2,r2,r2
 40108e0:	1085883a 	add	r2,r2,r2
 40108e4:	e0f7c104 	addi	r3,fp,-8444
 40108e8:	1885883a 	add	r2,r3,r2
 40108ec:	10879d04 	addi	r2,r2,7796
 40108f0:	10800017 	ldw	r2,0(r2)
 40108f4:	80803e1e 	bne	r16,r2,40109f0 <main+0x1041c>
 40108f8:	e0b7c217 	ldw	r2,-8440(fp)
 40108fc:	01400504 	movi	r5,20
 4010900:	1009883a 	mov	r4,r2
 4010904:	40191000 	call	4019100 <__mulsi3>
 4010908:	1007883a 	mov	r3,r2
 401090c:	e0b7c117 	ldw	r2,-8444(fp)
 4010910:	1885883a 	add	r2,r3,r2
 4010914:	1085883a 	add	r2,r2,r2
 4010918:	1085883a 	add	r2,r2,r2
 401091c:	e0f7c104 	addi	r3,fp,-8444
 4010920:	1885883a 	add	r2,r3,r2
 4010924:	10879d04 	addi	r2,r2,7796
 4010928:	14000017 	ldw	r16,0(r2)
 401092c:	e0b7c217 	ldw	r2,-8440(fp)
 4010930:	10c00084 	addi	r3,r2,2
 4010934:	e0b7c117 	ldw	r2,-8444(fp)
 4010938:	147fff84 	addi	r17,r2,-2
 401093c:	01400504 	movi	r5,20
 4010940:	1809883a 	mov	r4,r3
 4010944:	40191000 	call	4019100 <__mulsi3>
 4010948:	1445883a 	add	r2,r2,r17
 401094c:	1085883a 	add	r2,r2,r2
 4010950:	1085883a 	add	r2,r2,r2
 4010954:	e0f7c104 	addi	r3,fp,-8444
 4010958:	1885883a 	add	r2,r3,r2
 401095c:	10879d04 	addi	r2,r2,7796
 4010960:	10800017 	ldw	r2,0(r2)
 4010964:	8080221e 	bne	r16,r2,40109f0 <main+0x1041c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4010968:	e0b7c217 	ldw	r2,-8440(fp)
 401096c:	10c00084 	addi	r3,r2,2
 4010970:	e0b95e04 	addi	r2,fp,-6792
 4010974:	180f883a 	mov	r7,r3
 4010978:	e1b7c117 	ldw	r6,-8444(fp)
 401097c:	01403fc4 	movi	r5,255
 4010980:	1009883a 	mov	r4,r2
 4010984:	40003c80 	call	40003c8 <draw>
					draw(six, COLOR08_BLACK, x,y+2 );
 4010988:	e0b7c217 	ldw	r2,-8440(fp)
 401098c:	10800084 	addi	r2,r2,2
 4010990:	100f883a 	mov	r7,r2
 4010994:	e1b7c117 	ldw	r6,-8444(fp)
 4010998:	000b883a 	mov	r5,zero
 401099c:	010100f4 	movhi	r4,1027
 40109a0:	213a2a04 	addi	r4,r4,-5976
 40109a4:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-16;
 40109a8:	e0b7c217 	ldw	r2,-8440(fp)
 40109ac:	01400504 	movi	r5,20
 40109b0:	1009883a 	mov	r4,r2
 40109b4:	40191000 	call	4019100 <__mulsi3>
 40109b8:	1007883a 	mov	r3,r2
 40109bc:	e0b7c117 	ldw	r2,-8444(fp)
 40109c0:	1885883a 	add	r2,r3,r2
 40109c4:	1085883a 	add	r2,r2,r2
 40109c8:	1085883a 	add	r2,r2,r2
 40109cc:	e0f7c104 	addi	r3,fp,-8444
 40109d0:	1885883a 	add	r2,r3,r2
 40109d4:	10879d04 	addi	r2,r2,7796
 40109d8:	00fffc04 	movi	r3,-16
 40109dc:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40109e0:	00c00044 	movi	r3,1
 40109e4:	008200b4 	movhi	r2,2050
 40109e8:	10841804 	addi	r2,r2,4192
 40109ec:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard [y][x]==6 && gameboard [y+1][x-1]==-16) || (gameboard [y][x]==6 && gameboard [y-1][x+1]==-16))//(x//)
 40109f0:	e0b7c217 	ldw	r2,-8440(fp)
 40109f4:	01400504 	movi	r5,20
 40109f8:	1009883a 	mov	r4,r2
 40109fc:	40191000 	call	4019100 <__mulsi3>
 4010a00:	1007883a 	mov	r3,r2
 4010a04:	e0b7c117 	ldw	r2,-8444(fp)
 4010a08:	1885883a 	add	r2,r3,r2
 4010a0c:	1085883a 	add	r2,r2,r2
 4010a10:	1085883a 	add	r2,r2,r2
 4010a14:	e0f7c104 	addi	r3,fp,-8444
 4010a18:	1885883a 	add	r2,r3,r2
 4010a1c:	10879d04 	addi	r2,r2,7796
 4010a20:	10800017 	ldw	r2,0(r2)
 4010a24:	10800198 	cmpnei	r2,r2,6
 4010a28:	1000101e 	bne	r2,zero,4010a6c <main+0x10498>
 4010a2c:	e0b7c217 	ldw	r2,-8440(fp)
 4010a30:	10c00044 	addi	r3,r2,1
 4010a34:	e0b7c117 	ldw	r2,-8444(fp)
 4010a38:	143fffc4 	addi	r16,r2,-1
 4010a3c:	01400504 	movi	r5,20
 4010a40:	1809883a 	mov	r4,r3
 4010a44:	40191000 	call	4019100 <__mulsi3>
 4010a48:	1405883a 	add	r2,r2,r16
 4010a4c:	1085883a 	add	r2,r2,r2
 4010a50:	1085883a 	add	r2,r2,r2
 4010a54:	e0f7c104 	addi	r3,fp,-8444
 4010a58:	1885883a 	add	r2,r3,r2
 4010a5c:	10879d04 	addi	r2,r2,7796
 4010a60:	10800017 	ldw	r2,0(r2)
 4010a64:	10bffc20 	cmpeqi	r2,r2,-16
 4010a68:	10001f1e 	bne	r2,zero,4010ae8 <main+0x10514>
 4010a6c:	e0b7c217 	ldw	r2,-8440(fp)
 4010a70:	01400504 	movi	r5,20
 4010a74:	1009883a 	mov	r4,r2
 4010a78:	40191000 	call	4019100 <__mulsi3>
 4010a7c:	1007883a 	mov	r3,r2
 4010a80:	e0b7c117 	ldw	r2,-8444(fp)
 4010a84:	1885883a 	add	r2,r3,r2
 4010a88:	1085883a 	add	r2,r2,r2
 4010a8c:	1085883a 	add	r2,r2,r2
 4010a90:	e0f7c104 	addi	r3,fp,-8444
 4010a94:	1885883a 	add	r2,r3,r2
 4010a98:	10879d04 	addi	r2,r2,7796
 4010a9c:	10800017 	ldw	r2,0(r2)
 4010aa0:	10800198 	cmpnei	r2,r2,6
 4010aa4:	1000321e 	bne	r2,zero,4010b70 <main+0x1059c>
 4010aa8:	e0b7c217 	ldw	r2,-8440(fp)
 4010aac:	10ffffc4 	addi	r3,r2,-1
 4010ab0:	e0b7c117 	ldw	r2,-8444(fp)
 4010ab4:	14000044 	addi	r16,r2,1
 4010ab8:	01400504 	movi	r5,20
 4010abc:	1809883a 	mov	r4,r3
 4010ac0:	40191000 	call	4019100 <__mulsi3>
 4010ac4:	1405883a 	add	r2,r2,r16
 4010ac8:	1085883a 	add	r2,r2,r2
 4010acc:	1085883a 	add	r2,r2,r2
 4010ad0:	e0f7c104 	addi	r3,fp,-8444
 4010ad4:	1885883a 	add	r2,r3,r2
 4010ad8:	10879d04 	addi	r2,r2,7796
 4010adc:	10800017 	ldw	r2,0(r2)
 4010ae0:	10bffc18 	cmpnei	r2,r2,-16
 4010ae4:	1000221e 	bne	r2,zero,4010b70 <main+0x1059c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4010ae8:	e0b7c217 	ldw	r2,-8440(fp)
 4010aec:	10c00084 	addi	r3,r2,2
 4010af0:	e0b95e04 	addi	r2,fp,-6792
 4010af4:	180f883a 	mov	r7,r3
 4010af8:	e1b7c117 	ldw	r6,-8444(fp)
 4010afc:	01403fc4 	movi	r5,255
 4010b00:	1009883a 	mov	r4,r2
 4010b04:	40003c80 	call	40003c8 <draw>
					draw(six, COLOR08_BLACK, x,y+2 );
 4010b08:	e0b7c217 	ldw	r2,-8440(fp)
 4010b0c:	10800084 	addi	r2,r2,2
 4010b10:	100f883a 	mov	r7,r2
 4010b14:	e1b7c117 	ldw	r6,-8444(fp)
 4010b18:	000b883a 	mov	r5,zero
 4010b1c:	010100f4 	movhi	r4,1027
 4010b20:	213a2a04 	addi	r4,r4,-5976
 4010b24:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-16;
 4010b28:	e0b7c217 	ldw	r2,-8440(fp)
 4010b2c:	01400504 	movi	r5,20
 4010b30:	1009883a 	mov	r4,r2
 4010b34:	40191000 	call	4019100 <__mulsi3>
 4010b38:	1007883a 	mov	r3,r2
 4010b3c:	e0b7c117 	ldw	r2,-8444(fp)
 4010b40:	1885883a 	add	r2,r3,r2
 4010b44:	1085883a 	add	r2,r2,r2
 4010b48:	1085883a 	add	r2,r2,r2
 4010b4c:	e0f7c104 	addi	r3,fp,-8444
 4010b50:	1885883a 	add	r2,r3,r2
 4010b54:	10879d04 	addi	r2,r2,7796
 4010b58:	00fffc04 	movi	r3,-16
 4010b5c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4010b60:	00c00044 	movi	r3,1
 4010b64:	008200b4 	movhi	r2,2050
 4010b68:	10841804 	addi	r2,r2,4192
 4010b6c:	10c00035 	stwio	r3,0(r2)
				}
			}
			if(gameboard[y][x]==7)//7
 4010b70:	e0b7c217 	ldw	r2,-8440(fp)
 4010b74:	01400504 	movi	r5,20
 4010b78:	1009883a 	mov	r4,r2
 4010b7c:	40191000 	call	4019100 <__mulsi3>
 4010b80:	1007883a 	mov	r3,r2
 4010b84:	e0b7c117 	ldw	r2,-8444(fp)
 4010b88:	1885883a 	add	r2,r3,r2
 4010b8c:	1085883a 	add	r2,r2,r2
 4010b90:	1085883a 	add	r2,r2,r2
 4010b94:	e0f7c104 	addi	r3,fp,-8444
 4010b98:	1885883a 	add	r2,r3,r2
 4010b9c:	10879d04 	addi	r2,r2,7796
 4010ba0:	10800017 	ldw	r2,0(r2)
 4010ba4:	108001d8 	cmpnei	r2,r2,7
 4010ba8:	1005511e 	bne	r2,zero,40120f0 <main+0x11b1c>
			{
				//horizontal7
				if ((gameboard [y][x]==gameboard [y][x+1] && gameboard [y][x+1]== gameboard [y][x+2]) || (gameboard[y][x]==7 && gameboard[y][x+1]==-17) )//(0,0,0)
 4010bac:	e0b7c217 	ldw	r2,-8440(fp)
 4010bb0:	01400504 	movi	r5,20
 4010bb4:	1009883a 	mov	r4,r2
 4010bb8:	40191000 	call	4019100 <__mulsi3>
 4010bbc:	1007883a 	mov	r3,r2
 4010bc0:	e0b7c117 	ldw	r2,-8444(fp)
 4010bc4:	1885883a 	add	r2,r3,r2
 4010bc8:	1085883a 	add	r2,r2,r2
 4010bcc:	1085883a 	add	r2,r2,r2
 4010bd0:	e0f7c104 	addi	r3,fp,-8444
 4010bd4:	1885883a 	add	r2,r3,r2
 4010bd8:	10879d04 	addi	r2,r2,7796
 4010bdc:	14000017 	ldw	r16,0(r2)
 4010be0:	e0b7c117 	ldw	r2,-8444(fp)
 4010be4:	14400044 	addi	r17,r2,1
 4010be8:	e0b7c217 	ldw	r2,-8440(fp)
 4010bec:	01400504 	movi	r5,20
 4010bf0:	1009883a 	mov	r4,r2
 4010bf4:	40191000 	call	4019100 <__mulsi3>
 4010bf8:	1445883a 	add	r2,r2,r17
 4010bfc:	1085883a 	add	r2,r2,r2
 4010c00:	1085883a 	add	r2,r2,r2
 4010c04:	e0f7c104 	addi	r3,fp,-8444
 4010c08:	1885883a 	add	r2,r3,r2
 4010c0c:	10879d04 	addi	r2,r2,7796
 4010c10:	10800017 	ldw	r2,0(r2)
 4010c14:	80801b1e 	bne	r16,r2,4010c84 <main+0x106b0>
 4010c18:	e0b7c117 	ldw	r2,-8444(fp)
 4010c1c:	14000044 	addi	r16,r2,1
 4010c20:	e0b7c217 	ldw	r2,-8440(fp)
 4010c24:	01400504 	movi	r5,20
 4010c28:	1009883a 	mov	r4,r2
 4010c2c:	40191000 	call	4019100 <__mulsi3>
 4010c30:	1405883a 	add	r2,r2,r16
 4010c34:	1085883a 	add	r2,r2,r2
 4010c38:	1085883a 	add	r2,r2,r2
 4010c3c:	e0f7c104 	addi	r3,fp,-8444
 4010c40:	1885883a 	add	r2,r3,r2
 4010c44:	10879d04 	addi	r2,r2,7796
 4010c48:	14000017 	ldw	r16,0(r2)
 4010c4c:	e0b7c117 	ldw	r2,-8444(fp)
 4010c50:	14400084 	addi	r17,r2,2
 4010c54:	e0b7c217 	ldw	r2,-8440(fp)
 4010c58:	01400504 	movi	r5,20
 4010c5c:	1009883a 	mov	r4,r2
 4010c60:	40191000 	call	4019100 <__mulsi3>
 4010c64:	1445883a 	add	r2,r2,r17
 4010c68:	1085883a 	add	r2,r2,r2
 4010c6c:	1085883a 	add	r2,r2,r2
 4010c70:	e0f7c104 	addi	r3,fp,-8444
 4010c74:	1885883a 	add	r2,r3,r2
 4010c78:	10879d04 	addi	r2,r2,7796
 4010c7c:	10800017 	ldw	r2,0(r2)
 4010c80:	80801e26 	beq	r16,r2,4010cfc <main+0x10728>
 4010c84:	e0b7c217 	ldw	r2,-8440(fp)
 4010c88:	01400504 	movi	r5,20
 4010c8c:	1009883a 	mov	r4,r2
 4010c90:	40191000 	call	4019100 <__mulsi3>
 4010c94:	1007883a 	mov	r3,r2
 4010c98:	e0b7c117 	ldw	r2,-8444(fp)
 4010c9c:	1885883a 	add	r2,r3,r2
 4010ca0:	1085883a 	add	r2,r2,r2
 4010ca4:	1085883a 	add	r2,r2,r2
 4010ca8:	e0f7c104 	addi	r3,fp,-8444
 4010cac:	1885883a 	add	r2,r3,r2
 4010cb0:	10879d04 	addi	r2,r2,7796
 4010cb4:	10800017 	ldw	r2,0(r2)
 4010cb8:	108001d8 	cmpnei	r2,r2,7
 4010cbc:	1000311e 	bne	r2,zero,4010d84 <main+0x107b0>
 4010cc0:	e0b7c117 	ldw	r2,-8444(fp)
 4010cc4:	14000044 	addi	r16,r2,1
 4010cc8:	e0b7c217 	ldw	r2,-8440(fp)
 4010ccc:	01400504 	movi	r5,20
 4010cd0:	1009883a 	mov	r4,r2
 4010cd4:	40191000 	call	4019100 <__mulsi3>
 4010cd8:	1405883a 	add	r2,r2,r16
 4010cdc:	1085883a 	add	r2,r2,r2
 4010ce0:	1085883a 	add	r2,r2,r2
 4010ce4:	e0f7c104 	addi	r3,fp,-8444
 4010ce8:	1885883a 	add	r2,r3,r2
 4010cec:	10879d04 	addi	r2,r2,7796
 4010cf0:	10800017 	ldw	r2,0(r2)
 4010cf4:	10bffbd8 	cmpnei	r2,r2,-17
 4010cf8:	1000221e 	bne	r2,zero,4010d84 <main+0x107b0>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4010cfc:	e0b7c217 	ldw	r2,-8440(fp)
 4010d00:	10c00084 	addi	r3,r2,2
 4010d04:	e0b95e04 	addi	r2,fp,-6792
 4010d08:	180f883a 	mov	r7,r3
 4010d0c:	e1b7c117 	ldw	r6,-8444(fp)
 4010d10:	01403fc4 	movi	r5,255
 4010d14:	1009883a 	mov	r4,r2
 4010d18:	40003c80 	call	40003c8 <draw>
					draw(seven, COLOR08_BLACK, x,y+2 );
 4010d1c:	e0b7c217 	ldw	r2,-8440(fp)
 4010d20:	10800084 	addi	r2,r2,2
 4010d24:	100f883a 	mov	r7,r2
 4010d28:	e1b7c117 	ldw	r6,-8444(fp)
 4010d2c:	000b883a 	mov	r5,zero
 4010d30:	010100f4 	movhi	r4,1027
 4010d34:	213baa04 	addi	r4,r4,-4440
 4010d38:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-17;
 4010d3c:	e0b7c217 	ldw	r2,-8440(fp)
 4010d40:	01400504 	movi	r5,20
 4010d44:	1009883a 	mov	r4,r2
 4010d48:	40191000 	call	4019100 <__mulsi3>
 4010d4c:	1007883a 	mov	r3,r2
 4010d50:	e0b7c117 	ldw	r2,-8444(fp)
 4010d54:	1885883a 	add	r2,r3,r2
 4010d58:	1085883a 	add	r2,r2,r2
 4010d5c:	1085883a 	add	r2,r2,r2
 4010d60:	e0f7c104 	addi	r3,fp,-8444
 4010d64:	1885883a 	add	r2,r3,r2
 4010d68:	10879d04 	addi	r2,r2,7796
 4010d6c:	00fffbc4 	movi	r3,-17
 4010d70:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4010d74:	00c00044 	movi	r3,1
 4010d78:	008200b4 	movhi	r2,2050
 4010d7c:	10841804 	addi	r2,r2,4192
 4010d80:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard [y][x]==gameboard [y][x-1] && gameboard [y][x]== gameboard [y][x+1]) || (gameboard [y][x]==7 && gameboard [y][x-1]==-17) || (gameboard [y][x]==7 && gameboard [y][x+1]==-17))//(
 4010d84:	e0b7c217 	ldw	r2,-8440(fp)
 4010d88:	01400504 	movi	r5,20
 4010d8c:	1009883a 	mov	r4,r2
 4010d90:	40191000 	call	4019100 <__mulsi3>
 4010d94:	1007883a 	mov	r3,r2
 4010d98:	e0b7c117 	ldw	r2,-8444(fp)
 4010d9c:	1885883a 	add	r2,r3,r2
 4010da0:	1085883a 	add	r2,r2,r2
 4010da4:	1085883a 	add	r2,r2,r2
 4010da8:	e0f7c104 	addi	r3,fp,-8444
 4010dac:	1885883a 	add	r2,r3,r2
 4010db0:	10879d04 	addi	r2,r2,7796
 4010db4:	14000017 	ldw	r16,0(r2)
 4010db8:	e0b7c117 	ldw	r2,-8444(fp)
 4010dbc:	147fffc4 	addi	r17,r2,-1
 4010dc0:	e0b7c217 	ldw	r2,-8440(fp)
 4010dc4:	01400504 	movi	r5,20
 4010dc8:	1009883a 	mov	r4,r2
 4010dcc:	40191000 	call	4019100 <__mulsi3>
 4010dd0:	1445883a 	add	r2,r2,r17
 4010dd4:	1085883a 	add	r2,r2,r2
 4010dd8:	1085883a 	add	r2,r2,r2
 4010ddc:	e0f7c104 	addi	r3,fp,-8444
 4010de0:	1885883a 	add	r2,r3,r2
 4010de4:	10879d04 	addi	r2,r2,7796
 4010de8:	10800017 	ldw	r2,0(r2)
 4010dec:	80801b1e 	bne	r16,r2,4010e5c <main+0x10888>
 4010df0:	e0b7c217 	ldw	r2,-8440(fp)
 4010df4:	01400504 	movi	r5,20
 4010df8:	1009883a 	mov	r4,r2
 4010dfc:	40191000 	call	4019100 <__mulsi3>
 4010e00:	1007883a 	mov	r3,r2
 4010e04:	e0b7c117 	ldw	r2,-8444(fp)
 4010e08:	1885883a 	add	r2,r3,r2
 4010e0c:	1085883a 	add	r2,r2,r2
 4010e10:	1085883a 	add	r2,r2,r2
 4010e14:	e0f7c104 	addi	r3,fp,-8444
 4010e18:	1885883a 	add	r2,r3,r2
 4010e1c:	10879d04 	addi	r2,r2,7796
 4010e20:	14000017 	ldw	r16,0(r2)
 4010e24:	e0b7c117 	ldw	r2,-8444(fp)
 4010e28:	14400044 	addi	r17,r2,1
 4010e2c:	e0b7c217 	ldw	r2,-8440(fp)
 4010e30:	01400504 	movi	r5,20
 4010e34:	1009883a 	mov	r4,r2
 4010e38:	40191000 	call	4019100 <__mulsi3>
 4010e3c:	1445883a 	add	r2,r2,r17
 4010e40:	1085883a 	add	r2,r2,r2
 4010e44:	1085883a 	add	r2,r2,r2
 4010e48:	e0f7c104 	addi	r3,fp,-8444
 4010e4c:	1885883a 	add	r2,r3,r2
 4010e50:	10879d04 	addi	r2,r2,7796
 4010e54:	10800017 	ldw	r2,0(r2)
 4010e58:	80803c26 	beq	r16,r2,4010f4c <main+0x10978>
 4010e5c:	e0b7c217 	ldw	r2,-8440(fp)
 4010e60:	01400504 	movi	r5,20
 4010e64:	1009883a 	mov	r4,r2
 4010e68:	40191000 	call	4019100 <__mulsi3>
 4010e6c:	1007883a 	mov	r3,r2
 4010e70:	e0b7c117 	ldw	r2,-8444(fp)
 4010e74:	1885883a 	add	r2,r3,r2
 4010e78:	1085883a 	add	r2,r2,r2
 4010e7c:	1085883a 	add	r2,r2,r2
 4010e80:	e0f7c104 	addi	r3,fp,-8444
 4010e84:	1885883a 	add	r2,r3,r2
 4010e88:	10879d04 	addi	r2,r2,7796
 4010e8c:	10800017 	ldw	r2,0(r2)
 4010e90:	108001d8 	cmpnei	r2,r2,7
 4010e94:	10000f1e 	bne	r2,zero,4010ed4 <main+0x10900>
 4010e98:	e0b7c117 	ldw	r2,-8444(fp)
 4010e9c:	143fffc4 	addi	r16,r2,-1
 4010ea0:	e0b7c217 	ldw	r2,-8440(fp)
 4010ea4:	01400504 	movi	r5,20
 4010ea8:	1009883a 	mov	r4,r2
 4010eac:	40191000 	call	4019100 <__mulsi3>
 4010eb0:	1405883a 	add	r2,r2,r16
 4010eb4:	1085883a 	add	r2,r2,r2
 4010eb8:	1085883a 	add	r2,r2,r2
 4010ebc:	e0f7c104 	addi	r3,fp,-8444
 4010ec0:	1885883a 	add	r2,r3,r2
 4010ec4:	10879d04 	addi	r2,r2,7796
 4010ec8:	10800017 	ldw	r2,0(r2)
 4010ecc:	10bffbe0 	cmpeqi	r2,r2,-17
 4010ed0:	10001e1e 	bne	r2,zero,4010f4c <main+0x10978>
 4010ed4:	e0b7c217 	ldw	r2,-8440(fp)
 4010ed8:	01400504 	movi	r5,20
 4010edc:	1009883a 	mov	r4,r2
 4010ee0:	40191000 	call	4019100 <__mulsi3>
 4010ee4:	1007883a 	mov	r3,r2
 4010ee8:	e0b7c117 	ldw	r2,-8444(fp)
 4010eec:	1885883a 	add	r2,r3,r2
 4010ef0:	1085883a 	add	r2,r2,r2
 4010ef4:	1085883a 	add	r2,r2,r2
 4010ef8:	e0f7c104 	addi	r3,fp,-8444
 4010efc:	1885883a 	add	r2,r3,r2
 4010f00:	10879d04 	addi	r2,r2,7796
 4010f04:	10800017 	ldw	r2,0(r2)
 4010f08:	108001d8 	cmpnei	r2,r2,7
 4010f0c:	1000311e 	bne	r2,zero,4010fd4 <main+0x10a00>
 4010f10:	e0b7c117 	ldw	r2,-8444(fp)
 4010f14:	14000044 	addi	r16,r2,1
 4010f18:	e0b7c217 	ldw	r2,-8440(fp)
 4010f1c:	01400504 	movi	r5,20
 4010f20:	1009883a 	mov	r4,r2
 4010f24:	40191000 	call	4019100 <__mulsi3>
 4010f28:	1405883a 	add	r2,r2,r16
 4010f2c:	1085883a 	add	r2,r2,r2
 4010f30:	1085883a 	add	r2,r2,r2
 4010f34:	e0f7c104 	addi	r3,fp,-8444
 4010f38:	1885883a 	add	r2,r3,r2
 4010f3c:	10879d04 	addi	r2,r2,7796
 4010f40:	10800017 	ldw	r2,0(r2)
 4010f44:	10bffbd8 	cmpnei	r2,r2,-17
 4010f48:	1000221e 	bne	r2,zero,4010fd4 <main+0x10a00>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4010f4c:	e0b7c217 	ldw	r2,-8440(fp)
 4010f50:	10c00084 	addi	r3,r2,2
 4010f54:	e0b95e04 	addi	r2,fp,-6792
 4010f58:	180f883a 	mov	r7,r3
 4010f5c:	e1b7c117 	ldw	r6,-8444(fp)
 4010f60:	01403fc4 	movi	r5,255
 4010f64:	1009883a 	mov	r4,r2
 4010f68:	40003c80 	call	40003c8 <draw>
					draw(seven, COLOR08_BLACK, x,y+2 );
 4010f6c:	e0b7c217 	ldw	r2,-8440(fp)
 4010f70:	10800084 	addi	r2,r2,2
 4010f74:	100f883a 	mov	r7,r2
 4010f78:	e1b7c117 	ldw	r6,-8444(fp)
 4010f7c:	000b883a 	mov	r5,zero
 4010f80:	010100f4 	movhi	r4,1027
 4010f84:	213baa04 	addi	r4,r4,-4440
 4010f88:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-17;
 4010f8c:	e0b7c217 	ldw	r2,-8440(fp)
 4010f90:	01400504 	movi	r5,20
 4010f94:	1009883a 	mov	r4,r2
 4010f98:	40191000 	call	4019100 <__mulsi3>
 4010f9c:	1007883a 	mov	r3,r2
 4010fa0:	e0b7c117 	ldw	r2,-8444(fp)
 4010fa4:	1885883a 	add	r2,r3,r2
 4010fa8:	1085883a 	add	r2,r2,r2
 4010fac:	1085883a 	add	r2,r2,r2
 4010fb0:	e0f7c104 	addi	r3,fp,-8444
 4010fb4:	1885883a 	add	r2,r3,r2
 4010fb8:	10879d04 	addi	r2,r2,7796
 4010fbc:	00fffbc4 	movi	r3,-17
 4010fc0:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4010fc4:	00c00044 	movi	r3,1
 4010fc8:	008200b4 	movhi	r2,2050
 4010fcc:	10841804 	addi	r2,r2,4192
 4010fd0:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard [y][x]==gameboard [y][x-1] && gameboard [y][x]== gameboard [y][x-2]))//00x
 4010fd4:	e0b7c217 	ldw	r2,-8440(fp)
 4010fd8:	01400504 	movi	r5,20
 4010fdc:	1009883a 	mov	r4,r2
 4010fe0:	40191000 	call	4019100 <__mulsi3>
 4010fe4:	1007883a 	mov	r3,r2
 4010fe8:	e0b7c117 	ldw	r2,-8444(fp)
 4010fec:	1885883a 	add	r2,r3,r2
 4010ff0:	1085883a 	add	r2,r2,r2
 4010ff4:	1085883a 	add	r2,r2,r2
 4010ff8:	e0f7c104 	addi	r3,fp,-8444
 4010ffc:	1885883a 	add	r2,r3,r2
 4011000:	10879d04 	addi	r2,r2,7796
 4011004:	14000017 	ldw	r16,0(r2)
 4011008:	e0b7c117 	ldw	r2,-8444(fp)
 401100c:	147fffc4 	addi	r17,r2,-1
 4011010:	e0b7c217 	ldw	r2,-8440(fp)
 4011014:	01400504 	movi	r5,20
 4011018:	1009883a 	mov	r4,r2
 401101c:	40191000 	call	4019100 <__mulsi3>
 4011020:	1445883a 	add	r2,r2,r17
 4011024:	1085883a 	add	r2,r2,r2
 4011028:	1085883a 	add	r2,r2,r2
 401102c:	e0f7c104 	addi	r3,fp,-8444
 4011030:	1885883a 	add	r2,r3,r2
 4011034:	10879d04 	addi	r2,r2,7796
 4011038:	10800017 	ldw	r2,0(r2)
 401103c:	80803d1e 	bne	r16,r2,4011134 <main+0x10b60>
 4011040:	e0b7c217 	ldw	r2,-8440(fp)
 4011044:	01400504 	movi	r5,20
 4011048:	1009883a 	mov	r4,r2
 401104c:	40191000 	call	4019100 <__mulsi3>
 4011050:	1007883a 	mov	r3,r2
 4011054:	e0b7c117 	ldw	r2,-8444(fp)
 4011058:	1885883a 	add	r2,r3,r2
 401105c:	1085883a 	add	r2,r2,r2
 4011060:	1085883a 	add	r2,r2,r2
 4011064:	e0f7c104 	addi	r3,fp,-8444
 4011068:	1885883a 	add	r2,r3,r2
 401106c:	10879d04 	addi	r2,r2,7796
 4011070:	14000017 	ldw	r16,0(r2)
 4011074:	e0b7c117 	ldw	r2,-8444(fp)
 4011078:	147fff84 	addi	r17,r2,-2
 401107c:	e0b7c217 	ldw	r2,-8440(fp)
 4011080:	01400504 	movi	r5,20
 4011084:	1009883a 	mov	r4,r2
 4011088:	40191000 	call	4019100 <__mulsi3>
 401108c:	1445883a 	add	r2,r2,r17
 4011090:	1085883a 	add	r2,r2,r2
 4011094:	1085883a 	add	r2,r2,r2
 4011098:	e0f7c104 	addi	r3,fp,-8444
 401109c:	1885883a 	add	r2,r3,r2
 40110a0:	10879d04 	addi	r2,r2,7796
 40110a4:	10800017 	ldw	r2,0(r2)
 40110a8:	8080221e 	bne	r16,r2,4011134 <main+0x10b60>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 40110ac:	e0b7c217 	ldw	r2,-8440(fp)
 40110b0:	10c00084 	addi	r3,r2,2
 40110b4:	e0b95e04 	addi	r2,fp,-6792
 40110b8:	180f883a 	mov	r7,r3
 40110bc:	e1b7c117 	ldw	r6,-8444(fp)
 40110c0:	01403fc4 	movi	r5,255
 40110c4:	1009883a 	mov	r4,r2
 40110c8:	40003c80 	call	40003c8 <draw>
					draw(seven, COLOR08_BLACK, x,y+2 );
 40110cc:	e0b7c217 	ldw	r2,-8440(fp)
 40110d0:	10800084 	addi	r2,r2,2
 40110d4:	100f883a 	mov	r7,r2
 40110d8:	e1b7c117 	ldw	r6,-8444(fp)
 40110dc:	000b883a 	mov	r5,zero
 40110e0:	010100f4 	movhi	r4,1027
 40110e4:	213baa04 	addi	r4,r4,-4440
 40110e8:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-17;
 40110ec:	e0b7c217 	ldw	r2,-8440(fp)
 40110f0:	01400504 	movi	r5,20
 40110f4:	1009883a 	mov	r4,r2
 40110f8:	40191000 	call	4019100 <__mulsi3>
 40110fc:	1007883a 	mov	r3,r2
 4011100:	e0b7c117 	ldw	r2,-8444(fp)
 4011104:	1885883a 	add	r2,r3,r2
 4011108:	1085883a 	add	r2,r2,r2
 401110c:	1085883a 	add	r2,r2,r2
 4011110:	e0f7c104 	addi	r3,fp,-8444
 4011114:	1885883a 	add	r2,r3,r2
 4011118:	10879d04 	addi	r2,r2,7796
 401111c:	00fffbc4 	movi	r3,-17
 4011120:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4011124:	00c00044 	movi	r3,1
 4011128:	008200b4 	movhi	r2,2050
 401112c:	10841804 	addi	r2,r2,4192
 4011130:	10c00035 	stwio	r3,0(r2)
				}
				/////////////////////////////////
				//vertical7
				if ((gameboard [y][x]==gameboard [y+1][x] && gameboard [y+1][x]== gameboard [y+2][x]) || (gameboard [y][x]==7 && gameboard [y+1][x]==-17))//xmb
 4011134:	e0b7c217 	ldw	r2,-8440(fp)
 4011138:	01400504 	movi	r5,20
 401113c:	1009883a 	mov	r4,r2
 4011140:	40191000 	call	4019100 <__mulsi3>
 4011144:	1007883a 	mov	r3,r2
 4011148:	e0b7c117 	ldw	r2,-8444(fp)
 401114c:	1885883a 	add	r2,r3,r2
 4011150:	1085883a 	add	r2,r2,r2
 4011154:	1085883a 	add	r2,r2,r2
 4011158:	e0f7c104 	addi	r3,fp,-8444
 401115c:	1885883a 	add	r2,r3,r2
 4011160:	10879d04 	addi	r2,r2,7796
 4011164:	14000017 	ldw	r16,0(r2)
 4011168:	e0b7c217 	ldw	r2,-8440(fp)
 401116c:	10800044 	addi	r2,r2,1
 4011170:	01400504 	movi	r5,20
 4011174:	1009883a 	mov	r4,r2
 4011178:	40191000 	call	4019100 <__mulsi3>
 401117c:	1007883a 	mov	r3,r2
 4011180:	e0b7c117 	ldw	r2,-8444(fp)
 4011184:	1885883a 	add	r2,r3,r2
 4011188:	1085883a 	add	r2,r2,r2
 401118c:	1085883a 	add	r2,r2,r2
 4011190:	e0f7c104 	addi	r3,fp,-8444
 4011194:	1885883a 	add	r2,r3,r2
 4011198:	10879d04 	addi	r2,r2,7796
 401119c:	10800017 	ldw	r2,0(r2)
 40111a0:	80801d1e 	bne	r16,r2,4011218 <main+0x10c44>
 40111a4:	e0b7c217 	ldw	r2,-8440(fp)
 40111a8:	10800044 	addi	r2,r2,1
 40111ac:	01400504 	movi	r5,20
 40111b0:	1009883a 	mov	r4,r2
 40111b4:	40191000 	call	4019100 <__mulsi3>
 40111b8:	1007883a 	mov	r3,r2
 40111bc:	e0b7c117 	ldw	r2,-8444(fp)
 40111c0:	1885883a 	add	r2,r3,r2
 40111c4:	1085883a 	add	r2,r2,r2
 40111c8:	1085883a 	add	r2,r2,r2
 40111cc:	e0f7c104 	addi	r3,fp,-8444
 40111d0:	1885883a 	add	r2,r3,r2
 40111d4:	10879d04 	addi	r2,r2,7796
 40111d8:	14000017 	ldw	r16,0(r2)
 40111dc:	e0b7c217 	ldw	r2,-8440(fp)
 40111e0:	10800084 	addi	r2,r2,2
 40111e4:	01400504 	movi	r5,20
 40111e8:	1009883a 	mov	r4,r2
 40111ec:	40191000 	call	4019100 <__mulsi3>
 40111f0:	1007883a 	mov	r3,r2
 40111f4:	e0b7c117 	ldw	r2,-8444(fp)
 40111f8:	1885883a 	add	r2,r3,r2
 40111fc:	1085883a 	add	r2,r2,r2
 4011200:	1085883a 	add	r2,r2,r2
 4011204:	e0f7c104 	addi	r3,fp,-8444
 4011208:	1885883a 	add	r2,r3,r2
 401120c:	10879d04 	addi	r2,r2,7796
 4011210:	10800017 	ldw	r2,0(r2)
 4011214:	80801f26 	beq	r16,r2,4011294 <main+0x10cc0>
 4011218:	e0b7c217 	ldw	r2,-8440(fp)
 401121c:	01400504 	movi	r5,20
 4011220:	1009883a 	mov	r4,r2
 4011224:	40191000 	call	4019100 <__mulsi3>
 4011228:	1007883a 	mov	r3,r2
 401122c:	e0b7c117 	ldw	r2,-8444(fp)
 4011230:	1885883a 	add	r2,r3,r2
 4011234:	1085883a 	add	r2,r2,r2
 4011238:	1085883a 	add	r2,r2,r2
 401123c:	e0f7c104 	addi	r3,fp,-8444
 4011240:	1885883a 	add	r2,r3,r2
 4011244:	10879d04 	addi	r2,r2,7796
 4011248:	10800017 	ldw	r2,0(r2)
 401124c:	108001d8 	cmpnei	r2,r2,7
 4011250:	1000321e 	bne	r2,zero,401131c <main+0x10d48>
 4011254:	e0b7c217 	ldw	r2,-8440(fp)
 4011258:	10800044 	addi	r2,r2,1
 401125c:	01400504 	movi	r5,20
 4011260:	1009883a 	mov	r4,r2
 4011264:	40191000 	call	4019100 <__mulsi3>
 4011268:	1007883a 	mov	r3,r2
 401126c:	e0b7c117 	ldw	r2,-8444(fp)
 4011270:	1885883a 	add	r2,r3,r2
 4011274:	1085883a 	add	r2,r2,r2
 4011278:	1085883a 	add	r2,r2,r2
 401127c:	e0f7c104 	addi	r3,fp,-8444
 4011280:	1885883a 	add	r2,r3,r2
 4011284:	10879d04 	addi	r2,r2,7796
 4011288:	10800017 	ldw	r2,0(r2)
 401128c:	10bffbd8 	cmpnei	r2,r2,-17
 4011290:	1000221e 	bne	r2,zero,401131c <main+0x10d48>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4011294:	e0b7c217 	ldw	r2,-8440(fp)
 4011298:	10c00084 	addi	r3,r2,2
 401129c:	e0b95e04 	addi	r2,fp,-6792
 40112a0:	180f883a 	mov	r7,r3
 40112a4:	e1b7c117 	ldw	r6,-8444(fp)
 40112a8:	01403fc4 	movi	r5,255
 40112ac:	1009883a 	mov	r4,r2
 40112b0:	40003c80 	call	40003c8 <draw>
					draw(seven, COLOR08_BLACK, x,y+2 );
 40112b4:	e0b7c217 	ldw	r2,-8440(fp)
 40112b8:	10800084 	addi	r2,r2,2
 40112bc:	100f883a 	mov	r7,r2
 40112c0:	e1b7c117 	ldw	r6,-8444(fp)
 40112c4:	000b883a 	mov	r5,zero
 40112c8:	010100f4 	movhi	r4,1027
 40112cc:	213baa04 	addi	r4,r4,-4440
 40112d0:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-17;
 40112d4:	e0b7c217 	ldw	r2,-8440(fp)
 40112d8:	01400504 	movi	r5,20
 40112dc:	1009883a 	mov	r4,r2
 40112e0:	40191000 	call	4019100 <__mulsi3>
 40112e4:	1007883a 	mov	r3,r2
 40112e8:	e0b7c117 	ldw	r2,-8444(fp)
 40112ec:	1885883a 	add	r2,r3,r2
 40112f0:	1085883a 	add	r2,r2,r2
 40112f4:	1085883a 	add	r2,r2,r2
 40112f8:	e0f7c104 	addi	r3,fp,-8444
 40112fc:	1885883a 	add	r2,r3,r2
 4011300:	10879d04 	addi	r2,r2,7796
 4011304:	00fffbc4 	movi	r3,-17
 4011308:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 401130c:	00c00044 	movi	r3,1
 4011310:	008200b4 	movhi	r2,2050
 4011314:	10841804 	addi	r2,r2,4192
 4011318:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard [y][x]==gameboard [y-1][x] && gameboard [y][x]== gameboard [y+1][x]) || (gameboard [y][x]==7 && gameboard [y+1][x]==-17))//txb
 401131c:	e0b7c217 	ldw	r2,-8440(fp)
 4011320:	01400504 	movi	r5,20
 4011324:	1009883a 	mov	r4,r2
 4011328:	40191000 	call	4019100 <__mulsi3>
 401132c:	1007883a 	mov	r3,r2
 4011330:	e0b7c117 	ldw	r2,-8444(fp)
 4011334:	1885883a 	add	r2,r3,r2
 4011338:	1085883a 	add	r2,r2,r2
 401133c:	1085883a 	add	r2,r2,r2
 4011340:	e0f7c104 	addi	r3,fp,-8444
 4011344:	1885883a 	add	r2,r3,r2
 4011348:	10879d04 	addi	r2,r2,7796
 401134c:	14000017 	ldw	r16,0(r2)
 4011350:	e0b7c217 	ldw	r2,-8440(fp)
 4011354:	10bfffc4 	addi	r2,r2,-1
 4011358:	01400504 	movi	r5,20
 401135c:	1009883a 	mov	r4,r2
 4011360:	40191000 	call	4019100 <__mulsi3>
 4011364:	1007883a 	mov	r3,r2
 4011368:	e0b7c117 	ldw	r2,-8444(fp)
 401136c:	1885883a 	add	r2,r3,r2
 4011370:	1085883a 	add	r2,r2,r2
 4011374:	1085883a 	add	r2,r2,r2
 4011378:	e0f7c104 	addi	r3,fp,-8444
 401137c:	1885883a 	add	r2,r3,r2
 4011380:	10879d04 	addi	r2,r2,7796
 4011384:	10800017 	ldw	r2,0(r2)
 4011388:	80801c1e 	bne	r16,r2,40113fc <main+0x10e28>
 401138c:	e0b7c217 	ldw	r2,-8440(fp)
 4011390:	01400504 	movi	r5,20
 4011394:	1009883a 	mov	r4,r2
 4011398:	40191000 	call	4019100 <__mulsi3>
 401139c:	1007883a 	mov	r3,r2
 40113a0:	e0b7c117 	ldw	r2,-8444(fp)
 40113a4:	1885883a 	add	r2,r3,r2
 40113a8:	1085883a 	add	r2,r2,r2
 40113ac:	1085883a 	add	r2,r2,r2
 40113b0:	e0f7c104 	addi	r3,fp,-8444
 40113b4:	1885883a 	add	r2,r3,r2
 40113b8:	10879d04 	addi	r2,r2,7796
 40113bc:	14000017 	ldw	r16,0(r2)
 40113c0:	e0b7c217 	ldw	r2,-8440(fp)
 40113c4:	10800044 	addi	r2,r2,1
 40113c8:	01400504 	movi	r5,20
 40113cc:	1009883a 	mov	r4,r2
 40113d0:	40191000 	call	4019100 <__mulsi3>
 40113d4:	1007883a 	mov	r3,r2
 40113d8:	e0b7c117 	ldw	r2,-8444(fp)
 40113dc:	1885883a 	add	r2,r3,r2
 40113e0:	1085883a 	add	r2,r2,r2
 40113e4:	1085883a 	add	r2,r2,r2
 40113e8:	e0f7c104 	addi	r3,fp,-8444
 40113ec:	1885883a 	add	r2,r3,r2
 40113f0:	10879d04 	addi	r2,r2,7796
 40113f4:	10800017 	ldw	r2,0(r2)
 40113f8:	80801f26 	beq	r16,r2,4011478 <main+0x10ea4>
 40113fc:	e0b7c217 	ldw	r2,-8440(fp)
 4011400:	01400504 	movi	r5,20
 4011404:	1009883a 	mov	r4,r2
 4011408:	40191000 	call	4019100 <__mulsi3>
 401140c:	1007883a 	mov	r3,r2
 4011410:	e0b7c117 	ldw	r2,-8444(fp)
 4011414:	1885883a 	add	r2,r3,r2
 4011418:	1085883a 	add	r2,r2,r2
 401141c:	1085883a 	add	r2,r2,r2
 4011420:	e0f7c104 	addi	r3,fp,-8444
 4011424:	1885883a 	add	r2,r3,r2
 4011428:	10879d04 	addi	r2,r2,7796
 401142c:	10800017 	ldw	r2,0(r2)
 4011430:	108001d8 	cmpnei	r2,r2,7
 4011434:	1000321e 	bne	r2,zero,4011500 <main+0x10f2c>
 4011438:	e0b7c217 	ldw	r2,-8440(fp)
 401143c:	10800044 	addi	r2,r2,1
 4011440:	01400504 	movi	r5,20
 4011444:	1009883a 	mov	r4,r2
 4011448:	40191000 	call	4019100 <__mulsi3>
 401144c:	1007883a 	mov	r3,r2
 4011450:	e0b7c117 	ldw	r2,-8444(fp)
 4011454:	1885883a 	add	r2,r3,r2
 4011458:	1085883a 	add	r2,r2,r2
 401145c:	1085883a 	add	r2,r2,r2
 4011460:	e0f7c104 	addi	r3,fp,-8444
 4011464:	1885883a 	add	r2,r3,r2
 4011468:	10879d04 	addi	r2,r2,7796
 401146c:	10800017 	ldw	r2,0(r2)
 4011470:	10bffbd8 	cmpnei	r2,r2,-17
 4011474:	1000221e 	bne	r2,zero,4011500 <main+0x10f2c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4011478:	e0b7c217 	ldw	r2,-8440(fp)
 401147c:	10c00084 	addi	r3,r2,2
 4011480:	e0b95e04 	addi	r2,fp,-6792
 4011484:	180f883a 	mov	r7,r3
 4011488:	e1b7c117 	ldw	r6,-8444(fp)
 401148c:	01403fc4 	movi	r5,255
 4011490:	1009883a 	mov	r4,r2
 4011494:	40003c80 	call	40003c8 <draw>
					draw(seven, COLOR08_BLACK, x,y+2 );
 4011498:	e0b7c217 	ldw	r2,-8440(fp)
 401149c:	10800084 	addi	r2,r2,2
 40114a0:	100f883a 	mov	r7,r2
 40114a4:	e1b7c117 	ldw	r6,-8444(fp)
 40114a8:	000b883a 	mov	r5,zero
 40114ac:	010100f4 	movhi	r4,1027
 40114b0:	213baa04 	addi	r4,r4,-4440
 40114b4:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-17;
 40114b8:	e0b7c217 	ldw	r2,-8440(fp)
 40114bc:	01400504 	movi	r5,20
 40114c0:	1009883a 	mov	r4,r2
 40114c4:	40191000 	call	4019100 <__mulsi3>
 40114c8:	1007883a 	mov	r3,r2
 40114cc:	e0b7c117 	ldw	r2,-8444(fp)
 40114d0:	1885883a 	add	r2,r3,r2
 40114d4:	1085883a 	add	r2,r2,r2
 40114d8:	1085883a 	add	r2,r2,r2
 40114dc:	e0f7c104 	addi	r3,fp,-8444
 40114e0:	1885883a 	add	r2,r3,r2
 40114e4:	10879d04 	addi	r2,r2,7796
 40114e8:	00fffbc4 	movi	r3,-17
 40114ec:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40114f0:	00c00044 	movi	r3,1
 40114f4:	008200b4 	movhi	r2,2050
 40114f8:	10841804 	addi	r2,r2,4192
 40114fc:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard [y][x]==gameboard [y-1][x] && gameboard [y][x]== gameboard [y-2][x]) || (gameboard [y][x]==7 && gameboard [y-1][x]==-17))//tmx
 4011500:	e0b7c217 	ldw	r2,-8440(fp)
 4011504:	01400504 	movi	r5,20
 4011508:	1009883a 	mov	r4,r2
 401150c:	40191000 	call	4019100 <__mulsi3>
 4011510:	1007883a 	mov	r3,r2
 4011514:	e0b7c117 	ldw	r2,-8444(fp)
 4011518:	1885883a 	add	r2,r3,r2
 401151c:	1085883a 	add	r2,r2,r2
 4011520:	1085883a 	add	r2,r2,r2
 4011524:	e0f7c104 	addi	r3,fp,-8444
 4011528:	1885883a 	add	r2,r3,r2
 401152c:	10879d04 	addi	r2,r2,7796
 4011530:	14000017 	ldw	r16,0(r2)
 4011534:	e0b7c217 	ldw	r2,-8440(fp)
 4011538:	10bfffc4 	addi	r2,r2,-1
 401153c:	01400504 	movi	r5,20
 4011540:	1009883a 	mov	r4,r2
 4011544:	40191000 	call	4019100 <__mulsi3>
 4011548:	1007883a 	mov	r3,r2
 401154c:	e0b7c117 	ldw	r2,-8444(fp)
 4011550:	1885883a 	add	r2,r3,r2
 4011554:	1085883a 	add	r2,r2,r2
 4011558:	1085883a 	add	r2,r2,r2
 401155c:	e0f7c104 	addi	r3,fp,-8444
 4011560:	1885883a 	add	r2,r3,r2
 4011564:	10879d04 	addi	r2,r2,7796
 4011568:	10800017 	ldw	r2,0(r2)
 401156c:	80801c1e 	bne	r16,r2,40115e0 <main+0x1100c>
 4011570:	e0b7c217 	ldw	r2,-8440(fp)
 4011574:	01400504 	movi	r5,20
 4011578:	1009883a 	mov	r4,r2
 401157c:	40191000 	call	4019100 <__mulsi3>
 4011580:	1007883a 	mov	r3,r2
 4011584:	e0b7c117 	ldw	r2,-8444(fp)
 4011588:	1885883a 	add	r2,r3,r2
 401158c:	1085883a 	add	r2,r2,r2
 4011590:	1085883a 	add	r2,r2,r2
 4011594:	e0f7c104 	addi	r3,fp,-8444
 4011598:	1885883a 	add	r2,r3,r2
 401159c:	10879d04 	addi	r2,r2,7796
 40115a0:	14000017 	ldw	r16,0(r2)
 40115a4:	e0b7c217 	ldw	r2,-8440(fp)
 40115a8:	10bfff84 	addi	r2,r2,-2
 40115ac:	01400504 	movi	r5,20
 40115b0:	1009883a 	mov	r4,r2
 40115b4:	40191000 	call	4019100 <__mulsi3>
 40115b8:	1007883a 	mov	r3,r2
 40115bc:	e0b7c117 	ldw	r2,-8444(fp)
 40115c0:	1885883a 	add	r2,r3,r2
 40115c4:	1085883a 	add	r2,r2,r2
 40115c8:	1085883a 	add	r2,r2,r2
 40115cc:	e0f7c104 	addi	r3,fp,-8444
 40115d0:	1885883a 	add	r2,r3,r2
 40115d4:	10879d04 	addi	r2,r2,7796
 40115d8:	10800017 	ldw	r2,0(r2)
 40115dc:	80801f26 	beq	r16,r2,401165c <main+0x11088>
 40115e0:	e0b7c217 	ldw	r2,-8440(fp)
 40115e4:	01400504 	movi	r5,20
 40115e8:	1009883a 	mov	r4,r2
 40115ec:	40191000 	call	4019100 <__mulsi3>
 40115f0:	1007883a 	mov	r3,r2
 40115f4:	e0b7c117 	ldw	r2,-8444(fp)
 40115f8:	1885883a 	add	r2,r3,r2
 40115fc:	1085883a 	add	r2,r2,r2
 4011600:	1085883a 	add	r2,r2,r2
 4011604:	e0f7c104 	addi	r3,fp,-8444
 4011608:	1885883a 	add	r2,r3,r2
 401160c:	10879d04 	addi	r2,r2,7796
 4011610:	10800017 	ldw	r2,0(r2)
 4011614:	108001d8 	cmpnei	r2,r2,7
 4011618:	1000321e 	bne	r2,zero,40116e4 <main+0x11110>
 401161c:	e0b7c217 	ldw	r2,-8440(fp)
 4011620:	10bfffc4 	addi	r2,r2,-1
 4011624:	01400504 	movi	r5,20
 4011628:	1009883a 	mov	r4,r2
 401162c:	40191000 	call	4019100 <__mulsi3>
 4011630:	1007883a 	mov	r3,r2
 4011634:	e0b7c117 	ldw	r2,-8444(fp)
 4011638:	1885883a 	add	r2,r3,r2
 401163c:	1085883a 	add	r2,r2,r2
 4011640:	1085883a 	add	r2,r2,r2
 4011644:	e0f7c104 	addi	r3,fp,-8444
 4011648:	1885883a 	add	r2,r3,r2
 401164c:	10879d04 	addi	r2,r2,7796
 4011650:	10800017 	ldw	r2,0(r2)
 4011654:	10bffbd8 	cmpnei	r2,r2,-17
 4011658:	1000221e 	bne	r2,zero,40116e4 <main+0x11110>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 401165c:	e0b7c217 	ldw	r2,-8440(fp)
 4011660:	10c00084 	addi	r3,r2,2
 4011664:	e0b95e04 	addi	r2,fp,-6792
 4011668:	180f883a 	mov	r7,r3
 401166c:	e1b7c117 	ldw	r6,-8444(fp)
 4011670:	01403fc4 	movi	r5,255
 4011674:	1009883a 	mov	r4,r2
 4011678:	40003c80 	call	40003c8 <draw>
					draw(seven, COLOR08_BLACK, x,y+2 );
 401167c:	e0b7c217 	ldw	r2,-8440(fp)
 4011680:	10800084 	addi	r2,r2,2
 4011684:	100f883a 	mov	r7,r2
 4011688:	e1b7c117 	ldw	r6,-8444(fp)
 401168c:	000b883a 	mov	r5,zero
 4011690:	010100f4 	movhi	r4,1027
 4011694:	213baa04 	addi	r4,r4,-4440
 4011698:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-17;
 401169c:	e0b7c217 	ldw	r2,-8440(fp)
 40116a0:	01400504 	movi	r5,20
 40116a4:	1009883a 	mov	r4,r2
 40116a8:	40191000 	call	4019100 <__mulsi3>
 40116ac:	1007883a 	mov	r3,r2
 40116b0:	e0b7c117 	ldw	r2,-8444(fp)
 40116b4:	1885883a 	add	r2,r3,r2
 40116b8:	1085883a 	add	r2,r2,r2
 40116bc:	1085883a 	add	r2,r2,r2
 40116c0:	e0f7c104 	addi	r3,fp,-8444
 40116c4:	1885883a 	add	r2,r3,r2
 40116c8:	10879d04 	addi	r2,r2,7796
 40116cc:	00fffbc4 	movi	r3,-17
 40116d0:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40116d4:	00c00044 	movi	r3,1
 40116d8:	008200b4 	movhi	r2,2050
 40116dc:	10841804 	addi	r2,r2,4192
 40116e0:	10c00035 	stwio	r3,0(r2)
				}
//////////////////////////////////////////////////////////////////
				//diagonal (\)7
				if ((gameboard [y][x]==gameboard [y+1][x+1] && gameboard[y+1][x+1]== gameboard[y+2][x+2]))//(\x\)
 40116e4:	e0b7c217 	ldw	r2,-8440(fp)
 40116e8:	01400504 	movi	r5,20
 40116ec:	1009883a 	mov	r4,r2
 40116f0:	40191000 	call	4019100 <__mulsi3>
 40116f4:	1007883a 	mov	r3,r2
 40116f8:	e0b7c117 	ldw	r2,-8444(fp)
 40116fc:	1885883a 	add	r2,r3,r2
 4011700:	1085883a 	add	r2,r2,r2
 4011704:	1085883a 	add	r2,r2,r2
 4011708:	e0f7c104 	addi	r3,fp,-8444
 401170c:	1885883a 	add	r2,r3,r2
 4011710:	10879d04 	addi	r2,r2,7796
 4011714:	14000017 	ldw	r16,0(r2)
 4011718:	e0b7c217 	ldw	r2,-8440(fp)
 401171c:	10c00044 	addi	r3,r2,1
 4011720:	e0b7c117 	ldw	r2,-8444(fp)
 4011724:	14400044 	addi	r17,r2,1
 4011728:	01400504 	movi	r5,20
 401172c:	1809883a 	mov	r4,r3
 4011730:	40191000 	call	4019100 <__mulsi3>
 4011734:	1445883a 	add	r2,r2,r17
 4011738:	1085883a 	add	r2,r2,r2
 401173c:	1085883a 	add	r2,r2,r2
 4011740:	e0f7c104 	addi	r3,fp,-8444
 4011744:	1885883a 	add	r2,r3,r2
 4011748:	10879d04 	addi	r2,r2,7796
 401174c:	10800017 	ldw	r2,0(r2)
 4011750:	80803f1e 	bne	r16,r2,4011850 <main+0x1127c>
 4011754:	e0b7c217 	ldw	r2,-8440(fp)
 4011758:	10c00044 	addi	r3,r2,1
 401175c:	e0b7c117 	ldw	r2,-8444(fp)
 4011760:	14000044 	addi	r16,r2,1
 4011764:	01400504 	movi	r5,20
 4011768:	1809883a 	mov	r4,r3
 401176c:	40191000 	call	4019100 <__mulsi3>
 4011770:	1405883a 	add	r2,r2,r16
 4011774:	1085883a 	add	r2,r2,r2
 4011778:	1085883a 	add	r2,r2,r2
 401177c:	e0f7c104 	addi	r3,fp,-8444
 4011780:	1885883a 	add	r2,r3,r2
 4011784:	10879d04 	addi	r2,r2,7796
 4011788:	14000017 	ldw	r16,0(r2)
 401178c:	e0b7c217 	ldw	r2,-8440(fp)
 4011790:	10c00084 	addi	r3,r2,2
 4011794:	e0b7c117 	ldw	r2,-8444(fp)
 4011798:	14400084 	addi	r17,r2,2
 401179c:	01400504 	movi	r5,20
 40117a0:	1809883a 	mov	r4,r3
 40117a4:	40191000 	call	4019100 <__mulsi3>
 40117a8:	1445883a 	add	r2,r2,r17
 40117ac:	1085883a 	add	r2,r2,r2
 40117b0:	1085883a 	add	r2,r2,r2
 40117b4:	e0f7c104 	addi	r3,fp,-8444
 40117b8:	1885883a 	add	r2,r3,r2
 40117bc:	10879d04 	addi	r2,r2,7796
 40117c0:	10800017 	ldw	r2,0(r2)
 40117c4:	8080221e 	bne	r16,r2,4011850 <main+0x1127c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 40117c8:	e0b7c217 	ldw	r2,-8440(fp)
 40117cc:	10c00084 	addi	r3,r2,2
 40117d0:	e0b95e04 	addi	r2,fp,-6792
 40117d4:	180f883a 	mov	r7,r3
 40117d8:	e1b7c117 	ldw	r6,-8444(fp)
 40117dc:	01403fc4 	movi	r5,255
 40117e0:	1009883a 	mov	r4,r2
 40117e4:	40003c80 	call	40003c8 <draw>
					draw(seven, COLOR08_BLACK, x,y+2 );
 40117e8:	e0b7c217 	ldw	r2,-8440(fp)
 40117ec:	10800084 	addi	r2,r2,2
 40117f0:	100f883a 	mov	r7,r2
 40117f4:	e1b7c117 	ldw	r6,-8444(fp)
 40117f8:	000b883a 	mov	r5,zero
 40117fc:	010100f4 	movhi	r4,1027
 4011800:	213baa04 	addi	r4,r4,-4440
 4011804:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-17;
 4011808:	e0b7c217 	ldw	r2,-8440(fp)
 401180c:	01400504 	movi	r5,20
 4011810:	1009883a 	mov	r4,r2
 4011814:	40191000 	call	4019100 <__mulsi3>
 4011818:	1007883a 	mov	r3,r2
 401181c:	e0b7c117 	ldw	r2,-8444(fp)
 4011820:	1885883a 	add	r2,r3,r2
 4011824:	1085883a 	add	r2,r2,r2
 4011828:	1085883a 	add	r2,r2,r2
 401182c:	e0f7c104 	addi	r3,fp,-8444
 4011830:	1885883a 	add	r2,r3,r2
 4011834:	10879d04 	addi	r2,r2,7796
 4011838:	00fffbc4 	movi	r3,-17
 401183c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4011840:	00c00044 	movi	r3,1
 4011844:	008200b4 	movhi	r2,2050
 4011848:	10841804 	addi	r2,r2,4192
 401184c:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard [y][x]==gameboard [y+1][x+1] && gameboard[y][x]== gameboard[y+2][x+2]) )//(x\\)
 4011850:	e0b7c217 	ldw	r2,-8440(fp)
 4011854:	01400504 	movi	r5,20
 4011858:	1009883a 	mov	r4,r2
 401185c:	40191000 	call	4019100 <__mulsi3>
 4011860:	1007883a 	mov	r3,r2
 4011864:	e0b7c117 	ldw	r2,-8444(fp)
 4011868:	1885883a 	add	r2,r3,r2
 401186c:	1085883a 	add	r2,r2,r2
 4011870:	1085883a 	add	r2,r2,r2
 4011874:	e0f7c104 	addi	r3,fp,-8444
 4011878:	1885883a 	add	r2,r3,r2
 401187c:	10879d04 	addi	r2,r2,7796
 4011880:	14000017 	ldw	r16,0(r2)
 4011884:	e0b7c217 	ldw	r2,-8440(fp)
 4011888:	10c00044 	addi	r3,r2,1
 401188c:	e0b7c117 	ldw	r2,-8444(fp)
 4011890:	14400044 	addi	r17,r2,1
 4011894:	01400504 	movi	r5,20
 4011898:	1809883a 	mov	r4,r3
 401189c:	40191000 	call	4019100 <__mulsi3>
 40118a0:	1445883a 	add	r2,r2,r17
 40118a4:	1085883a 	add	r2,r2,r2
 40118a8:	1085883a 	add	r2,r2,r2
 40118ac:	e0f7c104 	addi	r3,fp,-8444
 40118b0:	1885883a 	add	r2,r3,r2
 40118b4:	10879d04 	addi	r2,r2,7796
 40118b8:	10800017 	ldw	r2,0(r2)
 40118bc:	80803e1e 	bne	r16,r2,40119b8 <main+0x113e4>
 40118c0:	e0b7c217 	ldw	r2,-8440(fp)
 40118c4:	01400504 	movi	r5,20
 40118c8:	1009883a 	mov	r4,r2
 40118cc:	40191000 	call	4019100 <__mulsi3>
 40118d0:	1007883a 	mov	r3,r2
 40118d4:	e0b7c117 	ldw	r2,-8444(fp)
 40118d8:	1885883a 	add	r2,r3,r2
 40118dc:	1085883a 	add	r2,r2,r2
 40118e0:	1085883a 	add	r2,r2,r2
 40118e4:	e0f7c104 	addi	r3,fp,-8444
 40118e8:	1885883a 	add	r2,r3,r2
 40118ec:	10879d04 	addi	r2,r2,7796
 40118f0:	14000017 	ldw	r16,0(r2)
 40118f4:	e0b7c217 	ldw	r2,-8440(fp)
 40118f8:	10c00084 	addi	r3,r2,2
 40118fc:	e0b7c117 	ldw	r2,-8444(fp)
 4011900:	14400084 	addi	r17,r2,2
 4011904:	01400504 	movi	r5,20
 4011908:	1809883a 	mov	r4,r3
 401190c:	40191000 	call	4019100 <__mulsi3>
 4011910:	1445883a 	add	r2,r2,r17
 4011914:	1085883a 	add	r2,r2,r2
 4011918:	1085883a 	add	r2,r2,r2
 401191c:	e0f7c104 	addi	r3,fp,-8444
 4011920:	1885883a 	add	r2,r3,r2
 4011924:	10879d04 	addi	r2,r2,7796
 4011928:	10800017 	ldw	r2,0(r2)
 401192c:	8080221e 	bne	r16,r2,40119b8 <main+0x113e4>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4011930:	e0b7c217 	ldw	r2,-8440(fp)
 4011934:	10c00084 	addi	r3,r2,2
 4011938:	e0b95e04 	addi	r2,fp,-6792
 401193c:	180f883a 	mov	r7,r3
 4011940:	e1b7c117 	ldw	r6,-8444(fp)
 4011944:	01403fc4 	movi	r5,255
 4011948:	1009883a 	mov	r4,r2
 401194c:	40003c80 	call	40003c8 <draw>
					draw(seven, COLOR08_BLACK, x,y+2 );
 4011950:	e0b7c217 	ldw	r2,-8440(fp)
 4011954:	10800084 	addi	r2,r2,2
 4011958:	100f883a 	mov	r7,r2
 401195c:	e1b7c117 	ldw	r6,-8444(fp)
 4011960:	000b883a 	mov	r5,zero
 4011964:	010100f4 	movhi	r4,1027
 4011968:	213baa04 	addi	r4,r4,-4440
 401196c:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-17;
 4011970:	e0b7c217 	ldw	r2,-8440(fp)
 4011974:	01400504 	movi	r5,20
 4011978:	1009883a 	mov	r4,r2
 401197c:	40191000 	call	4019100 <__mulsi3>
 4011980:	1007883a 	mov	r3,r2
 4011984:	e0b7c117 	ldw	r2,-8444(fp)
 4011988:	1885883a 	add	r2,r3,r2
 401198c:	1085883a 	add	r2,r2,r2
 4011990:	1085883a 	add	r2,r2,r2
 4011994:	e0f7c104 	addi	r3,fp,-8444
 4011998:	1885883a 	add	r2,r3,r2
 401199c:	10879d04 	addi	r2,r2,7796
 40119a0:	00fffbc4 	movi	r3,-17
 40119a4:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40119a8:	00c00044 	movi	r3,1
 40119ac:	008200b4 	movhi	r2,2050
 40119b0:	10841804 	addi	r2,r2,4192
 40119b4:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard [y][x]==gameboard [y-1][x-1] && gameboard[y][x]== gameboard[y-2][x-2]) )//(\\x)
 40119b8:	e0b7c217 	ldw	r2,-8440(fp)
 40119bc:	01400504 	movi	r5,20
 40119c0:	1009883a 	mov	r4,r2
 40119c4:	40191000 	call	4019100 <__mulsi3>
 40119c8:	1007883a 	mov	r3,r2
 40119cc:	e0b7c117 	ldw	r2,-8444(fp)
 40119d0:	1885883a 	add	r2,r3,r2
 40119d4:	1085883a 	add	r2,r2,r2
 40119d8:	1085883a 	add	r2,r2,r2
 40119dc:	e0f7c104 	addi	r3,fp,-8444
 40119e0:	1885883a 	add	r2,r3,r2
 40119e4:	10879d04 	addi	r2,r2,7796
 40119e8:	14000017 	ldw	r16,0(r2)
 40119ec:	e0b7c217 	ldw	r2,-8440(fp)
 40119f0:	10ffffc4 	addi	r3,r2,-1
 40119f4:	e0b7c117 	ldw	r2,-8444(fp)
 40119f8:	147fffc4 	addi	r17,r2,-1
 40119fc:	01400504 	movi	r5,20
 4011a00:	1809883a 	mov	r4,r3
 4011a04:	40191000 	call	4019100 <__mulsi3>
 4011a08:	1445883a 	add	r2,r2,r17
 4011a0c:	1085883a 	add	r2,r2,r2
 4011a10:	1085883a 	add	r2,r2,r2
 4011a14:	e0f7c104 	addi	r3,fp,-8444
 4011a18:	1885883a 	add	r2,r3,r2
 4011a1c:	10879d04 	addi	r2,r2,7796
 4011a20:	10800017 	ldw	r2,0(r2)
 4011a24:	80803e1e 	bne	r16,r2,4011b20 <main+0x1154c>
 4011a28:	e0b7c217 	ldw	r2,-8440(fp)
 4011a2c:	01400504 	movi	r5,20
 4011a30:	1009883a 	mov	r4,r2
 4011a34:	40191000 	call	4019100 <__mulsi3>
 4011a38:	1007883a 	mov	r3,r2
 4011a3c:	e0b7c117 	ldw	r2,-8444(fp)
 4011a40:	1885883a 	add	r2,r3,r2
 4011a44:	1085883a 	add	r2,r2,r2
 4011a48:	1085883a 	add	r2,r2,r2
 4011a4c:	e0f7c104 	addi	r3,fp,-8444
 4011a50:	1885883a 	add	r2,r3,r2
 4011a54:	10879d04 	addi	r2,r2,7796
 4011a58:	14000017 	ldw	r16,0(r2)
 4011a5c:	e0b7c217 	ldw	r2,-8440(fp)
 4011a60:	10ffff84 	addi	r3,r2,-2
 4011a64:	e0b7c117 	ldw	r2,-8444(fp)
 4011a68:	147fff84 	addi	r17,r2,-2
 4011a6c:	01400504 	movi	r5,20
 4011a70:	1809883a 	mov	r4,r3
 4011a74:	40191000 	call	4019100 <__mulsi3>
 4011a78:	1445883a 	add	r2,r2,r17
 4011a7c:	1085883a 	add	r2,r2,r2
 4011a80:	1085883a 	add	r2,r2,r2
 4011a84:	e0f7c104 	addi	r3,fp,-8444
 4011a88:	1885883a 	add	r2,r3,r2
 4011a8c:	10879d04 	addi	r2,r2,7796
 4011a90:	10800017 	ldw	r2,0(r2)
 4011a94:	8080221e 	bne	r16,r2,4011b20 <main+0x1154c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4011a98:	e0b7c217 	ldw	r2,-8440(fp)
 4011a9c:	10c00084 	addi	r3,r2,2
 4011aa0:	e0b95e04 	addi	r2,fp,-6792
 4011aa4:	180f883a 	mov	r7,r3
 4011aa8:	e1b7c117 	ldw	r6,-8444(fp)
 4011aac:	01403fc4 	movi	r5,255
 4011ab0:	1009883a 	mov	r4,r2
 4011ab4:	40003c80 	call	40003c8 <draw>
					draw(seven, COLOR08_BLACK, x,y+2 );
 4011ab8:	e0b7c217 	ldw	r2,-8440(fp)
 4011abc:	10800084 	addi	r2,r2,2
 4011ac0:	100f883a 	mov	r7,r2
 4011ac4:	e1b7c117 	ldw	r6,-8444(fp)
 4011ac8:	000b883a 	mov	r5,zero
 4011acc:	010100f4 	movhi	r4,1027
 4011ad0:	213baa04 	addi	r4,r4,-4440
 4011ad4:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-17;
 4011ad8:	e0b7c217 	ldw	r2,-8440(fp)
 4011adc:	01400504 	movi	r5,20
 4011ae0:	1009883a 	mov	r4,r2
 4011ae4:	40191000 	call	4019100 <__mulsi3>
 4011ae8:	1007883a 	mov	r3,r2
 4011aec:	e0b7c117 	ldw	r2,-8444(fp)
 4011af0:	1885883a 	add	r2,r3,r2
 4011af4:	1085883a 	add	r2,r2,r2
 4011af8:	1085883a 	add	r2,r2,r2
 4011afc:	e0f7c104 	addi	r3,fp,-8444
 4011b00:	1885883a 	add	r2,r3,r2
 4011b04:	10879d04 	addi	r2,r2,7796
 4011b08:	00fffbc4 	movi	r3,-17
 4011b0c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4011b10:	00c00044 	movi	r3,1
 4011b14:	008200b4 	movhi	r2,2050
 4011b18:	10841804 	addi	r2,r2,4192
 4011b1c:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard[y][x]==7 && gameboard[y+1][x+1]==-17) || (gameboard[y][x]==7 && gameboard[y-1][x-1]==-17))//(\\x)
 4011b20:	e0b7c217 	ldw	r2,-8440(fp)
 4011b24:	01400504 	movi	r5,20
 4011b28:	1009883a 	mov	r4,r2
 4011b2c:	40191000 	call	4019100 <__mulsi3>
 4011b30:	1007883a 	mov	r3,r2
 4011b34:	e0b7c117 	ldw	r2,-8444(fp)
 4011b38:	1885883a 	add	r2,r3,r2
 4011b3c:	1085883a 	add	r2,r2,r2
 4011b40:	1085883a 	add	r2,r2,r2
 4011b44:	e0f7c104 	addi	r3,fp,-8444
 4011b48:	1885883a 	add	r2,r3,r2
 4011b4c:	10879d04 	addi	r2,r2,7796
 4011b50:	10800017 	ldw	r2,0(r2)
 4011b54:	108001d8 	cmpnei	r2,r2,7
 4011b58:	1000101e 	bne	r2,zero,4011b9c <main+0x115c8>
 4011b5c:	e0b7c217 	ldw	r2,-8440(fp)
 4011b60:	10c00044 	addi	r3,r2,1
 4011b64:	e0b7c117 	ldw	r2,-8444(fp)
 4011b68:	14000044 	addi	r16,r2,1
 4011b6c:	01400504 	movi	r5,20
 4011b70:	1809883a 	mov	r4,r3
 4011b74:	40191000 	call	4019100 <__mulsi3>
 4011b78:	1405883a 	add	r2,r2,r16
 4011b7c:	1085883a 	add	r2,r2,r2
 4011b80:	1085883a 	add	r2,r2,r2
 4011b84:	e0f7c104 	addi	r3,fp,-8444
 4011b88:	1885883a 	add	r2,r3,r2
 4011b8c:	10879d04 	addi	r2,r2,7796
 4011b90:	10800017 	ldw	r2,0(r2)
 4011b94:	10bffbe0 	cmpeqi	r2,r2,-17
 4011b98:	10001f1e 	bne	r2,zero,4011c18 <main+0x11644>
 4011b9c:	e0b7c217 	ldw	r2,-8440(fp)
 4011ba0:	01400504 	movi	r5,20
 4011ba4:	1009883a 	mov	r4,r2
 4011ba8:	40191000 	call	4019100 <__mulsi3>
 4011bac:	1007883a 	mov	r3,r2
 4011bb0:	e0b7c117 	ldw	r2,-8444(fp)
 4011bb4:	1885883a 	add	r2,r3,r2
 4011bb8:	1085883a 	add	r2,r2,r2
 4011bbc:	1085883a 	add	r2,r2,r2
 4011bc0:	e0f7c104 	addi	r3,fp,-8444
 4011bc4:	1885883a 	add	r2,r3,r2
 4011bc8:	10879d04 	addi	r2,r2,7796
 4011bcc:	10800017 	ldw	r2,0(r2)
 4011bd0:	108001d8 	cmpnei	r2,r2,7
 4011bd4:	1000321e 	bne	r2,zero,4011ca0 <main+0x116cc>
 4011bd8:	e0b7c217 	ldw	r2,-8440(fp)
 4011bdc:	10ffffc4 	addi	r3,r2,-1
 4011be0:	e0b7c117 	ldw	r2,-8444(fp)
 4011be4:	143fffc4 	addi	r16,r2,-1
 4011be8:	01400504 	movi	r5,20
 4011bec:	1809883a 	mov	r4,r3
 4011bf0:	40191000 	call	4019100 <__mulsi3>
 4011bf4:	1405883a 	add	r2,r2,r16
 4011bf8:	1085883a 	add	r2,r2,r2
 4011bfc:	1085883a 	add	r2,r2,r2
 4011c00:	e0f7c104 	addi	r3,fp,-8444
 4011c04:	1885883a 	add	r2,r3,r2
 4011c08:	10879d04 	addi	r2,r2,7796
 4011c0c:	10800017 	ldw	r2,0(r2)
 4011c10:	10bffbd8 	cmpnei	r2,r2,-17
 4011c14:	1000221e 	bne	r2,zero,4011ca0 <main+0x116cc>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4011c18:	e0b7c217 	ldw	r2,-8440(fp)
 4011c1c:	10c00084 	addi	r3,r2,2
 4011c20:	e0b95e04 	addi	r2,fp,-6792
 4011c24:	180f883a 	mov	r7,r3
 4011c28:	e1b7c117 	ldw	r6,-8444(fp)
 4011c2c:	01403fc4 	movi	r5,255
 4011c30:	1009883a 	mov	r4,r2
 4011c34:	40003c80 	call	40003c8 <draw>
					draw(seven, COLOR08_BLACK, x,y+2 );
 4011c38:	e0b7c217 	ldw	r2,-8440(fp)
 4011c3c:	10800084 	addi	r2,r2,2
 4011c40:	100f883a 	mov	r7,r2
 4011c44:	e1b7c117 	ldw	r6,-8444(fp)
 4011c48:	000b883a 	mov	r5,zero
 4011c4c:	010100f4 	movhi	r4,1027
 4011c50:	213baa04 	addi	r4,r4,-4440
 4011c54:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-17;
 4011c58:	e0b7c217 	ldw	r2,-8440(fp)
 4011c5c:	01400504 	movi	r5,20
 4011c60:	1009883a 	mov	r4,r2
 4011c64:	40191000 	call	4019100 <__mulsi3>
 4011c68:	1007883a 	mov	r3,r2
 4011c6c:	e0b7c117 	ldw	r2,-8444(fp)
 4011c70:	1885883a 	add	r2,r3,r2
 4011c74:	1085883a 	add	r2,r2,r2
 4011c78:	1085883a 	add	r2,r2,r2
 4011c7c:	e0f7c104 	addi	r3,fp,-8444
 4011c80:	1885883a 	add	r2,r3,r2
 4011c84:	10879d04 	addi	r2,r2,7796
 4011c88:	00fffbc4 	movi	r3,-17
 4011c8c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4011c90:	00c00044 	movi	r3,1
 4011c94:	008200b4 	movhi	r2,2050
 4011c98:	10841804 	addi	r2,r2,4192
 4011c9c:	10c00035 	stwio	r3,0(r2)
				}
				//////////////////////////////////////////////////////////
				//diagonal (/)7
				if (gameboard [y][x]==gameboard [y+1][x-1] && gameboard[y][x]== gameboard[y-1][x+1])//(/x/)
 4011ca0:	e0b7c217 	ldw	r2,-8440(fp)
 4011ca4:	01400504 	movi	r5,20
 4011ca8:	1009883a 	mov	r4,r2
 4011cac:	40191000 	call	4019100 <__mulsi3>
 4011cb0:	1007883a 	mov	r3,r2
 4011cb4:	e0b7c117 	ldw	r2,-8444(fp)
 4011cb8:	1885883a 	add	r2,r3,r2
 4011cbc:	1085883a 	add	r2,r2,r2
 4011cc0:	1085883a 	add	r2,r2,r2
 4011cc4:	e0f7c104 	addi	r3,fp,-8444
 4011cc8:	1885883a 	add	r2,r3,r2
 4011ccc:	10879d04 	addi	r2,r2,7796
 4011cd0:	14000017 	ldw	r16,0(r2)
 4011cd4:	e0b7c217 	ldw	r2,-8440(fp)
 4011cd8:	10c00044 	addi	r3,r2,1
 4011cdc:	e0b7c117 	ldw	r2,-8444(fp)
 4011ce0:	147fffc4 	addi	r17,r2,-1
 4011ce4:	01400504 	movi	r5,20
 4011ce8:	1809883a 	mov	r4,r3
 4011cec:	40191000 	call	4019100 <__mulsi3>
 4011cf0:	1445883a 	add	r2,r2,r17
 4011cf4:	1085883a 	add	r2,r2,r2
 4011cf8:	1085883a 	add	r2,r2,r2
 4011cfc:	e0f7c104 	addi	r3,fp,-8444
 4011d00:	1885883a 	add	r2,r3,r2
 4011d04:	10879d04 	addi	r2,r2,7796
 4011d08:	10800017 	ldw	r2,0(r2)
 4011d0c:	80803e1e 	bne	r16,r2,4011e08 <main+0x11834>
 4011d10:	e0b7c217 	ldw	r2,-8440(fp)
 4011d14:	01400504 	movi	r5,20
 4011d18:	1009883a 	mov	r4,r2
 4011d1c:	40191000 	call	4019100 <__mulsi3>
 4011d20:	1007883a 	mov	r3,r2
 4011d24:	e0b7c117 	ldw	r2,-8444(fp)
 4011d28:	1885883a 	add	r2,r3,r2
 4011d2c:	1085883a 	add	r2,r2,r2
 4011d30:	1085883a 	add	r2,r2,r2
 4011d34:	e0f7c104 	addi	r3,fp,-8444
 4011d38:	1885883a 	add	r2,r3,r2
 4011d3c:	10879d04 	addi	r2,r2,7796
 4011d40:	14000017 	ldw	r16,0(r2)
 4011d44:	e0b7c217 	ldw	r2,-8440(fp)
 4011d48:	10ffffc4 	addi	r3,r2,-1
 4011d4c:	e0b7c117 	ldw	r2,-8444(fp)
 4011d50:	14400044 	addi	r17,r2,1
 4011d54:	01400504 	movi	r5,20
 4011d58:	1809883a 	mov	r4,r3
 4011d5c:	40191000 	call	4019100 <__mulsi3>
 4011d60:	1445883a 	add	r2,r2,r17
 4011d64:	1085883a 	add	r2,r2,r2
 4011d68:	1085883a 	add	r2,r2,r2
 4011d6c:	e0f7c104 	addi	r3,fp,-8444
 4011d70:	1885883a 	add	r2,r3,r2
 4011d74:	10879d04 	addi	r2,r2,7796
 4011d78:	10800017 	ldw	r2,0(r2)
 4011d7c:	8080221e 	bne	r16,r2,4011e08 <main+0x11834>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4011d80:	e0b7c217 	ldw	r2,-8440(fp)
 4011d84:	10c00084 	addi	r3,r2,2
 4011d88:	e0b95e04 	addi	r2,fp,-6792
 4011d8c:	180f883a 	mov	r7,r3
 4011d90:	e1b7c117 	ldw	r6,-8444(fp)
 4011d94:	01403fc4 	movi	r5,255
 4011d98:	1009883a 	mov	r4,r2
 4011d9c:	40003c80 	call	40003c8 <draw>
					draw(seven, COLOR08_BLACK, x,y+2 );
 4011da0:	e0b7c217 	ldw	r2,-8440(fp)
 4011da4:	10800084 	addi	r2,r2,2
 4011da8:	100f883a 	mov	r7,r2
 4011dac:	e1b7c117 	ldw	r6,-8444(fp)
 4011db0:	000b883a 	mov	r5,zero
 4011db4:	010100f4 	movhi	r4,1027
 4011db8:	213baa04 	addi	r4,r4,-4440
 4011dbc:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-17;
 4011dc0:	e0b7c217 	ldw	r2,-8440(fp)
 4011dc4:	01400504 	movi	r5,20
 4011dc8:	1009883a 	mov	r4,r2
 4011dcc:	40191000 	call	4019100 <__mulsi3>
 4011dd0:	1007883a 	mov	r3,r2
 4011dd4:	e0b7c117 	ldw	r2,-8444(fp)
 4011dd8:	1885883a 	add	r2,r3,r2
 4011ddc:	1085883a 	add	r2,r2,r2
 4011de0:	1085883a 	add	r2,r2,r2
 4011de4:	e0f7c104 	addi	r3,fp,-8444
 4011de8:	1885883a 	add	r2,r3,r2
 4011dec:	10879d04 	addi	r2,r2,7796
 4011df0:	00fffbc4 	movi	r3,-17
 4011df4:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4011df8:	00c00044 	movi	r3,1
 4011dfc:	008200b4 	movhi	r2,2050
 4011e00:	10841804 	addi	r2,r2,4192
 4011e04:	10c00035 	stwio	r3,0(r2)

				}
				if (gameboard [y][x]==gameboard [y+1][x-1] && gameboard[y][x]== gameboard[y+2][x-2])//(x//)
 4011e08:	e0b7c217 	ldw	r2,-8440(fp)
 4011e0c:	01400504 	movi	r5,20
 4011e10:	1009883a 	mov	r4,r2
 4011e14:	40191000 	call	4019100 <__mulsi3>
 4011e18:	1007883a 	mov	r3,r2
 4011e1c:	e0b7c117 	ldw	r2,-8444(fp)
 4011e20:	1885883a 	add	r2,r3,r2
 4011e24:	1085883a 	add	r2,r2,r2
 4011e28:	1085883a 	add	r2,r2,r2
 4011e2c:	e0f7c104 	addi	r3,fp,-8444
 4011e30:	1885883a 	add	r2,r3,r2
 4011e34:	10879d04 	addi	r2,r2,7796
 4011e38:	14000017 	ldw	r16,0(r2)
 4011e3c:	e0b7c217 	ldw	r2,-8440(fp)
 4011e40:	10c00044 	addi	r3,r2,1
 4011e44:	e0b7c117 	ldw	r2,-8444(fp)
 4011e48:	147fffc4 	addi	r17,r2,-1
 4011e4c:	01400504 	movi	r5,20
 4011e50:	1809883a 	mov	r4,r3
 4011e54:	40191000 	call	4019100 <__mulsi3>
 4011e58:	1445883a 	add	r2,r2,r17
 4011e5c:	1085883a 	add	r2,r2,r2
 4011e60:	1085883a 	add	r2,r2,r2
 4011e64:	e0f7c104 	addi	r3,fp,-8444
 4011e68:	1885883a 	add	r2,r3,r2
 4011e6c:	10879d04 	addi	r2,r2,7796
 4011e70:	10800017 	ldw	r2,0(r2)
 4011e74:	80803e1e 	bne	r16,r2,4011f70 <main+0x1199c>
 4011e78:	e0b7c217 	ldw	r2,-8440(fp)
 4011e7c:	01400504 	movi	r5,20
 4011e80:	1009883a 	mov	r4,r2
 4011e84:	40191000 	call	4019100 <__mulsi3>
 4011e88:	1007883a 	mov	r3,r2
 4011e8c:	e0b7c117 	ldw	r2,-8444(fp)
 4011e90:	1885883a 	add	r2,r3,r2
 4011e94:	1085883a 	add	r2,r2,r2
 4011e98:	1085883a 	add	r2,r2,r2
 4011e9c:	e0f7c104 	addi	r3,fp,-8444
 4011ea0:	1885883a 	add	r2,r3,r2
 4011ea4:	10879d04 	addi	r2,r2,7796
 4011ea8:	14000017 	ldw	r16,0(r2)
 4011eac:	e0b7c217 	ldw	r2,-8440(fp)
 4011eb0:	10c00084 	addi	r3,r2,2
 4011eb4:	e0b7c117 	ldw	r2,-8444(fp)
 4011eb8:	147fff84 	addi	r17,r2,-2
 4011ebc:	01400504 	movi	r5,20
 4011ec0:	1809883a 	mov	r4,r3
 4011ec4:	40191000 	call	4019100 <__mulsi3>
 4011ec8:	1445883a 	add	r2,r2,r17
 4011ecc:	1085883a 	add	r2,r2,r2
 4011ed0:	1085883a 	add	r2,r2,r2
 4011ed4:	e0f7c104 	addi	r3,fp,-8444
 4011ed8:	1885883a 	add	r2,r3,r2
 4011edc:	10879d04 	addi	r2,r2,7796
 4011ee0:	10800017 	ldw	r2,0(r2)
 4011ee4:	8080221e 	bne	r16,r2,4011f70 <main+0x1199c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4011ee8:	e0b7c217 	ldw	r2,-8440(fp)
 4011eec:	10c00084 	addi	r3,r2,2
 4011ef0:	e0b95e04 	addi	r2,fp,-6792
 4011ef4:	180f883a 	mov	r7,r3
 4011ef8:	e1b7c117 	ldw	r6,-8444(fp)
 4011efc:	01403fc4 	movi	r5,255
 4011f00:	1009883a 	mov	r4,r2
 4011f04:	40003c80 	call	40003c8 <draw>
					draw(seven, COLOR08_BLACK, x,y+2 );
 4011f08:	e0b7c217 	ldw	r2,-8440(fp)
 4011f0c:	10800084 	addi	r2,r2,2
 4011f10:	100f883a 	mov	r7,r2
 4011f14:	e1b7c117 	ldw	r6,-8444(fp)
 4011f18:	000b883a 	mov	r5,zero
 4011f1c:	010100f4 	movhi	r4,1027
 4011f20:	213baa04 	addi	r4,r4,-4440
 4011f24:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-17;
 4011f28:	e0b7c217 	ldw	r2,-8440(fp)
 4011f2c:	01400504 	movi	r5,20
 4011f30:	1009883a 	mov	r4,r2
 4011f34:	40191000 	call	4019100 <__mulsi3>
 4011f38:	1007883a 	mov	r3,r2
 4011f3c:	e0b7c117 	ldw	r2,-8444(fp)
 4011f40:	1885883a 	add	r2,r3,r2
 4011f44:	1085883a 	add	r2,r2,r2
 4011f48:	1085883a 	add	r2,r2,r2
 4011f4c:	e0f7c104 	addi	r3,fp,-8444
 4011f50:	1885883a 	add	r2,r3,r2
 4011f54:	10879d04 	addi	r2,r2,7796
 4011f58:	00fffbc4 	movi	r3,-17
 4011f5c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4011f60:	00c00044 	movi	r3,1
 4011f64:	008200b4 	movhi	r2,2050
 4011f68:	10841804 	addi	r2,r2,4192
 4011f6c:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard [y][x]==7 && gameboard [y+1][x-1]==-17) || (gameboard [y][x]==7 && gameboard [y-1][x+1]==-17))//(x//)
 4011f70:	e0b7c217 	ldw	r2,-8440(fp)
 4011f74:	01400504 	movi	r5,20
 4011f78:	1009883a 	mov	r4,r2
 4011f7c:	40191000 	call	4019100 <__mulsi3>
 4011f80:	1007883a 	mov	r3,r2
 4011f84:	e0b7c117 	ldw	r2,-8444(fp)
 4011f88:	1885883a 	add	r2,r3,r2
 4011f8c:	1085883a 	add	r2,r2,r2
 4011f90:	1085883a 	add	r2,r2,r2
 4011f94:	e0f7c104 	addi	r3,fp,-8444
 4011f98:	1885883a 	add	r2,r3,r2
 4011f9c:	10879d04 	addi	r2,r2,7796
 4011fa0:	10800017 	ldw	r2,0(r2)
 4011fa4:	108001d8 	cmpnei	r2,r2,7
 4011fa8:	1000101e 	bne	r2,zero,4011fec <main+0x11a18>
 4011fac:	e0b7c217 	ldw	r2,-8440(fp)
 4011fb0:	10c00044 	addi	r3,r2,1
 4011fb4:	e0b7c117 	ldw	r2,-8444(fp)
 4011fb8:	143fffc4 	addi	r16,r2,-1
 4011fbc:	01400504 	movi	r5,20
 4011fc0:	1809883a 	mov	r4,r3
 4011fc4:	40191000 	call	4019100 <__mulsi3>
 4011fc8:	1405883a 	add	r2,r2,r16
 4011fcc:	1085883a 	add	r2,r2,r2
 4011fd0:	1085883a 	add	r2,r2,r2
 4011fd4:	e0f7c104 	addi	r3,fp,-8444
 4011fd8:	1885883a 	add	r2,r3,r2
 4011fdc:	10879d04 	addi	r2,r2,7796
 4011fe0:	10800017 	ldw	r2,0(r2)
 4011fe4:	10bffbe0 	cmpeqi	r2,r2,-17
 4011fe8:	10001f1e 	bne	r2,zero,4012068 <main+0x11a94>
 4011fec:	e0b7c217 	ldw	r2,-8440(fp)
 4011ff0:	01400504 	movi	r5,20
 4011ff4:	1009883a 	mov	r4,r2
 4011ff8:	40191000 	call	4019100 <__mulsi3>
 4011ffc:	1007883a 	mov	r3,r2
 4012000:	e0b7c117 	ldw	r2,-8444(fp)
 4012004:	1885883a 	add	r2,r3,r2
 4012008:	1085883a 	add	r2,r2,r2
 401200c:	1085883a 	add	r2,r2,r2
 4012010:	e0f7c104 	addi	r3,fp,-8444
 4012014:	1885883a 	add	r2,r3,r2
 4012018:	10879d04 	addi	r2,r2,7796
 401201c:	10800017 	ldw	r2,0(r2)
 4012020:	108001d8 	cmpnei	r2,r2,7
 4012024:	1000321e 	bne	r2,zero,40120f0 <main+0x11b1c>
 4012028:	e0b7c217 	ldw	r2,-8440(fp)
 401202c:	10ffffc4 	addi	r3,r2,-1
 4012030:	e0b7c117 	ldw	r2,-8444(fp)
 4012034:	14000044 	addi	r16,r2,1
 4012038:	01400504 	movi	r5,20
 401203c:	1809883a 	mov	r4,r3
 4012040:	40191000 	call	4019100 <__mulsi3>
 4012044:	1405883a 	add	r2,r2,r16
 4012048:	1085883a 	add	r2,r2,r2
 401204c:	1085883a 	add	r2,r2,r2
 4012050:	e0f7c104 	addi	r3,fp,-8444
 4012054:	1885883a 	add	r2,r3,r2
 4012058:	10879d04 	addi	r2,r2,7796
 401205c:	10800017 	ldw	r2,0(r2)
 4012060:	10bffbd8 	cmpnei	r2,r2,-17
 4012064:	1000221e 	bne	r2,zero,40120f0 <main+0x11b1c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4012068:	e0b7c217 	ldw	r2,-8440(fp)
 401206c:	10c00084 	addi	r3,r2,2
 4012070:	e0b95e04 	addi	r2,fp,-6792
 4012074:	180f883a 	mov	r7,r3
 4012078:	e1b7c117 	ldw	r6,-8444(fp)
 401207c:	01403fc4 	movi	r5,255
 4012080:	1009883a 	mov	r4,r2
 4012084:	40003c80 	call	40003c8 <draw>
					draw(seven, COLOR08_BLACK, x,y+2 );
 4012088:	e0b7c217 	ldw	r2,-8440(fp)
 401208c:	10800084 	addi	r2,r2,2
 4012090:	100f883a 	mov	r7,r2
 4012094:	e1b7c117 	ldw	r6,-8444(fp)
 4012098:	000b883a 	mov	r5,zero
 401209c:	010100f4 	movhi	r4,1027
 40120a0:	213baa04 	addi	r4,r4,-4440
 40120a4:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-17;
 40120a8:	e0b7c217 	ldw	r2,-8440(fp)
 40120ac:	01400504 	movi	r5,20
 40120b0:	1009883a 	mov	r4,r2
 40120b4:	40191000 	call	4019100 <__mulsi3>
 40120b8:	1007883a 	mov	r3,r2
 40120bc:	e0b7c117 	ldw	r2,-8444(fp)
 40120c0:	1885883a 	add	r2,r3,r2
 40120c4:	1085883a 	add	r2,r2,r2
 40120c8:	1085883a 	add	r2,r2,r2
 40120cc:	e0f7c104 	addi	r3,fp,-8444
 40120d0:	1885883a 	add	r2,r3,r2
 40120d4:	10879d04 	addi	r2,r2,7796
 40120d8:	00fffbc4 	movi	r3,-17
 40120dc:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40120e0:	00c00044 	movi	r3,1
 40120e4:	008200b4 	movhi	r2,2050
 40120e8:	10841804 	addi	r2,r2,4192
 40120ec:	10c00035 	stwio	r3,0(r2)
				}
			}
			if(gameboard[y][x]==8)//8
 40120f0:	e0b7c217 	ldw	r2,-8440(fp)
 40120f4:	01400504 	movi	r5,20
 40120f8:	1009883a 	mov	r4,r2
 40120fc:	40191000 	call	4019100 <__mulsi3>
 4012100:	1007883a 	mov	r3,r2
 4012104:	e0b7c117 	ldw	r2,-8444(fp)
 4012108:	1885883a 	add	r2,r3,r2
 401210c:	1085883a 	add	r2,r2,r2
 4012110:	1085883a 	add	r2,r2,r2
 4012114:	e0f7c104 	addi	r3,fp,-8444
 4012118:	1885883a 	add	r2,r3,r2
 401211c:	10879d04 	addi	r2,r2,7796
 4012120:	10800017 	ldw	r2,0(r2)
 4012124:	10800218 	cmpnei	r2,r2,8
 4012128:	1005511e 	bne	r2,zero,4013670 <main+0x1309c>
			{
				//horizontal8
				if ((gameboard [y][x]==gameboard [y][x+1] && gameboard [y][x+1]== gameboard [y][x+2]) || (gameboard[y][x]==8 && gameboard[y][x+1]==-18) )//(0,0,0)
 401212c:	e0b7c217 	ldw	r2,-8440(fp)
 4012130:	01400504 	movi	r5,20
 4012134:	1009883a 	mov	r4,r2
 4012138:	40191000 	call	4019100 <__mulsi3>
 401213c:	1007883a 	mov	r3,r2
 4012140:	e0b7c117 	ldw	r2,-8444(fp)
 4012144:	1885883a 	add	r2,r3,r2
 4012148:	1085883a 	add	r2,r2,r2
 401214c:	1085883a 	add	r2,r2,r2
 4012150:	e0f7c104 	addi	r3,fp,-8444
 4012154:	1885883a 	add	r2,r3,r2
 4012158:	10879d04 	addi	r2,r2,7796
 401215c:	14000017 	ldw	r16,0(r2)
 4012160:	e0b7c117 	ldw	r2,-8444(fp)
 4012164:	14400044 	addi	r17,r2,1
 4012168:	e0b7c217 	ldw	r2,-8440(fp)
 401216c:	01400504 	movi	r5,20
 4012170:	1009883a 	mov	r4,r2
 4012174:	40191000 	call	4019100 <__mulsi3>
 4012178:	1445883a 	add	r2,r2,r17
 401217c:	1085883a 	add	r2,r2,r2
 4012180:	1085883a 	add	r2,r2,r2
 4012184:	e0f7c104 	addi	r3,fp,-8444
 4012188:	1885883a 	add	r2,r3,r2
 401218c:	10879d04 	addi	r2,r2,7796
 4012190:	10800017 	ldw	r2,0(r2)
 4012194:	80801b1e 	bne	r16,r2,4012204 <main+0x11c30>
 4012198:	e0b7c117 	ldw	r2,-8444(fp)
 401219c:	14000044 	addi	r16,r2,1
 40121a0:	e0b7c217 	ldw	r2,-8440(fp)
 40121a4:	01400504 	movi	r5,20
 40121a8:	1009883a 	mov	r4,r2
 40121ac:	40191000 	call	4019100 <__mulsi3>
 40121b0:	1405883a 	add	r2,r2,r16
 40121b4:	1085883a 	add	r2,r2,r2
 40121b8:	1085883a 	add	r2,r2,r2
 40121bc:	e0f7c104 	addi	r3,fp,-8444
 40121c0:	1885883a 	add	r2,r3,r2
 40121c4:	10879d04 	addi	r2,r2,7796
 40121c8:	14000017 	ldw	r16,0(r2)
 40121cc:	e0b7c117 	ldw	r2,-8444(fp)
 40121d0:	14400084 	addi	r17,r2,2
 40121d4:	e0b7c217 	ldw	r2,-8440(fp)
 40121d8:	01400504 	movi	r5,20
 40121dc:	1009883a 	mov	r4,r2
 40121e0:	40191000 	call	4019100 <__mulsi3>
 40121e4:	1445883a 	add	r2,r2,r17
 40121e8:	1085883a 	add	r2,r2,r2
 40121ec:	1085883a 	add	r2,r2,r2
 40121f0:	e0f7c104 	addi	r3,fp,-8444
 40121f4:	1885883a 	add	r2,r3,r2
 40121f8:	10879d04 	addi	r2,r2,7796
 40121fc:	10800017 	ldw	r2,0(r2)
 4012200:	80801e26 	beq	r16,r2,401227c <main+0x11ca8>
 4012204:	e0b7c217 	ldw	r2,-8440(fp)
 4012208:	01400504 	movi	r5,20
 401220c:	1009883a 	mov	r4,r2
 4012210:	40191000 	call	4019100 <__mulsi3>
 4012214:	1007883a 	mov	r3,r2
 4012218:	e0b7c117 	ldw	r2,-8444(fp)
 401221c:	1885883a 	add	r2,r3,r2
 4012220:	1085883a 	add	r2,r2,r2
 4012224:	1085883a 	add	r2,r2,r2
 4012228:	e0f7c104 	addi	r3,fp,-8444
 401222c:	1885883a 	add	r2,r3,r2
 4012230:	10879d04 	addi	r2,r2,7796
 4012234:	10800017 	ldw	r2,0(r2)
 4012238:	10800218 	cmpnei	r2,r2,8
 401223c:	1000311e 	bne	r2,zero,4012304 <main+0x11d30>
 4012240:	e0b7c117 	ldw	r2,-8444(fp)
 4012244:	14000044 	addi	r16,r2,1
 4012248:	e0b7c217 	ldw	r2,-8440(fp)
 401224c:	01400504 	movi	r5,20
 4012250:	1009883a 	mov	r4,r2
 4012254:	40191000 	call	4019100 <__mulsi3>
 4012258:	1405883a 	add	r2,r2,r16
 401225c:	1085883a 	add	r2,r2,r2
 4012260:	1085883a 	add	r2,r2,r2
 4012264:	e0f7c104 	addi	r3,fp,-8444
 4012268:	1885883a 	add	r2,r3,r2
 401226c:	10879d04 	addi	r2,r2,7796
 4012270:	10800017 	ldw	r2,0(r2)
 4012274:	10bffb98 	cmpnei	r2,r2,-18
 4012278:	1000221e 	bne	r2,zero,4012304 <main+0x11d30>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 401227c:	e0b7c217 	ldw	r2,-8440(fp)
 4012280:	10c00084 	addi	r3,r2,2
 4012284:	e0b95e04 	addi	r2,fp,-6792
 4012288:	180f883a 	mov	r7,r3
 401228c:	e1b7c117 	ldw	r6,-8444(fp)
 4012290:	01403fc4 	movi	r5,255
 4012294:	1009883a 	mov	r4,r2
 4012298:	40003c80 	call	40003c8 <draw>
					draw(eight, COLOR08_BLACK, x,y+2 );
 401229c:	e0b7c217 	ldw	r2,-8440(fp)
 40122a0:	10800084 	addi	r2,r2,2
 40122a4:	100f883a 	mov	r7,r2
 40122a8:	e1b7c117 	ldw	r6,-8444(fp)
 40122ac:	000b883a 	mov	r5,zero
 40122b0:	010100f4 	movhi	r4,1027
 40122b4:	213d2a04 	addi	r4,r4,-2904
 40122b8:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-18;
 40122bc:	e0b7c217 	ldw	r2,-8440(fp)
 40122c0:	01400504 	movi	r5,20
 40122c4:	1009883a 	mov	r4,r2
 40122c8:	40191000 	call	4019100 <__mulsi3>
 40122cc:	1007883a 	mov	r3,r2
 40122d0:	e0b7c117 	ldw	r2,-8444(fp)
 40122d4:	1885883a 	add	r2,r3,r2
 40122d8:	1085883a 	add	r2,r2,r2
 40122dc:	1085883a 	add	r2,r2,r2
 40122e0:	e0f7c104 	addi	r3,fp,-8444
 40122e4:	1885883a 	add	r2,r3,r2
 40122e8:	10879d04 	addi	r2,r2,7796
 40122ec:	00fffb84 	movi	r3,-18
 40122f0:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40122f4:	00c00044 	movi	r3,1
 40122f8:	008200b4 	movhi	r2,2050
 40122fc:	10841804 	addi	r2,r2,4192
 4012300:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard [y][x]==gameboard [y][x-1] && gameboard [y][x]== gameboard [y][x+1]) || (gameboard [y][x]==8 && gameboard [y][x-1]==-18) || (gameboard [y][x]==8 && gameboard [y][x+1]==-18))//(
 4012304:	e0b7c217 	ldw	r2,-8440(fp)
 4012308:	01400504 	movi	r5,20
 401230c:	1009883a 	mov	r4,r2
 4012310:	40191000 	call	4019100 <__mulsi3>
 4012314:	1007883a 	mov	r3,r2
 4012318:	e0b7c117 	ldw	r2,-8444(fp)
 401231c:	1885883a 	add	r2,r3,r2
 4012320:	1085883a 	add	r2,r2,r2
 4012324:	1085883a 	add	r2,r2,r2
 4012328:	e0f7c104 	addi	r3,fp,-8444
 401232c:	1885883a 	add	r2,r3,r2
 4012330:	10879d04 	addi	r2,r2,7796
 4012334:	14000017 	ldw	r16,0(r2)
 4012338:	e0b7c117 	ldw	r2,-8444(fp)
 401233c:	147fffc4 	addi	r17,r2,-1
 4012340:	e0b7c217 	ldw	r2,-8440(fp)
 4012344:	01400504 	movi	r5,20
 4012348:	1009883a 	mov	r4,r2
 401234c:	40191000 	call	4019100 <__mulsi3>
 4012350:	1445883a 	add	r2,r2,r17
 4012354:	1085883a 	add	r2,r2,r2
 4012358:	1085883a 	add	r2,r2,r2
 401235c:	e0f7c104 	addi	r3,fp,-8444
 4012360:	1885883a 	add	r2,r3,r2
 4012364:	10879d04 	addi	r2,r2,7796
 4012368:	10800017 	ldw	r2,0(r2)
 401236c:	80801b1e 	bne	r16,r2,40123dc <main+0x11e08>
 4012370:	e0b7c217 	ldw	r2,-8440(fp)
 4012374:	01400504 	movi	r5,20
 4012378:	1009883a 	mov	r4,r2
 401237c:	40191000 	call	4019100 <__mulsi3>
 4012380:	1007883a 	mov	r3,r2
 4012384:	e0b7c117 	ldw	r2,-8444(fp)
 4012388:	1885883a 	add	r2,r3,r2
 401238c:	1085883a 	add	r2,r2,r2
 4012390:	1085883a 	add	r2,r2,r2
 4012394:	e0f7c104 	addi	r3,fp,-8444
 4012398:	1885883a 	add	r2,r3,r2
 401239c:	10879d04 	addi	r2,r2,7796
 40123a0:	14000017 	ldw	r16,0(r2)
 40123a4:	e0b7c117 	ldw	r2,-8444(fp)
 40123a8:	14400044 	addi	r17,r2,1
 40123ac:	e0b7c217 	ldw	r2,-8440(fp)
 40123b0:	01400504 	movi	r5,20
 40123b4:	1009883a 	mov	r4,r2
 40123b8:	40191000 	call	4019100 <__mulsi3>
 40123bc:	1445883a 	add	r2,r2,r17
 40123c0:	1085883a 	add	r2,r2,r2
 40123c4:	1085883a 	add	r2,r2,r2
 40123c8:	e0f7c104 	addi	r3,fp,-8444
 40123cc:	1885883a 	add	r2,r3,r2
 40123d0:	10879d04 	addi	r2,r2,7796
 40123d4:	10800017 	ldw	r2,0(r2)
 40123d8:	80803c26 	beq	r16,r2,40124cc <main+0x11ef8>
 40123dc:	e0b7c217 	ldw	r2,-8440(fp)
 40123e0:	01400504 	movi	r5,20
 40123e4:	1009883a 	mov	r4,r2
 40123e8:	40191000 	call	4019100 <__mulsi3>
 40123ec:	1007883a 	mov	r3,r2
 40123f0:	e0b7c117 	ldw	r2,-8444(fp)
 40123f4:	1885883a 	add	r2,r3,r2
 40123f8:	1085883a 	add	r2,r2,r2
 40123fc:	1085883a 	add	r2,r2,r2
 4012400:	e0f7c104 	addi	r3,fp,-8444
 4012404:	1885883a 	add	r2,r3,r2
 4012408:	10879d04 	addi	r2,r2,7796
 401240c:	10800017 	ldw	r2,0(r2)
 4012410:	10800218 	cmpnei	r2,r2,8
 4012414:	10000f1e 	bne	r2,zero,4012454 <main+0x11e80>
 4012418:	e0b7c117 	ldw	r2,-8444(fp)
 401241c:	143fffc4 	addi	r16,r2,-1
 4012420:	e0b7c217 	ldw	r2,-8440(fp)
 4012424:	01400504 	movi	r5,20
 4012428:	1009883a 	mov	r4,r2
 401242c:	40191000 	call	4019100 <__mulsi3>
 4012430:	1405883a 	add	r2,r2,r16
 4012434:	1085883a 	add	r2,r2,r2
 4012438:	1085883a 	add	r2,r2,r2
 401243c:	e0f7c104 	addi	r3,fp,-8444
 4012440:	1885883a 	add	r2,r3,r2
 4012444:	10879d04 	addi	r2,r2,7796
 4012448:	10800017 	ldw	r2,0(r2)
 401244c:	10bffba0 	cmpeqi	r2,r2,-18
 4012450:	10001e1e 	bne	r2,zero,40124cc <main+0x11ef8>
 4012454:	e0b7c217 	ldw	r2,-8440(fp)
 4012458:	01400504 	movi	r5,20
 401245c:	1009883a 	mov	r4,r2
 4012460:	40191000 	call	4019100 <__mulsi3>
 4012464:	1007883a 	mov	r3,r2
 4012468:	e0b7c117 	ldw	r2,-8444(fp)
 401246c:	1885883a 	add	r2,r3,r2
 4012470:	1085883a 	add	r2,r2,r2
 4012474:	1085883a 	add	r2,r2,r2
 4012478:	e0f7c104 	addi	r3,fp,-8444
 401247c:	1885883a 	add	r2,r3,r2
 4012480:	10879d04 	addi	r2,r2,7796
 4012484:	10800017 	ldw	r2,0(r2)
 4012488:	10800218 	cmpnei	r2,r2,8
 401248c:	1000311e 	bne	r2,zero,4012554 <main+0x11f80>
 4012490:	e0b7c117 	ldw	r2,-8444(fp)
 4012494:	14000044 	addi	r16,r2,1
 4012498:	e0b7c217 	ldw	r2,-8440(fp)
 401249c:	01400504 	movi	r5,20
 40124a0:	1009883a 	mov	r4,r2
 40124a4:	40191000 	call	4019100 <__mulsi3>
 40124a8:	1405883a 	add	r2,r2,r16
 40124ac:	1085883a 	add	r2,r2,r2
 40124b0:	1085883a 	add	r2,r2,r2
 40124b4:	e0f7c104 	addi	r3,fp,-8444
 40124b8:	1885883a 	add	r2,r3,r2
 40124bc:	10879d04 	addi	r2,r2,7796
 40124c0:	10800017 	ldw	r2,0(r2)
 40124c4:	10bffb98 	cmpnei	r2,r2,-18
 40124c8:	1000221e 	bne	r2,zero,4012554 <main+0x11f80>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 40124cc:	e0b7c217 	ldw	r2,-8440(fp)
 40124d0:	10c00084 	addi	r3,r2,2
 40124d4:	e0b95e04 	addi	r2,fp,-6792
 40124d8:	180f883a 	mov	r7,r3
 40124dc:	e1b7c117 	ldw	r6,-8444(fp)
 40124e0:	01403fc4 	movi	r5,255
 40124e4:	1009883a 	mov	r4,r2
 40124e8:	40003c80 	call	40003c8 <draw>
					draw(eight, COLOR08_BLACK, x,y+2 );
 40124ec:	e0b7c217 	ldw	r2,-8440(fp)
 40124f0:	10800084 	addi	r2,r2,2
 40124f4:	100f883a 	mov	r7,r2
 40124f8:	e1b7c117 	ldw	r6,-8444(fp)
 40124fc:	000b883a 	mov	r5,zero
 4012500:	010100f4 	movhi	r4,1027
 4012504:	213d2a04 	addi	r4,r4,-2904
 4012508:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-18;
 401250c:	e0b7c217 	ldw	r2,-8440(fp)
 4012510:	01400504 	movi	r5,20
 4012514:	1009883a 	mov	r4,r2
 4012518:	40191000 	call	4019100 <__mulsi3>
 401251c:	1007883a 	mov	r3,r2
 4012520:	e0b7c117 	ldw	r2,-8444(fp)
 4012524:	1885883a 	add	r2,r3,r2
 4012528:	1085883a 	add	r2,r2,r2
 401252c:	1085883a 	add	r2,r2,r2
 4012530:	e0f7c104 	addi	r3,fp,-8444
 4012534:	1885883a 	add	r2,r3,r2
 4012538:	10879d04 	addi	r2,r2,7796
 401253c:	00fffb84 	movi	r3,-18
 4012540:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4012544:	00c00044 	movi	r3,1
 4012548:	008200b4 	movhi	r2,2050
 401254c:	10841804 	addi	r2,r2,4192
 4012550:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard [y][x]==gameboard [y][x-1] && gameboard [y][x]== gameboard [y][x-2]))//00x
 4012554:	e0b7c217 	ldw	r2,-8440(fp)
 4012558:	01400504 	movi	r5,20
 401255c:	1009883a 	mov	r4,r2
 4012560:	40191000 	call	4019100 <__mulsi3>
 4012564:	1007883a 	mov	r3,r2
 4012568:	e0b7c117 	ldw	r2,-8444(fp)
 401256c:	1885883a 	add	r2,r3,r2
 4012570:	1085883a 	add	r2,r2,r2
 4012574:	1085883a 	add	r2,r2,r2
 4012578:	e0f7c104 	addi	r3,fp,-8444
 401257c:	1885883a 	add	r2,r3,r2
 4012580:	10879d04 	addi	r2,r2,7796
 4012584:	14000017 	ldw	r16,0(r2)
 4012588:	e0b7c117 	ldw	r2,-8444(fp)
 401258c:	147fffc4 	addi	r17,r2,-1
 4012590:	e0b7c217 	ldw	r2,-8440(fp)
 4012594:	01400504 	movi	r5,20
 4012598:	1009883a 	mov	r4,r2
 401259c:	40191000 	call	4019100 <__mulsi3>
 40125a0:	1445883a 	add	r2,r2,r17
 40125a4:	1085883a 	add	r2,r2,r2
 40125a8:	1085883a 	add	r2,r2,r2
 40125ac:	e0f7c104 	addi	r3,fp,-8444
 40125b0:	1885883a 	add	r2,r3,r2
 40125b4:	10879d04 	addi	r2,r2,7796
 40125b8:	10800017 	ldw	r2,0(r2)
 40125bc:	80803d1e 	bne	r16,r2,40126b4 <main+0x120e0>
 40125c0:	e0b7c217 	ldw	r2,-8440(fp)
 40125c4:	01400504 	movi	r5,20
 40125c8:	1009883a 	mov	r4,r2
 40125cc:	40191000 	call	4019100 <__mulsi3>
 40125d0:	1007883a 	mov	r3,r2
 40125d4:	e0b7c117 	ldw	r2,-8444(fp)
 40125d8:	1885883a 	add	r2,r3,r2
 40125dc:	1085883a 	add	r2,r2,r2
 40125e0:	1085883a 	add	r2,r2,r2
 40125e4:	e0f7c104 	addi	r3,fp,-8444
 40125e8:	1885883a 	add	r2,r3,r2
 40125ec:	10879d04 	addi	r2,r2,7796
 40125f0:	14000017 	ldw	r16,0(r2)
 40125f4:	e0b7c117 	ldw	r2,-8444(fp)
 40125f8:	147fff84 	addi	r17,r2,-2
 40125fc:	e0b7c217 	ldw	r2,-8440(fp)
 4012600:	01400504 	movi	r5,20
 4012604:	1009883a 	mov	r4,r2
 4012608:	40191000 	call	4019100 <__mulsi3>
 401260c:	1445883a 	add	r2,r2,r17
 4012610:	1085883a 	add	r2,r2,r2
 4012614:	1085883a 	add	r2,r2,r2
 4012618:	e0f7c104 	addi	r3,fp,-8444
 401261c:	1885883a 	add	r2,r3,r2
 4012620:	10879d04 	addi	r2,r2,7796
 4012624:	10800017 	ldw	r2,0(r2)
 4012628:	8080221e 	bne	r16,r2,40126b4 <main+0x120e0>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 401262c:	e0b7c217 	ldw	r2,-8440(fp)
 4012630:	10c00084 	addi	r3,r2,2
 4012634:	e0b95e04 	addi	r2,fp,-6792
 4012638:	180f883a 	mov	r7,r3
 401263c:	e1b7c117 	ldw	r6,-8444(fp)
 4012640:	01403fc4 	movi	r5,255
 4012644:	1009883a 	mov	r4,r2
 4012648:	40003c80 	call	40003c8 <draw>
					draw(eight, COLOR08_BLACK, x,y+2 );
 401264c:	e0b7c217 	ldw	r2,-8440(fp)
 4012650:	10800084 	addi	r2,r2,2
 4012654:	100f883a 	mov	r7,r2
 4012658:	e1b7c117 	ldw	r6,-8444(fp)
 401265c:	000b883a 	mov	r5,zero
 4012660:	010100f4 	movhi	r4,1027
 4012664:	213d2a04 	addi	r4,r4,-2904
 4012668:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-18;
 401266c:	e0b7c217 	ldw	r2,-8440(fp)
 4012670:	01400504 	movi	r5,20
 4012674:	1009883a 	mov	r4,r2
 4012678:	40191000 	call	4019100 <__mulsi3>
 401267c:	1007883a 	mov	r3,r2
 4012680:	e0b7c117 	ldw	r2,-8444(fp)
 4012684:	1885883a 	add	r2,r3,r2
 4012688:	1085883a 	add	r2,r2,r2
 401268c:	1085883a 	add	r2,r2,r2
 4012690:	e0f7c104 	addi	r3,fp,-8444
 4012694:	1885883a 	add	r2,r3,r2
 4012698:	10879d04 	addi	r2,r2,7796
 401269c:	00fffb84 	movi	r3,-18
 40126a0:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40126a4:	00c00044 	movi	r3,1
 40126a8:	008200b4 	movhi	r2,2050
 40126ac:	10841804 	addi	r2,r2,4192
 40126b0:	10c00035 	stwio	r3,0(r2)
				}
				/////////////////////////////////
				//vertical8
				if ((gameboard [y][x]==gameboard [y+1][x] && gameboard [y+1][x]== gameboard [y+2][x]) || (gameboard [y][x]==8 && gameboard [y+1][x]==-18))//xmb
 40126b4:	e0b7c217 	ldw	r2,-8440(fp)
 40126b8:	01400504 	movi	r5,20
 40126bc:	1009883a 	mov	r4,r2
 40126c0:	40191000 	call	4019100 <__mulsi3>
 40126c4:	1007883a 	mov	r3,r2
 40126c8:	e0b7c117 	ldw	r2,-8444(fp)
 40126cc:	1885883a 	add	r2,r3,r2
 40126d0:	1085883a 	add	r2,r2,r2
 40126d4:	1085883a 	add	r2,r2,r2
 40126d8:	e0f7c104 	addi	r3,fp,-8444
 40126dc:	1885883a 	add	r2,r3,r2
 40126e0:	10879d04 	addi	r2,r2,7796
 40126e4:	14000017 	ldw	r16,0(r2)
 40126e8:	e0b7c217 	ldw	r2,-8440(fp)
 40126ec:	10800044 	addi	r2,r2,1
 40126f0:	01400504 	movi	r5,20
 40126f4:	1009883a 	mov	r4,r2
 40126f8:	40191000 	call	4019100 <__mulsi3>
 40126fc:	1007883a 	mov	r3,r2
 4012700:	e0b7c117 	ldw	r2,-8444(fp)
 4012704:	1885883a 	add	r2,r3,r2
 4012708:	1085883a 	add	r2,r2,r2
 401270c:	1085883a 	add	r2,r2,r2
 4012710:	e0f7c104 	addi	r3,fp,-8444
 4012714:	1885883a 	add	r2,r3,r2
 4012718:	10879d04 	addi	r2,r2,7796
 401271c:	10800017 	ldw	r2,0(r2)
 4012720:	80801d1e 	bne	r16,r2,4012798 <main+0x121c4>
 4012724:	e0b7c217 	ldw	r2,-8440(fp)
 4012728:	10800044 	addi	r2,r2,1
 401272c:	01400504 	movi	r5,20
 4012730:	1009883a 	mov	r4,r2
 4012734:	40191000 	call	4019100 <__mulsi3>
 4012738:	1007883a 	mov	r3,r2
 401273c:	e0b7c117 	ldw	r2,-8444(fp)
 4012740:	1885883a 	add	r2,r3,r2
 4012744:	1085883a 	add	r2,r2,r2
 4012748:	1085883a 	add	r2,r2,r2
 401274c:	e0f7c104 	addi	r3,fp,-8444
 4012750:	1885883a 	add	r2,r3,r2
 4012754:	10879d04 	addi	r2,r2,7796
 4012758:	14000017 	ldw	r16,0(r2)
 401275c:	e0b7c217 	ldw	r2,-8440(fp)
 4012760:	10800084 	addi	r2,r2,2
 4012764:	01400504 	movi	r5,20
 4012768:	1009883a 	mov	r4,r2
 401276c:	40191000 	call	4019100 <__mulsi3>
 4012770:	1007883a 	mov	r3,r2
 4012774:	e0b7c117 	ldw	r2,-8444(fp)
 4012778:	1885883a 	add	r2,r3,r2
 401277c:	1085883a 	add	r2,r2,r2
 4012780:	1085883a 	add	r2,r2,r2
 4012784:	e0f7c104 	addi	r3,fp,-8444
 4012788:	1885883a 	add	r2,r3,r2
 401278c:	10879d04 	addi	r2,r2,7796
 4012790:	10800017 	ldw	r2,0(r2)
 4012794:	80801f26 	beq	r16,r2,4012814 <main+0x12240>
 4012798:	e0b7c217 	ldw	r2,-8440(fp)
 401279c:	01400504 	movi	r5,20
 40127a0:	1009883a 	mov	r4,r2
 40127a4:	40191000 	call	4019100 <__mulsi3>
 40127a8:	1007883a 	mov	r3,r2
 40127ac:	e0b7c117 	ldw	r2,-8444(fp)
 40127b0:	1885883a 	add	r2,r3,r2
 40127b4:	1085883a 	add	r2,r2,r2
 40127b8:	1085883a 	add	r2,r2,r2
 40127bc:	e0f7c104 	addi	r3,fp,-8444
 40127c0:	1885883a 	add	r2,r3,r2
 40127c4:	10879d04 	addi	r2,r2,7796
 40127c8:	10800017 	ldw	r2,0(r2)
 40127cc:	10800218 	cmpnei	r2,r2,8
 40127d0:	1000321e 	bne	r2,zero,401289c <main+0x122c8>
 40127d4:	e0b7c217 	ldw	r2,-8440(fp)
 40127d8:	10800044 	addi	r2,r2,1
 40127dc:	01400504 	movi	r5,20
 40127e0:	1009883a 	mov	r4,r2
 40127e4:	40191000 	call	4019100 <__mulsi3>
 40127e8:	1007883a 	mov	r3,r2
 40127ec:	e0b7c117 	ldw	r2,-8444(fp)
 40127f0:	1885883a 	add	r2,r3,r2
 40127f4:	1085883a 	add	r2,r2,r2
 40127f8:	1085883a 	add	r2,r2,r2
 40127fc:	e0f7c104 	addi	r3,fp,-8444
 4012800:	1885883a 	add	r2,r3,r2
 4012804:	10879d04 	addi	r2,r2,7796
 4012808:	10800017 	ldw	r2,0(r2)
 401280c:	10bffb98 	cmpnei	r2,r2,-18
 4012810:	1000221e 	bne	r2,zero,401289c <main+0x122c8>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4012814:	e0b7c217 	ldw	r2,-8440(fp)
 4012818:	10c00084 	addi	r3,r2,2
 401281c:	e0b95e04 	addi	r2,fp,-6792
 4012820:	180f883a 	mov	r7,r3
 4012824:	e1b7c117 	ldw	r6,-8444(fp)
 4012828:	01403fc4 	movi	r5,255
 401282c:	1009883a 	mov	r4,r2
 4012830:	40003c80 	call	40003c8 <draw>
					draw(eight, COLOR08_BLACK, x,y+2 );
 4012834:	e0b7c217 	ldw	r2,-8440(fp)
 4012838:	10800084 	addi	r2,r2,2
 401283c:	100f883a 	mov	r7,r2
 4012840:	e1b7c117 	ldw	r6,-8444(fp)
 4012844:	000b883a 	mov	r5,zero
 4012848:	010100f4 	movhi	r4,1027
 401284c:	213d2a04 	addi	r4,r4,-2904
 4012850:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-18;
 4012854:	e0b7c217 	ldw	r2,-8440(fp)
 4012858:	01400504 	movi	r5,20
 401285c:	1009883a 	mov	r4,r2
 4012860:	40191000 	call	4019100 <__mulsi3>
 4012864:	1007883a 	mov	r3,r2
 4012868:	e0b7c117 	ldw	r2,-8444(fp)
 401286c:	1885883a 	add	r2,r3,r2
 4012870:	1085883a 	add	r2,r2,r2
 4012874:	1085883a 	add	r2,r2,r2
 4012878:	e0f7c104 	addi	r3,fp,-8444
 401287c:	1885883a 	add	r2,r3,r2
 4012880:	10879d04 	addi	r2,r2,7796
 4012884:	00fffb84 	movi	r3,-18
 4012888:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 401288c:	00c00044 	movi	r3,1
 4012890:	008200b4 	movhi	r2,2050
 4012894:	10841804 	addi	r2,r2,4192
 4012898:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard [y][x]==gameboard [y-1][x] && gameboard [y][x]== gameboard [y+1][x]) || (gameboard [y][x]==8 && gameboard [y+1][x]==-18))//txb
 401289c:	e0b7c217 	ldw	r2,-8440(fp)
 40128a0:	01400504 	movi	r5,20
 40128a4:	1009883a 	mov	r4,r2
 40128a8:	40191000 	call	4019100 <__mulsi3>
 40128ac:	1007883a 	mov	r3,r2
 40128b0:	e0b7c117 	ldw	r2,-8444(fp)
 40128b4:	1885883a 	add	r2,r3,r2
 40128b8:	1085883a 	add	r2,r2,r2
 40128bc:	1085883a 	add	r2,r2,r2
 40128c0:	e0f7c104 	addi	r3,fp,-8444
 40128c4:	1885883a 	add	r2,r3,r2
 40128c8:	10879d04 	addi	r2,r2,7796
 40128cc:	14000017 	ldw	r16,0(r2)
 40128d0:	e0b7c217 	ldw	r2,-8440(fp)
 40128d4:	10bfffc4 	addi	r2,r2,-1
 40128d8:	01400504 	movi	r5,20
 40128dc:	1009883a 	mov	r4,r2
 40128e0:	40191000 	call	4019100 <__mulsi3>
 40128e4:	1007883a 	mov	r3,r2
 40128e8:	e0b7c117 	ldw	r2,-8444(fp)
 40128ec:	1885883a 	add	r2,r3,r2
 40128f0:	1085883a 	add	r2,r2,r2
 40128f4:	1085883a 	add	r2,r2,r2
 40128f8:	e0f7c104 	addi	r3,fp,-8444
 40128fc:	1885883a 	add	r2,r3,r2
 4012900:	10879d04 	addi	r2,r2,7796
 4012904:	10800017 	ldw	r2,0(r2)
 4012908:	80801c1e 	bne	r16,r2,401297c <main+0x123a8>
 401290c:	e0b7c217 	ldw	r2,-8440(fp)
 4012910:	01400504 	movi	r5,20
 4012914:	1009883a 	mov	r4,r2
 4012918:	40191000 	call	4019100 <__mulsi3>
 401291c:	1007883a 	mov	r3,r2
 4012920:	e0b7c117 	ldw	r2,-8444(fp)
 4012924:	1885883a 	add	r2,r3,r2
 4012928:	1085883a 	add	r2,r2,r2
 401292c:	1085883a 	add	r2,r2,r2
 4012930:	e0f7c104 	addi	r3,fp,-8444
 4012934:	1885883a 	add	r2,r3,r2
 4012938:	10879d04 	addi	r2,r2,7796
 401293c:	14000017 	ldw	r16,0(r2)
 4012940:	e0b7c217 	ldw	r2,-8440(fp)
 4012944:	10800044 	addi	r2,r2,1
 4012948:	01400504 	movi	r5,20
 401294c:	1009883a 	mov	r4,r2
 4012950:	40191000 	call	4019100 <__mulsi3>
 4012954:	1007883a 	mov	r3,r2
 4012958:	e0b7c117 	ldw	r2,-8444(fp)
 401295c:	1885883a 	add	r2,r3,r2
 4012960:	1085883a 	add	r2,r2,r2
 4012964:	1085883a 	add	r2,r2,r2
 4012968:	e0f7c104 	addi	r3,fp,-8444
 401296c:	1885883a 	add	r2,r3,r2
 4012970:	10879d04 	addi	r2,r2,7796
 4012974:	10800017 	ldw	r2,0(r2)
 4012978:	80801f26 	beq	r16,r2,40129f8 <main+0x12424>
 401297c:	e0b7c217 	ldw	r2,-8440(fp)
 4012980:	01400504 	movi	r5,20
 4012984:	1009883a 	mov	r4,r2
 4012988:	40191000 	call	4019100 <__mulsi3>
 401298c:	1007883a 	mov	r3,r2
 4012990:	e0b7c117 	ldw	r2,-8444(fp)
 4012994:	1885883a 	add	r2,r3,r2
 4012998:	1085883a 	add	r2,r2,r2
 401299c:	1085883a 	add	r2,r2,r2
 40129a0:	e0f7c104 	addi	r3,fp,-8444
 40129a4:	1885883a 	add	r2,r3,r2
 40129a8:	10879d04 	addi	r2,r2,7796
 40129ac:	10800017 	ldw	r2,0(r2)
 40129b0:	10800218 	cmpnei	r2,r2,8
 40129b4:	1000321e 	bne	r2,zero,4012a80 <main+0x124ac>
 40129b8:	e0b7c217 	ldw	r2,-8440(fp)
 40129bc:	10800044 	addi	r2,r2,1
 40129c0:	01400504 	movi	r5,20
 40129c4:	1009883a 	mov	r4,r2
 40129c8:	40191000 	call	4019100 <__mulsi3>
 40129cc:	1007883a 	mov	r3,r2
 40129d0:	e0b7c117 	ldw	r2,-8444(fp)
 40129d4:	1885883a 	add	r2,r3,r2
 40129d8:	1085883a 	add	r2,r2,r2
 40129dc:	1085883a 	add	r2,r2,r2
 40129e0:	e0f7c104 	addi	r3,fp,-8444
 40129e4:	1885883a 	add	r2,r3,r2
 40129e8:	10879d04 	addi	r2,r2,7796
 40129ec:	10800017 	ldw	r2,0(r2)
 40129f0:	10bffb98 	cmpnei	r2,r2,-18
 40129f4:	1000221e 	bne	r2,zero,4012a80 <main+0x124ac>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 40129f8:	e0b7c217 	ldw	r2,-8440(fp)
 40129fc:	10c00084 	addi	r3,r2,2
 4012a00:	e0b95e04 	addi	r2,fp,-6792
 4012a04:	180f883a 	mov	r7,r3
 4012a08:	e1b7c117 	ldw	r6,-8444(fp)
 4012a0c:	01403fc4 	movi	r5,255
 4012a10:	1009883a 	mov	r4,r2
 4012a14:	40003c80 	call	40003c8 <draw>
					draw(eight, COLOR08_BLACK, x,y+2 );
 4012a18:	e0b7c217 	ldw	r2,-8440(fp)
 4012a1c:	10800084 	addi	r2,r2,2
 4012a20:	100f883a 	mov	r7,r2
 4012a24:	e1b7c117 	ldw	r6,-8444(fp)
 4012a28:	000b883a 	mov	r5,zero
 4012a2c:	010100f4 	movhi	r4,1027
 4012a30:	213d2a04 	addi	r4,r4,-2904
 4012a34:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-18;
 4012a38:	e0b7c217 	ldw	r2,-8440(fp)
 4012a3c:	01400504 	movi	r5,20
 4012a40:	1009883a 	mov	r4,r2
 4012a44:	40191000 	call	4019100 <__mulsi3>
 4012a48:	1007883a 	mov	r3,r2
 4012a4c:	e0b7c117 	ldw	r2,-8444(fp)
 4012a50:	1885883a 	add	r2,r3,r2
 4012a54:	1085883a 	add	r2,r2,r2
 4012a58:	1085883a 	add	r2,r2,r2
 4012a5c:	e0f7c104 	addi	r3,fp,-8444
 4012a60:	1885883a 	add	r2,r3,r2
 4012a64:	10879d04 	addi	r2,r2,7796
 4012a68:	00fffb84 	movi	r3,-18
 4012a6c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4012a70:	00c00044 	movi	r3,1
 4012a74:	008200b4 	movhi	r2,2050
 4012a78:	10841804 	addi	r2,r2,4192
 4012a7c:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard [y][x]==gameboard [y-1][x] && gameboard [y][x]== gameboard [y-2][x]) || (gameboard [y][x]==8 && gameboard [y-1][x]==-18))//tmx
 4012a80:	e0b7c217 	ldw	r2,-8440(fp)
 4012a84:	01400504 	movi	r5,20
 4012a88:	1009883a 	mov	r4,r2
 4012a8c:	40191000 	call	4019100 <__mulsi3>
 4012a90:	1007883a 	mov	r3,r2
 4012a94:	e0b7c117 	ldw	r2,-8444(fp)
 4012a98:	1885883a 	add	r2,r3,r2
 4012a9c:	1085883a 	add	r2,r2,r2
 4012aa0:	1085883a 	add	r2,r2,r2
 4012aa4:	e0f7c104 	addi	r3,fp,-8444
 4012aa8:	1885883a 	add	r2,r3,r2
 4012aac:	10879d04 	addi	r2,r2,7796
 4012ab0:	14000017 	ldw	r16,0(r2)
 4012ab4:	e0b7c217 	ldw	r2,-8440(fp)
 4012ab8:	10bfffc4 	addi	r2,r2,-1
 4012abc:	01400504 	movi	r5,20
 4012ac0:	1009883a 	mov	r4,r2
 4012ac4:	40191000 	call	4019100 <__mulsi3>
 4012ac8:	1007883a 	mov	r3,r2
 4012acc:	e0b7c117 	ldw	r2,-8444(fp)
 4012ad0:	1885883a 	add	r2,r3,r2
 4012ad4:	1085883a 	add	r2,r2,r2
 4012ad8:	1085883a 	add	r2,r2,r2
 4012adc:	e0f7c104 	addi	r3,fp,-8444
 4012ae0:	1885883a 	add	r2,r3,r2
 4012ae4:	10879d04 	addi	r2,r2,7796
 4012ae8:	10800017 	ldw	r2,0(r2)
 4012aec:	80801c1e 	bne	r16,r2,4012b60 <main+0x1258c>
 4012af0:	e0b7c217 	ldw	r2,-8440(fp)
 4012af4:	01400504 	movi	r5,20
 4012af8:	1009883a 	mov	r4,r2
 4012afc:	40191000 	call	4019100 <__mulsi3>
 4012b00:	1007883a 	mov	r3,r2
 4012b04:	e0b7c117 	ldw	r2,-8444(fp)
 4012b08:	1885883a 	add	r2,r3,r2
 4012b0c:	1085883a 	add	r2,r2,r2
 4012b10:	1085883a 	add	r2,r2,r2
 4012b14:	e0f7c104 	addi	r3,fp,-8444
 4012b18:	1885883a 	add	r2,r3,r2
 4012b1c:	10879d04 	addi	r2,r2,7796
 4012b20:	14000017 	ldw	r16,0(r2)
 4012b24:	e0b7c217 	ldw	r2,-8440(fp)
 4012b28:	10bfff84 	addi	r2,r2,-2
 4012b2c:	01400504 	movi	r5,20
 4012b30:	1009883a 	mov	r4,r2
 4012b34:	40191000 	call	4019100 <__mulsi3>
 4012b38:	1007883a 	mov	r3,r2
 4012b3c:	e0b7c117 	ldw	r2,-8444(fp)
 4012b40:	1885883a 	add	r2,r3,r2
 4012b44:	1085883a 	add	r2,r2,r2
 4012b48:	1085883a 	add	r2,r2,r2
 4012b4c:	e0f7c104 	addi	r3,fp,-8444
 4012b50:	1885883a 	add	r2,r3,r2
 4012b54:	10879d04 	addi	r2,r2,7796
 4012b58:	10800017 	ldw	r2,0(r2)
 4012b5c:	80801f26 	beq	r16,r2,4012bdc <main+0x12608>
 4012b60:	e0b7c217 	ldw	r2,-8440(fp)
 4012b64:	01400504 	movi	r5,20
 4012b68:	1009883a 	mov	r4,r2
 4012b6c:	40191000 	call	4019100 <__mulsi3>
 4012b70:	1007883a 	mov	r3,r2
 4012b74:	e0b7c117 	ldw	r2,-8444(fp)
 4012b78:	1885883a 	add	r2,r3,r2
 4012b7c:	1085883a 	add	r2,r2,r2
 4012b80:	1085883a 	add	r2,r2,r2
 4012b84:	e0f7c104 	addi	r3,fp,-8444
 4012b88:	1885883a 	add	r2,r3,r2
 4012b8c:	10879d04 	addi	r2,r2,7796
 4012b90:	10800017 	ldw	r2,0(r2)
 4012b94:	10800218 	cmpnei	r2,r2,8
 4012b98:	1000321e 	bne	r2,zero,4012c64 <main+0x12690>
 4012b9c:	e0b7c217 	ldw	r2,-8440(fp)
 4012ba0:	10bfffc4 	addi	r2,r2,-1
 4012ba4:	01400504 	movi	r5,20
 4012ba8:	1009883a 	mov	r4,r2
 4012bac:	40191000 	call	4019100 <__mulsi3>
 4012bb0:	1007883a 	mov	r3,r2
 4012bb4:	e0b7c117 	ldw	r2,-8444(fp)
 4012bb8:	1885883a 	add	r2,r3,r2
 4012bbc:	1085883a 	add	r2,r2,r2
 4012bc0:	1085883a 	add	r2,r2,r2
 4012bc4:	e0f7c104 	addi	r3,fp,-8444
 4012bc8:	1885883a 	add	r2,r3,r2
 4012bcc:	10879d04 	addi	r2,r2,7796
 4012bd0:	10800017 	ldw	r2,0(r2)
 4012bd4:	10bffb98 	cmpnei	r2,r2,-18
 4012bd8:	1000221e 	bne	r2,zero,4012c64 <main+0x12690>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4012bdc:	e0b7c217 	ldw	r2,-8440(fp)
 4012be0:	10c00084 	addi	r3,r2,2
 4012be4:	e0b95e04 	addi	r2,fp,-6792
 4012be8:	180f883a 	mov	r7,r3
 4012bec:	e1b7c117 	ldw	r6,-8444(fp)
 4012bf0:	01403fc4 	movi	r5,255
 4012bf4:	1009883a 	mov	r4,r2
 4012bf8:	40003c80 	call	40003c8 <draw>
					draw(eight, COLOR08_BLACK, x,y+2 );
 4012bfc:	e0b7c217 	ldw	r2,-8440(fp)
 4012c00:	10800084 	addi	r2,r2,2
 4012c04:	100f883a 	mov	r7,r2
 4012c08:	e1b7c117 	ldw	r6,-8444(fp)
 4012c0c:	000b883a 	mov	r5,zero
 4012c10:	010100f4 	movhi	r4,1027
 4012c14:	213d2a04 	addi	r4,r4,-2904
 4012c18:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-18;
 4012c1c:	e0b7c217 	ldw	r2,-8440(fp)
 4012c20:	01400504 	movi	r5,20
 4012c24:	1009883a 	mov	r4,r2
 4012c28:	40191000 	call	4019100 <__mulsi3>
 4012c2c:	1007883a 	mov	r3,r2
 4012c30:	e0b7c117 	ldw	r2,-8444(fp)
 4012c34:	1885883a 	add	r2,r3,r2
 4012c38:	1085883a 	add	r2,r2,r2
 4012c3c:	1085883a 	add	r2,r2,r2
 4012c40:	e0f7c104 	addi	r3,fp,-8444
 4012c44:	1885883a 	add	r2,r3,r2
 4012c48:	10879d04 	addi	r2,r2,7796
 4012c4c:	00fffb84 	movi	r3,-18
 4012c50:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4012c54:	00c00044 	movi	r3,1
 4012c58:	008200b4 	movhi	r2,2050
 4012c5c:	10841804 	addi	r2,r2,4192
 4012c60:	10c00035 	stwio	r3,0(r2)
				}
//////////////////////////////////////////////////////////////////
				//diagonal (\)8
				if ((gameboard [y][x]==gameboard [y+1][x+1] && gameboard[y+1][x+1]== gameboard[y+2][x+2]))//(\x\)
 4012c64:	e0b7c217 	ldw	r2,-8440(fp)
 4012c68:	01400504 	movi	r5,20
 4012c6c:	1009883a 	mov	r4,r2
 4012c70:	40191000 	call	4019100 <__mulsi3>
 4012c74:	1007883a 	mov	r3,r2
 4012c78:	e0b7c117 	ldw	r2,-8444(fp)
 4012c7c:	1885883a 	add	r2,r3,r2
 4012c80:	1085883a 	add	r2,r2,r2
 4012c84:	1085883a 	add	r2,r2,r2
 4012c88:	e0f7c104 	addi	r3,fp,-8444
 4012c8c:	1885883a 	add	r2,r3,r2
 4012c90:	10879d04 	addi	r2,r2,7796
 4012c94:	14000017 	ldw	r16,0(r2)
 4012c98:	e0b7c217 	ldw	r2,-8440(fp)
 4012c9c:	10c00044 	addi	r3,r2,1
 4012ca0:	e0b7c117 	ldw	r2,-8444(fp)
 4012ca4:	14400044 	addi	r17,r2,1
 4012ca8:	01400504 	movi	r5,20
 4012cac:	1809883a 	mov	r4,r3
 4012cb0:	40191000 	call	4019100 <__mulsi3>
 4012cb4:	1445883a 	add	r2,r2,r17
 4012cb8:	1085883a 	add	r2,r2,r2
 4012cbc:	1085883a 	add	r2,r2,r2
 4012cc0:	e0f7c104 	addi	r3,fp,-8444
 4012cc4:	1885883a 	add	r2,r3,r2
 4012cc8:	10879d04 	addi	r2,r2,7796
 4012ccc:	10800017 	ldw	r2,0(r2)
 4012cd0:	80803f1e 	bne	r16,r2,4012dd0 <main+0x127fc>
 4012cd4:	e0b7c217 	ldw	r2,-8440(fp)
 4012cd8:	10c00044 	addi	r3,r2,1
 4012cdc:	e0b7c117 	ldw	r2,-8444(fp)
 4012ce0:	14000044 	addi	r16,r2,1
 4012ce4:	01400504 	movi	r5,20
 4012ce8:	1809883a 	mov	r4,r3
 4012cec:	40191000 	call	4019100 <__mulsi3>
 4012cf0:	1405883a 	add	r2,r2,r16
 4012cf4:	1085883a 	add	r2,r2,r2
 4012cf8:	1085883a 	add	r2,r2,r2
 4012cfc:	e0f7c104 	addi	r3,fp,-8444
 4012d00:	1885883a 	add	r2,r3,r2
 4012d04:	10879d04 	addi	r2,r2,7796
 4012d08:	14000017 	ldw	r16,0(r2)
 4012d0c:	e0b7c217 	ldw	r2,-8440(fp)
 4012d10:	10c00084 	addi	r3,r2,2
 4012d14:	e0b7c117 	ldw	r2,-8444(fp)
 4012d18:	14400084 	addi	r17,r2,2
 4012d1c:	01400504 	movi	r5,20
 4012d20:	1809883a 	mov	r4,r3
 4012d24:	40191000 	call	4019100 <__mulsi3>
 4012d28:	1445883a 	add	r2,r2,r17
 4012d2c:	1085883a 	add	r2,r2,r2
 4012d30:	1085883a 	add	r2,r2,r2
 4012d34:	e0f7c104 	addi	r3,fp,-8444
 4012d38:	1885883a 	add	r2,r3,r2
 4012d3c:	10879d04 	addi	r2,r2,7796
 4012d40:	10800017 	ldw	r2,0(r2)
 4012d44:	8080221e 	bne	r16,r2,4012dd0 <main+0x127fc>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4012d48:	e0b7c217 	ldw	r2,-8440(fp)
 4012d4c:	10c00084 	addi	r3,r2,2
 4012d50:	e0b95e04 	addi	r2,fp,-6792
 4012d54:	180f883a 	mov	r7,r3
 4012d58:	e1b7c117 	ldw	r6,-8444(fp)
 4012d5c:	01403fc4 	movi	r5,255
 4012d60:	1009883a 	mov	r4,r2
 4012d64:	40003c80 	call	40003c8 <draw>
					draw(eight, COLOR08_BLACK, x,y+2 );
 4012d68:	e0b7c217 	ldw	r2,-8440(fp)
 4012d6c:	10800084 	addi	r2,r2,2
 4012d70:	100f883a 	mov	r7,r2
 4012d74:	e1b7c117 	ldw	r6,-8444(fp)
 4012d78:	000b883a 	mov	r5,zero
 4012d7c:	010100f4 	movhi	r4,1027
 4012d80:	213d2a04 	addi	r4,r4,-2904
 4012d84:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-18;
 4012d88:	e0b7c217 	ldw	r2,-8440(fp)
 4012d8c:	01400504 	movi	r5,20
 4012d90:	1009883a 	mov	r4,r2
 4012d94:	40191000 	call	4019100 <__mulsi3>
 4012d98:	1007883a 	mov	r3,r2
 4012d9c:	e0b7c117 	ldw	r2,-8444(fp)
 4012da0:	1885883a 	add	r2,r3,r2
 4012da4:	1085883a 	add	r2,r2,r2
 4012da8:	1085883a 	add	r2,r2,r2
 4012dac:	e0f7c104 	addi	r3,fp,-8444
 4012db0:	1885883a 	add	r2,r3,r2
 4012db4:	10879d04 	addi	r2,r2,7796
 4012db8:	00fffb84 	movi	r3,-18
 4012dbc:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4012dc0:	00c00044 	movi	r3,1
 4012dc4:	008200b4 	movhi	r2,2050
 4012dc8:	10841804 	addi	r2,r2,4192
 4012dcc:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard [y][x]==gameboard [y+1][x+1] && gameboard[y][x]== gameboard[y+2][x+2]) )//(x\\)
 4012dd0:	e0b7c217 	ldw	r2,-8440(fp)
 4012dd4:	01400504 	movi	r5,20
 4012dd8:	1009883a 	mov	r4,r2
 4012ddc:	40191000 	call	4019100 <__mulsi3>
 4012de0:	1007883a 	mov	r3,r2
 4012de4:	e0b7c117 	ldw	r2,-8444(fp)
 4012de8:	1885883a 	add	r2,r3,r2
 4012dec:	1085883a 	add	r2,r2,r2
 4012df0:	1085883a 	add	r2,r2,r2
 4012df4:	e0f7c104 	addi	r3,fp,-8444
 4012df8:	1885883a 	add	r2,r3,r2
 4012dfc:	10879d04 	addi	r2,r2,7796
 4012e00:	14000017 	ldw	r16,0(r2)
 4012e04:	e0b7c217 	ldw	r2,-8440(fp)
 4012e08:	10c00044 	addi	r3,r2,1
 4012e0c:	e0b7c117 	ldw	r2,-8444(fp)
 4012e10:	14400044 	addi	r17,r2,1
 4012e14:	01400504 	movi	r5,20
 4012e18:	1809883a 	mov	r4,r3
 4012e1c:	40191000 	call	4019100 <__mulsi3>
 4012e20:	1445883a 	add	r2,r2,r17
 4012e24:	1085883a 	add	r2,r2,r2
 4012e28:	1085883a 	add	r2,r2,r2
 4012e2c:	e0f7c104 	addi	r3,fp,-8444
 4012e30:	1885883a 	add	r2,r3,r2
 4012e34:	10879d04 	addi	r2,r2,7796
 4012e38:	10800017 	ldw	r2,0(r2)
 4012e3c:	80803e1e 	bne	r16,r2,4012f38 <main+0x12964>
 4012e40:	e0b7c217 	ldw	r2,-8440(fp)
 4012e44:	01400504 	movi	r5,20
 4012e48:	1009883a 	mov	r4,r2
 4012e4c:	40191000 	call	4019100 <__mulsi3>
 4012e50:	1007883a 	mov	r3,r2
 4012e54:	e0b7c117 	ldw	r2,-8444(fp)
 4012e58:	1885883a 	add	r2,r3,r2
 4012e5c:	1085883a 	add	r2,r2,r2
 4012e60:	1085883a 	add	r2,r2,r2
 4012e64:	e0f7c104 	addi	r3,fp,-8444
 4012e68:	1885883a 	add	r2,r3,r2
 4012e6c:	10879d04 	addi	r2,r2,7796
 4012e70:	14000017 	ldw	r16,0(r2)
 4012e74:	e0b7c217 	ldw	r2,-8440(fp)
 4012e78:	10c00084 	addi	r3,r2,2
 4012e7c:	e0b7c117 	ldw	r2,-8444(fp)
 4012e80:	14400084 	addi	r17,r2,2
 4012e84:	01400504 	movi	r5,20
 4012e88:	1809883a 	mov	r4,r3
 4012e8c:	40191000 	call	4019100 <__mulsi3>
 4012e90:	1445883a 	add	r2,r2,r17
 4012e94:	1085883a 	add	r2,r2,r2
 4012e98:	1085883a 	add	r2,r2,r2
 4012e9c:	e0f7c104 	addi	r3,fp,-8444
 4012ea0:	1885883a 	add	r2,r3,r2
 4012ea4:	10879d04 	addi	r2,r2,7796
 4012ea8:	10800017 	ldw	r2,0(r2)
 4012eac:	8080221e 	bne	r16,r2,4012f38 <main+0x12964>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4012eb0:	e0b7c217 	ldw	r2,-8440(fp)
 4012eb4:	10c00084 	addi	r3,r2,2
 4012eb8:	e0b95e04 	addi	r2,fp,-6792
 4012ebc:	180f883a 	mov	r7,r3
 4012ec0:	e1b7c117 	ldw	r6,-8444(fp)
 4012ec4:	01403fc4 	movi	r5,255
 4012ec8:	1009883a 	mov	r4,r2
 4012ecc:	40003c80 	call	40003c8 <draw>
					draw(eight, COLOR08_BLACK, x,y+2 );
 4012ed0:	e0b7c217 	ldw	r2,-8440(fp)
 4012ed4:	10800084 	addi	r2,r2,2
 4012ed8:	100f883a 	mov	r7,r2
 4012edc:	e1b7c117 	ldw	r6,-8444(fp)
 4012ee0:	000b883a 	mov	r5,zero
 4012ee4:	010100f4 	movhi	r4,1027
 4012ee8:	213d2a04 	addi	r4,r4,-2904
 4012eec:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-18;
 4012ef0:	e0b7c217 	ldw	r2,-8440(fp)
 4012ef4:	01400504 	movi	r5,20
 4012ef8:	1009883a 	mov	r4,r2
 4012efc:	40191000 	call	4019100 <__mulsi3>
 4012f00:	1007883a 	mov	r3,r2
 4012f04:	e0b7c117 	ldw	r2,-8444(fp)
 4012f08:	1885883a 	add	r2,r3,r2
 4012f0c:	1085883a 	add	r2,r2,r2
 4012f10:	1085883a 	add	r2,r2,r2
 4012f14:	e0f7c104 	addi	r3,fp,-8444
 4012f18:	1885883a 	add	r2,r3,r2
 4012f1c:	10879d04 	addi	r2,r2,7796
 4012f20:	00fffb84 	movi	r3,-18
 4012f24:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4012f28:	00c00044 	movi	r3,1
 4012f2c:	008200b4 	movhi	r2,2050
 4012f30:	10841804 	addi	r2,r2,4192
 4012f34:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard [y][x]==gameboard [y-1][x-1] && gameboard[y][x]== gameboard[y-2][x-2]) )//(\\x)
 4012f38:	e0b7c217 	ldw	r2,-8440(fp)
 4012f3c:	01400504 	movi	r5,20
 4012f40:	1009883a 	mov	r4,r2
 4012f44:	40191000 	call	4019100 <__mulsi3>
 4012f48:	1007883a 	mov	r3,r2
 4012f4c:	e0b7c117 	ldw	r2,-8444(fp)
 4012f50:	1885883a 	add	r2,r3,r2
 4012f54:	1085883a 	add	r2,r2,r2
 4012f58:	1085883a 	add	r2,r2,r2
 4012f5c:	e0f7c104 	addi	r3,fp,-8444
 4012f60:	1885883a 	add	r2,r3,r2
 4012f64:	10879d04 	addi	r2,r2,7796
 4012f68:	14000017 	ldw	r16,0(r2)
 4012f6c:	e0b7c217 	ldw	r2,-8440(fp)
 4012f70:	10ffffc4 	addi	r3,r2,-1
 4012f74:	e0b7c117 	ldw	r2,-8444(fp)
 4012f78:	147fffc4 	addi	r17,r2,-1
 4012f7c:	01400504 	movi	r5,20
 4012f80:	1809883a 	mov	r4,r3
 4012f84:	40191000 	call	4019100 <__mulsi3>
 4012f88:	1445883a 	add	r2,r2,r17
 4012f8c:	1085883a 	add	r2,r2,r2
 4012f90:	1085883a 	add	r2,r2,r2
 4012f94:	e0f7c104 	addi	r3,fp,-8444
 4012f98:	1885883a 	add	r2,r3,r2
 4012f9c:	10879d04 	addi	r2,r2,7796
 4012fa0:	10800017 	ldw	r2,0(r2)
 4012fa4:	80803e1e 	bne	r16,r2,40130a0 <main+0x12acc>
 4012fa8:	e0b7c217 	ldw	r2,-8440(fp)
 4012fac:	01400504 	movi	r5,20
 4012fb0:	1009883a 	mov	r4,r2
 4012fb4:	40191000 	call	4019100 <__mulsi3>
 4012fb8:	1007883a 	mov	r3,r2
 4012fbc:	e0b7c117 	ldw	r2,-8444(fp)
 4012fc0:	1885883a 	add	r2,r3,r2
 4012fc4:	1085883a 	add	r2,r2,r2
 4012fc8:	1085883a 	add	r2,r2,r2
 4012fcc:	e0f7c104 	addi	r3,fp,-8444
 4012fd0:	1885883a 	add	r2,r3,r2
 4012fd4:	10879d04 	addi	r2,r2,7796
 4012fd8:	14000017 	ldw	r16,0(r2)
 4012fdc:	e0b7c217 	ldw	r2,-8440(fp)
 4012fe0:	10ffff84 	addi	r3,r2,-2
 4012fe4:	e0b7c117 	ldw	r2,-8444(fp)
 4012fe8:	147fff84 	addi	r17,r2,-2
 4012fec:	01400504 	movi	r5,20
 4012ff0:	1809883a 	mov	r4,r3
 4012ff4:	40191000 	call	4019100 <__mulsi3>
 4012ff8:	1445883a 	add	r2,r2,r17
 4012ffc:	1085883a 	add	r2,r2,r2
 4013000:	1085883a 	add	r2,r2,r2
 4013004:	e0f7c104 	addi	r3,fp,-8444
 4013008:	1885883a 	add	r2,r3,r2
 401300c:	10879d04 	addi	r2,r2,7796
 4013010:	10800017 	ldw	r2,0(r2)
 4013014:	8080221e 	bne	r16,r2,40130a0 <main+0x12acc>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4013018:	e0b7c217 	ldw	r2,-8440(fp)
 401301c:	10c00084 	addi	r3,r2,2
 4013020:	e0b95e04 	addi	r2,fp,-6792
 4013024:	180f883a 	mov	r7,r3
 4013028:	e1b7c117 	ldw	r6,-8444(fp)
 401302c:	01403fc4 	movi	r5,255
 4013030:	1009883a 	mov	r4,r2
 4013034:	40003c80 	call	40003c8 <draw>
					draw(eight, COLOR08_BLACK, x,y+2 );
 4013038:	e0b7c217 	ldw	r2,-8440(fp)
 401303c:	10800084 	addi	r2,r2,2
 4013040:	100f883a 	mov	r7,r2
 4013044:	e1b7c117 	ldw	r6,-8444(fp)
 4013048:	000b883a 	mov	r5,zero
 401304c:	010100f4 	movhi	r4,1027
 4013050:	213d2a04 	addi	r4,r4,-2904
 4013054:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-18;
 4013058:	e0b7c217 	ldw	r2,-8440(fp)
 401305c:	01400504 	movi	r5,20
 4013060:	1009883a 	mov	r4,r2
 4013064:	40191000 	call	4019100 <__mulsi3>
 4013068:	1007883a 	mov	r3,r2
 401306c:	e0b7c117 	ldw	r2,-8444(fp)
 4013070:	1885883a 	add	r2,r3,r2
 4013074:	1085883a 	add	r2,r2,r2
 4013078:	1085883a 	add	r2,r2,r2
 401307c:	e0f7c104 	addi	r3,fp,-8444
 4013080:	1885883a 	add	r2,r3,r2
 4013084:	10879d04 	addi	r2,r2,7796
 4013088:	00fffb84 	movi	r3,-18
 401308c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4013090:	00c00044 	movi	r3,1
 4013094:	008200b4 	movhi	r2,2050
 4013098:	10841804 	addi	r2,r2,4192
 401309c:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard[y][x]==8 && gameboard[y+1][x+1]==-18) || (gameboard[y][x]==8 && gameboard[y-1][x-1]==-18))//(\\x)
 40130a0:	e0b7c217 	ldw	r2,-8440(fp)
 40130a4:	01400504 	movi	r5,20
 40130a8:	1009883a 	mov	r4,r2
 40130ac:	40191000 	call	4019100 <__mulsi3>
 40130b0:	1007883a 	mov	r3,r2
 40130b4:	e0b7c117 	ldw	r2,-8444(fp)
 40130b8:	1885883a 	add	r2,r3,r2
 40130bc:	1085883a 	add	r2,r2,r2
 40130c0:	1085883a 	add	r2,r2,r2
 40130c4:	e0f7c104 	addi	r3,fp,-8444
 40130c8:	1885883a 	add	r2,r3,r2
 40130cc:	10879d04 	addi	r2,r2,7796
 40130d0:	10800017 	ldw	r2,0(r2)
 40130d4:	10800218 	cmpnei	r2,r2,8
 40130d8:	1000101e 	bne	r2,zero,401311c <main+0x12b48>
 40130dc:	e0b7c217 	ldw	r2,-8440(fp)
 40130e0:	10c00044 	addi	r3,r2,1
 40130e4:	e0b7c117 	ldw	r2,-8444(fp)
 40130e8:	14000044 	addi	r16,r2,1
 40130ec:	01400504 	movi	r5,20
 40130f0:	1809883a 	mov	r4,r3
 40130f4:	40191000 	call	4019100 <__mulsi3>
 40130f8:	1405883a 	add	r2,r2,r16
 40130fc:	1085883a 	add	r2,r2,r2
 4013100:	1085883a 	add	r2,r2,r2
 4013104:	e0f7c104 	addi	r3,fp,-8444
 4013108:	1885883a 	add	r2,r3,r2
 401310c:	10879d04 	addi	r2,r2,7796
 4013110:	10800017 	ldw	r2,0(r2)
 4013114:	10bffba0 	cmpeqi	r2,r2,-18
 4013118:	10001f1e 	bne	r2,zero,4013198 <main+0x12bc4>
 401311c:	e0b7c217 	ldw	r2,-8440(fp)
 4013120:	01400504 	movi	r5,20
 4013124:	1009883a 	mov	r4,r2
 4013128:	40191000 	call	4019100 <__mulsi3>
 401312c:	1007883a 	mov	r3,r2
 4013130:	e0b7c117 	ldw	r2,-8444(fp)
 4013134:	1885883a 	add	r2,r3,r2
 4013138:	1085883a 	add	r2,r2,r2
 401313c:	1085883a 	add	r2,r2,r2
 4013140:	e0f7c104 	addi	r3,fp,-8444
 4013144:	1885883a 	add	r2,r3,r2
 4013148:	10879d04 	addi	r2,r2,7796
 401314c:	10800017 	ldw	r2,0(r2)
 4013150:	10800218 	cmpnei	r2,r2,8
 4013154:	1000321e 	bne	r2,zero,4013220 <main+0x12c4c>
 4013158:	e0b7c217 	ldw	r2,-8440(fp)
 401315c:	10ffffc4 	addi	r3,r2,-1
 4013160:	e0b7c117 	ldw	r2,-8444(fp)
 4013164:	143fffc4 	addi	r16,r2,-1
 4013168:	01400504 	movi	r5,20
 401316c:	1809883a 	mov	r4,r3
 4013170:	40191000 	call	4019100 <__mulsi3>
 4013174:	1405883a 	add	r2,r2,r16
 4013178:	1085883a 	add	r2,r2,r2
 401317c:	1085883a 	add	r2,r2,r2
 4013180:	e0f7c104 	addi	r3,fp,-8444
 4013184:	1885883a 	add	r2,r3,r2
 4013188:	10879d04 	addi	r2,r2,7796
 401318c:	10800017 	ldw	r2,0(r2)
 4013190:	10bffb98 	cmpnei	r2,r2,-18
 4013194:	1000221e 	bne	r2,zero,4013220 <main+0x12c4c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4013198:	e0b7c217 	ldw	r2,-8440(fp)
 401319c:	10c00084 	addi	r3,r2,2
 40131a0:	e0b95e04 	addi	r2,fp,-6792
 40131a4:	180f883a 	mov	r7,r3
 40131a8:	e1b7c117 	ldw	r6,-8444(fp)
 40131ac:	01403fc4 	movi	r5,255
 40131b0:	1009883a 	mov	r4,r2
 40131b4:	40003c80 	call	40003c8 <draw>
					draw(eight, COLOR08_BLACK, x,y+2 );
 40131b8:	e0b7c217 	ldw	r2,-8440(fp)
 40131bc:	10800084 	addi	r2,r2,2
 40131c0:	100f883a 	mov	r7,r2
 40131c4:	e1b7c117 	ldw	r6,-8444(fp)
 40131c8:	000b883a 	mov	r5,zero
 40131cc:	010100f4 	movhi	r4,1027
 40131d0:	213d2a04 	addi	r4,r4,-2904
 40131d4:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-18;
 40131d8:	e0b7c217 	ldw	r2,-8440(fp)
 40131dc:	01400504 	movi	r5,20
 40131e0:	1009883a 	mov	r4,r2
 40131e4:	40191000 	call	4019100 <__mulsi3>
 40131e8:	1007883a 	mov	r3,r2
 40131ec:	e0b7c117 	ldw	r2,-8444(fp)
 40131f0:	1885883a 	add	r2,r3,r2
 40131f4:	1085883a 	add	r2,r2,r2
 40131f8:	1085883a 	add	r2,r2,r2
 40131fc:	e0f7c104 	addi	r3,fp,-8444
 4013200:	1885883a 	add	r2,r3,r2
 4013204:	10879d04 	addi	r2,r2,7796
 4013208:	00fffb84 	movi	r3,-18
 401320c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4013210:	00c00044 	movi	r3,1
 4013214:	008200b4 	movhi	r2,2050
 4013218:	10841804 	addi	r2,r2,4192
 401321c:	10c00035 	stwio	r3,0(r2)
				}
				//////////////////////////////////////////////////////////
				//diagonal (/)8
				if (gameboard [y][x]==gameboard [y+1][x-1] && gameboard[y][x]== gameboard[y-1][x+1])//(/x/)
 4013220:	e0b7c217 	ldw	r2,-8440(fp)
 4013224:	01400504 	movi	r5,20
 4013228:	1009883a 	mov	r4,r2
 401322c:	40191000 	call	4019100 <__mulsi3>
 4013230:	1007883a 	mov	r3,r2
 4013234:	e0b7c117 	ldw	r2,-8444(fp)
 4013238:	1885883a 	add	r2,r3,r2
 401323c:	1085883a 	add	r2,r2,r2
 4013240:	1085883a 	add	r2,r2,r2
 4013244:	e0f7c104 	addi	r3,fp,-8444
 4013248:	1885883a 	add	r2,r3,r2
 401324c:	10879d04 	addi	r2,r2,7796
 4013250:	14000017 	ldw	r16,0(r2)
 4013254:	e0b7c217 	ldw	r2,-8440(fp)
 4013258:	10c00044 	addi	r3,r2,1
 401325c:	e0b7c117 	ldw	r2,-8444(fp)
 4013260:	147fffc4 	addi	r17,r2,-1
 4013264:	01400504 	movi	r5,20
 4013268:	1809883a 	mov	r4,r3
 401326c:	40191000 	call	4019100 <__mulsi3>
 4013270:	1445883a 	add	r2,r2,r17
 4013274:	1085883a 	add	r2,r2,r2
 4013278:	1085883a 	add	r2,r2,r2
 401327c:	e0f7c104 	addi	r3,fp,-8444
 4013280:	1885883a 	add	r2,r3,r2
 4013284:	10879d04 	addi	r2,r2,7796
 4013288:	10800017 	ldw	r2,0(r2)
 401328c:	80803e1e 	bne	r16,r2,4013388 <main+0x12db4>
 4013290:	e0b7c217 	ldw	r2,-8440(fp)
 4013294:	01400504 	movi	r5,20
 4013298:	1009883a 	mov	r4,r2
 401329c:	40191000 	call	4019100 <__mulsi3>
 40132a0:	1007883a 	mov	r3,r2
 40132a4:	e0b7c117 	ldw	r2,-8444(fp)
 40132a8:	1885883a 	add	r2,r3,r2
 40132ac:	1085883a 	add	r2,r2,r2
 40132b0:	1085883a 	add	r2,r2,r2
 40132b4:	e0f7c104 	addi	r3,fp,-8444
 40132b8:	1885883a 	add	r2,r3,r2
 40132bc:	10879d04 	addi	r2,r2,7796
 40132c0:	14000017 	ldw	r16,0(r2)
 40132c4:	e0b7c217 	ldw	r2,-8440(fp)
 40132c8:	10ffffc4 	addi	r3,r2,-1
 40132cc:	e0b7c117 	ldw	r2,-8444(fp)
 40132d0:	14400044 	addi	r17,r2,1
 40132d4:	01400504 	movi	r5,20
 40132d8:	1809883a 	mov	r4,r3
 40132dc:	40191000 	call	4019100 <__mulsi3>
 40132e0:	1445883a 	add	r2,r2,r17
 40132e4:	1085883a 	add	r2,r2,r2
 40132e8:	1085883a 	add	r2,r2,r2
 40132ec:	e0f7c104 	addi	r3,fp,-8444
 40132f0:	1885883a 	add	r2,r3,r2
 40132f4:	10879d04 	addi	r2,r2,7796
 40132f8:	10800017 	ldw	r2,0(r2)
 40132fc:	8080221e 	bne	r16,r2,4013388 <main+0x12db4>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4013300:	e0b7c217 	ldw	r2,-8440(fp)
 4013304:	10c00084 	addi	r3,r2,2
 4013308:	e0b95e04 	addi	r2,fp,-6792
 401330c:	180f883a 	mov	r7,r3
 4013310:	e1b7c117 	ldw	r6,-8444(fp)
 4013314:	01403fc4 	movi	r5,255
 4013318:	1009883a 	mov	r4,r2
 401331c:	40003c80 	call	40003c8 <draw>
					draw(eight, COLOR08_BLACK, x,y+2 );
 4013320:	e0b7c217 	ldw	r2,-8440(fp)
 4013324:	10800084 	addi	r2,r2,2
 4013328:	100f883a 	mov	r7,r2
 401332c:	e1b7c117 	ldw	r6,-8444(fp)
 4013330:	000b883a 	mov	r5,zero
 4013334:	010100f4 	movhi	r4,1027
 4013338:	213d2a04 	addi	r4,r4,-2904
 401333c:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-18;
 4013340:	e0b7c217 	ldw	r2,-8440(fp)
 4013344:	01400504 	movi	r5,20
 4013348:	1009883a 	mov	r4,r2
 401334c:	40191000 	call	4019100 <__mulsi3>
 4013350:	1007883a 	mov	r3,r2
 4013354:	e0b7c117 	ldw	r2,-8444(fp)
 4013358:	1885883a 	add	r2,r3,r2
 401335c:	1085883a 	add	r2,r2,r2
 4013360:	1085883a 	add	r2,r2,r2
 4013364:	e0f7c104 	addi	r3,fp,-8444
 4013368:	1885883a 	add	r2,r3,r2
 401336c:	10879d04 	addi	r2,r2,7796
 4013370:	00fffb84 	movi	r3,-18
 4013374:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4013378:	00c00044 	movi	r3,1
 401337c:	008200b4 	movhi	r2,2050
 4013380:	10841804 	addi	r2,r2,4192
 4013384:	10c00035 	stwio	r3,0(r2)

				}
				if (gameboard [y][x]==gameboard [y+1][x-1] && gameboard[y][x]== gameboard[y+2][x-2])//(x//)
 4013388:	e0b7c217 	ldw	r2,-8440(fp)
 401338c:	01400504 	movi	r5,20
 4013390:	1009883a 	mov	r4,r2
 4013394:	40191000 	call	4019100 <__mulsi3>
 4013398:	1007883a 	mov	r3,r2
 401339c:	e0b7c117 	ldw	r2,-8444(fp)
 40133a0:	1885883a 	add	r2,r3,r2
 40133a4:	1085883a 	add	r2,r2,r2
 40133a8:	1085883a 	add	r2,r2,r2
 40133ac:	e0f7c104 	addi	r3,fp,-8444
 40133b0:	1885883a 	add	r2,r3,r2
 40133b4:	10879d04 	addi	r2,r2,7796
 40133b8:	14000017 	ldw	r16,0(r2)
 40133bc:	e0b7c217 	ldw	r2,-8440(fp)
 40133c0:	10c00044 	addi	r3,r2,1
 40133c4:	e0b7c117 	ldw	r2,-8444(fp)
 40133c8:	147fffc4 	addi	r17,r2,-1
 40133cc:	01400504 	movi	r5,20
 40133d0:	1809883a 	mov	r4,r3
 40133d4:	40191000 	call	4019100 <__mulsi3>
 40133d8:	1445883a 	add	r2,r2,r17
 40133dc:	1085883a 	add	r2,r2,r2
 40133e0:	1085883a 	add	r2,r2,r2
 40133e4:	e0f7c104 	addi	r3,fp,-8444
 40133e8:	1885883a 	add	r2,r3,r2
 40133ec:	10879d04 	addi	r2,r2,7796
 40133f0:	10800017 	ldw	r2,0(r2)
 40133f4:	80803e1e 	bne	r16,r2,40134f0 <main+0x12f1c>
 40133f8:	e0b7c217 	ldw	r2,-8440(fp)
 40133fc:	01400504 	movi	r5,20
 4013400:	1009883a 	mov	r4,r2
 4013404:	40191000 	call	4019100 <__mulsi3>
 4013408:	1007883a 	mov	r3,r2
 401340c:	e0b7c117 	ldw	r2,-8444(fp)
 4013410:	1885883a 	add	r2,r3,r2
 4013414:	1085883a 	add	r2,r2,r2
 4013418:	1085883a 	add	r2,r2,r2
 401341c:	e0f7c104 	addi	r3,fp,-8444
 4013420:	1885883a 	add	r2,r3,r2
 4013424:	10879d04 	addi	r2,r2,7796
 4013428:	14000017 	ldw	r16,0(r2)
 401342c:	e0b7c217 	ldw	r2,-8440(fp)
 4013430:	10c00084 	addi	r3,r2,2
 4013434:	e0b7c117 	ldw	r2,-8444(fp)
 4013438:	147fff84 	addi	r17,r2,-2
 401343c:	01400504 	movi	r5,20
 4013440:	1809883a 	mov	r4,r3
 4013444:	40191000 	call	4019100 <__mulsi3>
 4013448:	1445883a 	add	r2,r2,r17
 401344c:	1085883a 	add	r2,r2,r2
 4013450:	1085883a 	add	r2,r2,r2
 4013454:	e0f7c104 	addi	r3,fp,-8444
 4013458:	1885883a 	add	r2,r3,r2
 401345c:	10879d04 	addi	r2,r2,7796
 4013460:	10800017 	ldw	r2,0(r2)
 4013464:	8080221e 	bne	r16,r2,40134f0 <main+0x12f1c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4013468:	e0b7c217 	ldw	r2,-8440(fp)
 401346c:	10c00084 	addi	r3,r2,2
 4013470:	e0b95e04 	addi	r2,fp,-6792
 4013474:	180f883a 	mov	r7,r3
 4013478:	e1b7c117 	ldw	r6,-8444(fp)
 401347c:	01403fc4 	movi	r5,255
 4013480:	1009883a 	mov	r4,r2
 4013484:	40003c80 	call	40003c8 <draw>
					draw(eight, COLOR08_BLACK, x,y+2 );
 4013488:	e0b7c217 	ldw	r2,-8440(fp)
 401348c:	10800084 	addi	r2,r2,2
 4013490:	100f883a 	mov	r7,r2
 4013494:	e1b7c117 	ldw	r6,-8444(fp)
 4013498:	000b883a 	mov	r5,zero
 401349c:	010100f4 	movhi	r4,1027
 40134a0:	213d2a04 	addi	r4,r4,-2904
 40134a4:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-18;
 40134a8:	e0b7c217 	ldw	r2,-8440(fp)
 40134ac:	01400504 	movi	r5,20
 40134b0:	1009883a 	mov	r4,r2
 40134b4:	40191000 	call	4019100 <__mulsi3>
 40134b8:	1007883a 	mov	r3,r2
 40134bc:	e0b7c117 	ldw	r2,-8444(fp)
 40134c0:	1885883a 	add	r2,r3,r2
 40134c4:	1085883a 	add	r2,r2,r2
 40134c8:	1085883a 	add	r2,r2,r2
 40134cc:	e0f7c104 	addi	r3,fp,-8444
 40134d0:	1885883a 	add	r2,r3,r2
 40134d4:	10879d04 	addi	r2,r2,7796
 40134d8:	00fffb84 	movi	r3,-18
 40134dc:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40134e0:	00c00044 	movi	r3,1
 40134e4:	008200b4 	movhi	r2,2050
 40134e8:	10841804 	addi	r2,r2,4192
 40134ec:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard [y][x]==8 && gameboard [y+1][x-1]==-18) || (gameboard [y][x]==8 && gameboard [y-1][x+1]==-18))//(x//)
 40134f0:	e0b7c217 	ldw	r2,-8440(fp)
 40134f4:	01400504 	movi	r5,20
 40134f8:	1009883a 	mov	r4,r2
 40134fc:	40191000 	call	4019100 <__mulsi3>
 4013500:	1007883a 	mov	r3,r2
 4013504:	e0b7c117 	ldw	r2,-8444(fp)
 4013508:	1885883a 	add	r2,r3,r2
 401350c:	1085883a 	add	r2,r2,r2
 4013510:	1085883a 	add	r2,r2,r2
 4013514:	e0f7c104 	addi	r3,fp,-8444
 4013518:	1885883a 	add	r2,r3,r2
 401351c:	10879d04 	addi	r2,r2,7796
 4013520:	10800017 	ldw	r2,0(r2)
 4013524:	10800218 	cmpnei	r2,r2,8
 4013528:	1000101e 	bne	r2,zero,401356c <main+0x12f98>
 401352c:	e0b7c217 	ldw	r2,-8440(fp)
 4013530:	10c00044 	addi	r3,r2,1
 4013534:	e0b7c117 	ldw	r2,-8444(fp)
 4013538:	143fffc4 	addi	r16,r2,-1
 401353c:	01400504 	movi	r5,20
 4013540:	1809883a 	mov	r4,r3
 4013544:	40191000 	call	4019100 <__mulsi3>
 4013548:	1405883a 	add	r2,r2,r16
 401354c:	1085883a 	add	r2,r2,r2
 4013550:	1085883a 	add	r2,r2,r2
 4013554:	e0f7c104 	addi	r3,fp,-8444
 4013558:	1885883a 	add	r2,r3,r2
 401355c:	10879d04 	addi	r2,r2,7796
 4013560:	10800017 	ldw	r2,0(r2)
 4013564:	10bffba0 	cmpeqi	r2,r2,-18
 4013568:	10001f1e 	bne	r2,zero,40135e8 <main+0x13014>
 401356c:	e0b7c217 	ldw	r2,-8440(fp)
 4013570:	01400504 	movi	r5,20
 4013574:	1009883a 	mov	r4,r2
 4013578:	40191000 	call	4019100 <__mulsi3>
 401357c:	1007883a 	mov	r3,r2
 4013580:	e0b7c117 	ldw	r2,-8444(fp)
 4013584:	1885883a 	add	r2,r3,r2
 4013588:	1085883a 	add	r2,r2,r2
 401358c:	1085883a 	add	r2,r2,r2
 4013590:	e0f7c104 	addi	r3,fp,-8444
 4013594:	1885883a 	add	r2,r3,r2
 4013598:	10879d04 	addi	r2,r2,7796
 401359c:	10800017 	ldw	r2,0(r2)
 40135a0:	10800218 	cmpnei	r2,r2,8
 40135a4:	1000321e 	bne	r2,zero,4013670 <main+0x1309c>
 40135a8:	e0b7c217 	ldw	r2,-8440(fp)
 40135ac:	10ffffc4 	addi	r3,r2,-1
 40135b0:	e0b7c117 	ldw	r2,-8444(fp)
 40135b4:	14000044 	addi	r16,r2,1
 40135b8:	01400504 	movi	r5,20
 40135bc:	1809883a 	mov	r4,r3
 40135c0:	40191000 	call	4019100 <__mulsi3>
 40135c4:	1405883a 	add	r2,r2,r16
 40135c8:	1085883a 	add	r2,r2,r2
 40135cc:	1085883a 	add	r2,r2,r2
 40135d0:	e0f7c104 	addi	r3,fp,-8444
 40135d4:	1885883a 	add	r2,r3,r2
 40135d8:	10879d04 	addi	r2,r2,7796
 40135dc:	10800017 	ldw	r2,0(r2)
 40135e0:	10bffb98 	cmpnei	r2,r2,-18
 40135e4:	1000221e 	bne	r2,zero,4013670 <main+0x1309c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 40135e8:	e0b7c217 	ldw	r2,-8440(fp)
 40135ec:	10c00084 	addi	r3,r2,2
 40135f0:	e0b95e04 	addi	r2,fp,-6792
 40135f4:	180f883a 	mov	r7,r3
 40135f8:	e1b7c117 	ldw	r6,-8444(fp)
 40135fc:	01403fc4 	movi	r5,255
 4013600:	1009883a 	mov	r4,r2
 4013604:	40003c80 	call	40003c8 <draw>
					draw(eight, COLOR08_BLACK, x,y+2 );
 4013608:	e0b7c217 	ldw	r2,-8440(fp)
 401360c:	10800084 	addi	r2,r2,2
 4013610:	100f883a 	mov	r7,r2
 4013614:	e1b7c117 	ldw	r6,-8444(fp)
 4013618:	000b883a 	mov	r5,zero
 401361c:	010100f4 	movhi	r4,1027
 4013620:	213d2a04 	addi	r4,r4,-2904
 4013624:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-18;
 4013628:	e0b7c217 	ldw	r2,-8440(fp)
 401362c:	01400504 	movi	r5,20
 4013630:	1009883a 	mov	r4,r2
 4013634:	40191000 	call	4019100 <__mulsi3>
 4013638:	1007883a 	mov	r3,r2
 401363c:	e0b7c117 	ldw	r2,-8444(fp)
 4013640:	1885883a 	add	r2,r3,r2
 4013644:	1085883a 	add	r2,r2,r2
 4013648:	1085883a 	add	r2,r2,r2
 401364c:	e0f7c104 	addi	r3,fp,-8444
 4013650:	1885883a 	add	r2,r3,r2
 4013654:	10879d04 	addi	r2,r2,7796
 4013658:	00fffb84 	movi	r3,-18
 401365c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4013660:	00c00044 	movi	r3,1
 4013664:	008200b4 	movhi	r2,2050
 4013668:	10841804 	addi	r2,r2,4192
 401366c:	10c00035 	stwio	r3,0(r2)
				}
			}
			if(gameboard[y][x]==9)//9
 4013670:	e0b7c217 	ldw	r2,-8440(fp)
 4013674:	01400504 	movi	r5,20
 4013678:	1009883a 	mov	r4,r2
 401367c:	40191000 	call	4019100 <__mulsi3>
 4013680:	1007883a 	mov	r3,r2
 4013684:	e0b7c117 	ldw	r2,-8444(fp)
 4013688:	1885883a 	add	r2,r3,r2
 401368c:	1085883a 	add	r2,r2,r2
 4013690:	1085883a 	add	r2,r2,r2
 4013694:	e0f7c104 	addi	r3,fp,-8444
 4013698:	1885883a 	add	r2,r3,r2
 401369c:	10879d04 	addi	r2,r2,7796
 40136a0:	10800017 	ldw	r2,0(r2)
 40136a4:	10800258 	cmpnei	r2,r2,9
 40136a8:	1005511e 	bne	r2,zero,4014bf0 <main+0x1461c>
			{
				//horizontal9
				if ((gameboard [y][x]==gameboard [y][x+1] && gameboard [y][x+1]== gameboard [y][x+2]) || (gameboard[y][x]==9 && gameboard[y][x+1]==-19) )//(0,0,0)
 40136ac:	e0b7c217 	ldw	r2,-8440(fp)
 40136b0:	01400504 	movi	r5,20
 40136b4:	1009883a 	mov	r4,r2
 40136b8:	40191000 	call	4019100 <__mulsi3>
 40136bc:	1007883a 	mov	r3,r2
 40136c0:	e0b7c117 	ldw	r2,-8444(fp)
 40136c4:	1885883a 	add	r2,r3,r2
 40136c8:	1085883a 	add	r2,r2,r2
 40136cc:	1085883a 	add	r2,r2,r2
 40136d0:	e0f7c104 	addi	r3,fp,-8444
 40136d4:	1885883a 	add	r2,r3,r2
 40136d8:	10879d04 	addi	r2,r2,7796
 40136dc:	14000017 	ldw	r16,0(r2)
 40136e0:	e0b7c117 	ldw	r2,-8444(fp)
 40136e4:	14400044 	addi	r17,r2,1
 40136e8:	e0b7c217 	ldw	r2,-8440(fp)
 40136ec:	01400504 	movi	r5,20
 40136f0:	1009883a 	mov	r4,r2
 40136f4:	40191000 	call	4019100 <__mulsi3>
 40136f8:	1445883a 	add	r2,r2,r17
 40136fc:	1085883a 	add	r2,r2,r2
 4013700:	1085883a 	add	r2,r2,r2
 4013704:	e0f7c104 	addi	r3,fp,-8444
 4013708:	1885883a 	add	r2,r3,r2
 401370c:	10879d04 	addi	r2,r2,7796
 4013710:	10800017 	ldw	r2,0(r2)
 4013714:	80801b1e 	bne	r16,r2,4013784 <main+0x131b0>
 4013718:	e0b7c117 	ldw	r2,-8444(fp)
 401371c:	14000044 	addi	r16,r2,1
 4013720:	e0b7c217 	ldw	r2,-8440(fp)
 4013724:	01400504 	movi	r5,20
 4013728:	1009883a 	mov	r4,r2
 401372c:	40191000 	call	4019100 <__mulsi3>
 4013730:	1405883a 	add	r2,r2,r16
 4013734:	1085883a 	add	r2,r2,r2
 4013738:	1085883a 	add	r2,r2,r2
 401373c:	e0f7c104 	addi	r3,fp,-8444
 4013740:	1885883a 	add	r2,r3,r2
 4013744:	10879d04 	addi	r2,r2,7796
 4013748:	14000017 	ldw	r16,0(r2)
 401374c:	e0b7c117 	ldw	r2,-8444(fp)
 4013750:	14400084 	addi	r17,r2,2
 4013754:	e0b7c217 	ldw	r2,-8440(fp)
 4013758:	01400504 	movi	r5,20
 401375c:	1009883a 	mov	r4,r2
 4013760:	40191000 	call	4019100 <__mulsi3>
 4013764:	1445883a 	add	r2,r2,r17
 4013768:	1085883a 	add	r2,r2,r2
 401376c:	1085883a 	add	r2,r2,r2
 4013770:	e0f7c104 	addi	r3,fp,-8444
 4013774:	1885883a 	add	r2,r3,r2
 4013778:	10879d04 	addi	r2,r2,7796
 401377c:	10800017 	ldw	r2,0(r2)
 4013780:	80801e26 	beq	r16,r2,40137fc <main+0x13228>
 4013784:	e0b7c217 	ldw	r2,-8440(fp)
 4013788:	01400504 	movi	r5,20
 401378c:	1009883a 	mov	r4,r2
 4013790:	40191000 	call	4019100 <__mulsi3>
 4013794:	1007883a 	mov	r3,r2
 4013798:	e0b7c117 	ldw	r2,-8444(fp)
 401379c:	1885883a 	add	r2,r3,r2
 40137a0:	1085883a 	add	r2,r2,r2
 40137a4:	1085883a 	add	r2,r2,r2
 40137a8:	e0f7c104 	addi	r3,fp,-8444
 40137ac:	1885883a 	add	r2,r3,r2
 40137b0:	10879d04 	addi	r2,r2,7796
 40137b4:	10800017 	ldw	r2,0(r2)
 40137b8:	10800258 	cmpnei	r2,r2,9
 40137bc:	1000311e 	bne	r2,zero,4013884 <main+0x132b0>
 40137c0:	e0b7c117 	ldw	r2,-8444(fp)
 40137c4:	14000044 	addi	r16,r2,1
 40137c8:	e0b7c217 	ldw	r2,-8440(fp)
 40137cc:	01400504 	movi	r5,20
 40137d0:	1009883a 	mov	r4,r2
 40137d4:	40191000 	call	4019100 <__mulsi3>
 40137d8:	1405883a 	add	r2,r2,r16
 40137dc:	1085883a 	add	r2,r2,r2
 40137e0:	1085883a 	add	r2,r2,r2
 40137e4:	e0f7c104 	addi	r3,fp,-8444
 40137e8:	1885883a 	add	r2,r3,r2
 40137ec:	10879d04 	addi	r2,r2,7796
 40137f0:	10800017 	ldw	r2,0(r2)
 40137f4:	10bffb58 	cmpnei	r2,r2,-19
 40137f8:	1000221e 	bne	r2,zero,4013884 <main+0x132b0>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 40137fc:	e0b7c217 	ldw	r2,-8440(fp)
 4013800:	10c00084 	addi	r3,r2,2
 4013804:	e0b95e04 	addi	r2,fp,-6792
 4013808:	180f883a 	mov	r7,r3
 401380c:	e1b7c117 	ldw	r6,-8444(fp)
 4013810:	01403fc4 	movi	r5,255
 4013814:	1009883a 	mov	r4,r2
 4013818:	40003c80 	call	40003c8 <draw>
					draw(nine, COLOR08_BLACK, x,y+2 );
 401381c:	e0b7c217 	ldw	r2,-8440(fp)
 4013820:	10800084 	addi	r2,r2,2
 4013824:	100f883a 	mov	r7,r2
 4013828:	e1b7c117 	ldw	r6,-8444(fp)
 401382c:	000b883a 	mov	r5,zero
 4013830:	010100f4 	movhi	r4,1027
 4013834:	213eaa04 	addi	r4,r4,-1368
 4013838:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-19;
 401383c:	e0b7c217 	ldw	r2,-8440(fp)
 4013840:	01400504 	movi	r5,20
 4013844:	1009883a 	mov	r4,r2
 4013848:	40191000 	call	4019100 <__mulsi3>
 401384c:	1007883a 	mov	r3,r2
 4013850:	e0b7c117 	ldw	r2,-8444(fp)
 4013854:	1885883a 	add	r2,r3,r2
 4013858:	1085883a 	add	r2,r2,r2
 401385c:	1085883a 	add	r2,r2,r2
 4013860:	e0f7c104 	addi	r3,fp,-8444
 4013864:	1885883a 	add	r2,r3,r2
 4013868:	10879d04 	addi	r2,r2,7796
 401386c:	00fffb44 	movi	r3,-19
 4013870:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4013874:	00c00044 	movi	r3,1
 4013878:	008200b4 	movhi	r2,2050
 401387c:	10841804 	addi	r2,r2,4192
 4013880:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard [y][x]==gameboard [y][x-1] && gameboard [y][x]== gameboard [y][x+1]) || (gameboard [y][x]==9 && gameboard [y][x-1]==-19) || (gameboard [y][x]==9 && gameboard [y][x+1]==-19))//(
 4013884:	e0b7c217 	ldw	r2,-8440(fp)
 4013888:	01400504 	movi	r5,20
 401388c:	1009883a 	mov	r4,r2
 4013890:	40191000 	call	4019100 <__mulsi3>
 4013894:	1007883a 	mov	r3,r2
 4013898:	e0b7c117 	ldw	r2,-8444(fp)
 401389c:	1885883a 	add	r2,r3,r2
 40138a0:	1085883a 	add	r2,r2,r2
 40138a4:	1085883a 	add	r2,r2,r2
 40138a8:	e0f7c104 	addi	r3,fp,-8444
 40138ac:	1885883a 	add	r2,r3,r2
 40138b0:	10879d04 	addi	r2,r2,7796
 40138b4:	14000017 	ldw	r16,0(r2)
 40138b8:	e0b7c117 	ldw	r2,-8444(fp)
 40138bc:	147fffc4 	addi	r17,r2,-1
 40138c0:	e0b7c217 	ldw	r2,-8440(fp)
 40138c4:	01400504 	movi	r5,20
 40138c8:	1009883a 	mov	r4,r2
 40138cc:	40191000 	call	4019100 <__mulsi3>
 40138d0:	1445883a 	add	r2,r2,r17
 40138d4:	1085883a 	add	r2,r2,r2
 40138d8:	1085883a 	add	r2,r2,r2
 40138dc:	e0f7c104 	addi	r3,fp,-8444
 40138e0:	1885883a 	add	r2,r3,r2
 40138e4:	10879d04 	addi	r2,r2,7796
 40138e8:	10800017 	ldw	r2,0(r2)
 40138ec:	80801b1e 	bne	r16,r2,401395c <main+0x13388>
 40138f0:	e0b7c217 	ldw	r2,-8440(fp)
 40138f4:	01400504 	movi	r5,20
 40138f8:	1009883a 	mov	r4,r2
 40138fc:	40191000 	call	4019100 <__mulsi3>
 4013900:	1007883a 	mov	r3,r2
 4013904:	e0b7c117 	ldw	r2,-8444(fp)
 4013908:	1885883a 	add	r2,r3,r2
 401390c:	1085883a 	add	r2,r2,r2
 4013910:	1085883a 	add	r2,r2,r2
 4013914:	e0f7c104 	addi	r3,fp,-8444
 4013918:	1885883a 	add	r2,r3,r2
 401391c:	10879d04 	addi	r2,r2,7796
 4013920:	14000017 	ldw	r16,0(r2)
 4013924:	e0b7c117 	ldw	r2,-8444(fp)
 4013928:	14400044 	addi	r17,r2,1
 401392c:	e0b7c217 	ldw	r2,-8440(fp)
 4013930:	01400504 	movi	r5,20
 4013934:	1009883a 	mov	r4,r2
 4013938:	40191000 	call	4019100 <__mulsi3>
 401393c:	1445883a 	add	r2,r2,r17
 4013940:	1085883a 	add	r2,r2,r2
 4013944:	1085883a 	add	r2,r2,r2
 4013948:	e0f7c104 	addi	r3,fp,-8444
 401394c:	1885883a 	add	r2,r3,r2
 4013950:	10879d04 	addi	r2,r2,7796
 4013954:	10800017 	ldw	r2,0(r2)
 4013958:	80803c26 	beq	r16,r2,4013a4c <main+0x13478>
 401395c:	e0b7c217 	ldw	r2,-8440(fp)
 4013960:	01400504 	movi	r5,20
 4013964:	1009883a 	mov	r4,r2
 4013968:	40191000 	call	4019100 <__mulsi3>
 401396c:	1007883a 	mov	r3,r2
 4013970:	e0b7c117 	ldw	r2,-8444(fp)
 4013974:	1885883a 	add	r2,r3,r2
 4013978:	1085883a 	add	r2,r2,r2
 401397c:	1085883a 	add	r2,r2,r2
 4013980:	e0f7c104 	addi	r3,fp,-8444
 4013984:	1885883a 	add	r2,r3,r2
 4013988:	10879d04 	addi	r2,r2,7796
 401398c:	10800017 	ldw	r2,0(r2)
 4013990:	10800258 	cmpnei	r2,r2,9
 4013994:	10000f1e 	bne	r2,zero,40139d4 <main+0x13400>
 4013998:	e0b7c117 	ldw	r2,-8444(fp)
 401399c:	143fffc4 	addi	r16,r2,-1
 40139a0:	e0b7c217 	ldw	r2,-8440(fp)
 40139a4:	01400504 	movi	r5,20
 40139a8:	1009883a 	mov	r4,r2
 40139ac:	40191000 	call	4019100 <__mulsi3>
 40139b0:	1405883a 	add	r2,r2,r16
 40139b4:	1085883a 	add	r2,r2,r2
 40139b8:	1085883a 	add	r2,r2,r2
 40139bc:	e0f7c104 	addi	r3,fp,-8444
 40139c0:	1885883a 	add	r2,r3,r2
 40139c4:	10879d04 	addi	r2,r2,7796
 40139c8:	10800017 	ldw	r2,0(r2)
 40139cc:	10bffb60 	cmpeqi	r2,r2,-19
 40139d0:	10001e1e 	bne	r2,zero,4013a4c <main+0x13478>
 40139d4:	e0b7c217 	ldw	r2,-8440(fp)
 40139d8:	01400504 	movi	r5,20
 40139dc:	1009883a 	mov	r4,r2
 40139e0:	40191000 	call	4019100 <__mulsi3>
 40139e4:	1007883a 	mov	r3,r2
 40139e8:	e0b7c117 	ldw	r2,-8444(fp)
 40139ec:	1885883a 	add	r2,r3,r2
 40139f0:	1085883a 	add	r2,r2,r2
 40139f4:	1085883a 	add	r2,r2,r2
 40139f8:	e0f7c104 	addi	r3,fp,-8444
 40139fc:	1885883a 	add	r2,r3,r2
 4013a00:	10879d04 	addi	r2,r2,7796
 4013a04:	10800017 	ldw	r2,0(r2)
 4013a08:	10800258 	cmpnei	r2,r2,9
 4013a0c:	1000311e 	bne	r2,zero,4013ad4 <main+0x13500>
 4013a10:	e0b7c117 	ldw	r2,-8444(fp)
 4013a14:	14000044 	addi	r16,r2,1
 4013a18:	e0b7c217 	ldw	r2,-8440(fp)
 4013a1c:	01400504 	movi	r5,20
 4013a20:	1009883a 	mov	r4,r2
 4013a24:	40191000 	call	4019100 <__mulsi3>
 4013a28:	1405883a 	add	r2,r2,r16
 4013a2c:	1085883a 	add	r2,r2,r2
 4013a30:	1085883a 	add	r2,r2,r2
 4013a34:	e0f7c104 	addi	r3,fp,-8444
 4013a38:	1885883a 	add	r2,r3,r2
 4013a3c:	10879d04 	addi	r2,r2,7796
 4013a40:	10800017 	ldw	r2,0(r2)
 4013a44:	10bffb58 	cmpnei	r2,r2,-19
 4013a48:	1000221e 	bne	r2,zero,4013ad4 <main+0x13500>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4013a4c:	e0b7c217 	ldw	r2,-8440(fp)
 4013a50:	10c00084 	addi	r3,r2,2
 4013a54:	e0b95e04 	addi	r2,fp,-6792
 4013a58:	180f883a 	mov	r7,r3
 4013a5c:	e1b7c117 	ldw	r6,-8444(fp)
 4013a60:	01403fc4 	movi	r5,255
 4013a64:	1009883a 	mov	r4,r2
 4013a68:	40003c80 	call	40003c8 <draw>
					draw(nine, COLOR08_BLACK, x,y+2 );
 4013a6c:	e0b7c217 	ldw	r2,-8440(fp)
 4013a70:	10800084 	addi	r2,r2,2
 4013a74:	100f883a 	mov	r7,r2
 4013a78:	e1b7c117 	ldw	r6,-8444(fp)
 4013a7c:	000b883a 	mov	r5,zero
 4013a80:	010100f4 	movhi	r4,1027
 4013a84:	213eaa04 	addi	r4,r4,-1368
 4013a88:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-19;
 4013a8c:	e0b7c217 	ldw	r2,-8440(fp)
 4013a90:	01400504 	movi	r5,20
 4013a94:	1009883a 	mov	r4,r2
 4013a98:	40191000 	call	4019100 <__mulsi3>
 4013a9c:	1007883a 	mov	r3,r2
 4013aa0:	e0b7c117 	ldw	r2,-8444(fp)
 4013aa4:	1885883a 	add	r2,r3,r2
 4013aa8:	1085883a 	add	r2,r2,r2
 4013aac:	1085883a 	add	r2,r2,r2
 4013ab0:	e0f7c104 	addi	r3,fp,-8444
 4013ab4:	1885883a 	add	r2,r3,r2
 4013ab8:	10879d04 	addi	r2,r2,7796
 4013abc:	00fffb44 	movi	r3,-19
 4013ac0:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4013ac4:	00c00044 	movi	r3,1
 4013ac8:	008200b4 	movhi	r2,2050
 4013acc:	10841804 	addi	r2,r2,4192
 4013ad0:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard [y][x]==gameboard [y][x-1] && gameboard [y][x]== gameboard [y][x-2]))//00x
 4013ad4:	e0b7c217 	ldw	r2,-8440(fp)
 4013ad8:	01400504 	movi	r5,20
 4013adc:	1009883a 	mov	r4,r2
 4013ae0:	40191000 	call	4019100 <__mulsi3>
 4013ae4:	1007883a 	mov	r3,r2
 4013ae8:	e0b7c117 	ldw	r2,-8444(fp)
 4013aec:	1885883a 	add	r2,r3,r2
 4013af0:	1085883a 	add	r2,r2,r2
 4013af4:	1085883a 	add	r2,r2,r2
 4013af8:	e0f7c104 	addi	r3,fp,-8444
 4013afc:	1885883a 	add	r2,r3,r2
 4013b00:	10879d04 	addi	r2,r2,7796
 4013b04:	14000017 	ldw	r16,0(r2)
 4013b08:	e0b7c117 	ldw	r2,-8444(fp)
 4013b0c:	147fffc4 	addi	r17,r2,-1
 4013b10:	e0b7c217 	ldw	r2,-8440(fp)
 4013b14:	01400504 	movi	r5,20
 4013b18:	1009883a 	mov	r4,r2
 4013b1c:	40191000 	call	4019100 <__mulsi3>
 4013b20:	1445883a 	add	r2,r2,r17
 4013b24:	1085883a 	add	r2,r2,r2
 4013b28:	1085883a 	add	r2,r2,r2
 4013b2c:	e0f7c104 	addi	r3,fp,-8444
 4013b30:	1885883a 	add	r2,r3,r2
 4013b34:	10879d04 	addi	r2,r2,7796
 4013b38:	10800017 	ldw	r2,0(r2)
 4013b3c:	80803d1e 	bne	r16,r2,4013c34 <main+0x13660>
 4013b40:	e0b7c217 	ldw	r2,-8440(fp)
 4013b44:	01400504 	movi	r5,20
 4013b48:	1009883a 	mov	r4,r2
 4013b4c:	40191000 	call	4019100 <__mulsi3>
 4013b50:	1007883a 	mov	r3,r2
 4013b54:	e0b7c117 	ldw	r2,-8444(fp)
 4013b58:	1885883a 	add	r2,r3,r2
 4013b5c:	1085883a 	add	r2,r2,r2
 4013b60:	1085883a 	add	r2,r2,r2
 4013b64:	e0f7c104 	addi	r3,fp,-8444
 4013b68:	1885883a 	add	r2,r3,r2
 4013b6c:	10879d04 	addi	r2,r2,7796
 4013b70:	14000017 	ldw	r16,0(r2)
 4013b74:	e0b7c117 	ldw	r2,-8444(fp)
 4013b78:	147fff84 	addi	r17,r2,-2
 4013b7c:	e0b7c217 	ldw	r2,-8440(fp)
 4013b80:	01400504 	movi	r5,20
 4013b84:	1009883a 	mov	r4,r2
 4013b88:	40191000 	call	4019100 <__mulsi3>
 4013b8c:	1445883a 	add	r2,r2,r17
 4013b90:	1085883a 	add	r2,r2,r2
 4013b94:	1085883a 	add	r2,r2,r2
 4013b98:	e0f7c104 	addi	r3,fp,-8444
 4013b9c:	1885883a 	add	r2,r3,r2
 4013ba0:	10879d04 	addi	r2,r2,7796
 4013ba4:	10800017 	ldw	r2,0(r2)
 4013ba8:	8080221e 	bne	r16,r2,4013c34 <main+0x13660>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4013bac:	e0b7c217 	ldw	r2,-8440(fp)
 4013bb0:	10c00084 	addi	r3,r2,2
 4013bb4:	e0b95e04 	addi	r2,fp,-6792
 4013bb8:	180f883a 	mov	r7,r3
 4013bbc:	e1b7c117 	ldw	r6,-8444(fp)
 4013bc0:	01403fc4 	movi	r5,255
 4013bc4:	1009883a 	mov	r4,r2
 4013bc8:	40003c80 	call	40003c8 <draw>
					draw(nine, COLOR08_BLACK, x,y+2 );
 4013bcc:	e0b7c217 	ldw	r2,-8440(fp)
 4013bd0:	10800084 	addi	r2,r2,2
 4013bd4:	100f883a 	mov	r7,r2
 4013bd8:	e1b7c117 	ldw	r6,-8444(fp)
 4013bdc:	000b883a 	mov	r5,zero
 4013be0:	010100f4 	movhi	r4,1027
 4013be4:	213eaa04 	addi	r4,r4,-1368
 4013be8:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-19;
 4013bec:	e0b7c217 	ldw	r2,-8440(fp)
 4013bf0:	01400504 	movi	r5,20
 4013bf4:	1009883a 	mov	r4,r2
 4013bf8:	40191000 	call	4019100 <__mulsi3>
 4013bfc:	1007883a 	mov	r3,r2
 4013c00:	e0b7c117 	ldw	r2,-8444(fp)
 4013c04:	1885883a 	add	r2,r3,r2
 4013c08:	1085883a 	add	r2,r2,r2
 4013c0c:	1085883a 	add	r2,r2,r2
 4013c10:	e0f7c104 	addi	r3,fp,-8444
 4013c14:	1885883a 	add	r2,r3,r2
 4013c18:	10879d04 	addi	r2,r2,7796
 4013c1c:	00fffb44 	movi	r3,-19
 4013c20:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4013c24:	00c00044 	movi	r3,1
 4013c28:	008200b4 	movhi	r2,2050
 4013c2c:	10841804 	addi	r2,r2,4192
 4013c30:	10c00035 	stwio	r3,0(r2)
				}
				/////////////////////////////////
				//vertical9
				if ((gameboard [y][x]==gameboard [y+1][x] && gameboard [y+1][x]== gameboard [y+2][x]) || (gameboard [y][x]==9 && gameboard [y+1][x]==-19))//xmb
 4013c34:	e0b7c217 	ldw	r2,-8440(fp)
 4013c38:	01400504 	movi	r5,20
 4013c3c:	1009883a 	mov	r4,r2
 4013c40:	40191000 	call	4019100 <__mulsi3>
 4013c44:	1007883a 	mov	r3,r2
 4013c48:	e0b7c117 	ldw	r2,-8444(fp)
 4013c4c:	1885883a 	add	r2,r3,r2
 4013c50:	1085883a 	add	r2,r2,r2
 4013c54:	1085883a 	add	r2,r2,r2
 4013c58:	e0f7c104 	addi	r3,fp,-8444
 4013c5c:	1885883a 	add	r2,r3,r2
 4013c60:	10879d04 	addi	r2,r2,7796
 4013c64:	14000017 	ldw	r16,0(r2)
 4013c68:	e0b7c217 	ldw	r2,-8440(fp)
 4013c6c:	10800044 	addi	r2,r2,1
 4013c70:	01400504 	movi	r5,20
 4013c74:	1009883a 	mov	r4,r2
 4013c78:	40191000 	call	4019100 <__mulsi3>
 4013c7c:	1007883a 	mov	r3,r2
 4013c80:	e0b7c117 	ldw	r2,-8444(fp)
 4013c84:	1885883a 	add	r2,r3,r2
 4013c88:	1085883a 	add	r2,r2,r2
 4013c8c:	1085883a 	add	r2,r2,r2
 4013c90:	e0f7c104 	addi	r3,fp,-8444
 4013c94:	1885883a 	add	r2,r3,r2
 4013c98:	10879d04 	addi	r2,r2,7796
 4013c9c:	10800017 	ldw	r2,0(r2)
 4013ca0:	80801d1e 	bne	r16,r2,4013d18 <main+0x13744>
 4013ca4:	e0b7c217 	ldw	r2,-8440(fp)
 4013ca8:	10800044 	addi	r2,r2,1
 4013cac:	01400504 	movi	r5,20
 4013cb0:	1009883a 	mov	r4,r2
 4013cb4:	40191000 	call	4019100 <__mulsi3>
 4013cb8:	1007883a 	mov	r3,r2
 4013cbc:	e0b7c117 	ldw	r2,-8444(fp)
 4013cc0:	1885883a 	add	r2,r3,r2
 4013cc4:	1085883a 	add	r2,r2,r2
 4013cc8:	1085883a 	add	r2,r2,r2
 4013ccc:	e0f7c104 	addi	r3,fp,-8444
 4013cd0:	1885883a 	add	r2,r3,r2
 4013cd4:	10879d04 	addi	r2,r2,7796
 4013cd8:	14000017 	ldw	r16,0(r2)
 4013cdc:	e0b7c217 	ldw	r2,-8440(fp)
 4013ce0:	10800084 	addi	r2,r2,2
 4013ce4:	01400504 	movi	r5,20
 4013ce8:	1009883a 	mov	r4,r2
 4013cec:	40191000 	call	4019100 <__mulsi3>
 4013cf0:	1007883a 	mov	r3,r2
 4013cf4:	e0b7c117 	ldw	r2,-8444(fp)
 4013cf8:	1885883a 	add	r2,r3,r2
 4013cfc:	1085883a 	add	r2,r2,r2
 4013d00:	1085883a 	add	r2,r2,r2
 4013d04:	e0f7c104 	addi	r3,fp,-8444
 4013d08:	1885883a 	add	r2,r3,r2
 4013d0c:	10879d04 	addi	r2,r2,7796
 4013d10:	10800017 	ldw	r2,0(r2)
 4013d14:	80801f26 	beq	r16,r2,4013d94 <main+0x137c0>
 4013d18:	e0b7c217 	ldw	r2,-8440(fp)
 4013d1c:	01400504 	movi	r5,20
 4013d20:	1009883a 	mov	r4,r2
 4013d24:	40191000 	call	4019100 <__mulsi3>
 4013d28:	1007883a 	mov	r3,r2
 4013d2c:	e0b7c117 	ldw	r2,-8444(fp)
 4013d30:	1885883a 	add	r2,r3,r2
 4013d34:	1085883a 	add	r2,r2,r2
 4013d38:	1085883a 	add	r2,r2,r2
 4013d3c:	e0f7c104 	addi	r3,fp,-8444
 4013d40:	1885883a 	add	r2,r3,r2
 4013d44:	10879d04 	addi	r2,r2,7796
 4013d48:	10800017 	ldw	r2,0(r2)
 4013d4c:	10800258 	cmpnei	r2,r2,9
 4013d50:	1000321e 	bne	r2,zero,4013e1c <main+0x13848>
 4013d54:	e0b7c217 	ldw	r2,-8440(fp)
 4013d58:	10800044 	addi	r2,r2,1
 4013d5c:	01400504 	movi	r5,20
 4013d60:	1009883a 	mov	r4,r2
 4013d64:	40191000 	call	4019100 <__mulsi3>
 4013d68:	1007883a 	mov	r3,r2
 4013d6c:	e0b7c117 	ldw	r2,-8444(fp)
 4013d70:	1885883a 	add	r2,r3,r2
 4013d74:	1085883a 	add	r2,r2,r2
 4013d78:	1085883a 	add	r2,r2,r2
 4013d7c:	e0f7c104 	addi	r3,fp,-8444
 4013d80:	1885883a 	add	r2,r3,r2
 4013d84:	10879d04 	addi	r2,r2,7796
 4013d88:	10800017 	ldw	r2,0(r2)
 4013d8c:	10bffb58 	cmpnei	r2,r2,-19
 4013d90:	1000221e 	bne	r2,zero,4013e1c <main+0x13848>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4013d94:	e0b7c217 	ldw	r2,-8440(fp)
 4013d98:	10c00084 	addi	r3,r2,2
 4013d9c:	e0b95e04 	addi	r2,fp,-6792
 4013da0:	180f883a 	mov	r7,r3
 4013da4:	e1b7c117 	ldw	r6,-8444(fp)
 4013da8:	01403fc4 	movi	r5,255
 4013dac:	1009883a 	mov	r4,r2
 4013db0:	40003c80 	call	40003c8 <draw>
					draw(nine, COLOR08_BLACK, x,y+2 );
 4013db4:	e0b7c217 	ldw	r2,-8440(fp)
 4013db8:	10800084 	addi	r2,r2,2
 4013dbc:	100f883a 	mov	r7,r2
 4013dc0:	e1b7c117 	ldw	r6,-8444(fp)
 4013dc4:	000b883a 	mov	r5,zero
 4013dc8:	010100f4 	movhi	r4,1027
 4013dcc:	213eaa04 	addi	r4,r4,-1368
 4013dd0:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-19;
 4013dd4:	e0b7c217 	ldw	r2,-8440(fp)
 4013dd8:	01400504 	movi	r5,20
 4013ddc:	1009883a 	mov	r4,r2
 4013de0:	40191000 	call	4019100 <__mulsi3>
 4013de4:	1007883a 	mov	r3,r2
 4013de8:	e0b7c117 	ldw	r2,-8444(fp)
 4013dec:	1885883a 	add	r2,r3,r2
 4013df0:	1085883a 	add	r2,r2,r2
 4013df4:	1085883a 	add	r2,r2,r2
 4013df8:	e0f7c104 	addi	r3,fp,-8444
 4013dfc:	1885883a 	add	r2,r3,r2
 4013e00:	10879d04 	addi	r2,r2,7796
 4013e04:	00fffb44 	movi	r3,-19
 4013e08:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4013e0c:	00c00044 	movi	r3,1
 4013e10:	008200b4 	movhi	r2,2050
 4013e14:	10841804 	addi	r2,r2,4192
 4013e18:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard [y][x]==gameboard [y-1][x] && gameboard [y][x]== gameboard [y+1][x]) || (gameboard [y][x]==9 && gameboard [y+1][x]==-19))//txb
 4013e1c:	e0b7c217 	ldw	r2,-8440(fp)
 4013e20:	01400504 	movi	r5,20
 4013e24:	1009883a 	mov	r4,r2
 4013e28:	40191000 	call	4019100 <__mulsi3>
 4013e2c:	1007883a 	mov	r3,r2
 4013e30:	e0b7c117 	ldw	r2,-8444(fp)
 4013e34:	1885883a 	add	r2,r3,r2
 4013e38:	1085883a 	add	r2,r2,r2
 4013e3c:	1085883a 	add	r2,r2,r2
 4013e40:	e0f7c104 	addi	r3,fp,-8444
 4013e44:	1885883a 	add	r2,r3,r2
 4013e48:	10879d04 	addi	r2,r2,7796
 4013e4c:	14000017 	ldw	r16,0(r2)
 4013e50:	e0b7c217 	ldw	r2,-8440(fp)
 4013e54:	10bfffc4 	addi	r2,r2,-1
 4013e58:	01400504 	movi	r5,20
 4013e5c:	1009883a 	mov	r4,r2
 4013e60:	40191000 	call	4019100 <__mulsi3>
 4013e64:	1007883a 	mov	r3,r2
 4013e68:	e0b7c117 	ldw	r2,-8444(fp)
 4013e6c:	1885883a 	add	r2,r3,r2
 4013e70:	1085883a 	add	r2,r2,r2
 4013e74:	1085883a 	add	r2,r2,r2
 4013e78:	e0f7c104 	addi	r3,fp,-8444
 4013e7c:	1885883a 	add	r2,r3,r2
 4013e80:	10879d04 	addi	r2,r2,7796
 4013e84:	10800017 	ldw	r2,0(r2)
 4013e88:	80801c1e 	bne	r16,r2,4013efc <main+0x13928>
 4013e8c:	e0b7c217 	ldw	r2,-8440(fp)
 4013e90:	01400504 	movi	r5,20
 4013e94:	1009883a 	mov	r4,r2
 4013e98:	40191000 	call	4019100 <__mulsi3>
 4013e9c:	1007883a 	mov	r3,r2
 4013ea0:	e0b7c117 	ldw	r2,-8444(fp)
 4013ea4:	1885883a 	add	r2,r3,r2
 4013ea8:	1085883a 	add	r2,r2,r2
 4013eac:	1085883a 	add	r2,r2,r2
 4013eb0:	e0f7c104 	addi	r3,fp,-8444
 4013eb4:	1885883a 	add	r2,r3,r2
 4013eb8:	10879d04 	addi	r2,r2,7796
 4013ebc:	14000017 	ldw	r16,0(r2)
 4013ec0:	e0b7c217 	ldw	r2,-8440(fp)
 4013ec4:	10800044 	addi	r2,r2,1
 4013ec8:	01400504 	movi	r5,20
 4013ecc:	1009883a 	mov	r4,r2
 4013ed0:	40191000 	call	4019100 <__mulsi3>
 4013ed4:	1007883a 	mov	r3,r2
 4013ed8:	e0b7c117 	ldw	r2,-8444(fp)
 4013edc:	1885883a 	add	r2,r3,r2
 4013ee0:	1085883a 	add	r2,r2,r2
 4013ee4:	1085883a 	add	r2,r2,r2
 4013ee8:	e0f7c104 	addi	r3,fp,-8444
 4013eec:	1885883a 	add	r2,r3,r2
 4013ef0:	10879d04 	addi	r2,r2,7796
 4013ef4:	10800017 	ldw	r2,0(r2)
 4013ef8:	80801f26 	beq	r16,r2,4013f78 <main+0x139a4>
 4013efc:	e0b7c217 	ldw	r2,-8440(fp)
 4013f00:	01400504 	movi	r5,20
 4013f04:	1009883a 	mov	r4,r2
 4013f08:	40191000 	call	4019100 <__mulsi3>
 4013f0c:	1007883a 	mov	r3,r2
 4013f10:	e0b7c117 	ldw	r2,-8444(fp)
 4013f14:	1885883a 	add	r2,r3,r2
 4013f18:	1085883a 	add	r2,r2,r2
 4013f1c:	1085883a 	add	r2,r2,r2
 4013f20:	e0f7c104 	addi	r3,fp,-8444
 4013f24:	1885883a 	add	r2,r3,r2
 4013f28:	10879d04 	addi	r2,r2,7796
 4013f2c:	10800017 	ldw	r2,0(r2)
 4013f30:	10800258 	cmpnei	r2,r2,9
 4013f34:	1000321e 	bne	r2,zero,4014000 <main+0x13a2c>
 4013f38:	e0b7c217 	ldw	r2,-8440(fp)
 4013f3c:	10800044 	addi	r2,r2,1
 4013f40:	01400504 	movi	r5,20
 4013f44:	1009883a 	mov	r4,r2
 4013f48:	40191000 	call	4019100 <__mulsi3>
 4013f4c:	1007883a 	mov	r3,r2
 4013f50:	e0b7c117 	ldw	r2,-8444(fp)
 4013f54:	1885883a 	add	r2,r3,r2
 4013f58:	1085883a 	add	r2,r2,r2
 4013f5c:	1085883a 	add	r2,r2,r2
 4013f60:	e0f7c104 	addi	r3,fp,-8444
 4013f64:	1885883a 	add	r2,r3,r2
 4013f68:	10879d04 	addi	r2,r2,7796
 4013f6c:	10800017 	ldw	r2,0(r2)
 4013f70:	10bffb58 	cmpnei	r2,r2,-19
 4013f74:	1000221e 	bne	r2,zero,4014000 <main+0x13a2c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4013f78:	e0b7c217 	ldw	r2,-8440(fp)
 4013f7c:	10c00084 	addi	r3,r2,2
 4013f80:	e0b95e04 	addi	r2,fp,-6792
 4013f84:	180f883a 	mov	r7,r3
 4013f88:	e1b7c117 	ldw	r6,-8444(fp)
 4013f8c:	01403fc4 	movi	r5,255
 4013f90:	1009883a 	mov	r4,r2
 4013f94:	40003c80 	call	40003c8 <draw>
					draw(nine, COLOR08_BLACK, x,y+2 );
 4013f98:	e0b7c217 	ldw	r2,-8440(fp)
 4013f9c:	10800084 	addi	r2,r2,2
 4013fa0:	100f883a 	mov	r7,r2
 4013fa4:	e1b7c117 	ldw	r6,-8444(fp)
 4013fa8:	000b883a 	mov	r5,zero
 4013fac:	010100f4 	movhi	r4,1027
 4013fb0:	213eaa04 	addi	r4,r4,-1368
 4013fb4:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-19;
 4013fb8:	e0b7c217 	ldw	r2,-8440(fp)
 4013fbc:	01400504 	movi	r5,20
 4013fc0:	1009883a 	mov	r4,r2
 4013fc4:	40191000 	call	4019100 <__mulsi3>
 4013fc8:	1007883a 	mov	r3,r2
 4013fcc:	e0b7c117 	ldw	r2,-8444(fp)
 4013fd0:	1885883a 	add	r2,r3,r2
 4013fd4:	1085883a 	add	r2,r2,r2
 4013fd8:	1085883a 	add	r2,r2,r2
 4013fdc:	e0f7c104 	addi	r3,fp,-8444
 4013fe0:	1885883a 	add	r2,r3,r2
 4013fe4:	10879d04 	addi	r2,r2,7796
 4013fe8:	00fffb44 	movi	r3,-19
 4013fec:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4013ff0:	00c00044 	movi	r3,1
 4013ff4:	008200b4 	movhi	r2,2050
 4013ff8:	10841804 	addi	r2,r2,4192
 4013ffc:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard [y][x]==gameboard [y-1][x] && gameboard [y][x]== gameboard [y-2][x]) || (gameboard [y][x]==9 && gameboard [y-1][x]==-19))//tmx
 4014000:	e0b7c217 	ldw	r2,-8440(fp)
 4014004:	01400504 	movi	r5,20
 4014008:	1009883a 	mov	r4,r2
 401400c:	40191000 	call	4019100 <__mulsi3>
 4014010:	1007883a 	mov	r3,r2
 4014014:	e0b7c117 	ldw	r2,-8444(fp)
 4014018:	1885883a 	add	r2,r3,r2
 401401c:	1085883a 	add	r2,r2,r2
 4014020:	1085883a 	add	r2,r2,r2
 4014024:	e0f7c104 	addi	r3,fp,-8444
 4014028:	1885883a 	add	r2,r3,r2
 401402c:	10879d04 	addi	r2,r2,7796
 4014030:	14000017 	ldw	r16,0(r2)
 4014034:	e0b7c217 	ldw	r2,-8440(fp)
 4014038:	10bfffc4 	addi	r2,r2,-1
 401403c:	01400504 	movi	r5,20
 4014040:	1009883a 	mov	r4,r2
 4014044:	40191000 	call	4019100 <__mulsi3>
 4014048:	1007883a 	mov	r3,r2
 401404c:	e0b7c117 	ldw	r2,-8444(fp)
 4014050:	1885883a 	add	r2,r3,r2
 4014054:	1085883a 	add	r2,r2,r2
 4014058:	1085883a 	add	r2,r2,r2
 401405c:	e0f7c104 	addi	r3,fp,-8444
 4014060:	1885883a 	add	r2,r3,r2
 4014064:	10879d04 	addi	r2,r2,7796
 4014068:	10800017 	ldw	r2,0(r2)
 401406c:	80801c1e 	bne	r16,r2,40140e0 <main+0x13b0c>
 4014070:	e0b7c217 	ldw	r2,-8440(fp)
 4014074:	01400504 	movi	r5,20
 4014078:	1009883a 	mov	r4,r2
 401407c:	40191000 	call	4019100 <__mulsi3>
 4014080:	1007883a 	mov	r3,r2
 4014084:	e0b7c117 	ldw	r2,-8444(fp)
 4014088:	1885883a 	add	r2,r3,r2
 401408c:	1085883a 	add	r2,r2,r2
 4014090:	1085883a 	add	r2,r2,r2
 4014094:	e0f7c104 	addi	r3,fp,-8444
 4014098:	1885883a 	add	r2,r3,r2
 401409c:	10879d04 	addi	r2,r2,7796
 40140a0:	14000017 	ldw	r16,0(r2)
 40140a4:	e0b7c217 	ldw	r2,-8440(fp)
 40140a8:	10bfff84 	addi	r2,r2,-2
 40140ac:	01400504 	movi	r5,20
 40140b0:	1009883a 	mov	r4,r2
 40140b4:	40191000 	call	4019100 <__mulsi3>
 40140b8:	1007883a 	mov	r3,r2
 40140bc:	e0b7c117 	ldw	r2,-8444(fp)
 40140c0:	1885883a 	add	r2,r3,r2
 40140c4:	1085883a 	add	r2,r2,r2
 40140c8:	1085883a 	add	r2,r2,r2
 40140cc:	e0f7c104 	addi	r3,fp,-8444
 40140d0:	1885883a 	add	r2,r3,r2
 40140d4:	10879d04 	addi	r2,r2,7796
 40140d8:	10800017 	ldw	r2,0(r2)
 40140dc:	80801f26 	beq	r16,r2,401415c <main+0x13b88>
 40140e0:	e0b7c217 	ldw	r2,-8440(fp)
 40140e4:	01400504 	movi	r5,20
 40140e8:	1009883a 	mov	r4,r2
 40140ec:	40191000 	call	4019100 <__mulsi3>
 40140f0:	1007883a 	mov	r3,r2
 40140f4:	e0b7c117 	ldw	r2,-8444(fp)
 40140f8:	1885883a 	add	r2,r3,r2
 40140fc:	1085883a 	add	r2,r2,r2
 4014100:	1085883a 	add	r2,r2,r2
 4014104:	e0f7c104 	addi	r3,fp,-8444
 4014108:	1885883a 	add	r2,r3,r2
 401410c:	10879d04 	addi	r2,r2,7796
 4014110:	10800017 	ldw	r2,0(r2)
 4014114:	10800258 	cmpnei	r2,r2,9
 4014118:	1000321e 	bne	r2,zero,40141e4 <main+0x13c10>
 401411c:	e0b7c217 	ldw	r2,-8440(fp)
 4014120:	10bfffc4 	addi	r2,r2,-1
 4014124:	01400504 	movi	r5,20
 4014128:	1009883a 	mov	r4,r2
 401412c:	40191000 	call	4019100 <__mulsi3>
 4014130:	1007883a 	mov	r3,r2
 4014134:	e0b7c117 	ldw	r2,-8444(fp)
 4014138:	1885883a 	add	r2,r3,r2
 401413c:	1085883a 	add	r2,r2,r2
 4014140:	1085883a 	add	r2,r2,r2
 4014144:	e0f7c104 	addi	r3,fp,-8444
 4014148:	1885883a 	add	r2,r3,r2
 401414c:	10879d04 	addi	r2,r2,7796
 4014150:	10800017 	ldw	r2,0(r2)
 4014154:	10bffb58 	cmpnei	r2,r2,-19
 4014158:	1000221e 	bne	r2,zero,40141e4 <main+0x13c10>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 401415c:	e0b7c217 	ldw	r2,-8440(fp)
 4014160:	10c00084 	addi	r3,r2,2
 4014164:	e0b95e04 	addi	r2,fp,-6792
 4014168:	180f883a 	mov	r7,r3
 401416c:	e1b7c117 	ldw	r6,-8444(fp)
 4014170:	01403fc4 	movi	r5,255
 4014174:	1009883a 	mov	r4,r2
 4014178:	40003c80 	call	40003c8 <draw>
					draw(nine, COLOR08_BLACK, x,y+2 );
 401417c:	e0b7c217 	ldw	r2,-8440(fp)
 4014180:	10800084 	addi	r2,r2,2
 4014184:	100f883a 	mov	r7,r2
 4014188:	e1b7c117 	ldw	r6,-8444(fp)
 401418c:	000b883a 	mov	r5,zero
 4014190:	010100f4 	movhi	r4,1027
 4014194:	213eaa04 	addi	r4,r4,-1368
 4014198:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-19;
 401419c:	e0b7c217 	ldw	r2,-8440(fp)
 40141a0:	01400504 	movi	r5,20
 40141a4:	1009883a 	mov	r4,r2
 40141a8:	40191000 	call	4019100 <__mulsi3>
 40141ac:	1007883a 	mov	r3,r2
 40141b0:	e0b7c117 	ldw	r2,-8444(fp)
 40141b4:	1885883a 	add	r2,r3,r2
 40141b8:	1085883a 	add	r2,r2,r2
 40141bc:	1085883a 	add	r2,r2,r2
 40141c0:	e0f7c104 	addi	r3,fp,-8444
 40141c4:	1885883a 	add	r2,r3,r2
 40141c8:	10879d04 	addi	r2,r2,7796
 40141cc:	00fffb44 	movi	r3,-19
 40141d0:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40141d4:	00c00044 	movi	r3,1
 40141d8:	008200b4 	movhi	r2,2050
 40141dc:	10841804 	addi	r2,r2,4192
 40141e0:	10c00035 	stwio	r3,0(r2)
				}
//////////////////////////////////////////////////////////////////
				//diagonal (\)9
				if ((gameboard [y][x]==gameboard [y+1][x+1] && gameboard[y+1][x+1]== gameboard[y+2][x+2]))//(\x\)
 40141e4:	e0b7c217 	ldw	r2,-8440(fp)
 40141e8:	01400504 	movi	r5,20
 40141ec:	1009883a 	mov	r4,r2
 40141f0:	40191000 	call	4019100 <__mulsi3>
 40141f4:	1007883a 	mov	r3,r2
 40141f8:	e0b7c117 	ldw	r2,-8444(fp)
 40141fc:	1885883a 	add	r2,r3,r2
 4014200:	1085883a 	add	r2,r2,r2
 4014204:	1085883a 	add	r2,r2,r2
 4014208:	e0f7c104 	addi	r3,fp,-8444
 401420c:	1885883a 	add	r2,r3,r2
 4014210:	10879d04 	addi	r2,r2,7796
 4014214:	14000017 	ldw	r16,0(r2)
 4014218:	e0b7c217 	ldw	r2,-8440(fp)
 401421c:	10c00044 	addi	r3,r2,1
 4014220:	e0b7c117 	ldw	r2,-8444(fp)
 4014224:	14400044 	addi	r17,r2,1
 4014228:	01400504 	movi	r5,20
 401422c:	1809883a 	mov	r4,r3
 4014230:	40191000 	call	4019100 <__mulsi3>
 4014234:	1445883a 	add	r2,r2,r17
 4014238:	1085883a 	add	r2,r2,r2
 401423c:	1085883a 	add	r2,r2,r2
 4014240:	e0f7c104 	addi	r3,fp,-8444
 4014244:	1885883a 	add	r2,r3,r2
 4014248:	10879d04 	addi	r2,r2,7796
 401424c:	10800017 	ldw	r2,0(r2)
 4014250:	80803f1e 	bne	r16,r2,4014350 <main+0x13d7c>
 4014254:	e0b7c217 	ldw	r2,-8440(fp)
 4014258:	10c00044 	addi	r3,r2,1
 401425c:	e0b7c117 	ldw	r2,-8444(fp)
 4014260:	14000044 	addi	r16,r2,1
 4014264:	01400504 	movi	r5,20
 4014268:	1809883a 	mov	r4,r3
 401426c:	40191000 	call	4019100 <__mulsi3>
 4014270:	1405883a 	add	r2,r2,r16
 4014274:	1085883a 	add	r2,r2,r2
 4014278:	1085883a 	add	r2,r2,r2
 401427c:	e0f7c104 	addi	r3,fp,-8444
 4014280:	1885883a 	add	r2,r3,r2
 4014284:	10879d04 	addi	r2,r2,7796
 4014288:	14000017 	ldw	r16,0(r2)
 401428c:	e0b7c217 	ldw	r2,-8440(fp)
 4014290:	10c00084 	addi	r3,r2,2
 4014294:	e0b7c117 	ldw	r2,-8444(fp)
 4014298:	14400084 	addi	r17,r2,2
 401429c:	01400504 	movi	r5,20
 40142a0:	1809883a 	mov	r4,r3
 40142a4:	40191000 	call	4019100 <__mulsi3>
 40142a8:	1445883a 	add	r2,r2,r17
 40142ac:	1085883a 	add	r2,r2,r2
 40142b0:	1085883a 	add	r2,r2,r2
 40142b4:	e0f7c104 	addi	r3,fp,-8444
 40142b8:	1885883a 	add	r2,r3,r2
 40142bc:	10879d04 	addi	r2,r2,7796
 40142c0:	10800017 	ldw	r2,0(r2)
 40142c4:	8080221e 	bne	r16,r2,4014350 <main+0x13d7c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 40142c8:	e0b7c217 	ldw	r2,-8440(fp)
 40142cc:	10c00084 	addi	r3,r2,2
 40142d0:	e0b95e04 	addi	r2,fp,-6792
 40142d4:	180f883a 	mov	r7,r3
 40142d8:	e1b7c117 	ldw	r6,-8444(fp)
 40142dc:	01403fc4 	movi	r5,255
 40142e0:	1009883a 	mov	r4,r2
 40142e4:	40003c80 	call	40003c8 <draw>
					draw(nine, COLOR08_BLACK, x,y+2 );
 40142e8:	e0b7c217 	ldw	r2,-8440(fp)
 40142ec:	10800084 	addi	r2,r2,2
 40142f0:	100f883a 	mov	r7,r2
 40142f4:	e1b7c117 	ldw	r6,-8444(fp)
 40142f8:	000b883a 	mov	r5,zero
 40142fc:	010100f4 	movhi	r4,1027
 4014300:	213eaa04 	addi	r4,r4,-1368
 4014304:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-19;
 4014308:	e0b7c217 	ldw	r2,-8440(fp)
 401430c:	01400504 	movi	r5,20
 4014310:	1009883a 	mov	r4,r2
 4014314:	40191000 	call	4019100 <__mulsi3>
 4014318:	1007883a 	mov	r3,r2
 401431c:	e0b7c117 	ldw	r2,-8444(fp)
 4014320:	1885883a 	add	r2,r3,r2
 4014324:	1085883a 	add	r2,r2,r2
 4014328:	1085883a 	add	r2,r2,r2
 401432c:	e0f7c104 	addi	r3,fp,-8444
 4014330:	1885883a 	add	r2,r3,r2
 4014334:	10879d04 	addi	r2,r2,7796
 4014338:	00fffb44 	movi	r3,-19
 401433c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4014340:	00c00044 	movi	r3,1
 4014344:	008200b4 	movhi	r2,2050
 4014348:	10841804 	addi	r2,r2,4192
 401434c:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard [y][x]==gameboard [y+1][x+1] && gameboard[y][x]== gameboard[y+2][x+2]) )//(x\\)
 4014350:	e0b7c217 	ldw	r2,-8440(fp)
 4014354:	01400504 	movi	r5,20
 4014358:	1009883a 	mov	r4,r2
 401435c:	40191000 	call	4019100 <__mulsi3>
 4014360:	1007883a 	mov	r3,r2
 4014364:	e0b7c117 	ldw	r2,-8444(fp)
 4014368:	1885883a 	add	r2,r3,r2
 401436c:	1085883a 	add	r2,r2,r2
 4014370:	1085883a 	add	r2,r2,r2
 4014374:	e0f7c104 	addi	r3,fp,-8444
 4014378:	1885883a 	add	r2,r3,r2
 401437c:	10879d04 	addi	r2,r2,7796
 4014380:	14000017 	ldw	r16,0(r2)
 4014384:	e0b7c217 	ldw	r2,-8440(fp)
 4014388:	10c00044 	addi	r3,r2,1
 401438c:	e0b7c117 	ldw	r2,-8444(fp)
 4014390:	14400044 	addi	r17,r2,1
 4014394:	01400504 	movi	r5,20
 4014398:	1809883a 	mov	r4,r3
 401439c:	40191000 	call	4019100 <__mulsi3>
 40143a0:	1445883a 	add	r2,r2,r17
 40143a4:	1085883a 	add	r2,r2,r2
 40143a8:	1085883a 	add	r2,r2,r2
 40143ac:	e0f7c104 	addi	r3,fp,-8444
 40143b0:	1885883a 	add	r2,r3,r2
 40143b4:	10879d04 	addi	r2,r2,7796
 40143b8:	10800017 	ldw	r2,0(r2)
 40143bc:	80803e1e 	bne	r16,r2,40144b8 <main+0x13ee4>
 40143c0:	e0b7c217 	ldw	r2,-8440(fp)
 40143c4:	01400504 	movi	r5,20
 40143c8:	1009883a 	mov	r4,r2
 40143cc:	40191000 	call	4019100 <__mulsi3>
 40143d0:	1007883a 	mov	r3,r2
 40143d4:	e0b7c117 	ldw	r2,-8444(fp)
 40143d8:	1885883a 	add	r2,r3,r2
 40143dc:	1085883a 	add	r2,r2,r2
 40143e0:	1085883a 	add	r2,r2,r2
 40143e4:	e0f7c104 	addi	r3,fp,-8444
 40143e8:	1885883a 	add	r2,r3,r2
 40143ec:	10879d04 	addi	r2,r2,7796
 40143f0:	14000017 	ldw	r16,0(r2)
 40143f4:	e0b7c217 	ldw	r2,-8440(fp)
 40143f8:	10c00084 	addi	r3,r2,2
 40143fc:	e0b7c117 	ldw	r2,-8444(fp)
 4014400:	14400084 	addi	r17,r2,2
 4014404:	01400504 	movi	r5,20
 4014408:	1809883a 	mov	r4,r3
 401440c:	40191000 	call	4019100 <__mulsi3>
 4014410:	1445883a 	add	r2,r2,r17
 4014414:	1085883a 	add	r2,r2,r2
 4014418:	1085883a 	add	r2,r2,r2
 401441c:	e0f7c104 	addi	r3,fp,-8444
 4014420:	1885883a 	add	r2,r3,r2
 4014424:	10879d04 	addi	r2,r2,7796
 4014428:	10800017 	ldw	r2,0(r2)
 401442c:	8080221e 	bne	r16,r2,40144b8 <main+0x13ee4>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4014430:	e0b7c217 	ldw	r2,-8440(fp)
 4014434:	10c00084 	addi	r3,r2,2
 4014438:	e0b95e04 	addi	r2,fp,-6792
 401443c:	180f883a 	mov	r7,r3
 4014440:	e1b7c117 	ldw	r6,-8444(fp)
 4014444:	01403fc4 	movi	r5,255
 4014448:	1009883a 	mov	r4,r2
 401444c:	40003c80 	call	40003c8 <draw>
					draw(nine, COLOR08_BLACK, x,y+2 );
 4014450:	e0b7c217 	ldw	r2,-8440(fp)
 4014454:	10800084 	addi	r2,r2,2
 4014458:	100f883a 	mov	r7,r2
 401445c:	e1b7c117 	ldw	r6,-8444(fp)
 4014460:	000b883a 	mov	r5,zero
 4014464:	010100f4 	movhi	r4,1027
 4014468:	213eaa04 	addi	r4,r4,-1368
 401446c:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-19;
 4014470:	e0b7c217 	ldw	r2,-8440(fp)
 4014474:	01400504 	movi	r5,20
 4014478:	1009883a 	mov	r4,r2
 401447c:	40191000 	call	4019100 <__mulsi3>
 4014480:	1007883a 	mov	r3,r2
 4014484:	e0b7c117 	ldw	r2,-8444(fp)
 4014488:	1885883a 	add	r2,r3,r2
 401448c:	1085883a 	add	r2,r2,r2
 4014490:	1085883a 	add	r2,r2,r2
 4014494:	e0f7c104 	addi	r3,fp,-8444
 4014498:	1885883a 	add	r2,r3,r2
 401449c:	10879d04 	addi	r2,r2,7796
 40144a0:	00fffb44 	movi	r3,-19
 40144a4:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40144a8:	00c00044 	movi	r3,1
 40144ac:	008200b4 	movhi	r2,2050
 40144b0:	10841804 	addi	r2,r2,4192
 40144b4:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard [y][x]==gameboard [y-1][x-1] && gameboard[y][x]== gameboard[y-2][x-2]) )//(\\x)
 40144b8:	e0b7c217 	ldw	r2,-8440(fp)
 40144bc:	01400504 	movi	r5,20
 40144c0:	1009883a 	mov	r4,r2
 40144c4:	40191000 	call	4019100 <__mulsi3>
 40144c8:	1007883a 	mov	r3,r2
 40144cc:	e0b7c117 	ldw	r2,-8444(fp)
 40144d0:	1885883a 	add	r2,r3,r2
 40144d4:	1085883a 	add	r2,r2,r2
 40144d8:	1085883a 	add	r2,r2,r2
 40144dc:	e0f7c104 	addi	r3,fp,-8444
 40144e0:	1885883a 	add	r2,r3,r2
 40144e4:	10879d04 	addi	r2,r2,7796
 40144e8:	14000017 	ldw	r16,0(r2)
 40144ec:	e0b7c217 	ldw	r2,-8440(fp)
 40144f0:	10ffffc4 	addi	r3,r2,-1
 40144f4:	e0b7c117 	ldw	r2,-8444(fp)
 40144f8:	147fffc4 	addi	r17,r2,-1
 40144fc:	01400504 	movi	r5,20
 4014500:	1809883a 	mov	r4,r3
 4014504:	40191000 	call	4019100 <__mulsi3>
 4014508:	1445883a 	add	r2,r2,r17
 401450c:	1085883a 	add	r2,r2,r2
 4014510:	1085883a 	add	r2,r2,r2
 4014514:	e0f7c104 	addi	r3,fp,-8444
 4014518:	1885883a 	add	r2,r3,r2
 401451c:	10879d04 	addi	r2,r2,7796
 4014520:	10800017 	ldw	r2,0(r2)
 4014524:	80803e1e 	bne	r16,r2,4014620 <main+0x1404c>
 4014528:	e0b7c217 	ldw	r2,-8440(fp)
 401452c:	01400504 	movi	r5,20
 4014530:	1009883a 	mov	r4,r2
 4014534:	40191000 	call	4019100 <__mulsi3>
 4014538:	1007883a 	mov	r3,r2
 401453c:	e0b7c117 	ldw	r2,-8444(fp)
 4014540:	1885883a 	add	r2,r3,r2
 4014544:	1085883a 	add	r2,r2,r2
 4014548:	1085883a 	add	r2,r2,r2
 401454c:	e0f7c104 	addi	r3,fp,-8444
 4014550:	1885883a 	add	r2,r3,r2
 4014554:	10879d04 	addi	r2,r2,7796
 4014558:	14000017 	ldw	r16,0(r2)
 401455c:	e0b7c217 	ldw	r2,-8440(fp)
 4014560:	10ffff84 	addi	r3,r2,-2
 4014564:	e0b7c117 	ldw	r2,-8444(fp)
 4014568:	147fff84 	addi	r17,r2,-2
 401456c:	01400504 	movi	r5,20
 4014570:	1809883a 	mov	r4,r3
 4014574:	40191000 	call	4019100 <__mulsi3>
 4014578:	1445883a 	add	r2,r2,r17
 401457c:	1085883a 	add	r2,r2,r2
 4014580:	1085883a 	add	r2,r2,r2
 4014584:	e0f7c104 	addi	r3,fp,-8444
 4014588:	1885883a 	add	r2,r3,r2
 401458c:	10879d04 	addi	r2,r2,7796
 4014590:	10800017 	ldw	r2,0(r2)
 4014594:	8080221e 	bne	r16,r2,4014620 <main+0x1404c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4014598:	e0b7c217 	ldw	r2,-8440(fp)
 401459c:	10c00084 	addi	r3,r2,2
 40145a0:	e0b95e04 	addi	r2,fp,-6792
 40145a4:	180f883a 	mov	r7,r3
 40145a8:	e1b7c117 	ldw	r6,-8444(fp)
 40145ac:	01403fc4 	movi	r5,255
 40145b0:	1009883a 	mov	r4,r2
 40145b4:	40003c80 	call	40003c8 <draw>
					draw(nine, COLOR08_BLACK, x,y+2 );
 40145b8:	e0b7c217 	ldw	r2,-8440(fp)
 40145bc:	10800084 	addi	r2,r2,2
 40145c0:	100f883a 	mov	r7,r2
 40145c4:	e1b7c117 	ldw	r6,-8444(fp)
 40145c8:	000b883a 	mov	r5,zero
 40145cc:	010100f4 	movhi	r4,1027
 40145d0:	213eaa04 	addi	r4,r4,-1368
 40145d4:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-19;
 40145d8:	e0b7c217 	ldw	r2,-8440(fp)
 40145dc:	01400504 	movi	r5,20
 40145e0:	1009883a 	mov	r4,r2
 40145e4:	40191000 	call	4019100 <__mulsi3>
 40145e8:	1007883a 	mov	r3,r2
 40145ec:	e0b7c117 	ldw	r2,-8444(fp)
 40145f0:	1885883a 	add	r2,r3,r2
 40145f4:	1085883a 	add	r2,r2,r2
 40145f8:	1085883a 	add	r2,r2,r2
 40145fc:	e0f7c104 	addi	r3,fp,-8444
 4014600:	1885883a 	add	r2,r3,r2
 4014604:	10879d04 	addi	r2,r2,7796
 4014608:	00fffb44 	movi	r3,-19
 401460c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4014610:	00c00044 	movi	r3,1
 4014614:	008200b4 	movhi	r2,2050
 4014618:	10841804 	addi	r2,r2,4192
 401461c:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard[y][x]==9 && gameboard[y+1][x+1]==-19) || (gameboard[y][x]==9 && gameboard[y-1][x-1]==-19))//(\\x)
 4014620:	e0b7c217 	ldw	r2,-8440(fp)
 4014624:	01400504 	movi	r5,20
 4014628:	1009883a 	mov	r4,r2
 401462c:	40191000 	call	4019100 <__mulsi3>
 4014630:	1007883a 	mov	r3,r2
 4014634:	e0b7c117 	ldw	r2,-8444(fp)
 4014638:	1885883a 	add	r2,r3,r2
 401463c:	1085883a 	add	r2,r2,r2
 4014640:	1085883a 	add	r2,r2,r2
 4014644:	e0f7c104 	addi	r3,fp,-8444
 4014648:	1885883a 	add	r2,r3,r2
 401464c:	10879d04 	addi	r2,r2,7796
 4014650:	10800017 	ldw	r2,0(r2)
 4014654:	10800258 	cmpnei	r2,r2,9
 4014658:	1000101e 	bne	r2,zero,401469c <main+0x140c8>
 401465c:	e0b7c217 	ldw	r2,-8440(fp)
 4014660:	10c00044 	addi	r3,r2,1
 4014664:	e0b7c117 	ldw	r2,-8444(fp)
 4014668:	14000044 	addi	r16,r2,1
 401466c:	01400504 	movi	r5,20
 4014670:	1809883a 	mov	r4,r3
 4014674:	40191000 	call	4019100 <__mulsi3>
 4014678:	1405883a 	add	r2,r2,r16
 401467c:	1085883a 	add	r2,r2,r2
 4014680:	1085883a 	add	r2,r2,r2
 4014684:	e0f7c104 	addi	r3,fp,-8444
 4014688:	1885883a 	add	r2,r3,r2
 401468c:	10879d04 	addi	r2,r2,7796
 4014690:	10800017 	ldw	r2,0(r2)
 4014694:	10bffb60 	cmpeqi	r2,r2,-19
 4014698:	10001f1e 	bne	r2,zero,4014718 <main+0x14144>
 401469c:	e0b7c217 	ldw	r2,-8440(fp)
 40146a0:	01400504 	movi	r5,20
 40146a4:	1009883a 	mov	r4,r2
 40146a8:	40191000 	call	4019100 <__mulsi3>
 40146ac:	1007883a 	mov	r3,r2
 40146b0:	e0b7c117 	ldw	r2,-8444(fp)
 40146b4:	1885883a 	add	r2,r3,r2
 40146b8:	1085883a 	add	r2,r2,r2
 40146bc:	1085883a 	add	r2,r2,r2
 40146c0:	e0f7c104 	addi	r3,fp,-8444
 40146c4:	1885883a 	add	r2,r3,r2
 40146c8:	10879d04 	addi	r2,r2,7796
 40146cc:	10800017 	ldw	r2,0(r2)
 40146d0:	10800258 	cmpnei	r2,r2,9
 40146d4:	1000321e 	bne	r2,zero,40147a0 <main+0x141cc>
 40146d8:	e0b7c217 	ldw	r2,-8440(fp)
 40146dc:	10ffffc4 	addi	r3,r2,-1
 40146e0:	e0b7c117 	ldw	r2,-8444(fp)
 40146e4:	143fffc4 	addi	r16,r2,-1
 40146e8:	01400504 	movi	r5,20
 40146ec:	1809883a 	mov	r4,r3
 40146f0:	40191000 	call	4019100 <__mulsi3>
 40146f4:	1405883a 	add	r2,r2,r16
 40146f8:	1085883a 	add	r2,r2,r2
 40146fc:	1085883a 	add	r2,r2,r2
 4014700:	e0f7c104 	addi	r3,fp,-8444
 4014704:	1885883a 	add	r2,r3,r2
 4014708:	10879d04 	addi	r2,r2,7796
 401470c:	10800017 	ldw	r2,0(r2)
 4014710:	10bffb58 	cmpnei	r2,r2,-19
 4014714:	1000221e 	bne	r2,zero,40147a0 <main+0x141cc>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4014718:	e0b7c217 	ldw	r2,-8440(fp)
 401471c:	10c00084 	addi	r3,r2,2
 4014720:	e0b95e04 	addi	r2,fp,-6792
 4014724:	180f883a 	mov	r7,r3
 4014728:	e1b7c117 	ldw	r6,-8444(fp)
 401472c:	01403fc4 	movi	r5,255
 4014730:	1009883a 	mov	r4,r2
 4014734:	40003c80 	call	40003c8 <draw>
					draw(nine, COLOR08_BLACK, x,y+2 );
 4014738:	e0b7c217 	ldw	r2,-8440(fp)
 401473c:	10800084 	addi	r2,r2,2
 4014740:	100f883a 	mov	r7,r2
 4014744:	e1b7c117 	ldw	r6,-8444(fp)
 4014748:	000b883a 	mov	r5,zero
 401474c:	010100f4 	movhi	r4,1027
 4014750:	213eaa04 	addi	r4,r4,-1368
 4014754:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-19;
 4014758:	e0b7c217 	ldw	r2,-8440(fp)
 401475c:	01400504 	movi	r5,20
 4014760:	1009883a 	mov	r4,r2
 4014764:	40191000 	call	4019100 <__mulsi3>
 4014768:	1007883a 	mov	r3,r2
 401476c:	e0b7c117 	ldw	r2,-8444(fp)
 4014770:	1885883a 	add	r2,r3,r2
 4014774:	1085883a 	add	r2,r2,r2
 4014778:	1085883a 	add	r2,r2,r2
 401477c:	e0f7c104 	addi	r3,fp,-8444
 4014780:	1885883a 	add	r2,r3,r2
 4014784:	10879d04 	addi	r2,r2,7796
 4014788:	00fffb44 	movi	r3,-19
 401478c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4014790:	00c00044 	movi	r3,1
 4014794:	008200b4 	movhi	r2,2050
 4014798:	10841804 	addi	r2,r2,4192
 401479c:	10c00035 	stwio	r3,0(r2)
				}
				//////////////////////////////////////////////////////////
				//diagonal (/)9
				if (gameboard [y][x]==gameboard [y+1][x-1] && gameboard[y][x]== gameboard[y-1][x+1])//(/x/)
 40147a0:	e0b7c217 	ldw	r2,-8440(fp)
 40147a4:	01400504 	movi	r5,20
 40147a8:	1009883a 	mov	r4,r2
 40147ac:	40191000 	call	4019100 <__mulsi3>
 40147b0:	1007883a 	mov	r3,r2
 40147b4:	e0b7c117 	ldw	r2,-8444(fp)
 40147b8:	1885883a 	add	r2,r3,r2
 40147bc:	1085883a 	add	r2,r2,r2
 40147c0:	1085883a 	add	r2,r2,r2
 40147c4:	e0f7c104 	addi	r3,fp,-8444
 40147c8:	1885883a 	add	r2,r3,r2
 40147cc:	10879d04 	addi	r2,r2,7796
 40147d0:	14000017 	ldw	r16,0(r2)
 40147d4:	e0b7c217 	ldw	r2,-8440(fp)
 40147d8:	10c00044 	addi	r3,r2,1
 40147dc:	e0b7c117 	ldw	r2,-8444(fp)
 40147e0:	147fffc4 	addi	r17,r2,-1
 40147e4:	01400504 	movi	r5,20
 40147e8:	1809883a 	mov	r4,r3
 40147ec:	40191000 	call	4019100 <__mulsi3>
 40147f0:	1445883a 	add	r2,r2,r17
 40147f4:	1085883a 	add	r2,r2,r2
 40147f8:	1085883a 	add	r2,r2,r2
 40147fc:	e0f7c104 	addi	r3,fp,-8444
 4014800:	1885883a 	add	r2,r3,r2
 4014804:	10879d04 	addi	r2,r2,7796
 4014808:	10800017 	ldw	r2,0(r2)
 401480c:	80803e1e 	bne	r16,r2,4014908 <main+0x14334>
 4014810:	e0b7c217 	ldw	r2,-8440(fp)
 4014814:	01400504 	movi	r5,20
 4014818:	1009883a 	mov	r4,r2
 401481c:	40191000 	call	4019100 <__mulsi3>
 4014820:	1007883a 	mov	r3,r2
 4014824:	e0b7c117 	ldw	r2,-8444(fp)
 4014828:	1885883a 	add	r2,r3,r2
 401482c:	1085883a 	add	r2,r2,r2
 4014830:	1085883a 	add	r2,r2,r2
 4014834:	e0f7c104 	addi	r3,fp,-8444
 4014838:	1885883a 	add	r2,r3,r2
 401483c:	10879d04 	addi	r2,r2,7796
 4014840:	14000017 	ldw	r16,0(r2)
 4014844:	e0b7c217 	ldw	r2,-8440(fp)
 4014848:	10ffffc4 	addi	r3,r2,-1
 401484c:	e0b7c117 	ldw	r2,-8444(fp)
 4014850:	14400044 	addi	r17,r2,1
 4014854:	01400504 	movi	r5,20
 4014858:	1809883a 	mov	r4,r3
 401485c:	40191000 	call	4019100 <__mulsi3>
 4014860:	1445883a 	add	r2,r2,r17
 4014864:	1085883a 	add	r2,r2,r2
 4014868:	1085883a 	add	r2,r2,r2
 401486c:	e0f7c104 	addi	r3,fp,-8444
 4014870:	1885883a 	add	r2,r3,r2
 4014874:	10879d04 	addi	r2,r2,7796
 4014878:	10800017 	ldw	r2,0(r2)
 401487c:	8080221e 	bne	r16,r2,4014908 <main+0x14334>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4014880:	e0b7c217 	ldw	r2,-8440(fp)
 4014884:	10c00084 	addi	r3,r2,2
 4014888:	e0b95e04 	addi	r2,fp,-6792
 401488c:	180f883a 	mov	r7,r3
 4014890:	e1b7c117 	ldw	r6,-8444(fp)
 4014894:	01403fc4 	movi	r5,255
 4014898:	1009883a 	mov	r4,r2
 401489c:	40003c80 	call	40003c8 <draw>
					draw(nine, COLOR08_BLACK, x,y+2 );
 40148a0:	e0b7c217 	ldw	r2,-8440(fp)
 40148a4:	10800084 	addi	r2,r2,2
 40148a8:	100f883a 	mov	r7,r2
 40148ac:	e1b7c117 	ldw	r6,-8444(fp)
 40148b0:	000b883a 	mov	r5,zero
 40148b4:	010100f4 	movhi	r4,1027
 40148b8:	213eaa04 	addi	r4,r4,-1368
 40148bc:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-19;
 40148c0:	e0b7c217 	ldw	r2,-8440(fp)
 40148c4:	01400504 	movi	r5,20
 40148c8:	1009883a 	mov	r4,r2
 40148cc:	40191000 	call	4019100 <__mulsi3>
 40148d0:	1007883a 	mov	r3,r2
 40148d4:	e0b7c117 	ldw	r2,-8444(fp)
 40148d8:	1885883a 	add	r2,r3,r2
 40148dc:	1085883a 	add	r2,r2,r2
 40148e0:	1085883a 	add	r2,r2,r2
 40148e4:	e0f7c104 	addi	r3,fp,-8444
 40148e8:	1885883a 	add	r2,r3,r2
 40148ec:	10879d04 	addi	r2,r2,7796
 40148f0:	00fffb44 	movi	r3,-19
 40148f4:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40148f8:	00c00044 	movi	r3,1
 40148fc:	008200b4 	movhi	r2,2050
 4014900:	10841804 	addi	r2,r2,4192
 4014904:	10c00035 	stwio	r3,0(r2)

				}
				if (gameboard [y][x]==gameboard [y+1][x-1] && gameboard[y][x]== gameboard[y+2][x-2])//(x//)
 4014908:	e0b7c217 	ldw	r2,-8440(fp)
 401490c:	01400504 	movi	r5,20
 4014910:	1009883a 	mov	r4,r2
 4014914:	40191000 	call	4019100 <__mulsi3>
 4014918:	1007883a 	mov	r3,r2
 401491c:	e0b7c117 	ldw	r2,-8444(fp)
 4014920:	1885883a 	add	r2,r3,r2
 4014924:	1085883a 	add	r2,r2,r2
 4014928:	1085883a 	add	r2,r2,r2
 401492c:	e0f7c104 	addi	r3,fp,-8444
 4014930:	1885883a 	add	r2,r3,r2
 4014934:	10879d04 	addi	r2,r2,7796
 4014938:	14000017 	ldw	r16,0(r2)
 401493c:	e0b7c217 	ldw	r2,-8440(fp)
 4014940:	10c00044 	addi	r3,r2,1
 4014944:	e0b7c117 	ldw	r2,-8444(fp)
 4014948:	147fffc4 	addi	r17,r2,-1
 401494c:	01400504 	movi	r5,20
 4014950:	1809883a 	mov	r4,r3
 4014954:	40191000 	call	4019100 <__mulsi3>
 4014958:	1445883a 	add	r2,r2,r17
 401495c:	1085883a 	add	r2,r2,r2
 4014960:	1085883a 	add	r2,r2,r2
 4014964:	e0f7c104 	addi	r3,fp,-8444
 4014968:	1885883a 	add	r2,r3,r2
 401496c:	10879d04 	addi	r2,r2,7796
 4014970:	10800017 	ldw	r2,0(r2)
 4014974:	80803e1e 	bne	r16,r2,4014a70 <main+0x1449c>
 4014978:	e0b7c217 	ldw	r2,-8440(fp)
 401497c:	01400504 	movi	r5,20
 4014980:	1009883a 	mov	r4,r2
 4014984:	40191000 	call	4019100 <__mulsi3>
 4014988:	1007883a 	mov	r3,r2
 401498c:	e0b7c117 	ldw	r2,-8444(fp)
 4014990:	1885883a 	add	r2,r3,r2
 4014994:	1085883a 	add	r2,r2,r2
 4014998:	1085883a 	add	r2,r2,r2
 401499c:	e0f7c104 	addi	r3,fp,-8444
 40149a0:	1885883a 	add	r2,r3,r2
 40149a4:	10879d04 	addi	r2,r2,7796
 40149a8:	14000017 	ldw	r16,0(r2)
 40149ac:	e0b7c217 	ldw	r2,-8440(fp)
 40149b0:	10c00084 	addi	r3,r2,2
 40149b4:	e0b7c117 	ldw	r2,-8444(fp)
 40149b8:	147fff84 	addi	r17,r2,-2
 40149bc:	01400504 	movi	r5,20
 40149c0:	1809883a 	mov	r4,r3
 40149c4:	40191000 	call	4019100 <__mulsi3>
 40149c8:	1445883a 	add	r2,r2,r17
 40149cc:	1085883a 	add	r2,r2,r2
 40149d0:	1085883a 	add	r2,r2,r2
 40149d4:	e0f7c104 	addi	r3,fp,-8444
 40149d8:	1885883a 	add	r2,r3,r2
 40149dc:	10879d04 	addi	r2,r2,7796
 40149e0:	10800017 	ldw	r2,0(r2)
 40149e4:	8080221e 	bne	r16,r2,4014a70 <main+0x1449c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 40149e8:	e0b7c217 	ldw	r2,-8440(fp)
 40149ec:	10c00084 	addi	r3,r2,2
 40149f0:	e0b95e04 	addi	r2,fp,-6792
 40149f4:	180f883a 	mov	r7,r3
 40149f8:	e1b7c117 	ldw	r6,-8444(fp)
 40149fc:	01403fc4 	movi	r5,255
 4014a00:	1009883a 	mov	r4,r2
 4014a04:	40003c80 	call	40003c8 <draw>
					draw(nine, COLOR08_BLACK, x,y+2 );
 4014a08:	e0b7c217 	ldw	r2,-8440(fp)
 4014a0c:	10800084 	addi	r2,r2,2
 4014a10:	100f883a 	mov	r7,r2
 4014a14:	e1b7c117 	ldw	r6,-8444(fp)
 4014a18:	000b883a 	mov	r5,zero
 4014a1c:	010100f4 	movhi	r4,1027
 4014a20:	213eaa04 	addi	r4,r4,-1368
 4014a24:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-19;
 4014a28:	e0b7c217 	ldw	r2,-8440(fp)
 4014a2c:	01400504 	movi	r5,20
 4014a30:	1009883a 	mov	r4,r2
 4014a34:	40191000 	call	4019100 <__mulsi3>
 4014a38:	1007883a 	mov	r3,r2
 4014a3c:	e0b7c117 	ldw	r2,-8444(fp)
 4014a40:	1885883a 	add	r2,r3,r2
 4014a44:	1085883a 	add	r2,r2,r2
 4014a48:	1085883a 	add	r2,r2,r2
 4014a4c:	e0f7c104 	addi	r3,fp,-8444
 4014a50:	1885883a 	add	r2,r3,r2
 4014a54:	10879d04 	addi	r2,r2,7796
 4014a58:	00fffb44 	movi	r3,-19
 4014a5c:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4014a60:	00c00044 	movi	r3,1
 4014a64:	008200b4 	movhi	r2,2050
 4014a68:	10841804 	addi	r2,r2,4192
 4014a6c:	10c00035 	stwio	r3,0(r2)
				}
				if ((gameboard [y][x]==9 && gameboard [y+1][x-1]==-19) || (gameboard [y][x]==9 && gameboard [y-1][x+1]==-19))//(x//)
 4014a70:	e0b7c217 	ldw	r2,-8440(fp)
 4014a74:	01400504 	movi	r5,20
 4014a78:	1009883a 	mov	r4,r2
 4014a7c:	40191000 	call	4019100 <__mulsi3>
 4014a80:	1007883a 	mov	r3,r2
 4014a84:	e0b7c117 	ldw	r2,-8444(fp)
 4014a88:	1885883a 	add	r2,r3,r2
 4014a8c:	1085883a 	add	r2,r2,r2
 4014a90:	1085883a 	add	r2,r2,r2
 4014a94:	e0f7c104 	addi	r3,fp,-8444
 4014a98:	1885883a 	add	r2,r3,r2
 4014a9c:	10879d04 	addi	r2,r2,7796
 4014aa0:	10800017 	ldw	r2,0(r2)
 4014aa4:	10800258 	cmpnei	r2,r2,9
 4014aa8:	1000101e 	bne	r2,zero,4014aec <main+0x14518>
 4014aac:	e0b7c217 	ldw	r2,-8440(fp)
 4014ab0:	10c00044 	addi	r3,r2,1
 4014ab4:	e0b7c117 	ldw	r2,-8444(fp)
 4014ab8:	143fffc4 	addi	r16,r2,-1
 4014abc:	01400504 	movi	r5,20
 4014ac0:	1809883a 	mov	r4,r3
 4014ac4:	40191000 	call	4019100 <__mulsi3>
 4014ac8:	1405883a 	add	r2,r2,r16
 4014acc:	1085883a 	add	r2,r2,r2
 4014ad0:	1085883a 	add	r2,r2,r2
 4014ad4:	e0f7c104 	addi	r3,fp,-8444
 4014ad8:	1885883a 	add	r2,r3,r2
 4014adc:	10879d04 	addi	r2,r2,7796
 4014ae0:	10800017 	ldw	r2,0(r2)
 4014ae4:	10bffb60 	cmpeqi	r2,r2,-19
 4014ae8:	10001f1e 	bne	r2,zero,4014b68 <main+0x14594>
 4014aec:	e0b7c217 	ldw	r2,-8440(fp)
 4014af0:	01400504 	movi	r5,20
 4014af4:	1009883a 	mov	r4,r2
 4014af8:	40191000 	call	4019100 <__mulsi3>
 4014afc:	1007883a 	mov	r3,r2
 4014b00:	e0b7c117 	ldw	r2,-8444(fp)
 4014b04:	1885883a 	add	r2,r3,r2
 4014b08:	1085883a 	add	r2,r2,r2
 4014b0c:	1085883a 	add	r2,r2,r2
 4014b10:	e0f7c104 	addi	r3,fp,-8444
 4014b14:	1885883a 	add	r2,r3,r2
 4014b18:	10879d04 	addi	r2,r2,7796
 4014b1c:	10800017 	ldw	r2,0(r2)
 4014b20:	10800258 	cmpnei	r2,r2,9
 4014b24:	1000321e 	bne	r2,zero,4014bf0 <main+0x1461c>
 4014b28:	e0b7c217 	ldw	r2,-8440(fp)
 4014b2c:	10ffffc4 	addi	r3,r2,-1
 4014b30:	e0b7c117 	ldw	r2,-8444(fp)
 4014b34:	14000044 	addi	r16,r2,1
 4014b38:	01400504 	movi	r5,20
 4014b3c:	1809883a 	mov	r4,r3
 4014b40:	40191000 	call	4019100 <__mulsi3>
 4014b44:	1405883a 	add	r2,r2,r16
 4014b48:	1085883a 	add	r2,r2,r2
 4014b4c:	1085883a 	add	r2,r2,r2
 4014b50:	e0f7c104 	addi	r3,fp,-8444
 4014b54:	1885883a 	add	r2,r3,r2
 4014b58:	10879d04 	addi	r2,r2,7796
 4014b5c:	10800017 	ldw	r2,0(r2)
 4014b60:	10bffb58 	cmpnei	r2,r2,-19
 4014b64:	1000221e 	bne	r2,zero,4014bf0 <main+0x1461c>
				{
					draw(white, COLOR08_WHITE, x,y+2 );
 4014b68:	e0b7c217 	ldw	r2,-8440(fp)
 4014b6c:	10c00084 	addi	r3,r2,2
 4014b70:	e0b95e04 	addi	r2,fp,-6792
 4014b74:	180f883a 	mov	r7,r3
 4014b78:	e1b7c117 	ldw	r6,-8444(fp)
 4014b7c:	01403fc4 	movi	r5,255
 4014b80:	1009883a 	mov	r4,r2
 4014b84:	40003c80 	call	40003c8 <draw>
					draw(nine, COLOR08_BLACK, x,y+2 );
 4014b88:	e0b7c217 	ldw	r2,-8440(fp)
 4014b8c:	10800084 	addi	r2,r2,2
 4014b90:	100f883a 	mov	r7,r2
 4014b94:	e1b7c117 	ldw	r6,-8444(fp)
 4014b98:	000b883a 	mov	r5,zero
 4014b9c:	010100f4 	movhi	r4,1027
 4014ba0:	213eaa04 	addi	r4,r4,-1368
 4014ba4:	40003c80 	call	40003c8 <draw>
					gameboard[y][x]=-19;
 4014ba8:	e0b7c217 	ldw	r2,-8440(fp)
 4014bac:	01400504 	movi	r5,20
 4014bb0:	1009883a 	mov	r4,r2
 4014bb4:	40191000 	call	4019100 <__mulsi3>
 4014bb8:	1007883a 	mov	r3,r2
 4014bbc:	e0b7c117 	ldw	r2,-8444(fp)
 4014bc0:	1885883a 	add	r2,r3,r2
 4014bc4:	1085883a 	add	r2,r2,r2
 4014bc8:	1085883a 	add	r2,r2,r2
 4014bcc:	e0f7c104 	addi	r3,fp,-8444
 4014bd0:	1885883a 	add	r2,r3,r2
 4014bd4:	10879d04 	addi	r2,r2,7796
 4014bd8:	00fffb44 	movi	r3,-19
 4014bdc:	10c00015 	stw	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4014be0:	00c00044 	movi	r3,1
 4014be4:	008200b4 	movhi	r2,2050
 4014be8:	10841804 	addi	r2,r2,4192
 4014bec:	10c00035 	stwio	r3,0(r2)
				}
			}
		}
		IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 0);
 4014bf0:	0007883a 	mov	r3,zero
 4014bf4:	008200b4 	movhi	r2,2050
 4014bf8:	10841804 	addi	r2,r2,4192
 4014bfc:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4014c00:	00c00044 	movi	r3,1
 4014c04:	008200b4 	movhi	r2,2050
 4014c08:	10841804 	addi	r2,r2,4192
 4014c0c:	10c00035 	stwio	r3,0(r2)
		Delay_Pulse();
 4014c10:	40003880 	call	4000388 <Delay_Pulse>
		button=IORD_ALTERA_AVALON_PIO_DATA(KEY_UDLRM_ENCODER_BASE);
 4014c14:	008200b4 	movhi	r2,2050
 4014c18:	10841c04 	addi	r2,r2,4208
 4014c1c:	10800037 	ldwio	r2,0(r2)
 4014c20:	e0b7da15 	stw	r2,-8344(fp)
		IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 0);
 4014c24:	0007883a 	mov	r3,zero
 4014c28:	008200b4 	movhi	r2,2050
 4014c2c:	10841804 	addi	r2,r2,4192
 4014c30:	10c00035 	stwio	r3,0(r2)
		//deselect(Q+W)
		if(button==5 && button != 4)
 4014c34:	e0b7da17 	ldw	r2,-8344(fp)
 4014c38:	10800158 	cmpnei	r2,r2,5
 4014c3c:	1001ec1e 	bne	r2,zero,40153f0 <main+0x14e1c>
 4014c40:	e0b7da17 	ldw	r2,-8344(fp)
 4014c44:	10800120 	cmpeqi	r2,r2,4
 4014c48:	1001e91e 	bne	r2,zero,40153f0 <main+0x14e1c>
		{
			if(gameboard[y][x]==-10)//0
 4014c4c:	e0b7c217 	ldw	r2,-8440(fp)
 4014c50:	01400504 	movi	r5,20
 4014c54:	1009883a 	mov	r4,r2
 4014c58:	40191000 	call	4019100 <__mulsi3>
 4014c5c:	1007883a 	mov	r3,r2
 4014c60:	e0b7c117 	ldw	r2,-8444(fp)
 4014c64:	1885883a 	add	r2,r3,r2
 4014c68:	1085883a 	add	r2,r2,r2
 4014c6c:	1085883a 	add	r2,r2,r2
 4014c70:	e0f7c104 	addi	r3,fp,-8444
 4014c74:	1885883a 	add	r2,r3,r2
 4014c78:	10879d04 	addi	r2,r2,7796
 4014c7c:	10800017 	ldw	r2,0(r2)
 4014c80:	10bffd98 	cmpnei	r2,r2,-10
 4014c84:	1000211e 	bne	r2,zero,4014d0c <main+0x14738>
			{
				draw(white, COLOR08_BLACK, x,y+2 );
 4014c88:	e0b7c217 	ldw	r2,-8440(fp)
 4014c8c:	10c00084 	addi	r3,r2,2
 4014c90:	e0b95e04 	addi	r2,fp,-6792
 4014c94:	180f883a 	mov	r7,r3
 4014c98:	e1b7c117 	ldw	r6,-8444(fp)
 4014c9c:	000b883a 	mov	r5,zero
 4014ca0:	1009883a 	mov	r4,r2
 4014ca4:	40003c80 	call	40003c8 <draw>
				draw(zero, COLOR08_CYAN, x,y+2 );
 4014ca8:	e0b7c217 	ldw	r2,-8440(fp)
 4014cac:	10800084 	addi	r2,r2,2
 4014cb0:	100f883a 	mov	r7,r2
 4014cb4:	e1b7c117 	ldw	r6,-8444(fp)
 4014cb8:	014007c4 	movi	r5,31
 4014cbc:	010100f4 	movhi	r4,1027
 4014cc0:	21312a04 	addi	r4,r4,-15192
 4014cc4:	40003c80 	call	40003c8 <draw>
				gameboard[y][x]=0;
 4014cc8:	e0b7c217 	ldw	r2,-8440(fp)
 4014ccc:	01400504 	movi	r5,20
 4014cd0:	1009883a 	mov	r4,r2
 4014cd4:	40191000 	call	4019100 <__mulsi3>
 4014cd8:	1007883a 	mov	r3,r2
 4014cdc:	e0b7c117 	ldw	r2,-8444(fp)
 4014ce0:	1885883a 	add	r2,r3,r2
 4014ce4:	1085883a 	add	r2,r2,r2
 4014ce8:	1085883a 	add	r2,r2,r2
 4014cec:	e0f7c104 	addi	r3,fp,-8444
 4014cf0:	1885883a 	add	r2,r3,r2
 4014cf4:	10879d04 	addi	r2,r2,7796
 4014cf8:	10000015 	stw	zero,0(r2)
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4014cfc:	00c00044 	movi	r3,1
 4014d00:	008200b4 	movhi	r2,2050
 4014d04:	10841804 	addi	r2,r2,4192
 4014d08:	10c00035 	stwio	r3,0(r2)
			}
			if(gameboard[y][x]==-11)//1
 4014d0c:	e0b7c217 	ldw	r2,-8440(fp)
 4014d10:	01400504 	movi	r5,20
 4014d14:	1009883a 	mov	r4,r2
 4014d18:	40191000 	call	4019100 <__mulsi3>
 4014d1c:	1007883a 	mov	r3,r2
 4014d20:	e0b7c117 	ldw	r2,-8444(fp)
 4014d24:	1885883a 	add	r2,r3,r2
 4014d28:	1085883a 	add	r2,r2,r2
 4014d2c:	1085883a 	add	r2,r2,r2
 4014d30:	e0f7c104 	addi	r3,fp,-8444
 4014d34:	1885883a 	add	r2,r3,r2
 4014d38:	10879d04 	addi	r2,r2,7796
 4014d3c:	10800017 	ldw	r2,0(r2)
 4014d40:	10bffd58 	cmpnei	r2,r2,-11
 4014d44:	1000221e 	bne	r2,zero,4014dd0 <main+0x147fc>
			{
				draw(white, COLOR08_BLACK, x,y+2 );
 4014d48:	e0b7c217 	ldw	r2,-8440(fp)
 4014d4c:	10c00084 	addi	r3,r2,2
 4014d50:	e0b95e04 	addi	r2,fp,-6792
 4014d54:	180f883a 	mov	r7,r3
 4014d58:	e1b7c117 	ldw	r6,-8444(fp)
 4014d5c:	000b883a 	mov	r5,zero
 4014d60:	1009883a 	mov	r4,r2
 4014d64:	40003c80 	call	40003c8 <draw>
				draw(one, COLOR08_GREEN, x,y+2 );
 4014d68:	e0b7c217 	ldw	r2,-8440(fp)
 4014d6c:	10800084 	addi	r2,r2,2
 4014d70:	100f883a 	mov	r7,r2
 4014d74:	e1b7c117 	ldw	r6,-8444(fp)
 4014d78:	01400404 	movi	r5,16
 4014d7c:	010100f4 	movhi	r4,1027
 4014d80:	2132aa04 	addi	r4,r4,-13656
 4014d84:	40003c80 	call	40003c8 <draw>
				gameboard[y][x]=1;
 4014d88:	e0b7c217 	ldw	r2,-8440(fp)
 4014d8c:	01400504 	movi	r5,20
 4014d90:	1009883a 	mov	r4,r2
 4014d94:	40191000 	call	4019100 <__mulsi3>
 4014d98:	1007883a 	mov	r3,r2
 4014d9c:	e0b7c117 	ldw	r2,-8444(fp)
 4014da0:	1885883a 	add	r2,r3,r2
 4014da4:	1085883a 	add	r2,r2,r2
 4014da8:	1085883a 	add	r2,r2,r2
 4014dac:	e0f7c104 	addi	r3,fp,-8444
 4014db0:	1885883a 	add	r2,r3,r2
 4014db4:	10879d04 	addi	r2,r2,7796
 4014db8:	00c00044 	movi	r3,1
 4014dbc:	10c00015 	stw	r3,0(r2)
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4014dc0:	00c00044 	movi	r3,1
 4014dc4:	008200b4 	movhi	r2,2050
 4014dc8:	10841804 	addi	r2,r2,4192
 4014dcc:	10c00035 	stwio	r3,0(r2)
			}
			if(gameboard[y][x]==-12)//2
 4014dd0:	e0b7c217 	ldw	r2,-8440(fp)
 4014dd4:	01400504 	movi	r5,20
 4014dd8:	1009883a 	mov	r4,r2
 4014ddc:	40191000 	call	4019100 <__mulsi3>
 4014de0:	1007883a 	mov	r3,r2
 4014de4:	e0b7c117 	ldw	r2,-8444(fp)
 4014de8:	1885883a 	add	r2,r3,r2
 4014dec:	1085883a 	add	r2,r2,r2
 4014df0:	1085883a 	add	r2,r2,r2
 4014df4:	e0f7c104 	addi	r3,fp,-8444
 4014df8:	1885883a 	add	r2,r3,r2
 4014dfc:	10879d04 	addi	r2,r2,7796
 4014e00:	10800017 	ldw	r2,0(r2)
 4014e04:	10bffd18 	cmpnei	r2,r2,-12
 4014e08:	1000221e 	bne	r2,zero,4014e94 <main+0x148c0>
			{
				draw(white, COLOR08_BLACK, x,y+2 );
 4014e0c:	e0b7c217 	ldw	r2,-8440(fp)
 4014e10:	10c00084 	addi	r3,r2,2
 4014e14:	e0b95e04 	addi	r2,fp,-6792
 4014e18:	180f883a 	mov	r7,r3
 4014e1c:	e1b7c117 	ldw	r6,-8444(fp)
 4014e20:	000b883a 	mov	r5,zero
 4014e24:	1009883a 	mov	r4,r2
 4014e28:	40003c80 	call	40003c8 <draw>
				draw(two, COLOR08_MAGENTA, x,y+2 );
 4014e2c:	e0b7c217 	ldw	r2,-8440(fp)
 4014e30:	10800084 	addi	r2,r2,2
 4014e34:	100f883a 	mov	r7,r2
 4014e38:	e1b7c117 	ldw	r6,-8444(fp)
 4014e3c:	014038c4 	movi	r5,227
 4014e40:	010100f4 	movhi	r4,1027
 4014e44:	21342a04 	addi	r4,r4,-12120
 4014e48:	40003c80 	call	40003c8 <draw>
				gameboard[y][x]=2;
 4014e4c:	e0b7c217 	ldw	r2,-8440(fp)
 4014e50:	01400504 	movi	r5,20
 4014e54:	1009883a 	mov	r4,r2
 4014e58:	40191000 	call	4019100 <__mulsi3>
 4014e5c:	1007883a 	mov	r3,r2
 4014e60:	e0b7c117 	ldw	r2,-8444(fp)
 4014e64:	1885883a 	add	r2,r3,r2
 4014e68:	1085883a 	add	r2,r2,r2
 4014e6c:	1085883a 	add	r2,r2,r2
 4014e70:	e0f7c104 	addi	r3,fp,-8444
 4014e74:	1885883a 	add	r2,r3,r2
 4014e78:	10879d04 	addi	r2,r2,7796
 4014e7c:	00c00084 	movi	r3,2
 4014e80:	10c00015 	stw	r3,0(r2)
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4014e84:	00c00044 	movi	r3,1
 4014e88:	008200b4 	movhi	r2,2050
 4014e8c:	10841804 	addi	r2,r2,4192
 4014e90:	10c00035 	stwio	r3,0(r2)
			}
			if(gameboard[y][x]==-13)//3
 4014e94:	e0b7c217 	ldw	r2,-8440(fp)
 4014e98:	01400504 	movi	r5,20
 4014e9c:	1009883a 	mov	r4,r2
 4014ea0:	40191000 	call	4019100 <__mulsi3>
 4014ea4:	1007883a 	mov	r3,r2
 4014ea8:	e0b7c117 	ldw	r2,-8444(fp)
 4014eac:	1885883a 	add	r2,r3,r2
 4014eb0:	1085883a 	add	r2,r2,r2
 4014eb4:	1085883a 	add	r2,r2,r2
 4014eb8:	e0f7c104 	addi	r3,fp,-8444
 4014ebc:	1885883a 	add	r2,r3,r2
 4014ec0:	10879d04 	addi	r2,r2,7796
 4014ec4:	10800017 	ldw	r2,0(r2)
 4014ec8:	10bffcd8 	cmpnei	r2,r2,-13
 4014ecc:	1000221e 	bne	r2,zero,4014f58 <main+0x14984>
			{
				draw(white, COLOR08_BLACK, x,y+2 );
 4014ed0:	e0b7c217 	ldw	r2,-8440(fp)
 4014ed4:	10c00084 	addi	r3,r2,2
 4014ed8:	e0b95e04 	addi	r2,fp,-6792
 4014edc:	180f883a 	mov	r7,r3
 4014ee0:	e1b7c117 	ldw	r6,-8444(fp)
 4014ee4:	000b883a 	mov	r5,zero
 4014ee8:	1009883a 	mov	r4,r2
 4014eec:	40003c80 	call	40003c8 <draw>
				draw(three, COLOR08_PURPLE, x,y+2 );
 4014ef0:	e0b7c217 	ldw	r2,-8440(fp)
 4014ef4:	10800084 	addi	r2,r2,2
 4014ef8:	100f883a 	mov	r7,r2
 4014efc:	e1b7c117 	ldw	r6,-8444(fp)
 4014f00:	01402084 	movi	r5,130
 4014f04:	010100f4 	movhi	r4,1027
 4014f08:	2135aa04 	addi	r4,r4,-10584
 4014f0c:	40003c80 	call	40003c8 <draw>
				gameboard[y][x]=3;
 4014f10:	e0b7c217 	ldw	r2,-8440(fp)
 4014f14:	01400504 	movi	r5,20
 4014f18:	1009883a 	mov	r4,r2
 4014f1c:	40191000 	call	4019100 <__mulsi3>
 4014f20:	1007883a 	mov	r3,r2
 4014f24:	e0b7c117 	ldw	r2,-8444(fp)
 4014f28:	1885883a 	add	r2,r3,r2
 4014f2c:	1085883a 	add	r2,r2,r2
 4014f30:	1085883a 	add	r2,r2,r2
 4014f34:	e0f7c104 	addi	r3,fp,-8444
 4014f38:	1885883a 	add	r2,r3,r2
 4014f3c:	10879d04 	addi	r2,r2,7796
 4014f40:	00c000c4 	movi	r3,3
 4014f44:	10c00015 	stw	r3,0(r2)
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4014f48:	00c00044 	movi	r3,1
 4014f4c:	008200b4 	movhi	r2,2050
 4014f50:	10841804 	addi	r2,r2,4192
 4014f54:	10c00035 	stwio	r3,0(r2)
			}
			if(gameboard[y][x]==-14)//4
 4014f58:	e0b7c217 	ldw	r2,-8440(fp)
 4014f5c:	01400504 	movi	r5,20
 4014f60:	1009883a 	mov	r4,r2
 4014f64:	40191000 	call	4019100 <__mulsi3>
 4014f68:	1007883a 	mov	r3,r2
 4014f6c:	e0b7c117 	ldw	r2,-8444(fp)
 4014f70:	1885883a 	add	r2,r3,r2
 4014f74:	1085883a 	add	r2,r2,r2
 4014f78:	1085883a 	add	r2,r2,r2
 4014f7c:	e0f7c104 	addi	r3,fp,-8444
 4014f80:	1885883a 	add	r2,r3,r2
 4014f84:	10879d04 	addi	r2,r2,7796
 4014f88:	10800017 	ldw	r2,0(r2)
 4014f8c:	10bffc98 	cmpnei	r2,r2,-14
 4014f90:	1000221e 	bne	r2,zero,401501c <main+0x14a48>
			{
				draw(white, COLOR08_BLACK, x,y+2 );
 4014f94:	e0b7c217 	ldw	r2,-8440(fp)
 4014f98:	10c00084 	addi	r3,r2,2
 4014f9c:	e0b95e04 	addi	r2,fp,-6792
 4014fa0:	180f883a 	mov	r7,r3
 4014fa4:	e1b7c117 	ldw	r6,-8444(fp)
 4014fa8:	000b883a 	mov	r5,zero
 4014fac:	1009883a 	mov	r4,r2
 4014fb0:	40003c80 	call	40003c8 <draw>
				draw(four, COLOR08_GOLD, x,y+2 );
 4014fb4:	e0b7c217 	ldw	r2,-8440(fp)
 4014fb8:	10800084 	addi	r2,r2,2
 4014fbc:	100f883a 	mov	r7,r2
 4014fc0:	e1b7c117 	ldw	r6,-8444(fp)
 4014fc4:	01403e04 	movi	r5,248
 4014fc8:	010100f4 	movhi	r4,1027
 4014fcc:	21372a04 	addi	r4,r4,-9048
 4014fd0:	40003c80 	call	40003c8 <draw>
				gameboard[y][x]=4;
 4014fd4:	e0b7c217 	ldw	r2,-8440(fp)
 4014fd8:	01400504 	movi	r5,20
 4014fdc:	1009883a 	mov	r4,r2
 4014fe0:	40191000 	call	4019100 <__mulsi3>
 4014fe4:	1007883a 	mov	r3,r2
 4014fe8:	e0b7c117 	ldw	r2,-8444(fp)
 4014fec:	1885883a 	add	r2,r3,r2
 4014ff0:	1085883a 	add	r2,r2,r2
 4014ff4:	1085883a 	add	r2,r2,r2
 4014ff8:	e0f7c104 	addi	r3,fp,-8444
 4014ffc:	1885883a 	add	r2,r3,r2
 4015000:	10879d04 	addi	r2,r2,7796
 4015004:	00c00104 	movi	r3,4
 4015008:	10c00015 	stw	r3,0(r2)
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 401500c:	00c00044 	movi	r3,1
 4015010:	008200b4 	movhi	r2,2050
 4015014:	10841804 	addi	r2,r2,4192
 4015018:	10c00035 	stwio	r3,0(r2)
			}
			if(gameboard[y][x]==-15)//5
 401501c:	e0b7c217 	ldw	r2,-8440(fp)
 4015020:	01400504 	movi	r5,20
 4015024:	1009883a 	mov	r4,r2
 4015028:	40191000 	call	4019100 <__mulsi3>
 401502c:	1007883a 	mov	r3,r2
 4015030:	e0b7c117 	ldw	r2,-8444(fp)
 4015034:	1885883a 	add	r2,r3,r2
 4015038:	1085883a 	add	r2,r2,r2
 401503c:	1085883a 	add	r2,r2,r2
 4015040:	e0f7c104 	addi	r3,fp,-8444
 4015044:	1885883a 	add	r2,r3,r2
 4015048:	10879d04 	addi	r2,r2,7796
 401504c:	10800017 	ldw	r2,0(r2)
 4015050:	10bffc58 	cmpnei	r2,r2,-15
 4015054:	1000221e 	bne	r2,zero,40150e0 <main+0x14b0c>
			{
				draw(white, COLOR08_BLACK, x,y+2 );
 4015058:	e0b7c217 	ldw	r2,-8440(fp)
 401505c:	10c00084 	addi	r3,r2,2
 4015060:	e0b95e04 	addi	r2,fp,-6792
 4015064:	180f883a 	mov	r7,r3
 4015068:	e1b7c117 	ldw	r6,-8444(fp)
 401506c:	000b883a 	mov	r5,zero
 4015070:	1009883a 	mov	r4,r2
 4015074:	40003c80 	call	40003c8 <draw>
				draw(five, COLOR08_ORANGE, x,y+2 );
 4015078:	e0b7c217 	ldw	r2,-8440(fp)
 401507c:	10800084 	addi	r2,r2,2
 4015080:	100f883a 	mov	r7,r2
 4015084:	e1b7c117 	ldw	r6,-8444(fp)
 4015088:	01403d04 	movi	r5,244
 401508c:	010100f4 	movhi	r4,1027
 4015090:	2138aa04 	addi	r4,r4,-7512
 4015094:	40003c80 	call	40003c8 <draw>
				gameboard[y][x]=5;
 4015098:	e0b7c217 	ldw	r2,-8440(fp)
 401509c:	01400504 	movi	r5,20
 40150a0:	1009883a 	mov	r4,r2
 40150a4:	40191000 	call	4019100 <__mulsi3>
 40150a8:	1007883a 	mov	r3,r2
 40150ac:	e0b7c117 	ldw	r2,-8444(fp)
 40150b0:	1885883a 	add	r2,r3,r2
 40150b4:	1085883a 	add	r2,r2,r2
 40150b8:	1085883a 	add	r2,r2,r2
 40150bc:	e0f7c104 	addi	r3,fp,-8444
 40150c0:	1885883a 	add	r2,r3,r2
 40150c4:	10879d04 	addi	r2,r2,7796
 40150c8:	00c00144 	movi	r3,5
 40150cc:	10c00015 	stw	r3,0(r2)
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40150d0:	00c00044 	movi	r3,1
 40150d4:	008200b4 	movhi	r2,2050
 40150d8:	10841804 	addi	r2,r2,4192
 40150dc:	10c00035 	stwio	r3,0(r2)
			}
			if(gameboard[y][x]==-16)//6
 40150e0:	e0b7c217 	ldw	r2,-8440(fp)
 40150e4:	01400504 	movi	r5,20
 40150e8:	1009883a 	mov	r4,r2
 40150ec:	40191000 	call	4019100 <__mulsi3>
 40150f0:	1007883a 	mov	r3,r2
 40150f4:	e0b7c117 	ldw	r2,-8444(fp)
 40150f8:	1885883a 	add	r2,r3,r2
 40150fc:	1085883a 	add	r2,r2,r2
 4015100:	1085883a 	add	r2,r2,r2
 4015104:	e0f7c104 	addi	r3,fp,-8444
 4015108:	1885883a 	add	r2,r3,r2
 401510c:	10879d04 	addi	r2,r2,7796
 4015110:	10800017 	ldw	r2,0(r2)
 4015114:	10bffc18 	cmpnei	r2,r2,-16
 4015118:	1000221e 	bne	r2,zero,40151a4 <main+0x14bd0>
			{
				draw(white, COLOR08_BLACK, x,y+2 );
 401511c:	e0b7c217 	ldw	r2,-8440(fp)
 4015120:	10c00084 	addi	r3,r2,2
 4015124:	e0b95e04 	addi	r2,fp,-6792
 4015128:	180f883a 	mov	r7,r3
 401512c:	e1b7c117 	ldw	r6,-8444(fp)
 4015130:	000b883a 	mov	r5,zero
 4015134:	1009883a 	mov	r4,r2
 4015138:	40003c80 	call	40003c8 <draw>
				draw(six, COLOR08_ROYALBLUE, x,y+2 );
 401513c:	e0b7c217 	ldw	r2,-8440(fp)
 4015140:	10800084 	addi	r2,r2,2
 4015144:	100f883a 	mov	r7,r2
 4015148:	e1b7c117 	ldw	r6,-8444(fp)
 401514c:	014013c4 	movi	r5,79
 4015150:	010100f4 	movhi	r4,1027
 4015154:	213a2a04 	addi	r4,r4,-5976
 4015158:	40003c80 	call	40003c8 <draw>
				gameboard[y][x]=6;
 401515c:	e0b7c217 	ldw	r2,-8440(fp)
 4015160:	01400504 	movi	r5,20
 4015164:	1009883a 	mov	r4,r2
 4015168:	40191000 	call	4019100 <__mulsi3>
 401516c:	1007883a 	mov	r3,r2
 4015170:	e0b7c117 	ldw	r2,-8444(fp)
 4015174:	1885883a 	add	r2,r3,r2
 4015178:	1085883a 	add	r2,r2,r2
 401517c:	1085883a 	add	r2,r2,r2
 4015180:	e0f7c104 	addi	r3,fp,-8444
 4015184:	1885883a 	add	r2,r3,r2
 4015188:	10879d04 	addi	r2,r2,7796
 401518c:	00c00184 	movi	r3,6
 4015190:	10c00015 	stw	r3,0(r2)
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4015194:	00c00044 	movi	r3,1
 4015198:	008200b4 	movhi	r2,2050
 401519c:	10841804 	addi	r2,r2,4192
 40151a0:	10c00035 	stwio	r3,0(r2)
			}
			if(gameboard[y][x]==-17)//7
 40151a4:	e0b7c217 	ldw	r2,-8440(fp)
 40151a8:	01400504 	movi	r5,20
 40151ac:	1009883a 	mov	r4,r2
 40151b0:	40191000 	call	4019100 <__mulsi3>
 40151b4:	1007883a 	mov	r3,r2
 40151b8:	e0b7c117 	ldw	r2,-8444(fp)
 40151bc:	1885883a 	add	r2,r3,r2
 40151c0:	1085883a 	add	r2,r2,r2
 40151c4:	1085883a 	add	r2,r2,r2
 40151c8:	e0f7c104 	addi	r3,fp,-8444
 40151cc:	1885883a 	add	r2,r3,r2
 40151d0:	10879d04 	addi	r2,r2,7796
 40151d4:	10800017 	ldw	r2,0(r2)
 40151d8:	10bffbd8 	cmpnei	r2,r2,-17
 40151dc:	1000221e 	bne	r2,zero,4015268 <main+0x14c94>
			{
				draw(white, COLOR08_BLACK, x,y+2 );
 40151e0:	e0b7c217 	ldw	r2,-8440(fp)
 40151e4:	10c00084 	addi	r3,r2,2
 40151e8:	e0b95e04 	addi	r2,fp,-6792
 40151ec:	180f883a 	mov	r7,r3
 40151f0:	e1b7c117 	ldw	r6,-8444(fp)
 40151f4:	000b883a 	mov	r5,zero
 40151f8:	1009883a 	mov	r4,r2
 40151fc:	40003c80 	call	40003c8 <draw>
				draw(seven, COLOR08_CRIMSON, x,y+2 );
 4015200:	e0b7c217 	ldw	r2,-8440(fp)
 4015204:	10800084 	addi	r2,r2,2
 4015208:	100f883a 	mov	r7,r2
 401520c:	e1b7c117 	ldw	r6,-8444(fp)
 4015210:	01403004 	movi	r5,192
 4015214:	010100f4 	movhi	r4,1027
 4015218:	213baa04 	addi	r4,r4,-4440
 401521c:	40003c80 	call	40003c8 <draw>
				gameboard[y][x]=7;
 4015220:	e0b7c217 	ldw	r2,-8440(fp)
 4015224:	01400504 	movi	r5,20
 4015228:	1009883a 	mov	r4,r2
 401522c:	40191000 	call	4019100 <__mulsi3>
 4015230:	1007883a 	mov	r3,r2
 4015234:	e0b7c117 	ldw	r2,-8444(fp)
 4015238:	1885883a 	add	r2,r3,r2
 401523c:	1085883a 	add	r2,r2,r2
 4015240:	1085883a 	add	r2,r2,r2
 4015244:	e0f7c104 	addi	r3,fp,-8444
 4015248:	1885883a 	add	r2,r3,r2
 401524c:	10879d04 	addi	r2,r2,7796
 4015250:	00c001c4 	movi	r3,7
 4015254:	10c00015 	stw	r3,0(r2)
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4015258:	00c00044 	movi	r3,1
 401525c:	008200b4 	movhi	r2,2050
 4015260:	10841804 	addi	r2,r2,4192
 4015264:	10c00035 	stwio	r3,0(r2)
			}
			if(gameboard[y][x]==-18)//8
 4015268:	e0b7c217 	ldw	r2,-8440(fp)
 401526c:	01400504 	movi	r5,20
 4015270:	1009883a 	mov	r4,r2
 4015274:	40191000 	call	4019100 <__mulsi3>
 4015278:	1007883a 	mov	r3,r2
 401527c:	e0b7c117 	ldw	r2,-8444(fp)
 4015280:	1885883a 	add	r2,r3,r2
 4015284:	1085883a 	add	r2,r2,r2
 4015288:	1085883a 	add	r2,r2,r2
 401528c:	e0f7c104 	addi	r3,fp,-8444
 4015290:	1885883a 	add	r2,r3,r2
 4015294:	10879d04 	addi	r2,r2,7796
 4015298:	10800017 	ldw	r2,0(r2)
 401529c:	10bffb98 	cmpnei	r2,r2,-18
 40152a0:	1000221e 	bne	r2,zero,401532c <main+0x14d58>
			{
				draw(white, COLOR08_BLACK, x,y+2 );
 40152a4:	e0b7c217 	ldw	r2,-8440(fp)
 40152a8:	10c00084 	addi	r3,r2,2
 40152ac:	e0b95e04 	addi	r2,fp,-6792
 40152b0:	180f883a 	mov	r7,r3
 40152b4:	e1b7c117 	ldw	r6,-8444(fp)
 40152b8:	000b883a 	mov	r5,zero
 40152bc:	1009883a 	mov	r4,r2
 40152c0:	40003c80 	call	40003c8 <draw>
				draw(eight, COLOR08_BLUE, x,y+2 );
 40152c4:	e0b7c217 	ldw	r2,-8440(fp)
 40152c8:	10800084 	addi	r2,r2,2
 40152cc:	100f883a 	mov	r7,r2
 40152d0:	e1b7c117 	ldw	r6,-8444(fp)
 40152d4:	014000c4 	movi	r5,3
 40152d8:	010100f4 	movhi	r4,1027
 40152dc:	213d2a04 	addi	r4,r4,-2904
 40152e0:	40003c80 	call	40003c8 <draw>
				gameboard[y][x]=8;
 40152e4:	e0b7c217 	ldw	r2,-8440(fp)
 40152e8:	01400504 	movi	r5,20
 40152ec:	1009883a 	mov	r4,r2
 40152f0:	40191000 	call	4019100 <__mulsi3>
 40152f4:	1007883a 	mov	r3,r2
 40152f8:	e0b7c117 	ldw	r2,-8444(fp)
 40152fc:	1885883a 	add	r2,r3,r2
 4015300:	1085883a 	add	r2,r2,r2
 4015304:	1085883a 	add	r2,r2,r2
 4015308:	e0f7c104 	addi	r3,fp,-8444
 401530c:	1885883a 	add	r2,r3,r2
 4015310:	10879d04 	addi	r2,r2,7796
 4015314:	00c00204 	movi	r3,8
 4015318:	10c00015 	stw	r3,0(r2)
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 401531c:	00c00044 	movi	r3,1
 4015320:	008200b4 	movhi	r2,2050
 4015324:	10841804 	addi	r2,r2,4192
 4015328:	10c00035 	stwio	r3,0(r2)
			}
			if(gameboard[y][x]==-19)//9
 401532c:	e0b7c217 	ldw	r2,-8440(fp)
 4015330:	01400504 	movi	r5,20
 4015334:	1009883a 	mov	r4,r2
 4015338:	40191000 	call	4019100 <__mulsi3>
 401533c:	1007883a 	mov	r3,r2
 4015340:	e0b7c117 	ldw	r2,-8444(fp)
 4015344:	1885883a 	add	r2,r3,r2
 4015348:	1085883a 	add	r2,r2,r2
 401534c:	1085883a 	add	r2,r2,r2
 4015350:	e0f7c104 	addi	r3,fp,-8444
 4015354:	1885883a 	add	r2,r3,r2
 4015358:	10879d04 	addi	r2,r2,7796
 401535c:	10800017 	ldw	r2,0(r2)
 4015360:	10bffb58 	cmpnei	r2,r2,-19
 4015364:	1000221e 	bne	r2,zero,40153f0 <main+0x14e1c>
			{
				draw(white, COLOR08_BLACK, x,y+2 );
 4015368:	e0b7c217 	ldw	r2,-8440(fp)
 401536c:	10c00084 	addi	r3,r2,2
 4015370:	e0b95e04 	addi	r2,fp,-6792
 4015374:	180f883a 	mov	r7,r3
 4015378:	e1b7c117 	ldw	r6,-8444(fp)
 401537c:	000b883a 	mov	r5,zero
 4015380:	1009883a 	mov	r4,r2
 4015384:	40003c80 	call	40003c8 <draw>
				draw(nine, COLOR08_INDIGO, x,y+2 );
 4015388:	e0b7c217 	ldw	r2,-8440(fp)
 401538c:	10800084 	addi	r2,r2,2
 4015390:	100f883a 	mov	r7,r2
 4015394:	e1b7c117 	ldw	r6,-8444(fp)
 4015398:	01400884 	movi	r5,34
 401539c:	010100f4 	movhi	r4,1027
 40153a0:	213eaa04 	addi	r4,r4,-1368
 40153a4:	40003c80 	call	40003c8 <draw>
				gameboard[y][x]=9;
 40153a8:	e0b7c217 	ldw	r2,-8440(fp)
 40153ac:	01400504 	movi	r5,20
 40153b0:	1009883a 	mov	r4,r2
 40153b4:	40191000 	call	4019100 <__mulsi3>
 40153b8:	1007883a 	mov	r3,r2
 40153bc:	e0b7c117 	ldw	r2,-8444(fp)
 40153c0:	1885883a 	add	r2,r3,r2
 40153c4:	1085883a 	add	r2,r2,r2
 40153c8:	1085883a 	add	r2,r2,r2
 40153cc:	e0f7c104 	addi	r3,fp,-8444
 40153d0:	1885883a 	add	r2,r3,r2
 40153d4:	10879d04 	addi	r2,r2,7796
 40153d8:	00c00244 	movi	r3,9
 40153dc:	10c00015 	stw	r3,0(r2)
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 40153e0:	00c00044 	movi	r3,1
 40153e4:	008200b4 	movhi	r2,2050
 40153e8:	10841804 	addi	r2,r2,4192
 40153ec:	10c00035 	stwio	r3,0(r2)
			}
		}
		/////////////////////////////////////////
		IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 0);
 40153f0:	0007883a 	mov	r3,zero
 40153f4:	008200b4 	movhi	r2,2050
 40153f8:	10841804 	addi	r2,r2,4192
 40153fc:	10c00035 	stwio	r3,0(r2)
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 1);
 4015400:	00c00044 	movi	r3,1
 4015404:	008200b4 	movhi	r2,2050
 4015408:	10841804 	addi	r2,r2,4192
 401540c:	10c00035 	stwio	r3,0(r2)
				Delay_Pulse();
 4015410:	40003880 	call	4000388 <Delay_Pulse>
				button=IORD_ALTERA_AVALON_PIO_DATA(KEY_UDLRM_ENCODER_BASE);
 4015414:	008200b4 	movhi	r2,2050
 4015418:	10841c04 	addi	r2,r2,4208
 401541c:	10800037 	ldwio	r2,0(r2)
 4015420:	e0b7da15 	stw	r2,-8344(fp)
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 0);
 4015424:	0007883a 	mov	r3,zero
 4015428:	008200b4 	movhi	r2,2050
 401542c:	10841804 	addi	r2,r2,4192
 4015430:	10c00035 	stwio	r3,0(r2)
		if(button==6)
 4015434:	e0b7da17 	ldw	r2,-8344(fp)
 4015438:	10800198 	cmpnei	r2,r2,6
 401543c:	1000c71e 	bne	r2,zero,401575c <main+0x15188>
		{
			for(x=0;x<18;x++)
 4015440:	e037c115 	stw	zero,-8444(fp)
 4015444:	0000c206 	br	4015750 <main+0x1517c>
			{
				for(y=0;y<8;y++)
 4015448:	e037c215 	stw	zero,-8440(fp)
 401544c:	0000ba06 	br	4015738 <main+0x15164>
				{

					if(gameboard[y][x]==-10 || gameboard[y][x]==-11 || gameboard[y][x]==-12 || gameboard[y][x]==-13 || gameboard[y][x]==-14 || gameboard[y][x]==-15 || gameboard[y][x]==-16 || gameboard[y][x]==-17 || gameboard[y][x]==-18 || gameboard[y][x]==-19)
 4015450:	e0b7c217 	ldw	r2,-8440(fp)
 4015454:	01400504 	movi	r5,20
 4015458:	1009883a 	mov	r4,r2
 401545c:	40191000 	call	4019100 <__mulsi3>
 4015460:	1007883a 	mov	r3,r2
 4015464:	e0b7c117 	ldw	r2,-8444(fp)
 4015468:	1885883a 	add	r2,r3,r2
 401546c:	1085883a 	add	r2,r2,r2
 4015470:	1085883a 	add	r2,r2,r2
 4015474:	e0f7c104 	addi	r3,fp,-8444
 4015478:	1885883a 	add	r2,r3,r2
 401547c:	10879d04 	addi	r2,r2,7796
 4015480:	10800017 	ldw	r2,0(r2)
 4015484:	10bffda0 	cmpeqi	r2,r2,-10
 4015488:	1000871e 	bne	r2,zero,40156a8 <main+0x150d4>
 401548c:	e0b7c217 	ldw	r2,-8440(fp)
 4015490:	01400504 	movi	r5,20
 4015494:	1009883a 	mov	r4,r2
 4015498:	40191000 	call	4019100 <__mulsi3>
 401549c:	1007883a 	mov	r3,r2
 40154a0:	e0b7c117 	ldw	r2,-8444(fp)
 40154a4:	1885883a 	add	r2,r3,r2
 40154a8:	1085883a 	add	r2,r2,r2
 40154ac:	1085883a 	add	r2,r2,r2
 40154b0:	e0f7c104 	addi	r3,fp,-8444
 40154b4:	1885883a 	add	r2,r3,r2
 40154b8:	10879d04 	addi	r2,r2,7796
 40154bc:	10800017 	ldw	r2,0(r2)
 40154c0:	10bffd60 	cmpeqi	r2,r2,-11
 40154c4:	1000781e 	bne	r2,zero,40156a8 <main+0x150d4>
 40154c8:	e0b7c217 	ldw	r2,-8440(fp)
 40154cc:	01400504 	movi	r5,20
 40154d0:	1009883a 	mov	r4,r2
 40154d4:	40191000 	call	4019100 <__mulsi3>
 40154d8:	1007883a 	mov	r3,r2
 40154dc:	e0b7c117 	ldw	r2,-8444(fp)
 40154e0:	1885883a 	add	r2,r3,r2
 40154e4:	1085883a 	add	r2,r2,r2
 40154e8:	1085883a 	add	r2,r2,r2
 40154ec:	e0f7c104 	addi	r3,fp,-8444
 40154f0:	1885883a 	add	r2,r3,r2
 40154f4:	10879d04 	addi	r2,r2,7796
 40154f8:	10800017 	ldw	r2,0(r2)
 40154fc:	10bffd20 	cmpeqi	r2,r2,-12
 4015500:	1000691e 	bne	r2,zero,40156a8 <main+0x150d4>
 4015504:	e0b7c217 	ldw	r2,-8440(fp)
 4015508:	01400504 	movi	r5,20
 401550c:	1009883a 	mov	r4,r2
 4015510:	40191000 	call	4019100 <__mulsi3>
 4015514:	1007883a 	mov	r3,r2
 4015518:	e0b7c117 	ldw	r2,-8444(fp)
 401551c:	1885883a 	add	r2,r3,r2
 4015520:	1085883a 	add	r2,r2,r2
 4015524:	1085883a 	add	r2,r2,r2
 4015528:	e0f7c104 	addi	r3,fp,-8444
 401552c:	1885883a 	add	r2,r3,r2
 4015530:	10879d04 	addi	r2,r2,7796
 4015534:	10800017 	ldw	r2,0(r2)
 4015538:	10bffce0 	cmpeqi	r2,r2,-13
 401553c:	10005a1e 	bne	r2,zero,40156a8 <main+0x150d4>
 4015540:	e0b7c217 	ldw	r2,-8440(fp)
 4015544:	01400504 	movi	r5,20
 4015548:	1009883a 	mov	r4,r2
 401554c:	40191000 	call	4019100 <__mulsi3>
 4015550:	1007883a 	mov	r3,r2
 4015554:	e0b7c117 	ldw	r2,-8444(fp)
 4015558:	1885883a 	add	r2,r3,r2
 401555c:	1085883a 	add	r2,r2,r2
 4015560:	1085883a 	add	r2,r2,r2
 4015564:	e0f7c104 	addi	r3,fp,-8444
 4015568:	1885883a 	add	r2,r3,r2
 401556c:	10879d04 	addi	r2,r2,7796
 4015570:	10800017 	ldw	r2,0(r2)
 4015574:	10bffca0 	cmpeqi	r2,r2,-14
 4015578:	10004b1e 	bne	r2,zero,40156a8 <main+0x150d4>
 401557c:	e0b7c217 	ldw	r2,-8440(fp)
 4015580:	01400504 	movi	r5,20
 4015584:	1009883a 	mov	r4,r2
 4015588:	40191000 	call	4019100 <__mulsi3>
 401558c:	1007883a 	mov	r3,r2
 4015590:	e0b7c117 	ldw	r2,-8444(fp)
 4015594:	1885883a 	add	r2,r3,r2
 4015598:	1085883a 	add	r2,r2,r2
 401559c:	1085883a 	add	r2,r2,r2
 40155a0:	e0f7c104 	addi	r3,fp,-8444
 40155a4:	1885883a 	add	r2,r3,r2
 40155a8:	10879d04 	addi	r2,r2,7796
 40155ac:	10800017 	ldw	r2,0(r2)
 40155b0:	10bffc60 	cmpeqi	r2,r2,-15
 40155b4:	10003c1e 	bne	r2,zero,40156a8 <main+0x150d4>
 40155b8:	e0b7c217 	ldw	r2,-8440(fp)
 40155bc:	01400504 	movi	r5,20
 40155c0:	1009883a 	mov	r4,r2
 40155c4:	40191000 	call	4019100 <__mulsi3>
 40155c8:	1007883a 	mov	r3,r2
 40155cc:	e0b7c117 	ldw	r2,-8444(fp)
 40155d0:	1885883a 	add	r2,r3,r2
 40155d4:	1085883a 	add	r2,r2,r2
 40155d8:	1085883a 	add	r2,r2,r2
 40155dc:	e0f7c104 	addi	r3,fp,-8444
 40155e0:	1885883a 	add	r2,r3,r2
 40155e4:	10879d04 	addi	r2,r2,7796
 40155e8:	10800017 	ldw	r2,0(r2)
 40155ec:	10bffc20 	cmpeqi	r2,r2,-16
 40155f0:	10002d1e 	bne	r2,zero,40156a8 <main+0x150d4>
 40155f4:	e0b7c217 	ldw	r2,-8440(fp)
 40155f8:	01400504 	movi	r5,20
 40155fc:	1009883a 	mov	r4,r2
 4015600:	40191000 	call	4019100 <__mulsi3>
 4015604:	1007883a 	mov	r3,r2
 4015608:	e0b7c117 	ldw	r2,-8444(fp)
 401560c:	1885883a 	add	r2,r3,r2
 4015610:	1085883a 	add	r2,r2,r2
 4015614:	1085883a 	add	r2,r2,r2
 4015618:	e0f7c104 	addi	r3,fp,-8444
 401561c:	1885883a 	add	r2,r3,r2
 4015620:	10879d04 	addi	r2,r2,7796
 4015624:	10800017 	ldw	r2,0(r2)
 4015628:	10bffbe0 	cmpeqi	r2,r2,-17
 401562c:	10001e1e 	bne	r2,zero,40156a8 <main+0x150d4>
 4015630:	e0b7c217 	ldw	r2,-8440(fp)
 4015634:	01400504 	movi	r5,20
 4015638:	1009883a 	mov	r4,r2
 401563c:	40191000 	call	4019100 <__mulsi3>
 4015640:	1007883a 	mov	r3,r2
 4015644:	e0b7c117 	ldw	r2,-8444(fp)
 4015648:	1885883a 	add	r2,r3,r2
 401564c:	1085883a 	add	r2,r2,r2
 4015650:	1085883a 	add	r2,r2,r2
 4015654:	e0f7c104 	addi	r3,fp,-8444
 4015658:	1885883a 	add	r2,r3,r2
 401565c:	10879d04 	addi	r2,r2,7796
 4015660:	10800017 	ldw	r2,0(r2)
 4015664:	10bffba0 	cmpeqi	r2,r2,-18
 4015668:	10000f1e 	bne	r2,zero,40156a8 <main+0x150d4>
 401566c:	e0b7c217 	ldw	r2,-8440(fp)
 4015670:	01400504 	movi	r5,20
 4015674:	1009883a 	mov	r4,r2
 4015678:	40191000 	call	4019100 <__mulsi3>
 401567c:	1007883a 	mov	r3,r2
 4015680:	e0b7c117 	ldw	r2,-8444(fp)
 4015684:	1885883a 	add	r2,r3,r2
 4015688:	1085883a 	add	r2,r2,r2
 401568c:	1085883a 	add	r2,r2,r2
 4015690:	e0f7c104 	addi	r3,fp,-8444
 4015694:	1885883a 	add	r2,r3,r2
 4015698:	10879d04 	addi	r2,r2,7796
 401569c:	10800017 	ldw	r2,0(r2)
 40156a0:	10bffb58 	cmpnei	r2,r2,-19
 40156a4:	1000211e 	bne	r2,zero,401572c <main+0x15158>
					{
							draw(white,COLOR08_WHITE,x,y+2);
 40156a8:	e0b7c217 	ldw	r2,-8440(fp)
 40156ac:	10c00084 	addi	r3,r2,2
 40156b0:	e0b95e04 	addi	r2,fp,-6792
 40156b4:	180f883a 	mov	r7,r3
 40156b8:	e1b7c117 	ldw	r6,-8444(fp)
 40156bc:	01403fc4 	movi	r5,255
 40156c0:	1009883a 	mov	r4,r2
 40156c4:	40003c80 	call	40003c8 <draw>
							draw(E,COLOR08_BLACK,x,y+2);
 40156c8:	e0b7c217 	ldw	r2,-8440(fp)
 40156cc:	10800084 	addi	r2,r2,2
 40156d0:	100f883a 	mov	r7,r2
 40156d4:	e1b7c117 	ldw	r6,-8444(fp)
 40156d8:	000b883a 	mov	r5,zero
 40156dc:	010100f4 	movhi	r4,1027
 40156e0:	21062a04 	addi	r4,r4,6312
 40156e4:	40003c80 	call	40003c8 <draw>
							gameboard[y][x] = -1;
 40156e8:	e0b7c217 	ldw	r2,-8440(fp)
 40156ec:	01400504 	movi	r5,20
 40156f0:	1009883a 	mov	r4,r2
 40156f4:	40191000 	call	4019100 <__mulsi3>
 40156f8:	1007883a 	mov	r3,r2
 40156fc:	e0b7c117 	ldw	r2,-8444(fp)
 4015700:	1885883a 	add	r2,r3,r2
 4015704:	1085883a 	add	r2,r2,r2
 4015708:	1085883a 	add	r2,r2,r2
 401570c:	e0f7c104 	addi	r3,fp,-8444
 4015710:	1885883a 	add	r2,r3,r2
 4015714:	10879d04 	addi	r2,r2,7796
 4015718:	00ffffc4 	movi	r3,-1
 401571c:	10c00015 	stw	r3,0(r2)
							ct++;
 4015720:	e0b7c417 	ldw	r2,-8432(fp)
 4015724:	10800044 	addi	r2,r2,1
 4015728:	e0b7c415 	stw	r2,-8432(fp)
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 0);
		if(button==6)
		{
			for(x=0;x<18;x++)
			{
				for(y=0;y<8;y++)
 401572c:	e0b7c217 	ldw	r2,-8440(fp)
 4015730:	10800044 	addi	r2,r2,1
 4015734:	e0b7c215 	stw	r2,-8440(fp)
 4015738:	e0b7c217 	ldw	r2,-8440(fp)
 401573c:	10800210 	cmplti	r2,r2,8
 4015740:	103f431e 	bne	r2,zero,4015450 <__alt_data_end+0xfc015450>
				Delay_Pulse();
				button=IORD_ALTERA_AVALON_PIO_DATA(KEY_UDLRM_ENCODER_BASE);
				IOWR_ALTERA_AVALON_PIO_DATA (KEY_READ_REQ_BASE, 0);
		if(button==6)
		{
			for(x=0;x<18;x++)
 4015744:	e0b7c117 	ldw	r2,-8444(fp)
 4015748:	10800044 	addi	r2,r2,1
 401574c:	e0b7c115 	stw	r2,-8444(fp)
 4015750:	e0b7c117 	ldw	r2,-8444(fp)
 4015754:	10800490 	cmplti	r2,r2,18
 4015758:	103f3b1e 	bne	r2,zero,4015448 <__alt_data_end+0xfc015448>

					}
				}
			}
		}
		Delay_Medium();
 401575c:	40002fc0 	call	40002fc <Delay_Medium>
for(f=0;f<100000;f++)
{
q=ct;
	for(x=0;x<18;)
{
	for(y=0;y<8;)
 4015760:	e0b7c217 	ldw	r2,-8440(fp)
 4015764:	10800210 	cmplti	r2,r2,8
 4015768:	10000126 	beq	r2,zero,4015770 <main+0x1519c>
 401576c:	40012281 	jmpi	4001228 <main+0xc54>
//right

for(f=0;f<100000;f++)
{
q=ct;
	for(x=0;x<18;)
 4015770:	e0b7c117 	ldw	r2,-8444(fp)
 4015774:	10800490 	cmplti	r2,r2,18
 4015778:	10000126 	beq	r2,zero,4015780 <main+0x151ac>
 401577c:	40012201 	jmpi	4001220 <main+0xc4c>

		}
		/////////////
	}
}
for(z=0;z<7;z++)
 4015780:	e037c315 	stw	zero,-8436(fp)
 4015784:	000a5006 	br	40180c8 <main+0x17af4>
{
for(x=0;x<18;x++)
 4015788:	e037c115 	stw	zero,-8444(fp)
 401578c:	000a4806 	br	40180b0 <main+0x17adc>
{
	for(y=0;y<8;y++)
 4015790:	e037c215 	stw	zero,-8440(fp)
 4015794:	000a4006 	br	4018098 <main+0x17ac4>
	{
		if(y>0 && y<=7)
 4015798:	e0b7c217 	ldw	r2,-8440(fp)
 401579c:	008a3b0e 	bge	zero,r2,401808c <main+0x17ab8>
 40157a0:	e0b7c217 	ldw	r2,-8440(fp)
 40157a4:	10800208 	cmpgei	r2,r2,8
 40157a8:	100a381e 	bne	r2,zero,401808c <main+0x17ab8>
		{
			clk = IORD_ALTERA_AVALON_PIO_DATA(DIGITAL_CLOCK_BASE);
 40157ac:	008200b4 	movhi	r2,2050
 40157b0:	10841404 	addi	r2,r2,4176
 40157b4:	10800037 	ldwio	r2,0(r2)
 40157b8:	e0b7c615 	stw	r2,-8424(fp)
			sec = clk%60;
 40157bc:	e0b7c617 	ldw	r2,-8424(fp)
 40157c0:	01400f04 	movi	r5,60
 40157c4:	1009883a 	mov	r4,r2
 40157c8:	4018fd00 	call	4018fd0 <__modsi3>
 40157cc:	e0b7cb15 	stw	r2,-8404(fp)
			min = (clk/60)%60;
 40157d0:	e0b7c617 	ldw	r2,-8424(fp)
 40157d4:	01400f04 	movi	r5,60
 40157d8:	1009883a 	mov	r4,r2
 40157dc:	4018f4c0 	call	4018f4c <__divsi3>
 40157e0:	01400f04 	movi	r5,60
 40157e4:	1009883a 	mov	r4,r2
 40157e8:	4018fd00 	call	4018fd0 <__modsi3>
 40157ec:	e0b7cc15 	stw	r2,-8400(fp)
			hour = ((clk/60)/60)%24;
 40157f0:	e0b7c617 	ldw	r2,-8424(fp)
 40157f4:	01438404 	movi	r5,3600
 40157f8:	1009883a 	mov	r4,r2
 40157fc:	4018f4c0 	call	4018f4c <__divsi3>
 4015800:	01400604 	movi	r5,24
 4015804:	1009883a 	mov	r4,r2
 4015808:	4018fd00 	call	4018fd0 <__modsi3>
 401580c:	e0b7cd15 	stw	r2,-8396(fp)
			day =  (((clk/60)/60)/24)%100;
 4015810:	e0b7c617 	ldw	r2,-8424(fp)
 4015814:	01400074 	movhi	r5,1
 4015818:	29546004 	addi	r5,r5,20864
 401581c:	1009883a 	mov	r4,r2
 4015820:	4018f4c0 	call	4018f4c <__divsi3>
 4015824:	01401904 	movi	r5,100
 4015828:	1009883a 	mov	r4,r2
 401582c:	4018fd00 	call	4018fd0 <__modsi3>
 4015830:	e0b7ce15 	stw	r2,-8392(fp)
			sec_a = sec/10;
 4015834:	e0b7cb17 	ldw	r2,-8404(fp)
 4015838:	01400284 	movi	r5,10
 401583c:	1009883a 	mov	r4,r2
 4015840:	4018f4c0 	call	4018f4c <__divsi3>
 4015844:	e0b7cf15 	stw	r2,-8388(fp)
			sec_b = sec%10;
 4015848:	e0b7cb17 	ldw	r2,-8404(fp)
 401584c:	01400284 	movi	r5,10
 4015850:	1009883a 	mov	r4,r2
 4015854:	4018fd00 	call	4018fd0 <__modsi3>
 4015858:	e0b7d015 	stw	r2,-8384(fp)
			min_a = min/10;
 401585c:	e0b7cc17 	ldw	r2,-8400(fp)
 4015860:	01400284 	movi	r5,10
 4015864:	1009883a 	mov	r4,r2
 4015868:	4018f4c0 	call	4018f4c <__divsi3>
 401586c:	e0b7d115 	stw	r2,-8380(fp)
			min_b = min%10;
 4015870:	e0b7cc17 	ldw	r2,-8400(fp)
 4015874:	01400284 	movi	r5,10
 4015878:	1009883a 	mov	r4,r2
 401587c:	4018fd00 	call	4018fd0 <__modsi3>
 4015880:	e0b7d215 	stw	r2,-8376(fp)
			hour_a = hour/10;
 4015884:	e0b7cd17 	ldw	r2,-8396(fp)
 4015888:	01400284 	movi	r5,10
 401588c:	1009883a 	mov	r4,r2
 4015890:	4018f4c0 	call	4018f4c <__divsi3>
 4015894:	e0b7d315 	stw	r2,-8372(fp)
			hour_b = hour%10;
 4015898:	e0b7cd17 	ldw	r2,-8396(fp)
 401589c:	01400284 	movi	r5,10
 40158a0:	1009883a 	mov	r4,r2
 40158a4:	4018fd00 	call	4018fd0 <__modsi3>
 40158a8:	e0b7d415 	stw	r2,-8368(fp)
			day_a = day/10;
 40158ac:	e0b7ce17 	ldw	r2,-8392(fp)
 40158b0:	01400284 	movi	r5,10
 40158b4:	1009883a 	mov	r4,r2
 40158b8:	4018f4c0 	call	4018f4c <__divsi3>
 40158bc:	e0b7d515 	stw	r2,-8364(fp)
			day_b = day%10;
 40158c0:	e0b7ce17 	ldw	r2,-8392(fp)
 40158c4:	01400284 	movi	r5,10
 40158c8:	1009883a 	mov	r4,r2
 40158cc:	4018fd00 	call	4018fd0 <__modsi3>
 40158d0:	e0b7d615 	stw	r2,-8360(fp)

			printf("%i:",day);
 40158d4:	e177ce17 	ldw	r5,-8392(fp)
 40158d8:	010100f4 	movhi	r4,1027
 40158dc:	212a7c04 	addi	r4,r4,-22032
 40158e0:	40193c80 	call	40193c8 <printf>
			printf("%i:",hour);
 40158e4:	e177cd17 	ldw	r5,-8396(fp)
 40158e8:	010100f4 	movhi	r4,1027
 40158ec:	212a7c04 	addi	r4,r4,-22032
 40158f0:	40193c80 	call	40193c8 <printf>
			printf("%i:",min);
 40158f4:	e177cc17 	ldw	r5,-8400(fp)
 40158f8:	010100f4 	movhi	r4,1027
 40158fc:	212a7c04 	addi	r4,r4,-22032
 4015900:	40193c80 	call	40193c8 <printf>
			printf("%i\n",sec);
 4015904:	e177cb17 	ldw	r5,-8404(fp)
 4015908:	010100f4 	movhi	r4,1027
 401590c:	212a7d04 	addi	r4,r4,-22028
 4015910:	40193c80 	call	40193c8 <printf>

			if(sec_b == 0)
 4015914:	e0b7d017 	ldw	r2,-8384(fp)
 4015918:	10000c1e 	bne	r2,zero,401594c <main+0x15378>
			{
				draw1(dig_blank, COLOR08_BLACK, 39, 0);
 401591c:	e0befe04 	addi	r2,fp,-1032
 4015920:	000f883a 	mov	r7,zero
 4015924:	018009c4 	movi	r6,39
 4015928:	000b883a 	mov	r5,zero
 401592c:	1009883a 	mov	r4,r2
 4015930:	40004cc0 	call	40004cc <draw1>
				draw1(dig_zero, COLOR08_RED, 39, 0);
 4015934:	e0bb3e04 	addi	r2,fp,-4872
 4015938:	000f883a 	mov	r7,zero
 401593c:	018009c4 	movi	r6,39
 4015940:	01403804 	movi	r5,224
 4015944:	1009883a 	mov	r4,r2
 4015948:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_b == 1)
 401594c:	e0b7d017 	ldw	r2,-8384(fp)
 4015950:	10800058 	cmpnei	r2,r2,1
 4015954:	10000c1e 	bne	r2,zero,4015988 <main+0x153b4>
			{
				draw1(dig_blank, COLOR08_BLACK, 39, 0);
 4015958:	e0befe04 	addi	r2,fp,-1032
 401595c:	000f883a 	mov	r7,zero
 4015960:	018009c4 	movi	r6,39
 4015964:	000b883a 	mov	r5,zero
 4015968:	1009883a 	mov	r4,r2
 401596c:	40004cc0 	call	40004cc <draw1>
				draw1(dig_one, COLOR08_RED, 39, 0);
 4015970:	e0bb9e04 	addi	r2,fp,-4488
 4015974:	000f883a 	mov	r7,zero
 4015978:	018009c4 	movi	r6,39
 401597c:	01403804 	movi	r5,224
 4015980:	1009883a 	mov	r4,r2
 4015984:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_b == 2)
 4015988:	e0b7d017 	ldw	r2,-8384(fp)
 401598c:	10800098 	cmpnei	r2,r2,2
 4015990:	10000c1e 	bne	r2,zero,40159c4 <main+0x153f0>
			{
				draw1(dig_blank, COLOR08_BLACK, 39, 0);
 4015994:	e0befe04 	addi	r2,fp,-1032
 4015998:	000f883a 	mov	r7,zero
 401599c:	018009c4 	movi	r6,39
 40159a0:	000b883a 	mov	r5,zero
 40159a4:	1009883a 	mov	r4,r2
 40159a8:	40004cc0 	call	40004cc <draw1>
				draw1(dig_two, COLOR08_RED, 39, 0);
 40159ac:	e0bbfe04 	addi	r2,fp,-4104
 40159b0:	000f883a 	mov	r7,zero
 40159b4:	018009c4 	movi	r6,39
 40159b8:	01403804 	movi	r5,224
 40159bc:	1009883a 	mov	r4,r2
 40159c0:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_b == 3)
 40159c4:	e0b7d017 	ldw	r2,-8384(fp)
 40159c8:	108000d8 	cmpnei	r2,r2,3
 40159cc:	10000c1e 	bne	r2,zero,4015a00 <main+0x1542c>
			{
				draw1(dig_blank, COLOR08_BLACK, 39, 0);
 40159d0:	e0befe04 	addi	r2,fp,-1032
 40159d4:	000f883a 	mov	r7,zero
 40159d8:	018009c4 	movi	r6,39
 40159dc:	000b883a 	mov	r5,zero
 40159e0:	1009883a 	mov	r4,r2
 40159e4:	40004cc0 	call	40004cc <draw1>
				draw1(dig_three, COLOR08_RED, 39, 0);
 40159e8:	e0bc5e04 	addi	r2,fp,-3720
 40159ec:	000f883a 	mov	r7,zero
 40159f0:	018009c4 	movi	r6,39
 40159f4:	01403804 	movi	r5,224
 40159f8:	1009883a 	mov	r4,r2
 40159fc:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_b == 4)
 4015a00:	e0b7d017 	ldw	r2,-8384(fp)
 4015a04:	10800118 	cmpnei	r2,r2,4
 4015a08:	10000c1e 	bne	r2,zero,4015a3c <main+0x15468>
			{
				draw1(dig_blank, COLOR08_BLACK, 39, 0);
 4015a0c:	e0befe04 	addi	r2,fp,-1032
 4015a10:	000f883a 	mov	r7,zero
 4015a14:	018009c4 	movi	r6,39
 4015a18:	000b883a 	mov	r5,zero
 4015a1c:	1009883a 	mov	r4,r2
 4015a20:	40004cc0 	call	40004cc <draw1>
				draw1(dig_four, COLOR08_RED, 39, 0);
 4015a24:	e0bcbe04 	addi	r2,fp,-3336
 4015a28:	000f883a 	mov	r7,zero
 4015a2c:	018009c4 	movi	r6,39
 4015a30:	01403804 	movi	r5,224
 4015a34:	1009883a 	mov	r4,r2
 4015a38:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_b == 5)
 4015a3c:	e0b7d017 	ldw	r2,-8384(fp)
 4015a40:	10800158 	cmpnei	r2,r2,5
 4015a44:	10000c1e 	bne	r2,zero,4015a78 <main+0x154a4>
			{
				draw1(dig_blank, COLOR08_BLACK, 39, 0);
 4015a48:	e0befe04 	addi	r2,fp,-1032
 4015a4c:	000f883a 	mov	r7,zero
 4015a50:	018009c4 	movi	r6,39
 4015a54:	000b883a 	mov	r5,zero
 4015a58:	1009883a 	mov	r4,r2
 4015a5c:	40004cc0 	call	40004cc <draw1>
				draw1(dig_five, COLOR08_RED, 39, 0);
 4015a60:	e0bd1e04 	addi	r2,fp,-2952
 4015a64:	000f883a 	mov	r7,zero
 4015a68:	018009c4 	movi	r6,39
 4015a6c:	01403804 	movi	r5,224
 4015a70:	1009883a 	mov	r4,r2
 4015a74:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_b == 6)
 4015a78:	e0b7d017 	ldw	r2,-8384(fp)
 4015a7c:	10800198 	cmpnei	r2,r2,6
 4015a80:	10000c1e 	bne	r2,zero,4015ab4 <main+0x154e0>
			{
				draw1(dig_blank, COLOR08_BLACK, 39, 0);
 4015a84:	e0befe04 	addi	r2,fp,-1032
 4015a88:	000f883a 	mov	r7,zero
 4015a8c:	018009c4 	movi	r6,39
 4015a90:	000b883a 	mov	r5,zero
 4015a94:	1009883a 	mov	r4,r2
 4015a98:	40004cc0 	call	40004cc <draw1>
				draw1(dig_six, COLOR08_RED, 39, 0);
 4015a9c:	e0bd7e04 	addi	r2,fp,-2568
 4015aa0:	000f883a 	mov	r7,zero
 4015aa4:	018009c4 	movi	r6,39
 4015aa8:	01403804 	movi	r5,224
 4015aac:	1009883a 	mov	r4,r2
 4015ab0:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_b == 7)
 4015ab4:	e0b7d017 	ldw	r2,-8384(fp)
 4015ab8:	108001d8 	cmpnei	r2,r2,7
 4015abc:	10000c1e 	bne	r2,zero,4015af0 <main+0x1551c>
			{
				draw1(dig_blank, COLOR08_BLACK, 39, 0);
 4015ac0:	e0befe04 	addi	r2,fp,-1032
 4015ac4:	000f883a 	mov	r7,zero
 4015ac8:	018009c4 	movi	r6,39
 4015acc:	000b883a 	mov	r5,zero
 4015ad0:	1009883a 	mov	r4,r2
 4015ad4:	40004cc0 	call	40004cc <draw1>
				draw1(dig_seven, COLOR08_RED, 39, 0);
 4015ad8:	e0bdde04 	addi	r2,fp,-2184
 4015adc:	000f883a 	mov	r7,zero
 4015ae0:	018009c4 	movi	r6,39
 4015ae4:	01403804 	movi	r5,224
 4015ae8:	1009883a 	mov	r4,r2
 4015aec:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_b == 8)
 4015af0:	e0b7d017 	ldw	r2,-8384(fp)
 4015af4:	10800218 	cmpnei	r2,r2,8
 4015af8:	10000c1e 	bne	r2,zero,4015b2c <main+0x15558>
			{
				draw1(dig_blank, COLOR08_BLACK, 39, 0);
 4015afc:	e0befe04 	addi	r2,fp,-1032
 4015b00:	000f883a 	mov	r7,zero
 4015b04:	018009c4 	movi	r6,39
 4015b08:	000b883a 	mov	r5,zero
 4015b0c:	1009883a 	mov	r4,r2
 4015b10:	40004cc0 	call	40004cc <draw1>
				draw1(dig_eight, COLOR08_RED, 39, 0);
 4015b14:	e0be3e04 	addi	r2,fp,-1800
 4015b18:	000f883a 	mov	r7,zero
 4015b1c:	018009c4 	movi	r6,39
 4015b20:	01403804 	movi	r5,224
 4015b24:	1009883a 	mov	r4,r2
 4015b28:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_b == 9)
 4015b2c:	e0b7d017 	ldw	r2,-8384(fp)
 4015b30:	10800258 	cmpnei	r2,r2,9
 4015b34:	10000c1e 	bne	r2,zero,4015b68 <main+0x15594>
			{
				draw1(dig_blank, COLOR08_BLACK, 39, 0);
 4015b38:	e0befe04 	addi	r2,fp,-1032
 4015b3c:	000f883a 	mov	r7,zero
 4015b40:	018009c4 	movi	r6,39
 4015b44:	000b883a 	mov	r5,zero
 4015b48:	1009883a 	mov	r4,r2
 4015b4c:	40004cc0 	call	40004cc <draw1>
				draw1(dig_nine, COLOR08_RED, 39, 0);
 4015b50:	e0be9e04 	addi	r2,fp,-1416
 4015b54:	000f883a 	mov	r7,zero
 4015b58:	018009c4 	movi	r6,39
 4015b5c:	01403804 	movi	r5,224
 4015b60:	1009883a 	mov	r4,r2
 4015b64:	40004cc0 	call	40004cc <draw1>
			}




			if(sec_a == 0)
 4015b68:	e0b7cf17 	ldw	r2,-8388(fp)
 4015b6c:	10000c1e 	bne	r2,zero,4015ba0 <main+0x155cc>
			{
				draw1(dig_blank, COLOR08_BLACK, 38, 0);
 4015b70:	e0befe04 	addi	r2,fp,-1032
 4015b74:	000f883a 	mov	r7,zero
 4015b78:	01800984 	movi	r6,38
 4015b7c:	000b883a 	mov	r5,zero
 4015b80:	1009883a 	mov	r4,r2
 4015b84:	40004cc0 	call	40004cc <draw1>
				draw1(dig_zero, COLOR08_RED, 38, 0);
 4015b88:	e0bb3e04 	addi	r2,fp,-4872
 4015b8c:	000f883a 	mov	r7,zero
 4015b90:	01800984 	movi	r6,38
 4015b94:	01403804 	movi	r5,224
 4015b98:	1009883a 	mov	r4,r2
 4015b9c:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_a == 1)
 4015ba0:	e0b7cf17 	ldw	r2,-8388(fp)
 4015ba4:	10800058 	cmpnei	r2,r2,1
 4015ba8:	10000c1e 	bne	r2,zero,4015bdc <main+0x15608>
			{
				draw1(dig_blank, COLOR08_BLACK, 38, 0);
 4015bac:	e0befe04 	addi	r2,fp,-1032
 4015bb0:	000f883a 	mov	r7,zero
 4015bb4:	01800984 	movi	r6,38
 4015bb8:	000b883a 	mov	r5,zero
 4015bbc:	1009883a 	mov	r4,r2
 4015bc0:	40004cc0 	call	40004cc <draw1>
				draw1(dig_one, COLOR08_RED, 38, 0);
 4015bc4:	e0bb9e04 	addi	r2,fp,-4488
 4015bc8:	000f883a 	mov	r7,zero
 4015bcc:	01800984 	movi	r6,38
 4015bd0:	01403804 	movi	r5,224
 4015bd4:	1009883a 	mov	r4,r2
 4015bd8:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_a == 2)
 4015bdc:	e0b7cf17 	ldw	r2,-8388(fp)
 4015be0:	10800098 	cmpnei	r2,r2,2
 4015be4:	10000c1e 	bne	r2,zero,4015c18 <main+0x15644>
			{
				draw1(dig_blank, COLOR08_BLACK, 38, 0);
 4015be8:	e0befe04 	addi	r2,fp,-1032
 4015bec:	000f883a 	mov	r7,zero
 4015bf0:	01800984 	movi	r6,38
 4015bf4:	000b883a 	mov	r5,zero
 4015bf8:	1009883a 	mov	r4,r2
 4015bfc:	40004cc0 	call	40004cc <draw1>
				draw1(dig_two, COLOR08_RED, 38, 0);
 4015c00:	e0bbfe04 	addi	r2,fp,-4104
 4015c04:	000f883a 	mov	r7,zero
 4015c08:	01800984 	movi	r6,38
 4015c0c:	01403804 	movi	r5,224
 4015c10:	1009883a 	mov	r4,r2
 4015c14:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_a == 3)
 4015c18:	e0b7cf17 	ldw	r2,-8388(fp)
 4015c1c:	108000d8 	cmpnei	r2,r2,3
 4015c20:	10000c1e 	bne	r2,zero,4015c54 <main+0x15680>
			{
				draw1(dig_blank, COLOR08_BLACK, 38, 0);
 4015c24:	e0befe04 	addi	r2,fp,-1032
 4015c28:	000f883a 	mov	r7,zero
 4015c2c:	01800984 	movi	r6,38
 4015c30:	000b883a 	mov	r5,zero
 4015c34:	1009883a 	mov	r4,r2
 4015c38:	40004cc0 	call	40004cc <draw1>
				draw1(dig_three, COLOR08_RED, 38, 0);
 4015c3c:	e0bc5e04 	addi	r2,fp,-3720
 4015c40:	000f883a 	mov	r7,zero
 4015c44:	01800984 	movi	r6,38
 4015c48:	01403804 	movi	r5,224
 4015c4c:	1009883a 	mov	r4,r2
 4015c50:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_a == 4)
 4015c54:	e0b7cf17 	ldw	r2,-8388(fp)
 4015c58:	10800118 	cmpnei	r2,r2,4
 4015c5c:	10000c1e 	bne	r2,zero,4015c90 <main+0x156bc>
			{
				draw1(dig_blank, COLOR08_BLACK, 38, 0);
 4015c60:	e0befe04 	addi	r2,fp,-1032
 4015c64:	000f883a 	mov	r7,zero
 4015c68:	01800984 	movi	r6,38
 4015c6c:	000b883a 	mov	r5,zero
 4015c70:	1009883a 	mov	r4,r2
 4015c74:	40004cc0 	call	40004cc <draw1>
				draw1(dig_four, COLOR08_RED, 38, 0);
 4015c78:	e0bcbe04 	addi	r2,fp,-3336
 4015c7c:	000f883a 	mov	r7,zero
 4015c80:	01800984 	movi	r6,38
 4015c84:	01403804 	movi	r5,224
 4015c88:	1009883a 	mov	r4,r2
 4015c8c:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_a == 5)
 4015c90:	e0b7cf17 	ldw	r2,-8388(fp)
 4015c94:	10800158 	cmpnei	r2,r2,5
 4015c98:	10000c1e 	bne	r2,zero,4015ccc <main+0x156f8>
			{
				draw1(dig_blank, COLOR08_BLACK, 38, 0);
 4015c9c:	e0befe04 	addi	r2,fp,-1032
 4015ca0:	000f883a 	mov	r7,zero
 4015ca4:	01800984 	movi	r6,38
 4015ca8:	000b883a 	mov	r5,zero
 4015cac:	1009883a 	mov	r4,r2
 4015cb0:	40004cc0 	call	40004cc <draw1>
				draw1(dig_five, COLOR08_RED, 38, 0);
 4015cb4:	e0bd1e04 	addi	r2,fp,-2952
 4015cb8:	000f883a 	mov	r7,zero
 4015cbc:	01800984 	movi	r6,38
 4015cc0:	01403804 	movi	r5,224
 4015cc4:	1009883a 	mov	r4,r2
 4015cc8:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_a == 6)
 4015ccc:	e0b7cf17 	ldw	r2,-8388(fp)
 4015cd0:	10800198 	cmpnei	r2,r2,6
 4015cd4:	10000c1e 	bne	r2,zero,4015d08 <main+0x15734>
			{
				draw1(dig_blank, COLOR08_BLACK, 38, 0);
 4015cd8:	e0befe04 	addi	r2,fp,-1032
 4015cdc:	000f883a 	mov	r7,zero
 4015ce0:	01800984 	movi	r6,38
 4015ce4:	000b883a 	mov	r5,zero
 4015ce8:	1009883a 	mov	r4,r2
 4015cec:	40004cc0 	call	40004cc <draw1>
				draw1(dig_six, COLOR08_RED, 38, 0);
 4015cf0:	e0bd7e04 	addi	r2,fp,-2568
 4015cf4:	000f883a 	mov	r7,zero
 4015cf8:	01800984 	movi	r6,38
 4015cfc:	01403804 	movi	r5,224
 4015d00:	1009883a 	mov	r4,r2
 4015d04:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_a == 7)
 4015d08:	e0b7cf17 	ldw	r2,-8388(fp)
 4015d0c:	108001d8 	cmpnei	r2,r2,7
 4015d10:	10000c1e 	bne	r2,zero,4015d44 <main+0x15770>
			{
				draw1(dig_blank, COLOR08_BLACK, 38, 0);
 4015d14:	e0befe04 	addi	r2,fp,-1032
 4015d18:	000f883a 	mov	r7,zero
 4015d1c:	01800984 	movi	r6,38
 4015d20:	000b883a 	mov	r5,zero
 4015d24:	1009883a 	mov	r4,r2
 4015d28:	40004cc0 	call	40004cc <draw1>
				draw1(dig_seven, COLOR08_RED, 38, 0);
 4015d2c:	e0bdde04 	addi	r2,fp,-2184
 4015d30:	000f883a 	mov	r7,zero
 4015d34:	01800984 	movi	r6,38
 4015d38:	01403804 	movi	r5,224
 4015d3c:	1009883a 	mov	r4,r2
 4015d40:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_a == 8)
 4015d44:	e0b7cf17 	ldw	r2,-8388(fp)
 4015d48:	10800218 	cmpnei	r2,r2,8
 4015d4c:	10000c1e 	bne	r2,zero,4015d80 <main+0x157ac>
			{
				draw1(dig_blank, COLOR08_BLACK, 38, 0);
 4015d50:	e0befe04 	addi	r2,fp,-1032
 4015d54:	000f883a 	mov	r7,zero
 4015d58:	01800984 	movi	r6,38
 4015d5c:	000b883a 	mov	r5,zero
 4015d60:	1009883a 	mov	r4,r2
 4015d64:	40004cc0 	call	40004cc <draw1>
				draw1(dig_eight, COLOR08_RED, 38, 0);
 4015d68:	e0be3e04 	addi	r2,fp,-1800
 4015d6c:	000f883a 	mov	r7,zero
 4015d70:	01800984 	movi	r6,38
 4015d74:	01403804 	movi	r5,224
 4015d78:	1009883a 	mov	r4,r2
 4015d7c:	40004cc0 	call	40004cc <draw1>
			}
			if(sec_a == 9)
 4015d80:	e0b7cf17 	ldw	r2,-8388(fp)
 4015d84:	10800258 	cmpnei	r2,r2,9
 4015d88:	10000c1e 	bne	r2,zero,4015dbc <main+0x157e8>
			{
				draw1(dig_blank, COLOR08_BLACK, 38, 0);
 4015d8c:	e0befe04 	addi	r2,fp,-1032
 4015d90:	000f883a 	mov	r7,zero
 4015d94:	01800984 	movi	r6,38
 4015d98:	000b883a 	mov	r5,zero
 4015d9c:	1009883a 	mov	r4,r2
 4015da0:	40004cc0 	call	40004cc <draw1>
				draw1(dig_nine, COLOR08_RED, 38, 0);
 4015da4:	e0be9e04 	addi	r2,fp,-1416
 4015da8:	000f883a 	mov	r7,zero
 4015dac:	01800984 	movi	r6,38
 4015db0:	01403804 	movi	r5,224
 4015db4:	1009883a 	mov	r4,r2
 4015db8:	40004cc0 	call	40004cc <draw1>
			}


			if(min_b == 0)
 4015dbc:	e0b7d217 	ldw	r2,-8376(fp)
 4015dc0:	10000c1e 	bne	r2,zero,4015df4 <main+0x15820>
			{
				draw1(dig_blank, COLOR08_BLACK, 36, 0);
 4015dc4:	e0befe04 	addi	r2,fp,-1032
 4015dc8:	000f883a 	mov	r7,zero
 4015dcc:	01800904 	movi	r6,36
 4015dd0:	000b883a 	mov	r5,zero
 4015dd4:	1009883a 	mov	r4,r2
 4015dd8:	40004cc0 	call	40004cc <draw1>
				draw1(dig_zero, COLOR08_RED, 36, 0);
 4015ddc:	e0bb3e04 	addi	r2,fp,-4872
 4015de0:	000f883a 	mov	r7,zero
 4015de4:	01800904 	movi	r6,36
 4015de8:	01403804 	movi	r5,224
 4015dec:	1009883a 	mov	r4,r2
 4015df0:	40004cc0 	call	40004cc <draw1>
			}
			if(min_b == 1)
 4015df4:	e0b7d217 	ldw	r2,-8376(fp)
 4015df8:	10800058 	cmpnei	r2,r2,1
 4015dfc:	10000c1e 	bne	r2,zero,4015e30 <main+0x1585c>
			{
				draw1(dig_blank, COLOR08_BLACK, 36, 0);
 4015e00:	e0befe04 	addi	r2,fp,-1032
 4015e04:	000f883a 	mov	r7,zero
 4015e08:	01800904 	movi	r6,36
 4015e0c:	000b883a 	mov	r5,zero
 4015e10:	1009883a 	mov	r4,r2
 4015e14:	40004cc0 	call	40004cc <draw1>
				draw1(dig_one, COLOR08_RED, 36, 0);
 4015e18:	e0bb9e04 	addi	r2,fp,-4488
 4015e1c:	000f883a 	mov	r7,zero
 4015e20:	01800904 	movi	r6,36
 4015e24:	01403804 	movi	r5,224
 4015e28:	1009883a 	mov	r4,r2
 4015e2c:	40004cc0 	call	40004cc <draw1>
			}
			if(min_b == 2)
 4015e30:	e0b7d217 	ldw	r2,-8376(fp)
 4015e34:	10800098 	cmpnei	r2,r2,2
 4015e38:	10000c1e 	bne	r2,zero,4015e6c <main+0x15898>
			{
				draw1(dig_blank, COLOR08_BLACK, 36, 0);
 4015e3c:	e0befe04 	addi	r2,fp,-1032
 4015e40:	000f883a 	mov	r7,zero
 4015e44:	01800904 	movi	r6,36
 4015e48:	000b883a 	mov	r5,zero
 4015e4c:	1009883a 	mov	r4,r2
 4015e50:	40004cc0 	call	40004cc <draw1>
				draw1(dig_two, COLOR08_RED, 36, 0);
 4015e54:	e0bbfe04 	addi	r2,fp,-4104
 4015e58:	000f883a 	mov	r7,zero
 4015e5c:	01800904 	movi	r6,36
 4015e60:	01403804 	movi	r5,224
 4015e64:	1009883a 	mov	r4,r2
 4015e68:	40004cc0 	call	40004cc <draw1>
			}
			if(min_b == 3)
 4015e6c:	e0b7d217 	ldw	r2,-8376(fp)
 4015e70:	108000d8 	cmpnei	r2,r2,3
 4015e74:	10000c1e 	bne	r2,zero,4015ea8 <main+0x158d4>
			{
				draw1(dig_blank, COLOR08_BLACK, 36, 0);
 4015e78:	e0befe04 	addi	r2,fp,-1032
 4015e7c:	000f883a 	mov	r7,zero
 4015e80:	01800904 	movi	r6,36
 4015e84:	000b883a 	mov	r5,zero
 4015e88:	1009883a 	mov	r4,r2
 4015e8c:	40004cc0 	call	40004cc <draw1>
				draw1(dig_three, COLOR08_RED, 36, 0);
 4015e90:	e0bc5e04 	addi	r2,fp,-3720
 4015e94:	000f883a 	mov	r7,zero
 4015e98:	01800904 	movi	r6,36
 4015e9c:	01403804 	movi	r5,224
 4015ea0:	1009883a 	mov	r4,r2
 4015ea4:	40004cc0 	call	40004cc <draw1>
			}
			if(min_b == 4)
 4015ea8:	e0b7d217 	ldw	r2,-8376(fp)
 4015eac:	10800118 	cmpnei	r2,r2,4
 4015eb0:	10000c1e 	bne	r2,zero,4015ee4 <main+0x15910>
			{
				draw1(dig_blank, COLOR08_BLACK, 36, 0);
 4015eb4:	e0befe04 	addi	r2,fp,-1032
 4015eb8:	000f883a 	mov	r7,zero
 4015ebc:	01800904 	movi	r6,36
 4015ec0:	000b883a 	mov	r5,zero
 4015ec4:	1009883a 	mov	r4,r2
 4015ec8:	40004cc0 	call	40004cc <draw1>
				draw1(dig_four, COLOR08_RED, 36, 0);
 4015ecc:	e0bcbe04 	addi	r2,fp,-3336
 4015ed0:	000f883a 	mov	r7,zero
 4015ed4:	01800904 	movi	r6,36
 4015ed8:	01403804 	movi	r5,224
 4015edc:	1009883a 	mov	r4,r2
 4015ee0:	40004cc0 	call	40004cc <draw1>
			}
			if(min_b == 5)
 4015ee4:	e0b7d217 	ldw	r2,-8376(fp)
 4015ee8:	10800158 	cmpnei	r2,r2,5
 4015eec:	10000c1e 	bne	r2,zero,4015f20 <main+0x1594c>
			{
				draw1(dig_blank, COLOR08_BLACK, 36, 0);
 4015ef0:	e0befe04 	addi	r2,fp,-1032
 4015ef4:	000f883a 	mov	r7,zero
 4015ef8:	01800904 	movi	r6,36
 4015efc:	000b883a 	mov	r5,zero
 4015f00:	1009883a 	mov	r4,r2
 4015f04:	40004cc0 	call	40004cc <draw1>
				draw1(dig_five, COLOR08_RED, 36, 0);
 4015f08:	e0bd1e04 	addi	r2,fp,-2952
 4015f0c:	000f883a 	mov	r7,zero
 4015f10:	01800904 	movi	r6,36
 4015f14:	01403804 	movi	r5,224
 4015f18:	1009883a 	mov	r4,r2
 4015f1c:	40004cc0 	call	40004cc <draw1>
			}
			if(min_b == 6)
 4015f20:	e0b7d217 	ldw	r2,-8376(fp)
 4015f24:	10800198 	cmpnei	r2,r2,6
 4015f28:	10000c1e 	bne	r2,zero,4015f5c <main+0x15988>
			{
				draw1(dig_blank, COLOR08_BLACK, 36, 0);
 4015f2c:	e0befe04 	addi	r2,fp,-1032
 4015f30:	000f883a 	mov	r7,zero
 4015f34:	01800904 	movi	r6,36
 4015f38:	000b883a 	mov	r5,zero
 4015f3c:	1009883a 	mov	r4,r2
 4015f40:	40004cc0 	call	40004cc <draw1>
				draw1(dig_six, COLOR08_RED, 36, 0);
 4015f44:	e0bd7e04 	addi	r2,fp,-2568
 4015f48:	000f883a 	mov	r7,zero
 4015f4c:	01800904 	movi	r6,36
 4015f50:	01403804 	movi	r5,224
 4015f54:	1009883a 	mov	r4,r2
 4015f58:	40004cc0 	call	40004cc <draw1>
			}
			if(min_b == 7)
 4015f5c:	e0b7d217 	ldw	r2,-8376(fp)
 4015f60:	108001d8 	cmpnei	r2,r2,7
 4015f64:	10000c1e 	bne	r2,zero,4015f98 <main+0x159c4>
			{
				draw1(dig_blank, COLOR08_BLACK, 36, 0);
 4015f68:	e0befe04 	addi	r2,fp,-1032
 4015f6c:	000f883a 	mov	r7,zero
 4015f70:	01800904 	movi	r6,36
 4015f74:	000b883a 	mov	r5,zero
 4015f78:	1009883a 	mov	r4,r2
 4015f7c:	40004cc0 	call	40004cc <draw1>
				draw1(dig_seven, COLOR08_RED, 36, 0);
 4015f80:	e0bdde04 	addi	r2,fp,-2184
 4015f84:	000f883a 	mov	r7,zero
 4015f88:	01800904 	movi	r6,36
 4015f8c:	01403804 	movi	r5,224
 4015f90:	1009883a 	mov	r4,r2
 4015f94:	40004cc0 	call	40004cc <draw1>
			}
			if(min_b == 8)
 4015f98:	e0b7d217 	ldw	r2,-8376(fp)
 4015f9c:	10800218 	cmpnei	r2,r2,8
 4015fa0:	10000c1e 	bne	r2,zero,4015fd4 <main+0x15a00>
			{
				draw1(dig_blank, COLOR08_BLACK, 36, 0);
 4015fa4:	e0befe04 	addi	r2,fp,-1032
 4015fa8:	000f883a 	mov	r7,zero
 4015fac:	01800904 	movi	r6,36
 4015fb0:	000b883a 	mov	r5,zero
 4015fb4:	1009883a 	mov	r4,r2
 4015fb8:	40004cc0 	call	40004cc <draw1>
				draw1(dig_eight, COLOR08_RED, 36, 0);
 4015fbc:	e0be3e04 	addi	r2,fp,-1800
 4015fc0:	000f883a 	mov	r7,zero
 4015fc4:	01800904 	movi	r6,36
 4015fc8:	01403804 	movi	r5,224
 4015fcc:	1009883a 	mov	r4,r2
 4015fd0:	40004cc0 	call	40004cc <draw1>
			}
			if(min_b == 9)
 4015fd4:	e0b7d217 	ldw	r2,-8376(fp)
 4015fd8:	10800258 	cmpnei	r2,r2,9
 4015fdc:	10000c1e 	bne	r2,zero,4016010 <main+0x15a3c>
			{
				draw1(dig_blank, COLOR08_BLACK, 36, 0);
 4015fe0:	e0befe04 	addi	r2,fp,-1032
 4015fe4:	000f883a 	mov	r7,zero
 4015fe8:	01800904 	movi	r6,36
 4015fec:	000b883a 	mov	r5,zero
 4015ff0:	1009883a 	mov	r4,r2
 4015ff4:	40004cc0 	call	40004cc <draw1>
				draw1(dig_nine, COLOR08_RED, 36, 0);
 4015ff8:	e0be9e04 	addi	r2,fp,-1416
 4015ffc:	000f883a 	mov	r7,zero
 4016000:	01800904 	movi	r6,36
 4016004:	01403804 	movi	r5,224
 4016008:	1009883a 	mov	r4,r2
 401600c:	40004cc0 	call	40004cc <draw1>
			}




			if(min_a == 0)
 4016010:	e0b7d117 	ldw	r2,-8380(fp)
 4016014:	10000c1e 	bne	r2,zero,4016048 <main+0x15a74>
			{
				draw1(dig_blank, COLOR08_BLACK, 35, 0);
 4016018:	e0befe04 	addi	r2,fp,-1032
 401601c:	000f883a 	mov	r7,zero
 4016020:	018008c4 	movi	r6,35
 4016024:	000b883a 	mov	r5,zero
 4016028:	1009883a 	mov	r4,r2
 401602c:	40004cc0 	call	40004cc <draw1>
				draw1(dig_zero, COLOR08_RED, 35, 0);
 4016030:	e0bb3e04 	addi	r2,fp,-4872
 4016034:	000f883a 	mov	r7,zero
 4016038:	018008c4 	movi	r6,35
 401603c:	01403804 	movi	r5,224
 4016040:	1009883a 	mov	r4,r2
 4016044:	40004cc0 	call	40004cc <draw1>
			}
			if(min_a == 1)
 4016048:	e0b7d117 	ldw	r2,-8380(fp)
 401604c:	10800058 	cmpnei	r2,r2,1
 4016050:	10000c1e 	bne	r2,zero,4016084 <main+0x15ab0>
			{
				draw1(dig_blank, COLOR08_BLACK, 35, 0);
 4016054:	e0befe04 	addi	r2,fp,-1032
 4016058:	000f883a 	mov	r7,zero
 401605c:	018008c4 	movi	r6,35
 4016060:	000b883a 	mov	r5,zero
 4016064:	1009883a 	mov	r4,r2
 4016068:	40004cc0 	call	40004cc <draw1>
				draw1(dig_one, COLOR08_RED, 35, 0);
 401606c:	e0bb9e04 	addi	r2,fp,-4488
 4016070:	000f883a 	mov	r7,zero
 4016074:	018008c4 	movi	r6,35
 4016078:	01403804 	movi	r5,224
 401607c:	1009883a 	mov	r4,r2
 4016080:	40004cc0 	call	40004cc <draw1>
			}
			if(min_a == 2)
 4016084:	e0b7d117 	ldw	r2,-8380(fp)
 4016088:	10800098 	cmpnei	r2,r2,2
 401608c:	10000c1e 	bne	r2,zero,40160c0 <main+0x15aec>
			{
				draw1(dig_blank, COLOR08_BLACK, 35, 0);
 4016090:	e0befe04 	addi	r2,fp,-1032
 4016094:	000f883a 	mov	r7,zero
 4016098:	018008c4 	movi	r6,35
 401609c:	000b883a 	mov	r5,zero
 40160a0:	1009883a 	mov	r4,r2
 40160a4:	40004cc0 	call	40004cc <draw1>
				draw1(dig_two, COLOR08_RED, 35, 0);
 40160a8:	e0bbfe04 	addi	r2,fp,-4104
 40160ac:	000f883a 	mov	r7,zero
 40160b0:	018008c4 	movi	r6,35
 40160b4:	01403804 	movi	r5,224
 40160b8:	1009883a 	mov	r4,r2
 40160bc:	40004cc0 	call	40004cc <draw1>
			}
			if(min_a == 3)
 40160c0:	e0b7d117 	ldw	r2,-8380(fp)
 40160c4:	108000d8 	cmpnei	r2,r2,3
 40160c8:	10000c1e 	bne	r2,zero,40160fc <main+0x15b28>
			{
				draw1(dig_blank, COLOR08_BLACK, 35, 0);
 40160cc:	e0befe04 	addi	r2,fp,-1032
 40160d0:	000f883a 	mov	r7,zero
 40160d4:	018008c4 	movi	r6,35
 40160d8:	000b883a 	mov	r5,zero
 40160dc:	1009883a 	mov	r4,r2
 40160e0:	40004cc0 	call	40004cc <draw1>
				draw1(dig_three, COLOR08_RED, 35, 0);
 40160e4:	e0bc5e04 	addi	r2,fp,-3720
 40160e8:	000f883a 	mov	r7,zero
 40160ec:	018008c4 	movi	r6,35
 40160f0:	01403804 	movi	r5,224
 40160f4:	1009883a 	mov	r4,r2
 40160f8:	40004cc0 	call	40004cc <draw1>
			}
			if(min_a == 4)
 40160fc:	e0b7d117 	ldw	r2,-8380(fp)
 4016100:	10800118 	cmpnei	r2,r2,4
 4016104:	10000c1e 	bne	r2,zero,4016138 <main+0x15b64>
			{
				draw1(dig_blank, COLOR08_BLACK, 35, 0);
 4016108:	e0befe04 	addi	r2,fp,-1032
 401610c:	000f883a 	mov	r7,zero
 4016110:	018008c4 	movi	r6,35
 4016114:	000b883a 	mov	r5,zero
 4016118:	1009883a 	mov	r4,r2
 401611c:	40004cc0 	call	40004cc <draw1>
				draw1(dig_four, COLOR08_RED, 35, 0);
 4016120:	e0bcbe04 	addi	r2,fp,-3336
 4016124:	000f883a 	mov	r7,zero
 4016128:	018008c4 	movi	r6,35
 401612c:	01403804 	movi	r5,224
 4016130:	1009883a 	mov	r4,r2
 4016134:	40004cc0 	call	40004cc <draw1>
			}
			if(min_a == 5)
 4016138:	e0b7d117 	ldw	r2,-8380(fp)
 401613c:	10800158 	cmpnei	r2,r2,5
 4016140:	10000c1e 	bne	r2,zero,4016174 <main+0x15ba0>
			{
				draw1(dig_blank, COLOR08_BLACK, 35, 0);
 4016144:	e0befe04 	addi	r2,fp,-1032
 4016148:	000f883a 	mov	r7,zero
 401614c:	018008c4 	movi	r6,35
 4016150:	000b883a 	mov	r5,zero
 4016154:	1009883a 	mov	r4,r2
 4016158:	40004cc0 	call	40004cc <draw1>
				draw1(dig_five, COLOR08_RED, 35, 0);
 401615c:	e0bd1e04 	addi	r2,fp,-2952
 4016160:	000f883a 	mov	r7,zero
 4016164:	018008c4 	movi	r6,35
 4016168:	01403804 	movi	r5,224
 401616c:	1009883a 	mov	r4,r2
 4016170:	40004cc0 	call	40004cc <draw1>
			}
			if(min_a == 6)
 4016174:	e0b7d117 	ldw	r2,-8380(fp)
 4016178:	10800198 	cmpnei	r2,r2,6
 401617c:	10000c1e 	bne	r2,zero,40161b0 <main+0x15bdc>
			{
				draw1(dig_blank, COLOR08_BLACK, 35, 0);
 4016180:	e0befe04 	addi	r2,fp,-1032
 4016184:	000f883a 	mov	r7,zero
 4016188:	018008c4 	movi	r6,35
 401618c:	000b883a 	mov	r5,zero
 4016190:	1009883a 	mov	r4,r2
 4016194:	40004cc0 	call	40004cc <draw1>
				draw1(dig_six, COLOR08_RED, 35, 0);
 4016198:	e0bd7e04 	addi	r2,fp,-2568
 401619c:	000f883a 	mov	r7,zero
 40161a0:	018008c4 	movi	r6,35
 40161a4:	01403804 	movi	r5,224
 40161a8:	1009883a 	mov	r4,r2
 40161ac:	40004cc0 	call	40004cc <draw1>
			}
			if(min_a == 7)
 40161b0:	e0b7d117 	ldw	r2,-8380(fp)
 40161b4:	108001d8 	cmpnei	r2,r2,7
 40161b8:	10000c1e 	bne	r2,zero,40161ec <main+0x15c18>
			{
				draw1(dig_blank, COLOR08_BLACK, 35, 0);
 40161bc:	e0befe04 	addi	r2,fp,-1032
 40161c0:	000f883a 	mov	r7,zero
 40161c4:	018008c4 	movi	r6,35
 40161c8:	000b883a 	mov	r5,zero
 40161cc:	1009883a 	mov	r4,r2
 40161d0:	40004cc0 	call	40004cc <draw1>
				draw1(dig_seven, COLOR08_RED, 35, 0);
 40161d4:	e0bdde04 	addi	r2,fp,-2184
 40161d8:	000f883a 	mov	r7,zero
 40161dc:	018008c4 	movi	r6,35
 40161e0:	01403804 	movi	r5,224
 40161e4:	1009883a 	mov	r4,r2
 40161e8:	40004cc0 	call	40004cc <draw1>
			}
			if(min_a == 8)
 40161ec:	e0b7d117 	ldw	r2,-8380(fp)
 40161f0:	10800218 	cmpnei	r2,r2,8
 40161f4:	10000c1e 	bne	r2,zero,4016228 <main+0x15c54>
			{
				draw1(dig_blank, COLOR08_BLACK, 35, 0);
 40161f8:	e0befe04 	addi	r2,fp,-1032
 40161fc:	000f883a 	mov	r7,zero
 4016200:	018008c4 	movi	r6,35
 4016204:	000b883a 	mov	r5,zero
 4016208:	1009883a 	mov	r4,r2
 401620c:	40004cc0 	call	40004cc <draw1>
				draw1(dig_eight, COLOR08_RED, 35, 0);
 4016210:	e0be3e04 	addi	r2,fp,-1800
 4016214:	000f883a 	mov	r7,zero
 4016218:	018008c4 	movi	r6,35
 401621c:	01403804 	movi	r5,224
 4016220:	1009883a 	mov	r4,r2
 4016224:	40004cc0 	call	40004cc <draw1>
			}
			if(min_a == 9)
 4016228:	e0b7d117 	ldw	r2,-8380(fp)
 401622c:	10800258 	cmpnei	r2,r2,9
 4016230:	10000c1e 	bne	r2,zero,4016264 <main+0x15c90>
			{
				draw1(dig_blank, COLOR08_BLACK, 35, 0);
 4016234:	e0befe04 	addi	r2,fp,-1032
 4016238:	000f883a 	mov	r7,zero
 401623c:	018008c4 	movi	r6,35
 4016240:	000b883a 	mov	r5,zero
 4016244:	1009883a 	mov	r4,r2
 4016248:	40004cc0 	call	40004cc <draw1>
				draw1(dig_nine, COLOR08_RED, 35, 0);
 401624c:	e0be9e04 	addi	r2,fp,-1416
 4016250:	000f883a 	mov	r7,zero
 4016254:	018008c4 	movi	r6,35
 4016258:	01403804 	movi	r5,224
 401625c:	1009883a 	mov	r4,r2
 4016260:	40004cc0 	call	40004cc <draw1>
			}

			if(hour_b == 0)
 4016264:	e0b7d417 	ldw	r2,-8368(fp)
 4016268:	10000c1e 	bne	r2,zero,401629c <main+0x15cc8>
			{
				draw1(dig_blank, COLOR08_BLACK, 33, 0);
 401626c:	e0befe04 	addi	r2,fp,-1032
 4016270:	000f883a 	mov	r7,zero
 4016274:	01800844 	movi	r6,33
 4016278:	000b883a 	mov	r5,zero
 401627c:	1009883a 	mov	r4,r2
 4016280:	40004cc0 	call	40004cc <draw1>
				draw1(dig_zero, COLOR08_RED, 33, 0);
 4016284:	e0bb3e04 	addi	r2,fp,-4872
 4016288:	000f883a 	mov	r7,zero
 401628c:	01800844 	movi	r6,33
 4016290:	01403804 	movi	r5,224
 4016294:	1009883a 	mov	r4,r2
 4016298:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_b == 1)
 401629c:	e0b7d417 	ldw	r2,-8368(fp)
 40162a0:	10800058 	cmpnei	r2,r2,1
 40162a4:	10000c1e 	bne	r2,zero,40162d8 <main+0x15d04>
			{
				draw1(dig_blank, COLOR08_BLACK, 33, 0);
 40162a8:	e0befe04 	addi	r2,fp,-1032
 40162ac:	000f883a 	mov	r7,zero
 40162b0:	01800844 	movi	r6,33
 40162b4:	000b883a 	mov	r5,zero
 40162b8:	1009883a 	mov	r4,r2
 40162bc:	40004cc0 	call	40004cc <draw1>
				draw1(dig_one, COLOR08_RED, 33, 0);
 40162c0:	e0bb9e04 	addi	r2,fp,-4488
 40162c4:	000f883a 	mov	r7,zero
 40162c8:	01800844 	movi	r6,33
 40162cc:	01403804 	movi	r5,224
 40162d0:	1009883a 	mov	r4,r2
 40162d4:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_b == 2)
 40162d8:	e0b7d417 	ldw	r2,-8368(fp)
 40162dc:	10800098 	cmpnei	r2,r2,2
 40162e0:	10000c1e 	bne	r2,zero,4016314 <main+0x15d40>
			{
				draw1(dig_blank, COLOR08_BLACK, 33, 0);
 40162e4:	e0befe04 	addi	r2,fp,-1032
 40162e8:	000f883a 	mov	r7,zero
 40162ec:	01800844 	movi	r6,33
 40162f0:	000b883a 	mov	r5,zero
 40162f4:	1009883a 	mov	r4,r2
 40162f8:	40004cc0 	call	40004cc <draw1>
				draw1(dig_two, COLOR08_RED, 33, 0);
 40162fc:	e0bbfe04 	addi	r2,fp,-4104
 4016300:	000f883a 	mov	r7,zero
 4016304:	01800844 	movi	r6,33
 4016308:	01403804 	movi	r5,224
 401630c:	1009883a 	mov	r4,r2
 4016310:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_b == 3)
 4016314:	e0b7d417 	ldw	r2,-8368(fp)
 4016318:	108000d8 	cmpnei	r2,r2,3
 401631c:	10000c1e 	bne	r2,zero,4016350 <main+0x15d7c>
			{
				draw1(dig_blank, COLOR08_BLACK, 33, 0);
 4016320:	e0befe04 	addi	r2,fp,-1032
 4016324:	000f883a 	mov	r7,zero
 4016328:	01800844 	movi	r6,33
 401632c:	000b883a 	mov	r5,zero
 4016330:	1009883a 	mov	r4,r2
 4016334:	40004cc0 	call	40004cc <draw1>
				draw1(dig_three, COLOR08_RED, 33, 0);
 4016338:	e0bc5e04 	addi	r2,fp,-3720
 401633c:	000f883a 	mov	r7,zero
 4016340:	01800844 	movi	r6,33
 4016344:	01403804 	movi	r5,224
 4016348:	1009883a 	mov	r4,r2
 401634c:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_b == 4)
 4016350:	e0b7d417 	ldw	r2,-8368(fp)
 4016354:	10800118 	cmpnei	r2,r2,4
 4016358:	10000c1e 	bne	r2,zero,401638c <main+0x15db8>
			{
				draw1(dig_blank, COLOR08_BLACK, 33, 0);
 401635c:	e0befe04 	addi	r2,fp,-1032
 4016360:	000f883a 	mov	r7,zero
 4016364:	01800844 	movi	r6,33
 4016368:	000b883a 	mov	r5,zero
 401636c:	1009883a 	mov	r4,r2
 4016370:	40004cc0 	call	40004cc <draw1>
				draw1(dig_four, COLOR08_RED, 33, 0);
 4016374:	e0bcbe04 	addi	r2,fp,-3336
 4016378:	000f883a 	mov	r7,zero
 401637c:	01800844 	movi	r6,33
 4016380:	01403804 	movi	r5,224
 4016384:	1009883a 	mov	r4,r2
 4016388:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_b == 5)
 401638c:	e0b7d417 	ldw	r2,-8368(fp)
 4016390:	10800158 	cmpnei	r2,r2,5
 4016394:	10000c1e 	bne	r2,zero,40163c8 <main+0x15df4>
			{
				draw1(dig_blank, COLOR08_BLACK, 33, 0);
 4016398:	e0befe04 	addi	r2,fp,-1032
 401639c:	000f883a 	mov	r7,zero
 40163a0:	01800844 	movi	r6,33
 40163a4:	000b883a 	mov	r5,zero
 40163a8:	1009883a 	mov	r4,r2
 40163ac:	40004cc0 	call	40004cc <draw1>
				draw1(dig_five, COLOR08_RED, 33, 0);
 40163b0:	e0bd1e04 	addi	r2,fp,-2952
 40163b4:	000f883a 	mov	r7,zero
 40163b8:	01800844 	movi	r6,33
 40163bc:	01403804 	movi	r5,224
 40163c0:	1009883a 	mov	r4,r2
 40163c4:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_b == 6)
 40163c8:	e0b7d417 	ldw	r2,-8368(fp)
 40163cc:	10800198 	cmpnei	r2,r2,6
 40163d0:	10000c1e 	bne	r2,zero,4016404 <main+0x15e30>
			{
				draw1(dig_blank, COLOR08_BLACK, 33, 0);
 40163d4:	e0befe04 	addi	r2,fp,-1032
 40163d8:	000f883a 	mov	r7,zero
 40163dc:	01800844 	movi	r6,33
 40163e0:	000b883a 	mov	r5,zero
 40163e4:	1009883a 	mov	r4,r2
 40163e8:	40004cc0 	call	40004cc <draw1>
				draw1(dig_six, COLOR08_RED, 33, 0);
 40163ec:	e0bd7e04 	addi	r2,fp,-2568
 40163f0:	000f883a 	mov	r7,zero
 40163f4:	01800844 	movi	r6,33
 40163f8:	01403804 	movi	r5,224
 40163fc:	1009883a 	mov	r4,r2
 4016400:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_b == 7)
 4016404:	e0b7d417 	ldw	r2,-8368(fp)
 4016408:	108001d8 	cmpnei	r2,r2,7
 401640c:	10000c1e 	bne	r2,zero,4016440 <main+0x15e6c>
			{
				draw1(dig_blank, COLOR08_BLACK, 33, 0);
 4016410:	e0befe04 	addi	r2,fp,-1032
 4016414:	000f883a 	mov	r7,zero
 4016418:	01800844 	movi	r6,33
 401641c:	000b883a 	mov	r5,zero
 4016420:	1009883a 	mov	r4,r2
 4016424:	40004cc0 	call	40004cc <draw1>
				draw1(dig_seven, COLOR08_RED, 33, 0);
 4016428:	e0bdde04 	addi	r2,fp,-2184
 401642c:	000f883a 	mov	r7,zero
 4016430:	01800844 	movi	r6,33
 4016434:	01403804 	movi	r5,224
 4016438:	1009883a 	mov	r4,r2
 401643c:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_b == 8)
 4016440:	e0b7d417 	ldw	r2,-8368(fp)
 4016444:	10800218 	cmpnei	r2,r2,8
 4016448:	10000c1e 	bne	r2,zero,401647c <main+0x15ea8>
			{
				draw1(dig_blank, COLOR08_BLACK, 33, 0);
 401644c:	e0befe04 	addi	r2,fp,-1032
 4016450:	000f883a 	mov	r7,zero
 4016454:	01800844 	movi	r6,33
 4016458:	000b883a 	mov	r5,zero
 401645c:	1009883a 	mov	r4,r2
 4016460:	40004cc0 	call	40004cc <draw1>
				draw1(dig_eight, COLOR08_RED, 33, 0);
 4016464:	e0be3e04 	addi	r2,fp,-1800
 4016468:	000f883a 	mov	r7,zero
 401646c:	01800844 	movi	r6,33
 4016470:	01403804 	movi	r5,224
 4016474:	1009883a 	mov	r4,r2
 4016478:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_b == 9)
 401647c:	e0b7d417 	ldw	r2,-8368(fp)
 4016480:	10800258 	cmpnei	r2,r2,9
 4016484:	10000c1e 	bne	r2,zero,40164b8 <main+0x15ee4>
			{
				draw1(dig_blank, COLOR08_BLACK, 33, 0);
 4016488:	e0befe04 	addi	r2,fp,-1032
 401648c:	000f883a 	mov	r7,zero
 4016490:	01800844 	movi	r6,33
 4016494:	000b883a 	mov	r5,zero
 4016498:	1009883a 	mov	r4,r2
 401649c:	40004cc0 	call	40004cc <draw1>
				draw1(dig_nine, COLOR08_RED, 33, 0);
 40164a0:	e0be9e04 	addi	r2,fp,-1416
 40164a4:	000f883a 	mov	r7,zero
 40164a8:	01800844 	movi	r6,33
 40164ac:	01403804 	movi	r5,224
 40164b0:	1009883a 	mov	r4,r2
 40164b4:	40004cc0 	call	40004cc <draw1>
			}




			if(hour_a == 0)
 40164b8:	e0b7d317 	ldw	r2,-8372(fp)
 40164bc:	10000c1e 	bne	r2,zero,40164f0 <main+0x15f1c>
			{
				draw1(dig_blank, COLOR08_BLACK, 32, 0);
 40164c0:	e0befe04 	addi	r2,fp,-1032
 40164c4:	000f883a 	mov	r7,zero
 40164c8:	01800804 	movi	r6,32
 40164cc:	000b883a 	mov	r5,zero
 40164d0:	1009883a 	mov	r4,r2
 40164d4:	40004cc0 	call	40004cc <draw1>
				draw1(dig_zero, COLOR08_RED, 32, 0);
 40164d8:	e0bb3e04 	addi	r2,fp,-4872
 40164dc:	000f883a 	mov	r7,zero
 40164e0:	01800804 	movi	r6,32
 40164e4:	01403804 	movi	r5,224
 40164e8:	1009883a 	mov	r4,r2
 40164ec:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_a == 1)
 40164f0:	e0b7d317 	ldw	r2,-8372(fp)
 40164f4:	10800058 	cmpnei	r2,r2,1
 40164f8:	10000c1e 	bne	r2,zero,401652c <main+0x15f58>
			{
				draw1(dig_blank, COLOR08_BLACK, 32, 0);
 40164fc:	e0befe04 	addi	r2,fp,-1032
 4016500:	000f883a 	mov	r7,zero
 4016504:	01800804 	movi	r6,32
 4016508:	000b883a 	mov	r5,zero
 401650c:	1009883a 	mov	r4,r2
 4016510:	40004cc0 	call	40004cc <draw1>
				draw1(dig_one, COLOR08_RED, 32, 0);
 4016514:	e0bb9e04 	addi	r2,fp,-4488
 4016518:	000f883a 	mov	r7,zero
 401651c:	01800804 	movi	r6,32
 4016520:	01403804 	movi	r5,224
 4016524:	1009883a 	mov	r4,r2
 4016528:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_a == 2)
 401652c:	e0b7d317 	ldw	r2,-8372(fp)
 4016530:	10800098 	cmpnei	r2,r2,2
 4016534:	10000c1e 	bne	r2,zero,4016568 <main+0x15f94>
			{
				draw1(dig_blank, COLOR08_BLACK, 32, 0);
 4016538:	e0befe04 	addi	r2,fp,-1032
 401653c:	000f883a 	mov	r7,zero
 4016540:	01800804 	movi	r6,32
 4016544:	000b883a 	mov	r5,zero
 4016548:	1009883a 	mov	r4,r2
 401654c:	40004cc0 	call	40004cc <draw1>
				draw1(dig_two, COLOR08_RED, 32, 0);
 4016550:	e0bbfe04 	addi	r2,fp,-4104
 4016554:	000f883a 	mov	r7,zero
 4016558:	01800804 	movi	r6,32
 401655c:	01403804 	movi	r5,224
 4016560:	1009883a 	mov	r4,r2
 4016564:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_a == 3)
 4016568:	e0b7d317 	ldw	r2,-8372(fp)
 401656c:	108000d8 	cmpnei	r2,r2,3
 4016570:	10000c1e 	bne	r2,zero,40165a4 <main+0x15fd0>
			{
				draw1(dig_blank, COLOR08_BLACK, 32, 0);
 4016574:	e0befe04 	addi	r2,fp,-1032
 4016578:	000f883a 	mov	r7,zero
 401657c:	01800804 	movi	r6,32
 4016580:	000b883a 	mov	r5,zero
 4016584:	1009883a 	mov	r4,r2
 4016588:	40004cc0 	call	40004cc <draw1>
				draw1(dig_three, COLOR08_RED, 32, 0);
 401658c:	e0bc5e04 	addi	r2,fp,-3720
 4016590:	000f883a 	mov	r7,zero
 4016594:	01800804 	movi	r6,32
 4016598:	01403804 	movi	r5,224
 401659c:	1009883a 	mov	r4,r2
 40165a0:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_a == 4)
 40165a4:	e0b7d317 	ldw	r2,-8372(fp)
 40165a8:	10800118 	cmpnei	r2,r2,4
 40165ac:	10000c1e 	bne	r2,zero,40165e0 <main+0x1600c>
			{
				draw1(dig_blank, COLOR08_BLACK, 32, 0);
 40165b0:	e0befe04 	addi	r2,fp,-1032
 40165b4:	000f883a 	mov	r7,zero
 40165b8:	01800804 	movi	r6,32
 40165bc:	000b883a 	mov	r5,zero
 40165c0:	1009883a 	mov	r4,r2
 40165c4:	40004cc0 	call	40004cc <draw1>
				draw1(dig_four, COLOR08_RED, 32, 0);
 40165c8:	e0bcbe04 	addi	r2,fp,-3336
 40165cc:	000f883a 	mov	r7,zero
 40165d0:	01800804 	movi	r6,32
 40165d4:	01403804 	movi	r5,224
 40165d8:	1009883a 	mov	r4,r2
 40165dc:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_a == 5)
 40165e0:	e0b7d317 	ldw	r2,-8372(fp)
 40165e4:	10800158 	cmpnei	r2,r2,5
 40165e8:	10000c1e 	bne	r2,zero,401661c <main+0x16048>
			{
				draw1(dig_blank, COLOR08_BLACK, 32, 0);
 40165ec:	e0befe04 	addi	r2,fp,-1032
 40165f0:	000f883a 	mov	r7,zero
 40165f4:	01800804 	movi	r6,32
 40165f8:	000b883a 	mov	r5,zero
 40165fc:	1009883a 	mov	r4,r2
 4016600:	40004cc0 	call	40004cc <draw1>
				draw1(dig_five, COLOR08_RED, 32, 0);
 4016604:	e0bd1e04 	addi	r2,fp,-2952
 4016608:	000f883a 	mov	r7,zero
 401660c:	01800804 	movi	r6,32
 4016610:	01403804 	movi	r5,224
 4016614:	1009883a 	mov	r4,r2
 4016618:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_a == 6)
 401661c:	e0b7d317 	ldw	r2,-8372(fp)
 4016620:	10800198 	cmpnei	r2,r2,6
 4016624:	10000c1e 	bne	r2,zero,4016658 <main+0x16084>
			{
				draw1(dig_blank, COLOR08_BLACK, 32, 0);
 4016628:	e0befe04 	addi	r2,fp,-1032
 401662c:	000f883a 	mov	r7,zero
 4016630:	01800804 	movi	r6,32
 4016634:	000b883a 	mov	r5,zero
 4016638:	1009883a 	mov	r4,r2
 401663c:	40004cc0 	call	40004cc <draw1>
				draw1(dig_six, COLOR08_RED, 32, 0);
 4016640:	e0bd7e04 	addi	r2,fp,-2568
 4016644:	000f883a 	mov	r7,zero
 4016648:	01800804 	movi	r6,32
 401664c:	01403804 	movi	r5,224
 4016650:	1009883a 	mov	r4,r2
 4016654:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_a == 7)
 4016658:	e0b7d317 	ldw	r2,-8372(fp)
 401665c:	108001d8 	cmpnei	r2,r2,7
 4016660:	10000c1e 	bne	r2,zero,4016694 <main+0x160c0>
			{
				draw1(dig_blank, COLOR08_BLACK, 32, 0);
 4016664:	e0befe04 	addi	r2,fp,-1032
 4016668:	000f883a 	mov	r7,zero
 401666c:	01800804 	movi	r6,32
 4016670:	000b883a 	mov	r5,zero
 4016674:	1009883a 	mov	r4,r2
 4016678:	40004cc0 	call	40004cc <draw1>
				draw1(dig_seven, COLOR08_RED, 32, 0);
 401667c:	e0bdde04 	addi	r2,fp,-2184
 4016680:	000f883a 	mov	r7,zero
 4016684:	01800804 	movi	r6,32
 4016688:	01403804 	movi	r5,224
 401668c:	1009883a 	mov	r4,r2
 4016690:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_a == 8)
 4016694:	e0b7d317 	ldw	r2,-8372(fp)
 4016698:	10800218 	cmpnei	r2,r2,8
 401669c:	10000c1e 	bne	r2,zero,40166d0 <main+0x160fc>
			{
				draw1(dig_blank, COLOR08_BLACK, 32, 0);
 40166a0:	e0befe04 	addi	r2,fp,-1032
 40166a4:	000f883a 	mov	r7,zero
 40166a8:	01800804 	movi	r6,32
 40166ac:	000b883a 	mov	r5,zero
 40166b0:	1009883a 	mov	r4,r2
 40166b4:	40004cc0 	call	40004cc <draw1>
				draw1(dig_eight, COLOR08_RED, 32, 0);
 40166b8:	e0be3e04 	addi	r2,fp,-1800
 40166bc:	000f883a 	mov	r7,zero
 40166c0:	01800804 	movi	r6,32
 40166c4:	01403804 	movi	r5,224
 40166c8:	1009883a 	mov	r4,r2
 40166cc:	40004cc0 	call	40004cc <draw1>
			}
			if(hour_a == 9)
 40166d0:	e0b7d317 	ldw	r2,-8372(fp)
 40166d4:	10800258 	cmpnei	r2,r2,9
 40166d8:	10000c1e 	bne	r2,zero,401670c <main+0x16138>
			{
				draw1(dig_blank, COLOR08_BLACK, 32, 0);
 40166dc:	e0befe04 	addi	r2,fp,-1032
 40166e0:	000f883a 	mov	r7,zero
 40166e4:	01800804 	movi	r6,32
 40166e8:	000b883a 	mov	r5,zero
 40166ec:	1009883a 	mov	r4,r2
 40166f0:	40004cc0 	call	40004cc <draw1>
				draw1(dig_nine, COLOR08_RED, 32, 0);
 40166f4:	e0be9e04 	addi	r2,fp,-1416
 40166f8:	000f883a 	mov	r7,zero
 40166fc:	01800804 	movi	r6,32
 4016700:	01403804 	movi	r5,224
 4016704:	1009883a 	mov	r4,r2
 4016708:	40004cc0 	call	40004cc <draw1>
			}

			if(day_b == 0)
 401670c:	e0b7d617 	ldw	r2,-8360(fp)
 4016710:	10000c1e 	bne	r2,zero,4016744 <main+0x16170>
			{
				draw1(dig_blank, COLOR08_BLACK, 30, 0);
 4016714:	e0befe04 	addi	r2,fp,-1032
 4016718:	000f883a 	mov	r7,zero
 401671c:	01800784 	movi	r6,30
 4016720:	000b883a 	mov	r5,zero
 4016724:	1009883a 	mov	r4,r2
 4016728:	40004cc0 	call	40004cc <draw1>
				draw1(dig_zero, COLOR08_RED, 30, 0);
 401672c:	e0bb3e04 	addi	r2,fp,-4872
 4016730:	000f883a 	mov	r7,zero
 4016734:	01800784 	movi	r6,30
 4016738:	01403804 	movi	r5,224
 401673c:	1009883a 	mov	r4,r2
 4016740:	40004cc0 	call	40004cc <draw1>
			}
			if(day_b == 1)
 4016744:	e0b7d617 	ldw	r2,-8360(fp)
 4016748:	10800058 	cmpnei	r2,r2,1
 401674c:	10000c1e 	bne	r2,zero,4016780 <main+0x161ac>
			{
				draw1(dig_blank, COLOR08_BLACK, 30, 0);
 4016750:	e0befe04 	addi	r2,fp,-1032
 4016754:	000f883a 	mov	r7,zero
 4016758:	01800784 	movi	r6,30
 401675c:	000b883a 	mov	r5,zero
 4016760:	1009883a 	mov	r4,r2
 4016764:	40004cc0 	call	40004cc <draw1>
				draw1(dig_one, COLOR08_RED, 30, 0);
 4016768:	e0bb9e04 	addi	r2,fp,-4488
 401676c:	000f883a 	mov	r7,zero
 4016770:	01800784 	movi	r6,30
 4016774:	01403804 	movi	r5,224
 4016778:	1009883a 	mov	r4,r2
 401677c:	40004cc0 	call	40004cc <draw1>
			}
			if(day_b == 2)
 4016780:	e0b7d617 	ldw	r2,-8360(fp)
 4016784:	10800098 	cmpnei	r2,r2,2
 4016788:	10000c1e 	bne	r2,zero,40167bc <main+0x161e8>
			{
				draw1(dig_blank, COLOR08_BLACK, 30, 0);
 401678c:	e0befe04 	addi	r2,fp,-1032
 4016790:	000f883a 	mov	r7,zero
 4016794:	01800784 	movi	r6,30
 4016798:	000b883a 	mov	r5,zero
 401679c:	1009883a 	mov	r4,r2
 40167a0:	40004cc0 	call	40004cc <draw1>
				draw1(dig_two, COLOR08_RED, 30, 0);
 40167a4:	e0bbfe04 	addi	r2,fp,-4104
 40167a8:	000f883a 	mov	r7,zero
 40167ac:	01800784 	movi	r6,30
 40167b0:	01403804 	movi	r5,224
 40167b4:	1009883a 	mov	r4,r2
 40167b8:	40004cc0 	call	40004cc <draw1>
			}
			if(day_b == 3)
 40167bc:	e0b7d617 	ldw	r2,-8360(fp)
 40167c0:	108000d8 	cmpnei	r2,r2,3
 40167c4:	10000c1e 	bne	r2,zero,40167f8 <main+0x16224>
			{
				draw1(dig_blank, COLOR08_BLACK, 30, 0);
 40167c8:	e0befe04 	addi	r2,fp,-1032
 40167cc:	000f883a 	mov	r7,zero
 40167d0:	01800784 	movi	r6,30
 40167d4:	000b883a 	mov	r5,zero
 40167d8:	1009883a 	mov	r4,r2
 40167dc:	40004cc0 	call	40004cc <draw1>
				draw1(dig_three, COLOR08_RED, 30, 0);
 40167e0:	e0bc5e04 	addi	r2,fp,-3720
 40167e4:	000f883a 	mov	r7,zero
 40167e8:	01800784 	movi	r6,30
 40167ec:	01403804 	movi	r5,224
 40167f0:	1009883a 	mov	r4,r2
 40167f4:	40004cc0 	call	40004cc <draw1>
			}
			if(day_b == 4)
 40167f8:	e0b7d617 	ldw	r2,-8360(fp)
 40167fc:	10800118 	cmpnei	r2,r2,4
 4016800:	10000c1e 	bne	r2,zero,4016834 <main+0x16260>
			{
				draw1(dig_blank, COLOR08_BLACK, 30, 0);
 4016804:	e0befe04 	addi	r2,fp,-1032
 4016808:	000f883a 	mov	r7,zero
 401680c:	01800784 	movi	r6,30
 4016810:	000b883a 	mov	r5,zero
 4016814:	1009883a 	mov	r4,r2
 4016818:	40004cc0 	call	40004cc <draw1>
				draw1(dig_four, COLOR08_RED, 30, 0);
 401681c:	e0bcbe04 	addi	r2,fp,-3336
 4016820:	000f883a 	mov	r7,zero
 4016824:	01800784 	movi	r6,30
 4016828:	01403804 	movi	r5,224
 401682c:	1009883a 	mov	r4,r2
 4016830:	40004cc0 	call	40004cc <draw1>
			}
			if(day_b == 5)
 4016834:	e0b7d617 	ldw	r2,-8360(fp)
 4016838:	10800158 	cmpnei	r2,r2,5
 401683c:	10000c1e 	bne	r2,zero,4016870 <main+0x1629c>
			{
				draw1(dig_blank, COLOR08_BLACK, 30, 0);
 4016840:	e0befe04 	addi	r2,fp,-1032
 4016844:	000f883a 	mov	r7,zero
 4016848:	01800784 	movi	r6,30
 401684c:	000b883a 	mov	r5,zero
 4016850:	1009883a 	mov	r4,r2
 4016854:	40004cc0 	call	40004cc <draw1>
				draw1(dig_five, COLOR08_RED, 30, 0);
 4016858:	e0bd1e04 	addi	r2,fp,-2952
 401685c:	000f883a 	mov	r7,zero
 4016860:	01800784 	movi	r6,30
 4016864:	01403804 	movi	r5,224
 4016868:	1009883a 	mov	r4,r2
 401686c:	40004cc0 	call	40004cc <draw1>
			}
			if(day_b == 6)
 4016870:	e0b7d617 	ldw	r2,-8360(fp)
 4016874:	10800198 	cmpnei	r2,r2,6
 4016878:	10000c1e 	bne	r2,zero,40168ac <main+0x162d8>
			{
				draw1(dig_blank, COLOR08_BLACK, 30, 0);
 401687c:	e0befe04 	addi	r2,fp,-1032
 4016880:	000f883a 	mov	r7,zero
 4016884:	01800784 	movi	r6,30
 4016888:	000b883a 	mov	r5,zero
 401688c:	1009883a 	mov	r4,r2
 4016890:	40004cc0 	call	40004cc <draw1>
				draw1(dig_six, COLOR08_RED, 30, 0);
 4016894:	e0bd7e04 	addi	r2,fp,-2568
 4016898:	000f883a 	mov	r7,zero
 401689c:	01800784 	movi	r6,30
 40168a0:	01403804 	movi	r5,224
 40168a4:	1009883a 	mov	r4,r2
 40168a8:	40004cc0 	call	40004cc <draw1>
			}
			if(day_b == 7)
 40168ac:	e0b7d617 	ldw	r2,-8360(fp)
 40168b0:	108001d8 	cmpnei	r2,r2,7
 40168b4:	10000c1e 	bne	r2,zero,40168e8 <main+0x16314>
			{
				draw1(dig_blank, COLOR08_BLACK, 30, 0);
 40168b8:	e0befe04 	addi	r2,fp,-1032
 40168bc:	000f883a 	mov	r7,zero
 40168c0:	01800784 	movi	r6,30
 40168c4:	000b883a 	mov	r5,zero
 40168c8:	1009883a 	mov	r4,r2
 40168cc:	40004cc0 	call	40004cc <draw1>
				draw1(dig_seven, COLOR08_RED, 30, 0);
 40168d0:	e0bdde04 	addi	r2,fp,-2184
 40168d4:	000f883a 	mov	r7,zero
 40168d8:	01800784 	movi	r6,30
 40168dc:	01403804 	movi	r5,224
 40168e0:	1009883a 	mov	r4,r2
 40168e4:	40004cc0 	call	40004cc <draw1>
			}
			if(day_b == 8)
 40168e8:	e0b7d617 	ldw	r2,-8360(fp)
 40168ec:	10800218 	cmpnei	r2,r2,8
 40168f0:	10000c1e 	bne	r2,zero,4016924 <main+0x16350>
			{
				draw1(dig_blank, COLOR08_BLACK, 30, 0);
 40168f4:	e0befe04 	addi	r2,fp,-1032
 40168f8:	000f883a 	mov	r7,zero
 40168fc:	01800784 	movi	r6,30
 4016900:	000b883a 	mov	r5,zero
 4016904:	1009883a 	mov	r4,r2
 4016908:	40004cc0 	call	40004cc <draw1>
				draw1(dig_eight, COLOR08_RED, 30, 0);
 401690c:	e0be3e04 	addi	r2,fp,-1800
 4016910:	000f883a 	mov	r7,zero
 4016914:	01800784 	movi	r6,30
 4016918:	01403804 	movi	r5,224
 401691c:	1009883a 	mov	r4,r2
 4016920:	40004cc0 	call	40004cc <draw1>
			}
			if(day_b == 9)
 4016924:	e0b7d617 	ldw	r2,-8360(fp)
 4016928:	10800258 	cmpnei	r2,r2,9
 401692c:	10000c1e 	bne	r2,zero,4016960 <main+0x1638c>
			{
				draw1(dig_blank, COLOR08_BLACK, 30, 0);
 4016930:	e0befe04 	addi	r2,fp,-1032
 4016934:	000f883a 	mov	r7,zero
 4016938:	01800784 	movi	r6,30
 401693c:	000b883a 	mov	r5,zero
 4016940:	1009883a 	mov	r4,r2
 4016944:	40004cc0 	call	40004cc <draw1>
				draw1(dig_nine, COLOR08_RED, 30, 0);
 4016948:	e0be9e04 	addi	r2,fp,-1416
 401694c:	000f883a 	mov	r7,zero
 4016950:	01800784 	movi	r6,30
 4016954:	01403804 	movi	r5,224
 4016958:	1009883a 	mov	r4,r2
 401695c:	40004cc0 	call	40004cc <draw1>
			}




			if(day_a == 0)
 4016960:	e0b7d517 	ldw	r2,-8364(fp)
 4016964:	10000c1e 	bne	r2,zero,4016998 <main+0x163c4>
			{
				draw1(dig_blank, COLOR08_BLACK, 29, 0);
 4016968:	e0befe04 	addi	r2,fp,-1032
 401696c:	000f883a 	mov	r7,zero
 4016970:	01800744 	movi	r6,29
 4016974:	000b883a 	mov	r5,zero
 4016978:	1009883a 	mov	r4,r2
 401697c:	40004cc0 	call	40004cc <draw1>
				draw1(dig_zero, COLOR08_RED, 29, 0);
 4016980:	e0bb3e04 	addi	r2,fp,-4872
 4016984:	000f883a 	mov	r7,zero
 4016988:	01800744 	movi	r6,29
 401698c:	01403804 	movi	r5,224
 4016990:	1009883a 	mov	r4,r2
 4016994:	40004cc0 	call	40004cc <draw1>
			}
			if(day_a == 1)
 4016998:	e0b7d517 	ldw	r2,-8364(fp)
 401699c:	10800058 	cmpnei	r2,r2,1
 40169a0:	10000c1e 	bne	r2,zero,40169d4 <main+0x16400>
			{
				draw1(dig_blank, COLOR08_BLACK, 29, 0);
 40169a4:	e0befe04 	addi	r2,fp,-1032
 40169a8:	000f883a 	mov	r7,zero
 40169ac:	01800744 	movi	r6,29
 40169b0:	000b883a 	mov	r5,zero
 40169b4:	1009883a 	mov	r4,r2
 40169b8:	40004cc0 	call	40004cc <draw1>
				draw1(dig_one, COLOR08_RED, 29, 0);
 40169bc:	e0bb9e04 	addi	r2,fp,-4488
 40169c0:	000f883a 	mov	r7,zero
 40169c4:	01800744 	movi	r6,29
 40169c8:	01403804 	movi	r5,224
 40169cc:	1009883a 	mov	r4,r2
 40169d0:	40004cc0 	call	40004cc <draw1>
			}
			if(day_a == 2)
 40169d4:	e0b7d517 	ldw	r2,-8364(fp)
 40169d8:	10800098 	cmpnei	r2,r2,2
 40169dc:	10000c1e 	bne	r2,zero,4016a10 <main+0x1643c>
			{
				draw1(dig_blank, COLOR08_BLACK, 29, 0);
 40169e0:	e0befe04 	addi	r2,fp,-1032
 40169e4:	000f883a 	mov	r7,zero
 40169e8:	01800744 	movi	r6,29
 40169ec:	000b883a 	mov	r5,zero
 40169f0:	1009883a 	mov	r4,r2
 40169f4:	40004cc0 	call	40004cc <draw1>
				draw1(dig_two, COLOR08_RED, 29, 0);
 40169f8:	e0bbfe04 	addi	r2,fp,-4104
 40169fc:	000f883a 	mov	r7,zero
 4016a00:	01800744 	movi	r6,29
 4016a04:	01403804 	movi	r5,224
 4016a08:	1009883a 	mov	r4,r2
 4016a0c:	40004cc0 	call	40004cc <draw1>
			}
			if(day_a == 3)
 4016a10:	e0b7d517 	ldw	r2,-8364(fp)
 4016a14:	108000d8 	cmpnei	r2,r2,3
 4016a18:	10000c1e 	bne	r2,zero,4016a4c <main+0x16478>
			{
				draw1(dig_blank, COLOR08_BLACK, 29, 0);
 4016a1c:	e0befe04 	addi	r2,fp,-1032
 4016a20:	000f883a 	mov	r7,zero
 4016a24:	01800744 	movi	r6,29
 4016a28:	000b883a 	mov	r5,zero
 4016a2c:	1009883a 	mov	r4,r2
 4016a30:	40004cc0 	call	40004cc <draw1>
				draw1(dig_three, COLOR08_RED, 29, 0);
 4016a34:	e0bc5e04 	addi	r2,fp,-3720
 4016a38:	000f883a 	mov	r7,zero
 4016a3c:	01800744 	movi	r6,29
 4016a40:	01403804 	movi	r5,224
 4016a44:	1009883a 	mov	r4,r2
 4016a48:	40004cc0 	call	40004cc <draw1>
			}
			if(day_a == 4)
 4016a4c:	e0b7d517 	ldw	r2,-8364(fp)
 4016a50:	10800118 	cmpnei	r2,r2,4
 4016a54:	10000c1e 	bne	r2,zero,4016a88 <main+0x164b4>
			{
				draw1(dig_blank, COLOR08_BLACK, 29, 0);
 4016a58:	e0befe04 	addi	r2,fp,-1032
 4016a5c:	000f883a 	mov	r7,zero
 4016a60:	01800744 	movi	r6,29
 4016a64:	000b883a 	mov	r5,zero
 4016a68:	1009883a 	mov	r4,r2
 4016a6c:	40004cc0 	call	40004cc <draw1>
				draw1(dig_four, COLOR08_RED, 29, 0);
 4016a70:	e0bcbe04 	addi	r2,fp,-3336
 4016a74:	000f883a 	mov	r7,zero
 4016a78:	01800744 	movi	r6,29
 4016a7c:	01403804 	movi	r5,224
 4016a80:	1009883a 	mov	r4,r2
 4016a84:	40004cc0 	call	40004cc <draw1>
			}
			if(day_a == 5)
 4016a88:	e0b7d517 	ldw	r2,-8364(fp)
 4016a8c:	10800158 	cmpnei	r2,r2,5
 4016a90:	10000c1e 	bne	r2,zero,4016ac4 <main+0x164f0>
			{
				draw1(dig_blank, COLOR08_BLACK, 29, 0);
 4016a94:	e0befe04 	addi	r2,fp,-1032
 4016a98:	000f883a 	mov	r7,zero
 4016a9c:	01800744 	movi	r6,29
 4016aa0:	000b883a 	mov	r5,zero
 4016aa4:	1009883a 	mov	r4,r2
 4016aa8:	40004cc0 	call	40004cc <draw1>
				draw1(dig_five, COLOR08_RED, 29, 0);
 4016aac:	e0bd1e04 	addi	r2,fp,-2952
 4016ab0:	000f883a 	mov	r7,zero
 4016ab4:	01800744 	movi	r6,29
 4016ab8:	01403804 	movi	r5,224
 4016abc:	1009883a 	mov	r4,r2
 4016ac0:	40004cc0 	call	40004cc <draw1>
			}
			if(day_a == 6)
 4016ac4:	e0b7d517 	ldw	r2,-8364(fp)
 4016ac8:	10800198 	cmpnei	r2,r2,6
 4016acc:	10000c1e 	bne	r2,zero,4016b00 <main+0x1652c>
			{
				draw1(dig_blank, COLOR08_BLACK, 29, 0);
 4016ad0:	e0befe04 	addi	r2,fp,-1032
 4016ad4:	000f883a 	mov	r7,zero
 4016ad8:	01800744 	movi	r6,29
 4016adc:	000b883a 	mov	r5,zero
 4016ae0:	1009883a 	mov	r4,r2
 4016ae4:	40004cc0 	call	40004cc <draw1>
				draw1(dig_six, COLOR08_RED, 29, 0);
 4016ae8:	e0bd7e04 	addi	r2,fp,-2568
 4016aec:	000f883a 	mov	r7,zero
 4016af0:	01800744 	movi	r6,29
 4016af4:	01403804 	movi	r5,224
 4016af8:	1009883a 	mov	r4,r2
 4016afc:	40004cc0 	call	40004cc <draw1>
			}
			if(day_a == 7)
 4016b00:	e0b7d517 	ldw	r2,-8364(fp)
 4016b04:	108001d8 	cmpnei	r2,r2,7
 4016b08:	10000c1e 	bne	r2,zero,4016b3c <main+0x16568>
			{
				draw1(dig_blank, COLOR08_BLACK, 29, 0);
 4016b0c:	e0befe04 	addi	r2,fp,-1032
 4016b10:	000f883a 	mov	r7,zero
 4016b14:	01800744 	movi	r6,29
 4016b18:	000b883a 	mov	r5,zero
 4016b1c:	1009883a 	mov	r4,r2
 4016b20:	40004cc0 	call	40004cc <draw1>
				draw1(dig_seven, COLOR08_RED, 29, 0);
 4016b24:	e0bdde04 	addi	r2,fp,-2184
 4016b28:	000f883a 	mov	r7,zero
 4016b2c:	01800744 	movi	r6,29
 4016b30:	01403804 	movi	r5,224
 4016b34:	1009883a 	mov	r4,r2
 4016b38:	40004cc0 	call	40004cc <draw1>
			}
			if(day_a == 8)
 4016b3c:	e0b7d517 	ldw	r2,-8364(fp)
 4016b40:	10800218 	cmpnei	r2,r2,8
 4016b44:	10000c1e 	bne	r2,zero,4016b78 <main+0x165a4>
			{
				draw1(dig_blank, COLOR08_BLACK, 29, 0);
 4016b48:	e0befe04 	addi	r2,fp,-1032
 4016b4c:	000f883a 	mov	r7,zero
 4016b50:	01800744 	movi	r6,29
 4016b54:	000b883a 	mov	r5,zero
 4016b58:	1009883a 	mov	r4,r2
 4016b5c:	40004cc0 	call	40004cc <draw1>
				draw1(dig_eight, COLOR08_RED, 29, 0);
 4016b60:	e0be3e04 	addi	r2,fp,-1800
 4016b64:	000f883a 	mov	r7,zero
 4016b68:	01800744 	movi	r6,29
 4016b6c:	01403804 	movi	r5,224
 4016b70:	1009883a 	mov	r4,r2
 4016b74:	40004cc0 	call	40004cc <draw1>
			}
			if(day_a == 9)
 4016b78:	e0b7d517 	ldw	r2,-8364(fp)
 4016b7c:	10800258 	cmpnei	r2,r2,9
 4016b80:	10000c1e 	bne	r2,zero,4016bb4 <main+0x165e0>
			{
				draw1(dig_blank, COLOR08_BLACK, 29, 0);
 4016b84:	e0befe04 	addi	r2,fp,-1032
 4016b88:	000f883a 	mov	r7,zero
 4016b8c:	01800744 	movi	r6,29
 4016b90:	000b883a 	mov	r5,zero
 4016b94:	1009883a 	mov	r4,r2
 4016b98:	40004cc0 	call	40004cc <draw1>
				draw1(dig_nine, COLOR08_RED, 29, 0);
 4016b9c:	e0be9e04 	addi	r2,fp,-1416
 4016ba0:	000f883a 	mov	r7,zero
 4016ba4:	01800744 	movi	r6,29
 4016ba8:	01403804 	movi	r5,224
 4016bac:	1009883a 	mov	r4,r2
 4016bb0:	40004cc0 	call	40004cc <draw1>
			}
		if(gameboard[y][x]==-1)
 4016bb4:	e0b7c217 	ldw	r2,-8440(fp)
 4016bb8:	01400504 	movi	r5,20
 4016bbc:	1009883a 	mov	r4,r2
 4016bc0:	40191000 	call	4019100 <__mulsi3>
 4016bc4:	1007883a 	mov	r3,r2
 4016bc8:	e0b7c117 	ldw	r2,-8444(fp)
 4016bcc:	1885883a 	add	r2,r3,r2
 4016bd0:	1085883a 	add	r2,r2,r2
 4016bd4:	1085883a 	add	r2,r2,r2
 4016bd8:	e0f7c104 	addi	r3,fp,-8444
 4016bdc:	1885883a 	add	r2,r3,r2
 4016be0:	10879d04 	addi	r2,r2,7796
 4016be4:	10800017 	ldw	r2,0(r2)
 4016be8:	10bfffd8 	cmpnei	r2,r2,-1
 4016bec:	1005271e 	bne	r2,zero,401808c <main+0x17ab8>
		{
			if(gameboard[y-1][x]==5)
 4016bf0:	e0b7c217 	ldw	r2,-8440(fp)
 4016bf4:	10bfffc4 	addi	r2,r2,-1
 4016bf8:	01400504 	movi	r5,20
 4016bfc:	1009883a 	mov	r4,r2
 4016c00:	40191000 	call	4019100 <__mulsi3>
 4016c04:	1007883a 	mov	r3,r2
 4016c08:	e0b7c117 	ldw	r2,-8444(fp)
 4016c0c:	1885883a 	add	r2,r3,r2
 4016c10:	1085883a 	add	r2,r2,r2
 4016c14:	1085883a 	add	r2,r2,r2
 4016c18:	e0f7c104 	addi	r3,fp,-8444
 4016c1c:	1885883a 	add	r2,r3,r2
 4016c20:	10879d04 	addi	r2,r2,7796
 4016c24:	10800017 	ldw	r2,0(r2)
 4016c28:	10800158 	cmpnei	r2,r2,5
 4016c2c:	1000cc1e 	bne	r2,zero,4016f60 <main+0x1698c>
			{
				//printf("top number before %i\n", gameboard[y-1][x]);
				//printf("top number before %i\n", gameboard[y][x]);
				draw(white,COLOR08_BLACK,x,y+1);
 4016c30:	e0b7c217 	ldw	r2,-8440(fp)
 4016c34:	10c00044 	addi	r3,r2,1
 4016c38:	e0b95e04 	addi	r2,fp,-6792
 4016c3c:	180f883a 	mov	r7,r3
 4016c40:	e1b7c117 	ldw	r6,-8444(fp)
 4016c44:	000b883a 	mov	r5,zero
 4016c48:	1009883a 	mov	r4,r2
 4016c4c:	40003c80 	call	40003c8 <draw>
				gameboard[y][x]=gameboard[y-1][x];
 4016c50:	e0b7c217 	ldw	r2,-8440(fp)
 4016c54:	10bfffc4 	addi	r2,r2,-1
 4016c58:	01400504 	movi	r5,20
 4016c5c:	1009883a 	mov	r4,r2
 4016c60:	40191000 	call	4019100 <__mulsi3>
 4016c64:	1007883a 	mov	r3,r2
 4016c68:	e0b7c117 	ldw	r2,-8444(fp)
 4016c6c:	1885883a 	add	r2,r3,r2
 4016c70:	1085883a 	add	r2,r2,r2
 4016c74:	1085883a 	add	r2,r2,r2
 4016c78:	e0f7c104 	addi	r3,fp,-8444
 4016c7c:	1885883a 	add	r2,r3,r2
 4016c80:	10879d04 	addi	r2,r2,7796
 4016c84:	14000017 	ldw	r16,0(r2)
 4016c88:	e0b7c217 	ldw	r2,-8440(fp)
 4016c8c:	01400504 	movi	r5,20
 4016c90:	1009883a 	mov	r4,r2
 4016c94:	40191000 	call	4019100 <__mulsi3>
 4016c98:	1007883a 	mov	r3,r2
 4016c9c:	e0b7c117 	ldw	r2,-8444(fp)
 4016ca0:	1885883a 	add	r2,r3,r2
 4016ca4:	1085883a 	add	r2,r2,r2
 4016ca8:	1085883a 	add	r2,r2,r2
 4016cac:	e0f7c104 	addi	r3,fp,-8444
 4016cb0:	1885883a 	add	r2,r3,r2
 4016cb4:	10879d04 	addi	r2,r2,7796
 4016cb8:	14000015 	stw	r16,0(r2)
				gameboard[y-1][x]=-1;
 4016cbc:	e0b7c217 	ldw	r2,-8440(fp)
 4016cc0:	10bfffc4 	addi	r2,r2,-1
 4016cc4:	01400504 	movi	r5,20
 4016cc8:	1009883a 	mov	r4,r2
 4016ccc:	40191000 	call	4019100 <__mulsi3>
 4016cd0:	1007883a 	mov	r3,r2
 4016cd4:	e0b7c117 	ldw	r2,-8444(fp)
 4016cd8:	1885883a 	add	r2,r3,r2
 4016cdc:	1085883a 	add	r2,r2,r2
 4016ce0:	1085883a 	add	r2,r2,r2
 4016ce4:	e0f7c104 	addi	r3,fp,-8444
 4016ce8:	1885883a 	add	r2,r3,r2
 4016cec:	10879d04 	addi	r2,r2,7796
 4016cf0:	00ffffc4 	movi	r3,-1
 4016cf4:	10c00015 	stw	r3,0(r2)
				//printf("top number after %i\n", gameboard[y-1][x]);
				//printf("top number after %i\n", gameboard[y][x]);
				if(gameboard[y][x] == 0)
 4016cf8:	e0b7c217 	ldw	r2,-8440(fp)
 4016cfc:	01400504 	movi	r5,20
 4016d00:	1009883a 	mov	r4,r2
 4016d04:	40191000 	call	4019100 <__mulsi3>
 4016d08:	1007883a 	mov	r3,r2
 4016d0c:	e0b7c117 	ldw	r2,-8444(fp)
 4016d10:	1885883a 	add	r2,r3,r2
 4016d14:	1085883a 	add	r2,r2,r2
 4016d18:	1085883a 	add	r2,r2,r2
 4016d1c:	e0f7c104 	addi	r3,fp,-8444
 4016d20:	1885883a 	add	r2,r3,r2
 4016d24:	10879d04 	addi	r2,r2,7796
 4016d28:	10800017 	ldw	r2,0(r2)
 4016d2c:	1000101e 	bne	r2,zero,4016d70 <main+0x1679c>
				{
					draw(white,COLOR08_BLACK,x,y+2);
 4016d30:	e0b7c217 	ldw	r2,-8440(fp)
 4016d34:	10c00084 	addi	r3,r2,2
 4016d38:	e0b95e04 	addi	r2,fp,-6792
 4016d3c:	180f883a 	mov	r7,r3
 4016d40:	e1b7c117 	ldw	r6,-8444(fp)
 4016d44:	000b883a 	mov	r5,zero
 4016d48:	1009883a 	mov	r4,r2
 4016d4c:	40003c80 	call	40003c8 <draw>
					draw(zero, COLOR08_CYAN, x, y+2);
 4016d50:	e0b7c217 	ldw	r2,-8440(fp)
 4016d54:	10800084 	addi	r2,r2,2
 4016d58:	100f883a 	mov	r7,r2
 4016d5c:	e1b7c117 	ldw	r6,-8444(fp)
 4016d60:	014007c4 	movi	r5,31
 4016d64:	010100f4 	movhi	r4,1027
 4016d68:	21312a04 	addi	r4,r4,-15192
 4016d6c:	40003c80 	call	40003c8 <draw>
				}
				if(gameboard[y][x] == 1)
 4016d70:	e0b7c217 	ldw	r2,-8440(fp)
 4016d74:	01400504 	movi	r5,20
 4016d78:	1009883a 	mov	r4,r2
 4016d7c:	40191000 	call	4019100 <__mulsi3>
 4016d80:	1007883a 	mov	r3,r2
 4016d84:	e0b7c117 	ldw	r2,-8444(fp)
 4016d88:	1885883a 	add	r2,r3,r2
 4016d8c:	1085883a 	add	r2,r2,r2
 4016d90:	1085883a 	add	r2,r2,r2
 4016d94:	e0f7c104 	addi	r3,fp,-8444
 4016d98:	1885883a 	add	r2,r3,r2
 4016d9c:	10879d04 	addi	r2,r2,7796
 4016da0:	10800017 	ldw	r2,0(r2)
 4016da4:	10800058 	cmpnei	r2,r2,1
 4016da8:	1000101e 	bne	r2,zero,4016dec <main+0x16818>
				{
					draw(white,COLOR08_BLACK,x,y+2);
 4016dac:	e0b7c217 	ldw	r2,-8440(fp)
 4016db0:	10c00084 	addi	r3,r2,2
 4016db4:	e0b95e04 	addi	r2,fp,-6792
 4016db8:	180f883a 	mov	r7,r3
 4016dbc:	e1b7c117 	ldw	r6,-8444(fp)
 4016dc0:	000b883a 	mov	r5,zero
 4016dc4:	1009883a 	mov	r4,r2
 4016dc8:	40003c80 	call	40003c8 <draw>
					draw(one, COLOR08_GREEN , x, y+2);
 4016dcc:	e0b7c217 	ldw	r2,-8440(fp)
 4016dd0:	10800084 	addi	r2,r2,2
 4016dd4:	100f883a 	mov	r7,r2
 4016dd8:	e1b7c117 	ldw	r6,-8444(fp)
 4016ddc:	01400404 	movi	r5,16
 4016de0:	010100f4 	movhi	r4,1027
 4016de4:	2132aa04 	addi	r4,r4,-13656
 4016de8:	40003c80 	call	40003c8 <draw>
				}
				if(gameboard[y][x] == 2)
 4016dec:	e0b7c217 	ldw	r2,-8440(fp)
 4016df0:	01400504 	movi	r5,20
 4016df4:	1009883a 	mov	r4,r2
 4016df8:	40191000 	call	4019100 <__mulsi3>
 4016dfc:	1007883a 	mov	r3,r2
 4016e00:	e0b7c117 	ldw	r2,-8444(fp)
 4016e04:	1885883a 	add	r2,r3,r2
 4016e08:	1085883a 	add	r2,r2,r2
 4016e0c:	1085883a 	add	r2,r2,r2
 4016e10:	e0f7c104 	addi	r3,fp,-8444
 4016e14:	1885883a 	add	r2,r3,r2
 4016e18:	10879d04 	addi	r2,r2,7796
 4016e1c:	10800017 	ldw	r2,0(r2)
 4016e20:	10800098 	cmpnei	r2,r2,2
 4016e24:	1000101e 	bne	r2,zero,4016e68 <main+0x16894>
				{
					draw(white,COLOR08_BLACK,x,y+2);
 4016e28:	e0b7c217 	ldw	r2,-8440(fp)
 4016e2c:	10c00084 	addi	r3,r2,2
 4016e30:	e0b95e04 	addi	r2,fp,-6792
 4016e34:	180f883a 	mov	r7,r3
 4016e38:	e1b7c117 	ldw	r6,-8444(fp)
 4016e3c:	000b883a 	mov	r5,zero
 4016e40:	1009883a 	mov	r4,r2
 4016e44:	40003c80 	call	40003c8 <draw>
					draw(two, COLOR08_MAGENTA , x, y+2);
 4016e48:	e0b7c217 	ldw	r2,-8440(fp)
 4016e4c:	10800084 	addi	r2,r2,2
 4016e50:	100f883a 	mov	r7,r2
 4016e54:	e1b7c117 	ldw	r6,-8444(fp)
 4016e58:	014038c4 	movi	r5,227
 4016e5c:	010100f4 	movhi	r4,1027
 4016e60:	21342a04 	addi	r4,r4,-12120
 4016e64:	40003c80 	call	40003c8 <draw>
				}
				if(gameboard[y][x] == 3)
 4016e68:	e0b7c217 	ldw	r2,-8440(fp)
 4016e6c:	01400504 	movi	r5,20
 4016e70:	1009883a 	mov	r4,r2
 4016e74:	40191000 	call	4019100 <__mulsi3>
 4016e78:	1007883a 	mov	r3,r2
 4016e7c:	e0b7c117 	ldw	r2,-8444(fp)
 4016e80:	1885883a 	add	r2,r3,r2
 4016e84:	1085883a 	add	r2,r2,r2
 4016e88:	1085883a 	add	r2,r2,r2
 4016e8c:	e0f7c104 	addi	r3,fp,-8444
 4016e90:	1885883a 	add	r2,r3,r2
 4016e94:	10879d04 	addi	r2,r2,7796
 4016e98:	10800017 	ldw	r2,0(r2)
 4016e9c:	108000d8 	cmpnei	r2,r2,3
 4016ea0:	1000101e 	bne	r2,zero,4016ee4 <main+0x16910>
				{
					draw(white,COLOR08_BLACK,x,y+2);
 4016ea4:	e0b7c217 	ldw	r2,-8440(fp)
 4016ea8:	10c00084 	addi	r3,r2,2
 4016eac:	e0b95e04 	addi	r2,fp,-6792
 4016eb0:	180f883a 	mov	r7,r3
 4016eb4:	e1b7c117 	ldw	r6,-8444(fp)
 4016eb8:	000b883a 	mov	r5,zero
 4016ebc:	1009883a 	mov	r4,r2
 4016ec0:	40003c80 	call	40003c8 <draw>
					draw(three, COLOR08_PURPLE, x, y+2);
 4016ec4:	e0b7c217 	ldw	r2,-8440(fp)
 4016ec8:	10800084 	addi	r2,r2,2
 4016ecc:	100f883a 	mov	r7,r2
 4016ed0:	e1b7c117 	ldw	r6,-8444(fp)
 4016ed4:	01402084 	movi	r5,130
 4016ed8:	010100f4 	movhi	r4,1027
 4016edc:	2135aa04 	addi	r4,r4,-10584
 4016ee0:	40003c80 	call	40003c8 <draw>
				}
				if(gameboard[y][x] == 4)
 4016ee4:	e0b7c217 	ldw	r2,-8440(fp)
 4016ee8:	01400504 	movi	r5,20
 4016eec:	1009883a 	mov	r4,r2
 4016ef0:	40191000 	call	4019100 <__mulsi3>
 4016ef4:	1007883a 	mov	r3,r2
 4016ef8:	e0b7c117 	ldw	r2,-8444(fp)
 4016efc:	1885883a 	add	r2,r3,r2
 4016f00:	1085883a 	add	r2,r2,r2
 4016f04:	1085883a 	add	r2,r2,r2
 4016f08:	e0f7c104 	addi	r3,fp,-8444
 4016f0c:	1885883a 	add	r2,r3,r2
 4016f10:	10879d04 	addi	r2,r2,7796
 4016f14:	10800017 	ldw	r2,0(r2)
 4016f18:	10800118 	cmpnei	r2,r2,4
 4016f1c:	1000101e 	bne	r2,zero,4016f60 <main+0x1698c>
				{
					draw(white,COLOR08_BLACK,x,y+2);
 4016f20:	e0b7c217 	ldw	r2,-8440(fp)
 4016f24:	10c00084 	addi	r3,r2,2
 4016f28:	e0b95e04 	addi	r2,fp,-6792
 4016f2c:	180f883a 	mov	r7,r3
 4016f30:	e1b7c117 	ldw	r6,-8444(fp)
 4016f34:	000b883a 	mov	r5,zero
 4016f38:	1009883a 	mov	r4,r2
 4016f3c:	40003c80 	call	40003c8 <draw>
					draw(four, COLOR08_GOLD, x, y+2);
 4016f40:	e0b7c217 	ldw	r2,-8440(fp)
 4016f44:	10800084 	addi	r2,r2,2
 4016f48:	100f883a 	mov	r7,r2
 4016f4c:	e1b7c117 	ldw	r6,-8444(fp)
 4016f50:	01403e04 	movi	r5,248
 4016f54:	010100f4 	movhi	r4,1027
 4016f58:	21372a04 	addi	r4,r4,-9048
 4016f5c:	40003c80 	call	40003c8 <draw>
				}
			}
			if(gameboard[y-1][x]==4)
 4016f60:	e0b7c217 	ldw	r2,-8440(fp)
 4016f64:	10bfffc4 	addi	r2,r2,-1
 4016f68:	01400504 	movi	r5,20
 4016f6c:	1009883a 	mov	r4,r2
 4016f70:	40191000 	call	4019100 <__mulsi3>
 4016f74:	1007883a 	mov	r3,r2
 4016f78:	e0b7c117 	ldw	r2,-8444(fp)
 4016f7c:	1885883a 	add	r2,r3,r2
 4016f80:	1085883a 	add	r2,r2,r2
 4016f84:	1085883a 	add	r2,r2,r2
 4016f88:	e0f7c104 	addi	r3,fp,-8444
 4016f8c:	1885883a 	add	r2,r3,r2
 4016f90:	10879d04 	addi	r2,r2,7796
 4016f94:	10800017 	ldw	r2,0(r2)
 4016f98:	10800118 	cmpnei	r2,r2,4
 4016f9c:	1000cc1e 	bne	r2,zero,40172d0 <main+0x16cfc>
			{
				//printf("top number before %i\n", gameboard[y-1][x]);
				//printf("top number before %i\n", gameboard[y][x]);
				draw(white,COLOR08_BLACK,x,y+1);
 4016fa0:	e0b7c217 	ldw	r2,-8440(fp)
 4016fa4:	10c00044 	addi	r3,r2,1
 4016fa8:	e0b95e04 	addi	r2,fp,-6792
 4016fac:	180f883a 	mov	r7,r3
 4016fb0:	e1b7c117 	ldw	r6,-8444(fp)
 4016fb4:	000b883a 	mov	r5,zero
 4016fb8:	1009883a 	mov	r4,r2
 4016fbc:	40003c80 	call	40003c8 <draw>
				gameboard[y][x]=gameboard[y-1][x];
 4016fc0:	e0b7c217 	ldw	r2,-8440(fp)
 4016fc4:	10bfffc4 	addi	r2,r2,-1
 4016fc8:	01400504 	movi	r5,20
 4016fcc:	1009883a 	mov	r4,r2
 4016fd0:	40191000 	call	4019100 <__mulsi3>
 4016fd4:	1007883a 	mov	r3,r2
 4016fd8:	e0b7c117 	ldw	r2,-8444(fp)
 4016fdc:	1885883a 	add	r2,r3,r2
 4016fe0:	1085883a 	add	r2,r2,r2
 4016fe4:	1085883a 	add	r2,r2,r2
 4016fe8:	e0f7c104 	addi	r3,fp,-8444
 4016fec:	1885883a 	add	r2,r3,r2
 4016ff0:	10879d04 	addi	r2,r2,7796
 4016ff4:	14000017 	ldw	r16,0(r2)
 4016ff8:	e0b7c217 	ldw	r2,-8440(fp)
 4016ffc:	01400504 	movi	r5,20
 4017000:	1009883a 	mov	r4,r2
 4017004:	40191000 	call	4019100 <__mulsi3>
 4017008:	1007883a 	mov	r3,r2
 401700c:	e0b7c117 	ldw	r2,-8444(fp)
 4017010:	1885883a 	add	r2,r3,r2
 4017014:	1085883a 	add	r2,r2,r2
 4017018:	1085883a 	add	r2,r2,r2
 401701c:	e0f7c104 	addi	r3,fp,-8444
 4017020:	1885883a 	add	r2,r3,r2
 4017024:	10879d04 	addi	r2,r2,7796
 4017028:	14000015 	stw	r16,0(r2)
				gameboard[y-1][x]=-1;
 401702c:	e0b7c217 	ldw	r2,-8440(fp)
 4017030:	10bfffc4 	addi	r2,r2,-1
 4017034:	01400504 	movi	r5,20
 4017038:	1009883a 	mov	r4,r2
 401703c:	40191000 	call	4019100 <__mulsi3>
 4017040:	1007883a 	mov	r3,r2
 4017044:	e0b7c117 	ldw	r2,-8444(fp)
 4017048:	1885883a 	add	r2,r3,r2
 401704c:	1085883a 	add	r2,r2,r2
 4017050:	1085883a 	add	r2,r2,r2
 4017054:	e0f7c104 	addi	r3,fp,-8444
 4017058:	1885883a 	add	r2,r3,r2
 401705c:	10879d04 	addi	r2,r2,7796
 4017060:	00ffffc4 	movi	r3,-1
 4017064:	10c00015 	stw	r3,0(r2)
				//printf("top number after %i\n", gameboard[y-1][x]);
				//printf("top number after %i\n", gameboard[y][x]);
				if(gameboard[y][x] == 0)
 4017068:	e0b7c217 	ldw	r2,-8440(fp)
 401706c:	01400504 	movi	r5,20
 4017070:	1009883a 	mov	r4,r2
 4017074:	40191000 	call	4019100 <__mulsi3>
 4017078:	1007883a 	mov	r3,r2
 401707c:	e0b7c117 	ldw	r2,-8444(fp)
 4017080:	1885883a 	add	r2,r3,r2
 4017084:	1085883a 	add	r2,r2,r2
 4017088:	1085883a 	add	r2,r2,r2
 401708c:	e0f7c104 	addi	r3,fp,-8444
 4017090:	1885883a 	add	r2,r3,r2
 4017094:	10879d04 	addi	r2,r2,7796
 4017098:	10800017 	ldw	r2,0(r2)
 401709c:	1000101e 	bne	r2,zero,40170e0 <main+0x16b0c>
				{
					draw(white,COLOR08_BLACK,x,y+2);
 40170a0:	e0b7c217 	ldw	r2,-8440(fp)
 40170a4:	10c00084 	addi	r3,r2,2
 40170a8:	e0b95e04 	addi	r2,fp,-6792
 40170ac:	180f883a 	mov	r7,r3
 40170b0:	e1b7c117 	ldw	r6,-8444(fp)
 40170b4:	000b883a 	mov	r5,zero
 40170b8:	1009883a 	mov	r4,r2
 40170bc:	40003c80 	call	40003c8 <draw>
					draw(zero, COLOR08_CYAN, x, y+2);
 40170c0:	e0b7c217 	ldw	r2,-8440(fp)
 40170c4:	10800084 	addi	r2,r2,2
 40170c8:	100f883a 	mov	r7,r2
 40170cc:	e1b7c117 	ldw	r6,-8444(fp)
 40170d0:	014007c4 	movi	r5,31
 40170d4:	010100f4 	movhi	r4,1027
 40170d8:	21312a04 	addi	r4,r4,-15192
 40170dc:	40003c80 	call	40003c8 <draw>
				}
				if(gameboard[y][x] == 1)
 40170e0:	e0b7c217 	ldw	r2,-8440(fp)
 40170e4:	01400504 	movi	r5,20
 40170e8:	1009883a 	mov	r4,r2
 40170ec:	40191000 	call	4019100 <__mulsi3>
 40170f0:	1007883a 	mov	r3,r2
 40170f4:	e0b7c117 	ldw	r2,-8444(fp)
 40170f8:	1885883a 	add	r2,r3,r2
 40170fc:	1085883a 	add	r2,r2,r2
 4017100:	1085883a 	add	r2,r2,r2
 4017104:	e0f7c104 	addi	r3,fp,-8444
 4017108:	1885883a 	add	r2,r3,r2
 401710c:	10879d04 	addi	r2,r2,7796
 4017110:	10800017 	ldw	r2,0(r2)
 4017114:	10800058 	cmpnei	r2,r2,1
 4017118:	1000101e 	bne	r2,zero,401715c <main+0x16b88>
				{
					draw(white,COLOR08_BLACK,x,y+2);
 401711c:	e0b7c217 	ldw	r2,-8440(fp)
 4017120:	10c00084 	addi	r3,r2,2
 4017124:	e0b95e04 	addi	r2,fp,-6792
 4017128:	180f883a 	mov	r7,r3
 401712c:	e1b7c117 	ldw	r6,-8444(fp)
 4017130:	000b883a 	mov	r5,zero
 4017134:	1009883a 	mov	r4,r2
 4017138:	40003c80 	call	40003c8 <draw>
					draw(one, COLOR08_GREEN , x, y+2);
 401713c:	e0b7c217 	ldw	r2,-8440(fp)
 4017140:	10800084 	addi	r2,r2,2
 4017144:	100f883a 	mov	r7,r2
 4017148:	e1b7c117 	ldw	r6,-8444(fp)
 401714c:	01400404 	movi	r5,16
 4017150:	010100f4 	movhi	r4,1027
 4017154:	2132aa04 	addi	r4,r4,-13656
 4017158:	40003c80 	call	40003c8 <draw>
				}
				if(gameboard[y][x] == 2)
 401715c:	e0b7c217 	ldw	r2,-8440(fp)
 4017160:	01400504 	movi	r5,20
 4017164:	1009883a 	mov	r4,r2
 4017168:	40191000 	call	4019100 <__mulsi3>
 401716c:	1007883a 	mov	r3,r2
 4017170:	e0b7c117 	ldw	r2,-8444(fp)
 4017174:	1885883a 	add	r2,r3,r2
 4017178:	1085883a 	add	r2,r2,r2
 401717c:	1085883a 	add	r2,r2,r2
 4017180:	e0f7c104 	addi	r3,fp,-8444
 4017184:	1885883a 	add	r2,r3,r2
 4017188:	10879d04 	addi	r2,r2,7796
 401718c:	10800017 	ldw	r2,0(r2)
 4017190:	10800098 	cmpnei	r2,r2,2
 4017194:	1000101e 	bne	r2,zero,40171d8 <main+0x16c04>
				{
					draw(white,COLOR08_BLACK,x,y+2);
 4017198:	e0b7c217 	ldw	r2,-8440(fp)
 401719c:	10c00084 	addi	r3,r2,2
 40171a0:	e0b95e04 	addi	r2,fp,-6792
 40171a4:	180f883a 	mov	r7,r3
 40171a8:	e1b7c117 	ldw	r6,-8444(fp)
 40171ac:	000b883a 	mov	r5,zero
 40171b0:	1009883a 	mov	r4,r2
 40171b4:	40003c80 	call	40003c8 <draw>
					draw(two, COLOR08_MAGENTA , x, y+2);
 40171b8:	e0b7c217 	ldw	r2,-8440(fp)
 40171bc:	10800084 	addi	r2,r2,2
 40171c0:	100f883a 	mov	r7,r2
 40171c4:	e1b7c117 	ldw	r6,-8444(fp)
 40171c8:	014038c4 	movi	r5,227
 40171cc:	010100f4 	movhi	r4,1027
 40171d0:	21342a04 	addi	r4,r4,-12120
 40171d4:	40003c80 	call	40003c8 <draw>
				}
				if(gameboard[y][x] == 3)
 40171d8:	e0b7c217 	ldw	r2,-8440(fp)
 40171dc:	01400504 	movi	r5,20
 40171e0:	1009883a 	mov	r4,r2
 40171e4:	40191000 	call	4019100 <__mulsi3>
 40171e8:	1007883a 	mov	r3,r2
 40171ec:	e0b7c117 	ldw	r2,-8444(fp)
 40171f0:	1885883a 	add	r2,r3,r2
 40171f4:	1085883a 	add	r2,r2,r2
 40171f8:	1085883a 	add	r2,r2,r2
 40171fc:	e0f7c104 	addi	r3,fp,-8444
 4017200:	1885883a 	add	r2,r3,r2
 4017204:	10879d04 	addi	r2,r2,7796
 4017208:	10800017 	ldw	r2,0(r2)
 401720c:	108000d8 	cmpnei	r2,r2,3
 4017210:	1000101e 	bne	r2,zero,4017254 <main+0x16c80>
				{
					draw(white,COLOR08_BLACK,x,y+2);
 4017214:	e0b7c217 	ldw	r2,-8440(fp)
 4017218:	10c00084 	addi	r3,r2,2
 401721c:	e0b95e04 	addi	r2,fp,-6792
 4017220:	180f883a 	mov	r7,r3
 4017224:	e1b7c117 	ldw	r6,-8444(fp)
 4017228:	000b883a 	mov	r5,zero
 401722c:	1009883a 	mov	r4,r2
 4017230:	40003c80 	call	40003c8 <draw>
					draw(three, COLOR08_PURPLE, x, y+2);
 4017234:	e0b7c217 	ldw	r2,-8440(fp)
 4017238:	10800084 	addi	r2,r2,2
 401723c:	100f883a 	mov	r7,r2
 4017240:	e1b7c117 	ldw	r6,-8444(fp)
 4017244:	01402084 	movi	r5,130
 4017248:	010100f4 	movhi	r4,1027
 401724c:	2135aa04 	addi	r4,r4,-10584
 4017250:	40003c80 	call	40003c8 <draw>
				}
				if(gameboard[y][x] == 4)
 4017254:	e0b7c217 	ldw	r2,-8440(fp)
 4017258:	01400504 	movi	r5,20
 401725c:	1009883a 	mov	r4,r2
 4017260:	40191000 	call	4019100 <__mulsi3>
 4017264:	1007883a 	mov	r3,r2
 4017268:	e0b7c117 	ldw	r2,-8444(fp)
 401726c:	1885883a 	add	r2,r3,r2
 4017270:	1085883a 	add	r2,r2,r2
 4017274:	1085883a 	add	r2,r2,r2
 4017278:	e0f7c104 	addi	r3,fp,-8444
 401727c:	1885883a 	add	r2,r3,r2
 4017280:	10879d04 	addi	r2,r2,7796
 4017284:	10800017 	ldw	r2,0(r2)
 4017288:	10800118 	cmpnei	r2,r2,4
 401728c:	1000101e 	bne	r2,zero,40172d0 <main+0x16cfc>
				{
					draw(white,COLOR08_BLACK,x,y+2);
 4017290:	e0b7c217 	ldw	r2,-8440(fp)
 4017294:	10c00084 	addi	r3,r2,2
 4017298:	e0b95e04 	addi	r2,fp,-6792
 401729c:	180f883a 	mov	r7,r3
 40172a0:	e1b7c117 	ldw	r6,-8444(fp)
 40172a4:	000b883a 	mov	r5,zero
 40172a8:	1009883a 	mov	r4,r2
 40172ac:	40003c80 	call	40003c8 <draw>
					draw(four, COLOR08_GOLD, x, y+2);
 40172b0:	e0b7c217 	ldw	r2,-8440(fp)
 40172b4:	10800084 	addi	r2,r2,2
 40172b8:	100f883a 	mov	r7,r2
 40172bc:	e1b7c117 	ldw	r6,-8444(fp)
 40172c0:	01403e04 	movi	r5,248
 40172c4:	010100f4 	movhi	r4,1027
 40172c8:	21372a04 	addi	r4,r4,-9048
 40172cc:	40003c80 	call	40003c8 <draw>
				}
			}
			if(gameboard[y-1][x]==3)
 40172d0:	e0b7c217 	ldw	r2,-8440(fp)
 40172d4:	10bfffc4 	addi	r2,r2,-1
 40172d8:	01400504 	movi	r5,20
 40172dc:	1009883a 	mov	r4,r2
 40172e0:	40191000 	call	4019100 <__mulsi3>
 40172e4:	1007883a 	mov	r3,r2
 40172e8:	e0b7c117 	ldw	r2,-8444(fp)
 40172ec:	1885883a 	add	r2,r3,r2
 40172f0:	1085883a 	add	r2,r2,r2
 40172f4:	1085883a 	add	r2,r2,r2
 40172f8:	e0f7c104 	addi	r3,fp,-8444
 40172fc:	1885883a 	add	r2,r3,r2
 4017300:	10879d04 	addi	r2,r2,7796
 4017304:	10800017 	ldw	r2,0(r2)
 4017308:	108000d8 	cmpnei	r2,r2,3
 401730c:	1000cc1e 	bne	r2,zero,4017640 <main+0x1706c>
			{
				//printf("top number before %i\n", gameboard[y-1][x]);
				//printf("top number before %i\n", gameboard[y][x]);
				draw(white,COLOR08_BLACK,x,y+1);
 4017310:	e0b7c217 	ldw	r2,-8440(fp)
 4017314:	10c00044 	addi	r3,r2,1
 4017318:	e0b95e04 	addi	r2,fp,-6792
 401731c:	180f883a 	mov	r7,r3
 4017320:	e1b7c117 	ldw	r6,-8444(fp)
 4017324:	000b883a 	mov	r5,zero
 4017328:	1009883a 	mov	r4,r2
 401732c:	40003c80 	call	40003c8 <draw>
				gameboard[y][x]=gameboard[y-1][x];
 4017330:	e0b7c217 	ldw	r2,-8440(fp)
 4017334:	10bfffc4 	addi	r2,r2,-1
 4017338:	01400504 	movi	r5,20
 401733c:	1009883a 	mov	r4,r2
 4017340:	40191000 	call	4019100 <__mulsi3>
 4017344:	1007883a 	mov	r3,r2
 4017348:	e0b7c117 	ldw	r2,-8444(fp)
 401734c:	1885883a 	add	r2,r3,r2
 4017350:	1085883a 	add	r2,r2,r2
 4017354:	1085883a 	add	r2,r2,r2
 4017358:	e0f7c104 	addi	r3,fp,-8444
 401735c:	1885883a 	add	r2,r3,r2
 4017360:	10879d04 	addi	r2,r2,7796
 4017364:	14000017 	ldw	r16,0(r2)
 4017368:	e0b7c217 	ldw	r2,-8440(fp)
 401736c:	01400504 	movi	r5,20
 4017370:	1009883a 	mov	r4,r2
 4017374:	40191000 	call	4019100 <__mulsi3>
 4017378:	1007883a 	mov	r3,r2
 401737c:	e0b7c117 	ldw	r2,-8444(fp)
 4017380:	1885883a 	add	r2,r3,r2
 4017384:	1085883a 	add	r2,r2,r2
 4017388:	1085883a 	add	r2,r2,r2
 401738c:	e0f7c104 	addi	r3,fp,-8444
 4017390:	1885883a 	add	r2,r3,r2
 4017394:	10879d04 	addi	r2,r2,7796
 4017398:	14000015 	stw	r16,0(r2)
				gameboard[y-1][x]=-1;
 401739c:	e0b7c217 	ldw	r2,-8440(fp)
 40173a0:	10bfffc4 	addi	r2,r2,-1
 40173a4:	01400504 	movi	r5,20
 40173a8:	1009883a 	mov	r4,r2
 40173ac:	40191000 	call	4019100 <__mulsi3>
 40173b0:	1007883a 	mov	r3,r2
 40173b4:	e0b7c117 	ldw	r2,-8444(fp)
 40173b8:	1885883a 	add	r2,r3,r2
 40173bc:	1085883a 	add	r2,r2,r2
 40173c0:	1085883a 	add	r2,r2,r2
 40173c4:	e0f7c104 	addi	r3,fp,-8444
 40173c8:	1885883a 	add	r2,r3,r2
 40173cc:	10879d04 	addi	r2,r2,7796
 40173d0:	00ffffc4 	movi	r3,-1
 40173d4:	10c00015 	stw	r3,0(r2)
				//printf("top number after %i\n", gameboard[y-1][x]);
				//printf("top number after %i\n", gameboard[y][x]);
				if(gameboard[y][x] == 0)
 40173d8:	e0b7c217 	ldw	r2,-8440(fp)
 40173dc:	01400504 	movi	r5,20
 40173e0:	1009883a 	mov	r4,r2
 40173e4:	40191000 	call	4019100 <__mulsi3>
 40173e8:	1007883a 	mov	r3,r2
 40173ec:	e0b7c117 	ldw	r2,-8444(fp)
 40173f0:	1885883a 	add	r2,r3,r2
 40173f4:	1085883a 	add	r2,r2,r2
 40173f8:	1085883a 	add	r2,r2,r2
 40173fc:	e0f7c104 	addi	r3,fp,-8444
 4017400:	1885883a 	add	r2,r3,r2
 4017404:	10879d04 	addi	r2,r2,7796
 4017408:	10800017 	ldw	r2,0(r2)
 401740c:	1000101e 	bne	r2,zero,4017450 <main+0x16e7c>
				{
					draw(white,COLOR08_BLACK,x,y+2);
 4017410:	e0b7c217 	ldw	r2,-8440(fp)
 4017414:	10c00084 	addi	r3,r2,2
 4017418:	e0b95e04 	addi	r2,fp,-6792
 401741c:	180f883a 	mov	r7,r3
 4017420:	e1b7c117 	ldw	r6,-8444(fp)
 4017424:	000b883a 	mov	r5,zero
 4017428:	1009883a 	mov	r4,r2
 401742c:	40003c80 	call	40003c8 <draw>
					draw(zero, COLOR08_CYAN, x, y+2);
 4017430:	e0b7c217 	ldw	r2,-8440(fp)
 4017434:	10800084 	addi	r2,r2,2
 4017438:	100f883a 	mov	r7,r2
 401743c:	e1b7c117 	ldw	r6,-8444(fp)
 4017440:	014007c4 	movi	r5,31
 4017444:	010100f4 	movhi	r4,1027
 4017448:	21312a04 	addi	r4,r4,-15192
 401744c:	40003c80 	call	40003c8 <draw>
				}
				if(gameboard[y][x] == 1)
 4017450:	e0b7c217 	ldw	r2,-8440(fp)
 4017454:	01400504 	movi	r5,20
 4017458:	1009883a 	mov	r4,r2
 401745c:	40191000 	call	4019100 <__mulsi3>
 4017460:	1007883a 	mov	r3,r2
 4017464:	e0b7c117 	ldw	r2,-8444(fp)
 4017468:	1885883a 	add	r2,r3,r2
 401746c:	1085883a 	add	r2,r2,r2
 4017470:	1085883a 	add	r2,r2,r2
 4017474:	e0f7c104 	addi	r3,fp,-8444
 4017478:	1885883a 	add	r2,r3,r2
 401747c:	10879d04 	addi	r2,r2,7796
 4017480:	10800017 	ldw	r2,0(r2)
 4017484:	10800058 	cmpnei	r2,r2,1
 4017488:	1000101e 	bne	r2,zero,40174cc <main+0x16ef8>
				{
					draw(white,COLOR08_BLACK,x,y+2);
 401748c:	e0b7c217 	ldw	r2,-8440(fp)
 4017490:	10c00084 	addi	r3,r2,2
 4017494:	e0b95e04 	addi	r2,fp,-6792
 4017498:	180f883a 	mov	r7,r3
 401749c:	e1b7c117 	ldw	r6,-8444(fp)
 40174a0:	000b883a 	mov	r5,zero
 40174a4:	1009883a 	mov	r4,r2
 40174a8:	40003c80 	call	40003c8 <draw>
					draw(one, COLOR08_GREEN , x, y+2);
 40174ac:	e0b7c217 	ldw	r2,-8440(fp)
 40174b0:	10800084 	addi	r2,r2,2
 40174b4:	100f883a 	mov	r7,r2
 40174b8:	e1b7c117 	ldw	r6,-8444(fp)
 40174bc:	01400404 	movi	r5,16
 40174c0:	010100f4 	movhi	r4,1027
 40174c4:	2132aa04 	addi	r4,r4,-13656
 40174c8:	40003c80 	call	40003c8 <draw>
				}
				if(gameboard[y][x] == 2)
 40174cc:	e0b7c217 	ldw	r2,-8440(fp)
 40174d0:	01400504 	movi	r5,20
 40174d4:	1009883a 	mov	r4,r2
 40174d8:	40191000 	call	4019100 <__mulsi3>
 40174dc:	1007883a 	mov	r3,r2
 40174e0:	e0b7c117 	ldw	r2,-8444(fp)
 40174e4:	1885883a 	add	r2,r3,r2
 40174e8:	1085883a 	add	r2,r2,r2
 40174ec:	1085883a 	add	r2,r2,r2
 40174f0:	e0f7c104 	addi	r3,fp,-8444
 40174f4:	1885883a 	add	r2,r3,r2
 40174f8:	10879d04 	addi	r2,r2,7796
 40174fc:	10800017 	ldw	r2,0(r2)
 4017500:	10800098 	cmpnei	r2,r2,2
 4017504:	1000101e 	bne	r2,zero,4017548 <main+0x16f74>
				{
					draw(white,COLOR08_BLACK,x,y+2);
 4017508:	e0b7c217 	ldw	r2,-8440(fp)
 401750c:	10c00084 	addi	r3,r2,2
 4017510:	e0b95e04 	addi	r2,fp,-6792
 4017514:	180f883a 	mov	r7,r3
 4017518:	e1b7c117 	ldw	r6,-8444(fp)
 401751c:	000b883a 	mov	r5,zero
 4017520:	1009883a 	mov	r4,r2
 4017524:	40003c80 	call	40003c8 <draw>
					draw(two, COLOR08_MAGENTA , x, y+2);
 4017528:	e0b7c217 	ldw	r2,-8440(fp)
 401752c:	10800084 	addi	r2,r2,2
 4017530:	100f883a 	mov	r7,r2
 4017534:	e1b7c117 	ldw	r6,-8444(fp)
 4017538:	014038c4 	movi	r5,227
 401753c:	010100f4 	movhi	r4,1027
 4017540:	21342a04 	addi	r4,r4,-12120
 4017544:	40003c80 	call	40003c8 <draw>
				}
				if(gameboard[y][x] == 3)
 4017548:	e0b7c217 	ldw	r2,-8440(fp)
 401754c:	01400504 	movi	r5,20
 4017550:	1009883a 	mov	r4,r2
 4017554:	40191000 	call	4019100 <__mulsi3>
 4017558:	1007883a 	mov	r3,r2
 401755c:	e0b7c117 	ldw	r2,-8444(fp)
 4017560:	1885883a 	add	r2,r3,r2
 4017564:	1085883a 	add	r2,r2,r2
 4017568:	1085883a 	add	r2,r2,r2
 401756c:	e0f7c104 	addi	r3,fp,-8444
 4017570:	1885883a 	add	r2,r3,r2
 4017574:	10879d04 	addi	r2,r2,7796
 4017578:	10800017 	ldw	r2,0(r2)
 401757c:	108000d8 	cmpnei	r2,r2,3
 4017580:	1000101e 	bne	r2,zero,40175c4 <main+0x16ff0>
				{
					draw(white,COLOR08_BLACK,x,y+2);
 4017584:	e0b7c217 	ldw	r2,-8440(fp)
 4017588:	10c00084 	addi	r3,r2,2
 401758c:	e0b95e04 	addi	r2,fp,-6792
 4017590:	180f883a 	mov	r7,r3
 4017594:	e1b7c117 	ldw	r6,-8444(fp)
 4017598:	000b883a 	mov	r5,zero
 401759c:	1009883a 	mov	r4,r2
 40175a0:	40003c80 	call	40003c8 <draw>
					draw(three, COLOR08_PURPLE, x, y+2);
 40175a4:	e0b7c217 	ldw	r2,-8440(fp)
 40175a8:	10800084 	addi	r2,r2,2
 40175ac:	100f883a 	mov	r7,r2
 40175b0:	e1b7c117 	ldw	r6,-8444(fp)
 40175b4:	01402084 	movi	r5,130
 40175b8:	010100f4 	movhi	r4,1027
 40175bc:	2135aa04 	addi	r4,r4,-10584
 40175c0:	40003c80 	call	40003c8 <draw>
				}
				if(gameboard[y][x] == 4)
 40175c4:	e0b7c217 	ldw	r2,-8440(fp)
 40175c8:	01400504 	movi	r5,20
 40175cc:	1009883a 	mov	r4,r2
 40175d0:	40191000 	call	4019100 <__mulsi3>
 40175d4:	1007883a 	mov	r3,r2
 40175d8:	e0b7c117 	ldw	r2,-8444(fp)
 40175dc:	1885883a 	add	r2,r3,r2
 40175e0:	1085883a 	add	r2,r2,r2
 40175e4:	1085883a 	add	r2,r2,r2
 40175e8:	e0f7c104 	addi	r3,fp,-8444
 40175ec:	1885883a 	add	r2,r3,r2
 40175f0:	10879d04 	addi	r2,r2,7796
 40175f4:	10800017 	ldw	r2,0(r2)
 40175f8:	10800118 	cmpnei	r2,r2,4
 40175fc:	1000101e 	bne	r2,zero,4017640 <main+0x1706c>
				{
					draw(white,COLOR08_BLACK,x,y+2);
 4017600:	e0b7c217 	ldw	r2,-8440(fp)
 4017604:	10c00084 	addi	r3,r2,2
 4017608:	e0b95e04 	addi	r2,fp,-6792
 401760c:	180f883a 	mov	r7,r3
 4017610:	e1b7c117 	ldw	r6,-8444(fp)
 4017614:	000b883a 	mov	r5,zero
 4017618:	1009883a 	mov	r4,r2
 401761c:	40003c80 	call	40003c8 <draw>
					draw(four, COLOR08_GOLD, x, y+2);
 4017620:	e0b7c217 	ldw	r2,-8440(fp)
 4017624:	10800084 	addi	r2,r2,2
 4017628:	100f883a 	mov	r7,r2
 401762c:	e1b7c117 	ldw	r6,-8444(fp)
 4017630:	01403e04 	movi	r5,248
 4017634:	010100f4 	movhi	r4,1027
 4017638:	21372a04 	addi	r4,r4,-9048
 401763c:	40003c80 	call	40003c8 <draw>
				}
			}
			if(gameboard[y-1][x]==2)
 4017640:	e0b7c217 	ldw	r2,-8440(fp)
 4017644:	10bfffc4 	addi	r2,r2,-1
 4017648:	01400504 	movi	r5,20
 401764c:	1009883a 	mov	r4,r2
 4017650:	40191000 	call	4019100 <__mulsi3>
 4017654:	1007883a 	mov	r3,r2
 4017658:	e0b7c117 	ldw	r2,-8444(fp)
 401765c:	1885883a 	add	r2,r3,r2
 4017660:	1085883a 	add	r2,r2,r2
 4017664:	1085883a 	add	r2,r2,r2
 4017668:	e0f7c104 	addi	r3,fp,-8444
 401766c:	1885883a 	add	r2,r3,r2
 4017670:	10879d04 	addi	r2,r2,7796
 4017674:	10800017 	ldw	r2,0(r2)
 4017678:	10800098 	cmpnei	r2,r2,2
 401767c:	1000cc1e 	bne	r2,zero,40179b0 <main+0x173dc>
			{
				//printf("top number before %i\n", gameboard[y-1][x]);
				//printf("top number before %i\n", gameboard[y][x]);
				draw(white,COLOR08_BLACK,x,y+1);
 4017680:	e0b7c217 	ldw	r2,-8440(fp)
 4017684:	10c00044 	addi	r3,r2,1
 4017688:	e0b95e04 	addi	r2,fp,-6792
 401768c:	180f883a 	mov	r7,r3
 4017690:	e1b7c117 	ldw	r6,-8444(fp)
 4017694:	000b883a 	mov	r5,zero
 4017698:	1009883a 	mov	r4,r2
 401769c:	40003c80 	call	40003c8 <draw>
				gameboard[y][x]=gameboard[y-1][x];
 40176a0:	e0b7c217 	ldw	r2,-8440(fp)
 40176a4:	10bfffc4 	addi	r2,r2,-1
 40176a8:	01400504 	movi	r5,20
 40176ac:	1009883a 	mov	r4,r2
 40176b0:	40191000 	call	4019100 <__mulsi3>
 40176b4:	1007883a 	mov	r3,r2
 40176b8:	e0b7c117 	ldw	r2,-8444(fp)
 40176bc:	1885883a 	add	r2,r3,r2
 40176c0:	1085883a 	add	r2,r2,r2
 40176c4:	1085883a 	add	r2,r2,r2
 40176c8:	e0f7c104 	addi	r3,fp,-8444
 40176cc:	1885883a 	add	r2,r3,r2
 40176d0:	10879d04 	addi	r2,r2,7796
 40176d4:	14000017 	ldw	r16,0(r2)
 40176d8:	e0b7c217 	ldw	r2,-8440(fp)
 40176dc:	01400504 	movi	r5,20
 40176e0:	1009883a 	mov	r4,r2
 40176e4:	40191000 	call	4019100 <__mulsi3>
 40176e8:	1007883a 	mov	r3,r2
 40176ec:	e0b7c117 	ldw	r2,-8444(fp)
 40176f0:	1885883a 	add	r2,r3,r2
 40176f4:	1085883a 	add	r2,r2,r2
 40176f8:	1085883a 	add	r2,r2,r2
 40176fc:	e0f7c104 	addi	r3,fp,-8444
 4017700:	1885883a 	add	r2,r3,r2
 4017704:	10879d04 	addi	r2,r2,7796
 4017708:	14000015 	stw	r16,0(r2)
				gameboard[y-1][x]=-1;
 401770c:	e0b7c217 	ldw	r2,-8440(fp)
 4017710:	10bfffc4 	addi	r2,r2,-1
 4017714:	01400504 	movi	r5,20
 4017718:	1009883a 	mov	r4,r2
 401771c:	40191000 	call	4019100 <__mulsi3>
 4017720:	1007883a 	mov	r3,r2
 4017724:	e0b7c117 	ldw	r2,-8444(fp)
 4017728:	1885883a 	add	r2,r3,r2
 401772c:	1085883a 	add	r2,r2,r2
 4017730:	1085883a 	add	r2,r2,r2
 4017734:	e0f7c104 	addi	r3,fp,-8444
 4017738:	1885883a 	add	r2,r3,r2
 401773c:	10879d04 	addi	r2,r2,7796
 4017740:	00ffffc4 	movi	r3,-1
 4017744:	10c00015 	stw	r3,0(r2)
				//printf("top number after %i\n", gameboard[y-1][x]);
				//printf("top number after %i\n", gameboard[y][x]);
				if(gameboard[y][x] == 0)
 4017748:	e0b7c217 	ldw	r2,-8440(fp)
 401774c:	01400504 	movi	r5,20
 4017750:	1009883a 	mov	r4,r2
 4017754:	40191000 	call	4019100 <__mulsi3>
 4017758:	1007883a 	mov	r3,r2
 401775c:	e0b7c117 	ldw	r2,-8444(fp)
 4017760:	1885883a 	add	r2,r3,r2
 4017764:	1085883a 	add	r2,r2,r2
 4017768:	1085883a 	add	r2,r2,r2
 401776c:	e0f7c104 	addi	r3,fp,-8444
 4017770:	1885883a 	add	r2,r3,r2
 4017774:	10879d04 	addi	r2,r2,7796
 4017778:	10800017 	ldw	r2,0(r2)
 401777c:	1000101e 	bne	r2,zero,40177c0 <main+0x171ec>
				{
					draw(white,COLOR08_BLACK,x,y+2);
 4017780:	e0b7c217 	ldw	r2,-8440(fp)
 4017784:	10c00084 	addi	r3,r2,2
 4017788:	e0b95e04 	addi	r2,fp,-6792
 401778c:	180f883a 	mov	r7,r3
 4017790:	e1b7c117 	ldw	r6,-8444(fp)
 4017794:	000b883a 	mov	r5,zero
 4017798:	1009883a 	mov	r4,r2
 401779c:	40003c80 	call	40003c8 <draw>
					draw(zero, COLOR08_CYAN, x, y+2);
 40177a0:	e0b7c217 	ldw	r2,-8440(fp)
 40177a4:	10800084 	addi	r2,r2,2
 40177a8:	100f883a 	mov	r7,r2
 40177ac:	e1b7c117 	ldw	r6,-8444(fp)
 40177b0:	014007c4 	movi	r5,31
 40177b4:	010100f4 	movhi	r4,1027
 40177b8:	21312a04 	addi	r4,r4,-15192
 40177bc:	40003c80 	call	40003c8 <draw>
				}
				if(gameboard[y][x] == 1)
 40177c0:	e0b7c217 	ldw	r2,-8440(fp)
 40177c4:	01400504 	movi	r5,20
 40177c8:	1009883a 	mov	r4,r2
 40177cc:	40191000 	call	4019100 <__mulsi3>
 40177d0:	1007883a 	mov	r3,r2
 40177d4:	e0b7c117 	ldw	r2,-8444(fp)
 40177d8:	1885883a 	add	r2,r3,r2
 40177dc:	1085883a 	add	r2,r2,r2
 40177e0:	1085883a 	add	r2,r2,r2
 40177e4:	e0f7c104 	addi	r3,fp,-8444
 40177e8:	1885883a 	add	r2,r3,r2
 40177ec:	10879d04 	addi	r2,r2,7796
 40177f0:	10800017 	ldw	r2,0(r2)
 40177f4:	10800058 	cmpnei	r2,r2,1
 40177f8:	1000101e 	bne	r2,zero,401783c <main+0x17268>
				{
					draw(white,COLOR08_BLACK,x,y+2);
 40177fc:	e0b7c217 	ldw	r2,-8440(fp)
 4017800:	10c00084 	addi	r3,r2,2
 4017804:	e0b95e04 	addi	r2,fp,-6792
 4017808:	180f883a 	mov	r7,r3
 401780c:	e1b7c117 	ldw	r6,-8444(fp)
 4017810:	000b883a 	mov	r5,zero
 4017814:	1009883a 	mov	r4,r2
 4017818:	40003c80 	call	40003c8 <draw>
					draw(one, COLOR08_GREEN , x, y+2);
 401781c:	e0b7c217 	ldw	r2,-8440(fp)
 4017820:	10800084 	addi	r2,r2,2
 4017824:	100f883a 	mov	r7,r2
 4017828:	e1b7c117 	ldw	r6,-8444(fp)
 401782c:	01400404 	movi	r5,16
 4017830:	010100f4 	movhi	r4,1027
 4017834:	2132aa04 	addi	r4,r4,-13656
 4017838:	40003c80 	call	40003c8 <draw>
				}
				if(gameboard[y][x] == 2)
 401783c:	e0b7c217 	ldw	r2,-8440(fp)
 4017840:	01400504 	movi	r5,20
 4017844:	1009883a 	mov	r4,r2
 4017848:	40191000 	call	4019100 <__mulsi3>
 401784c:	1007883a 	mov	r3,r2
 4017850:	e0b7c117 	ldw	r2,-8444(fp)
 4017854:	1885883a 	add	r2,r3,r2
 4017858:	1085883a 	add	r2,r2,r2
 401785c:	1085883a 	add	r2,r2,r2
 4017860:	e0f7c104 	addi	r3,fp,-8444
 4017864:	1885883a 	add	r2,r3,r2
 4017868:	10879d04 	addi	r2,r2,7796
 401786c:	10800017 	ldw	r2,0(r2)
 4017870:	10800098 	cmpnei	r2,r2,2
 4017874:	1000101e 	bne	r2,zero,40178b8 <main+0x172e4>
				{
					draw(white,COLOR08_BLACK,x,y+2);
 4017878:	e0b7c217 	ldw	r2,-8440(fp)
 401787c:	10c00084 	addi	r3,r2,2
 4017880:	e0b95e04 	addi	r2,fp,-6792
 4017884:	180f883a 	mov	r7,r3
 4017888:	e1b7c117 	ldw	r6,-8444(fp)
 401788c:	000b883a 	mov	r5,zero
 4017890:	1009883a 	mov	r4,r2
 4017894:	40003c80 	call	40003c8 <draw>
					draw(two, COLOR08_MAGENTA , x, y+2);
 4017898:	e0b7c217 	ldw	r2,-8440(fp)
 401789c:	10800084 	addi	r2,r2,2
 40178a0:	100f883a 	mov	r7,r2
 40178a4:	e1b7c117 	ldw	r6,-8444(fp)
 40178a8:	014038c4 	movi	r5,227
 40178ac:	010100f4 	movhi	r4,1027
 40178b0:	21342a04 	addi	r4,r4,-12120
 40178b4:	40003c80 	call	40003c8 <draw>
				}
				if(gameboard[y][x] == 3)
 40178b8:	e0b7c217 	ldw	r2,-8440(fp)
 40178bc:	01400504 	movi	r5,20
 40178c0:	1009883a 	mov	r4,r2
 40178c4:	40191000 	call	4019100 <__mulsi3>
 40178c8:	1007883a 	mov	r3,r2
 40178cc:	e0b7c117 	ldw	r2,-8444(fp)
 40178d0:	1885883a 	add	r2,r3,r2
 40178d4:	1085883a 	add	r2,r2,r2
 40178d8:	1085883a 	add	r2,r2,r2
 40178dc:	e0f7c104 	addi	r3,fp,-8444
 40178e0:	1885883a 	add	r2,r3,r2
 40178e4:	10879d04 	addi	r2,r2,7796
 40178e8:	10800017 	ldw	r2,0(r2)
 40178ec:	108000d8 	cmpnei	r2,r2,3
 40178f0:	1000101e 	bne	r2,zero,4017934 <main+0x17360>
				{
					draw(white,COLOR08_BLACK,x,y+2);
 40178f4:	e0b7c217 	ldw	r2,-8440(fp)
 40178f8:	10c00084 	addi	r3,r2,2
 40178fc:	e0b95e04 	addi	r2,fp,-6792
 4017900:	180f883a 	mov	r7,r3
 4017904:	e1b7c117 	ldw	r6,-8444(fp)
 4017908:	000b883a 	mov	r5,zero
 401790c:	1009883a 	mov	r4,r2
 4017910:	40003c80 	call	40003c8 <draw>
					draw(three, COLOR08_PURPLE, x, y+2);
 4017914:	e0b7c217 	ldw	r2,-8440(fp)
 4017918:	10800084 	addi	r2,r2,2
 401791c:	100f883a 	mov	r7,r2
 4017920:	e1b7c117 	ldw	r6,-8444(fp)
 4017924:	01402084 	movi	r5,130
 4017928:	010100f4 	movhi	r4,1027
 401792c:	2135aa04 	addi	r4,r4,-10584
 4017930:	40003c80 	call	40003c8 <draw>
				}
				if(gameboard[y][x] == 4)
 4017934:	e0b7c217 	ldw	r2,-8440(fp)
 4017938:	01400504 	movi	r5,20
 401793c:	1009883a 	mov	r4,r2
 4017940:	40191000 	call	4019100 <__mulsi3>
 4017944:	1007883a 	mov	r3,r2
 4017948:	e0b7c117 	ldw	r2,-8444(fp)
 401794c:	1885883a 	add	r2,r3,r2
 4017950:	1085883a 	add	r2,r2,r2
 4017954:	1085883a 	add	r2,r2,r2
 4017958:	e0f7c104 	addi	r3,fp,-8444
 401795c:	1885883a 	add	r2,r3,r2
 4017960:	10879d04 	addi	r2,r2,7796
 4017964:	10800017 	ldw	r2,0(r2)
 4017968:	10800118 	cmpnei	r2,r2,4
 401796c:	1000101e 	bne	r2,zero,40179b0 <main+0x173dc>
				{
					draw(white,COLOR08_BLACK,x,y+2);
 4017970:	e0b7c217 	ldw	r2,-8440(fp)
 4017974:	10c00084 	addi	r3,r2,2
 4017978:	e0b95e04 	addi	r2,fp,-6792
 401797c:	180f883a 	mov	r7,r3
 4017980:	e1b7c117 	ldw	r6,-8444(fp)
 4017984:	000b883a 	mov	r5,zero
 4017988:	1009883a 	mov	r4,r2
 401798c:	40003c80 	call	40003c8 <draw>
					draw(four, COLOR08_GOLD, x, y+2);
 4017990:	e0b7c217 	ldw	r2,-8440(fp)
 4017994:	10800084 	addi	r2,r2,2
 4017998:	100f883a 	mov	r7,r2
 401799c:	e1b7c117 	ldw	r6,-8444(fp)
 40179a0:	01403e04 	movi	r5,248
 40179a4:	010100f4 	movhi	r4,1027
 40179a8:	21372a04 	addi	r4,r4,-9048
 40179ac:	40003c80 	call	40003c8 <draw>
				}

			}
			if(gameboard[y-1][x]==1)
 40179b0:	e0b7c217 	ldw	r2,-8440(fp)
 40179b4:	10bfffc4 	addi	r2,r2,-1
 40179b8:	01400504 	movi	r5,20
 40179bc:	1009883a 	mov	r4,r2
 40179c0:	40191000 	call	4019100 <__mulsi3>
 40179c4:	1007883a 	mov	r3,r2
 40179c8:	e0b7c117 	ldw	r2,-8444(fp)
 40179cc:	1885883a 	add	r2,r3,r2
 40179d0:	1085883a 	add	r2,r2,r2
 40179d4:	1085883a 	add	r2,r2,r2
 40179d8:	e0f7c104 	addi	r3,fp,-8444
 40179dc:	1885883a 	add	r2,r3,r2
 40179e0:	10879d04 	addi	r2,r2,7796
 40179e4:	10800017 	ldw	r2,0(r2)
 40179e8:	10800058 	cmpnei	r2,r2,1
 40179ec:	1000cc1e 	bne	r2,zero,4017d20 <main+0x1774c>
			{
				//printf("top number before %i\n", gameboard[y-1][x]);
				//printf("top number before %i\n", gameboard[y][x]);
				draw(white,COLOR08_BLACK,x,y+1);
 40179f0:	e0b7c217 	ldw	r2,-8440(fp)
 40179f4:	10c00044 	addi	r3,r2,1
 40179f8:	e0b95e04 	addi	r2,fp,-6792
 40179fc:	180f883a 	mov	r7,r3
 4017a00:	e1b7c117 	ldw	r6,-8444(fp)
 4017a04:	000b883a 	mov	r5,zero
 4017a08:	1009883a 	mov	r4,r2
 4017a0c:	40003c80 	call	40003c8 <draw>
				gameboard[y][x]=gameboard[y-1][x];
 4017a10:	e0b7c217 	ldw	r2,-8440(fp)
 4017a14:	10bfffc4 	addi	r2,r2,-1
 4017a18:	01400504 	movi	r5,20
 4017a1c:	1009883a 	mov	r4,r2
 4017a20:	40191000 	call	4019100 <__mulsi3>
 4017a24:	1007883a 	mov	r3,r2
 4017a28:	e0b7c117 	ldw	r2,-8444(fp)
 4017a2c:	1885883a 	add	r2,r3,r2
 4017a30:	1085883a 	add	r2,r2,r2
 4017a34:	1085883a 	add	r2,r2,r2
 4017a38:	e0f7c104 	addi	r3,fp,-8444
 4017a3c:	1885883a 	add	r2,r3,r2
 4017a40:	10879d04 	addi	r2,r2,7796
 4017a44:	14000017 	ldw	r16,0(r2)
 4017a48:	e0b7c217 	ldw	r2,-8440(fp)
 4017a4c:	01400504 	movi	r5,20
 4017a50:	1009883a 	mov	r4,r2
 4017a54:	40191000 	call	4019100 <__mulsi3>
 4017a58:	1007883a 	mov	r3,r2
 4017a5c:	e0b7c117 	ldw	r2,-8444(fp)
 4017a60:	1885883a 	add	r2,r3,r2
 4017a64:	1085883a 	add	r2,r2,r2
 4017a68:	1085883a 	add	r2,r2,r2
 4017a6c:	e0f7c104 	addi	r3,fp,-8444
 4017a70:	1885883a 	add	r2,r3,r2
 4017a74:	10879d04 	addi	r2,r2,7796
 4017a78:	14000015 	stw	r16,0(r2)
				gameboard[y-1][x]=-1;
 4017a7c:	e0b7c217 	ldw	r2,-8440(fp)
 4017a80:	10bfffc4 	addi	r2,r2,-1
 4017a84:	01400504 	movi	r5,20
 4017a88:	1009883a 	mov	r4,r2
 4017a8c:	40191000 	call	4019100 <__mulsi3>
 4017a90:	1007883a 	mov	r3,r2
 4017a94:	e0b7c117 	ldw	r2,-8444(fp)
 4017a98:	1885883a 	add	r2,r3,r2
 4017a9c:	1085883a 	add	r2,r2,r2
 4017aa0:	1085883a 	add	r2,r2,r2
 4017aa4:	e0f7c104 	addi	r3,fp,-8444
 4017aa8:	1885883a 	add	r2,r3,r2
 4017aac:	10879d04 	addi	r2,r2,7796
 4017ab0:	00ffffc4 	movi	r3,-1
 4017ab4:	10c00015 	stw	r3,0(r2)
				//printf("top number after %i\n", gameboard[y-1][x]);
				//printf("top number after %i\n", gameboard[y][x]);
				if(gameboard[y][x] == 0)
 4017ab8:	e0b7c217 	ldw	r2,-8440(fp)
 4017abc:	01400504 	movi	r5,20
 4017ac0:	1009883a 	mov	r4,r2
 4017ac4:	40191000 	call	4019100 <__mulsi3>
 4017ac8:	1007883a 	mov	r3,r2
 4017acc:	e0b7c117 	ldw	r2,-8444(fp)
 4017ad0:	1885883a 	add	r2,r3,r2
 4017ad4:	1085883a 	add	r2,r2,r2
 4017ad8:	1085883a 	add	r2,r2,r2
 4017adc:	e0f7c104 	addi	r3,fp,-8444
 4017ae0:	1885883a 	add	r2,r3,r2
 4017ae4:	10879d04 	addi	r2,r2,7796
 4017ae8:	10800017 	ldw	r2,0(r2)
 4017aec:	1000101e 	bne	r2,zero,4017b30 <main+0x1755c>
				{
					draw(white,COLOR08_BLACK,x,y+2);
 4017af0:	e0b7c217 	ldw	r2,-8440(fp)
 4017af4:	10c00084 	addi	r3,r2,2
 4017af8:	e0b95e04 	addi	r2,fp,-6792
 4017afc:	180f883a 	mov	r7,r3
 4017b00:	e1b7c117 	ldw	r6,-8444(fp)
 4017b04:	000b883a 	mov	r5,zero
 4017b08:	1009883a 	mov	r4,r2
 4017b0c:	40003c80 	call	40003c8 <draw>
					draw(zero, COLOR08_CYAN, x, y+2);
 4017b10:	e0b7c217 	ldw	r2,-8440(fp)
 4017b14:	10800084 	addi	r2,r2,2
 4017b18:	100f883a 	mov	r7,r2
 4017b1c:	e1b7c117 	ldw	r6,-8444(fp)
 4017b20:	014007c4 	movi	r5,31
 4017b24:	010100f4 	movhi	r4,1027
 4017b28:	21312a04 	addi	r4,r4,-15192
 4017b2c:	40003c80 	call	40003c8 <draw>
				}
				if(gameboard[y][x] == 1)
 4017b30:	e0b7c217 	ldw	r2,-8440(fp)
 4017b34:	01400504 	movi	r5,20
 4017b38:	1009883a 	mov	r4,r2
 4017b3c:	40191000 	call	4019100 <__mulsi3>
 4017b40:	1007883a 	mov	r3,r2
 4017b44:	e0b7c117 	ldw	r2,-8444(fp)
 4017b48:	1885883a 	add	r2,r3,r2
 4017b4c:	1085883a 	add	r2,r2,r2
 4017b50:	1085883a 	add	r2,r2,r2
 4017b54:	e0f7c104 	addi	r3,fp,-8444
 4017b58:	1885883a 	add	r2,r3,r2
 4017b5c:	10879d04 	addi	r2,r2,7796
 4017b60:	10800017 	ldw	r2,0(r2)
 4017b64:	10800058 	cmpnei	r2,r2,1
 4017b68:	1000101e 	bne	r2,zero,4017bac <main+0x175d8>
				{
					draw(white,COLOR08_BLACK,x,y+2);
 4017b6c:	e0b7c217 	ldw	r2,-8440(fp)
 4017b70:	10c00084 	addi	r3,r2,2
 4017b74:	e0b95e04 	addi	r2,fp,-6792
 4017b78:	180f883a 	mov	r7,r3
 4017b7c:	e1b7c117 	ldw	r6,-8444(fp)
 4017b80:	000b883a 	mov	r5,zero
 4017b84:	1009883a 	mov	r4,r2
 4017b88:	40003c80 	call	40003c8 <draw>
					draw(one, COLOR08_GREEN , x, y+2);
 4017b8c:	e0b7c217 	ldw	r2,-8440(fp)
 4017b90:	10800084 	addi	r2,r2,2
 4017b94:	100f883a 	mov	r7,r2
 4017b98:	e1b7c117 	ldw	r6,-8444(fp)
 4017b9c:	01400404 	movi	r5,16
 4017ba0:	010100f4 	movhi	r4,1027
 4017ba4:	2132aa04 	addi	r4,r4,-13656
 4017ba8:	40003c80 	call	40003c8 <draw>
				}
				if(gameboard[y][x] == 2)
 4017bac:	e0b7c217 	ldw	r2,-8440(fp)
 4017bb0:	01400504 	movi	r5,20
 4017bb4:	1009883a 	mov	r4,r2
 4017bb8:	40191000 	call	4019100 <__mulsi3>
 4017bbc:	1007883a 	mov	r3,r2
 4017bc0:	e0b7c117 	ldw	r2,-8444(fp)
 4017bc4:	1885883a 	add	r2,r3,r2
 4017bc8:	1085883a 	add	r2,r2,r2
 4017bcc:	1085883a 	add	r2,r2,r2
 4017bd0:	e0f7c104 	addi	r3,fp,-8444
 4017bd4:	1885883a 	add	r2,r3,r2
 4017bd8:	10879d04 	addi	r2,r2,7796
 4017bdc:	10800017 	ldw	r2,0(r2)
 4017be0:	10800098 	cmpnei	r2,r2,2
 4017be4:	1000101e 	bne	r2,zero,4017c28 <main+0x17654>
				{
					draw(white,COLOR08_BLACK,x,y+2);
 4017be8:	e0b7c217 	ldw	r2,-8440(fp)
 4017bec:	10c00084 	addi	r3,r2,2
 4017bf0:	e0b95e04 	addi	r2,fp,-6792
 4017bf4:	180f883a 	mov	r7,r3
 4017bf8:	e1b7c117 	ldw	r6,-8444(fp)
 4017bfc:	000b883a 	mov	r5,zero
 4017c00:	1009883a 	mov	r4,r2
 4017c04:	40003c80 	call	40003c8 <draw>
					draw(two, COLOR08_MAGENTA , x, y+2);
 4017c08:	e0b7c217 	ldw	r2,-8440(fp)
 4017c0c:	10800084 	addi	r2,r2,2
 4017c10:	100f883a 	mov	r7,r2
 4017c14:	e1b7c117 	ldw	r6,-8444(fp)
 4017c18:	014038c4 	movi	r5,227
 4017c1c:	010100f4 	movhi	r4,1027
 4017c20:	21342a04 	addi	r4,r4,-12120
 4017c24:	40003c80 	call	40003c8 <draw>
				}
				if(gameboard[y][x] == 3)
 4017c28:	e0b7c217 	ldw	r2,-8440(fp)
 4017c2c:	01400504 	movi	r5,20
 4017c30:	1009883a 	mov	r4,r2
 4017c34:	40191000 	call	4019100 <__mulsi3>
 4017c38:	1007883a 	mov	r3,r2
 4017c3c:	e0b7c117 	ldw	r2,-8444(fp)
 4017c40:	1885883a 	add	r2,r3,r2
 4017c44:	1085883a 	add	r2,r2,r2
 4017c48:	1085883a 	add	r2,r2,r2
 4017c4c:	e0f7c104 	addi	r3,fp,-8444
 4017c50:	1885883a 	add	r2,r3,r2
 4017c54:	10879d04 	addi	r2,r2,7796
 4017c58:	10800017 	ldw	r2,0(r2)
 4017c5c:	108000d8 	cmpnei	r2,r2,3
 4017c60:	1000101e 	bne	r2,zero,4017ca4 <main+0x176d0>
				{
					draw(white,COLOR08_BLACK,x,y+2);
 4017c64:	e0b7c217 	ldw	r2,-8440(fp)
 4017c68:	10c00084 	addi	r3,r2,2
 4017c6c:	e0b95e04 	addi	r2,fp,-6792
 4017c70:	180f883a 	mov	r7,r3
 4017c74:	e1b7c117 	ldw	r6,-8444(fp)
 4017c78:	000b883a 	mov	r5,zero
 4017c7c:	1009883a 	mov	r4,r2
 4017c80:	40003c80 	call	40003c8 <draw>
					draw(three, COLOR08_PURPLE, x, y+2);
 4017c84:	e0b7c217 	ldw	r2,-8440(fp)
 4017c88:	10800084 	addi	r2,r2,2
 4017c8c:	100f883a 	mov	r7,r2
 4017c90:	e1b7c117 	ldw	r6,-8444(fp)
 4017c94:	01402084 	movi	r5,130
 4017c98:	010100f4 	movhi	r4,1027
 4017c9c:	2135aa04 	addi	r4,r4,-10584
 4017ca0:	40003c80 	call	40003c8 <draw>
				}
				if(gameboard[y][x] == 4)
 4017ca4:	e0b7c217 	ldw	r2,-8440(fp)
 4017ca8:	01400504 	movi	r5,20
 4017cac:	1009883a 	mov	r4,r2
 4017cb0:	40191000 	call	4019100 <__mulsi3>
 4017cb4:	1007883a 	mov	r3,r2
 4017cb8:	e0b7c117 	ldw	r2,-8444(fp)
 4017cbc:	1885883a 	add	r2,r3,r2
 4017cc0:	1085883a 	add	r2,r2,r2
 4017cc4:	1085883a 	add	r2,r2,r2
 4017cc8:	e0f7c104 	addi	r3,fp,-8444
 4017ccc:	1885883a 	add	r2,r3,r2
 4017cd0:	10879d04 	addi	r2,r2,7796
 4017cd4:	10800017 	ldw	r2,0(r2)
 4017cd8:	10800118 	cmpnei	r2,r2,4
 4017cdc:	1000101e 	bne	r2,zero,4017d20 <main+0x1774c>
				{
					draw(white,COLOR08_BLACK,x,y+2);
 4017ce0:	e0b7c217 	ldw	r2,-8440(fp)
 4017ce4:	10c00084 	addi	r3,r2,2
 4017ce8:	e0b95e04 	addi	r2,fp,-6792
 4017cec:	180f883a 	mov	r7,r3
 4017cf0:	e1b7c117 	ldw	r6,-8444(fp)
 4017cf4:	000b883a 	mov	r5,zero
 4017cf8:	1009883a 	mov	r4,r2
 4017cfc:	40003c80 	call	40003c8 <draw>
					draw(four, COLOR08_GOLD, x, y+2);
 4017d00:	e0b7c217 	ldw	r2,-8440(fp)
 4017d04:	10800084 	addi	r2,r2,2
 4017d08:	100f883a 	mov	r7,r2
 4017d0c:	e1b7c117 	ldw	r6,-8444(fp)
 4017d10:	01403e04 	movi	r5,248
 4017d14:	010100f4 	movhi	r4,1027
 4017d18:	21372a04 	addi	r4,r4,-9048
 4017d1c:	40003c80 	call	40003c8 <draw>
				}
			}
			if(gameboard[y-1][x]==0)
 4017d20:	e0b7c217 	ldw	r2,-8440(fp)
 4017d24:	10bfffc4 	addi	r2,r2,-1
 4017d28:	01400504 	movi	r5,20
 4017d2c:	1009883a 	mov	r4,r2
 4017d30:	40191000 	call	4019100 <__mulsi3>
 4017d34:	1007883a 	mov	r3,r2
 4017d38:	e0b7c117 	ldw	r2,-8444(fp)
 4017d3c:	1885883a 	add	r2,r3,r2
 4017d40:	1085883a 	add	r2,r2,r2
 4017d44:	1085883a 	add	r2,r2,r2
 4017d48:	e0f7c104 	addi	r3,fp,-8444
 4017d4c:	1885883a 	add	r2,r3,r2
 4017d50:	10879d04 	addi	r2,r2,7796
 4017d54:	10800017 	ldw	r2,0(r2)
 4017d58:	1000cc1e 	bne	r2,zero,401808c <main+0x17ab8>
			{
				//printf("top number before %i\n", gameboard[y-1][x]);
				//printf("top number before %i\n", gameboard[y][x]);
				draw(white,COLOR08_BLACK,x,y+1);
 4017d5c:	e0b7c217 	ldw	r2,-8440(fp)
 4017d60:	10c00044 	addi	r3,r2,1
 4017d64:	e0b95e04 	addi	r2,fp,-6792
 4017d68:	180f883a 	mov	r7,r3
 4017d6c:	e1b7c117 	ldw	r6,-8444(fp)
 4017d70:	000b883a 	mov	r5,zero
 4017d74:	1009883a 	mov	r4,r2
 4017d78:	40003c80 	call	40003c8 <draw>
				gameboard[y][x]=gameboard[y-1][x];
 4017d7c:	e0b7c217 	ldw	r2,-8440(fp)
 4017d80:	10bfffc4 	addi	r2,r2,-1
 4017d84:	01400504 	movi	r5,20
 4017d88:	1009883a 	mov	r4,r2
 4017d8c:	40191000 	call	4019100 <__mulsi3>
 4017d90:	1007883a 	mov	r3,r2
 4017d94:	e0b7c117 	ldw	r2,-8444(fp)
 4017d98:	1885883a 	add	r2,r3,r2
 4017d9c:	1085883a 	add	r2,r2,r2
 4017da0:	1085883a 	add	r2,r2,r2
 4017da4:	e0f7c104 	addi	r3,fp,-8444
 4017da8:	1885883a 	add	r2,r3,r2
 4017dac:	10879d04 	addi	r2,r2,7796
 4017db0:	14000017 	ldw	r16,0(r2)
 4017db4:	e0b7c217 	ldw	r2,-8440(fp)
 4017db8:	01400504 	movi	r5,20
 4017dbc:	1009883a 	mov	r4,r2
 4017dc0:	40191000 	call	4019100 <__mulsi3>
 4017dc4:	1007883a 	mov	r3,r2
 4017dc8:	e0b7c117 	ldw	r2,-8444(fp)
 4017dcc:	1885883a 	add	r2,r3,r2
 4017dd0:	1085883a 	add	r2,r2,r2
 4017dd4:	1085883a 	add	r2,r2,r2
 4017dd8:	e0f7c104 	addi	r3,fp,-8444
 4017ddc:	1885883a 	add	r2,r3,r2
 4017de0:	10879d04 	addi	r2,r2,7796
 4017de4:	14000015 	stw	r16,0(r2)
				gameboard[y-1][x]=-1;
 4017de8:	e0b7c217 	ldw	r2,-8440(fp)
 4017dec:	10bfffc4 	addi	r2,r2,-1
 4017df0:	01400504 	movi	r5,20
 4017df4:	1009883a 	mov	r4,r2
 4017df8:	40191000 	call	4019100 <__mulsi3>
 4017dfc:	1007883a 	mov	r3,r2
 4017e00:	e0b7c117 	ldw	r2,-8444(fp)
 4017e04:	1885883a 	add	r2,r3,r2
 4017e08:	1085883a 	add	r2,r2,r2
 4017e0c:	1085883a 	add	r2,r2,r2
 4017e10:	e0f7c104 	addi	r3,fp,-8444
 4017e14:	1885883a 	add	r2,r3,r2
 4017e18:	10879d04 	addi	r2,r2,7796
 4017e1c:	00ffffc4 	movi	r3,-1
 4017e20:	10c00015 	stw	r3,0(r2)
				//printf("top number after %i\n", gameboard[y-1][x]);
				//printf("top number after %i\n", gameboard[y][x]);
				if(gameboard[y][x] == 0)
 4017e24:	e0b7c217 	ldw	r2,-8440(fp)
 4017e28:	01400504 	movi	r5,20
 4017e2c:	1009883a 	mov	r4,r2
 4017e30:	40191000 	call	4019100 <__mulsi3>
 4017e34:	1007883a 	mov	r3,r2
 4017e38:	e0b7c117 	ldw	r2,-8444(fp)
 4017e3c:	1885883a 	add	r2,r3,r2
 4017e40:	1085883a 	add	r2,r2,r2
 4017e44:	1085883a 	add	r2,r2,r2
 4017e48:	e0f7c104 	addi	r3,fp,-8444
 4017e4c:	1885883a 	add	r2,r3,r2
 4017e50:	10879d04 	addi	r2,r2,7796
 4017e54:	10800017 	ldw	r2,0(r2)
 4017e58:	1000101e 	bne	r2,zero,4017e9c <main+0x178c8>
				{
					draw(white,COLOR08_BLACK,x,y+2);
 4017e5c:	e0b7c217 	ldw	r2,-8440(fp)
 4017e60:	10c00084 	addi	r3,r2,2
 4017e64:	e0b95e04 	addi	r2,fp,-6792
 4017e68:	180f883a 	mov	r7,r3
 4017e6c:	e1b7c117 	ldw	r6,-8444(fp)
 4017e70:	000b883a 	mov	r5,zero
 4017e74:	1009883a 	mov	r4,r2
 4017e78:	40003c80 	call	40003c8 <draw>
					draw(zero, COLOR08_CYAN, x, y+2);
 4017e7c:	e0b7c217 	ldw	r2,-8440(fp)
 4017e80:	10800084 	addi	r2,r2,2
 4017e84:	100f883a 	mov	r7,r2
 4017e88:	e1b7c117 	ldw	r6,-8444(fp)
 4017e8c:	014007c4 	movi	r5,31
 4017e90:	010100f4 	movhi	r4,1027
 4017e94:	21312a04 	addi	r4,r4,-15192
 4017e98:	40003c80 	call	40003c8 <draw>
				}
				if(gameboard[y][x] == 1)
 4017e9c:	e0b7c217 	ldw	r2,-8440(fp)
 4017ea0:	01400504 	movi	r5,20
 4017ea4:	1009883a 	mov	r4,r2
 4017ea8:	40191000 	call	4019100 <__mulsi3>
 4017eac:	1007883a 	mov	r3,r2
 4017eb0:	e0b7c117 	ldw	r2,-8444(fp)
 4017eb4:	1885883a 	add	r2,r3,r2
 4017eb8:	1085883a 	add	r2,r2,r2
 4017ebc:	1085883a 	add	r2,r2,r2
 4017ec0:	e0f7c104 	addi	r3,fp,-8444
 4017ec4:	1885883a 	add	r2,r3,r2
 4017ec8:	10879d04 	addi	r2,r2,7796
 4017ecc:	10800017 	ldw	r2,0(r2)
 4017ed0:	10800058 	cmpnei	r2,r2,1
 4017ed4:	1000101e 	bne	r2,zero,4017f18 <main+0x17944>
				{
					draw(white,COLOR08_BLACK,x,y+2);
 4017ed8:	e0b7c217 	ldw	r2,-8440(fp)
 4017edc:	10c00084 	addi	r3,r2,2
 4017ee0:	e0b95e04 	addi	r2,fp,-6792
 4017ee4:	180f883a 	mov	r7,r3
 4017ee8:	e1b7c117 	ldw	r6,-8444(fp)
 4017eec:	000b883a 	mov	r5,zero
 4017ef0:	1009883a 	mov	r4,r2
 4017ef4:	40003c80 	call	40003c8 <draw>
					draw(one, COLOR08_GREEN , x, y+2);
 4017ef8:	e0b7c217 	ldw	r2,-8440(fp)
 4017efc:	10800084 	addi	r2,r2,2
 4017f00:	100f883a 	mov	r7,r2
 4017f04:	e1b7c117 	ldw	r6,-8444(fp)
 4017f08:	01400404 	movi	r5,16
 4017f0c:	010100f4 	movhi	r4,1027
 4017f10:	2132aa04 	addi	r4,r4,-13656
 4017f14:	40003c80 	call	40003c8 <draw>
				}
				if(gameboard[y][x] == 2)
 4017f18:	e0b7c217 	ldw	r2,-8440(fp)
 4017f1c:	01400504 	movi	r5,20
 4017f20:	1009883a 	mov	r4,r2
 4017f24:	40191000 	call	4019100 <__mulsi3>
 4017f28:	1007883a 	mov	r3,r2
 4017f2c:	e0b7c117 	ldw	r2,-8444(fp)
 4017f30:	1885883a 	add	r2,r3,r2
 4017f34:	1085883a 	add	r2,r2,r2
 4017f38:	1085883a 	add	r2,r2,r2
 4017f3c:	e0f7c104 	addi	r3,fp,-8444
 4017f40:	1885883a 	add	r2,r3,r2
 4017f44:	10879d04 	addi	r2,r2,7796
 4017f48:	10800017 	ldw	r2,0(r2)
 4017f4c:	10800098 	cmpnei	r2,r2,2
 4017f50:	1000101e 	bne	r2,zero,4017f94 <main+0x179c0>
				{
					draw(white,COLOR08_BLACK,x,y+2);
 4017f54:	e0b7c217 	ldw	r2,-8440(fp)
 4017f58:	10c00084 	addi	r3,r2,2
 4017f5c:	e0b95e04 	addi	r2,fp,-6792
 4017f60:	180f883a 	mov	r7,r3
 4017f64:	e1b7c117 	ldw	r6,-8444(fp)
 4017f68:	000b883a 	mov	r5,zero
 4017f6c:	1009883a 	mov	r4,r2
 4017f70:	40003c80 	call	40003c8 <draw>
					draw(two, COLOR08_MAGENTA , x, y+2);
 4017f74:	e0b7c217 	ldw	r2,-8440(fp)
 4017f78:	10800084 	addi	r2,r2,2
 4017f7c:	100f883a 	mov	r7,r2
 4017f80:	e1b7c117 	ldw	r6,-8444(fp)
 4017f84:	014038c4 	movi	r5,227
 4017f88:	010100f4 	movhi	r4,1027
 4017f8c:	21342a04 	addi	r4,r4,-12120
 4017f90:	40003c80 	call	40003c8 <draw>
				}
				if(gameboard[y][x] == 3)
 4017f94:	e0b7c217 	ldw	r2,-8440(fp)
 4017f98:	01400504 	movi	r5,20
 4017f9c:	1009883a 	mov	r4,r2
 4017fa0:	40191000 	call	4019100 <__mulsi3>
 4017fa4:	1007883a 	mov	r3,r2
 4017fa8:	e0b7c117 	ldw	r2,-8444(fp)
 4017fac:	1885883a 	add	r2,r3,r2
 4017fb0:	1085883a 	add	r2,r2,r2
 4017fb4:	1085883a 	add	r2,r2,r2
 4017fb8:	e0f7c104 	addi	r3,fp,-8444
 4017fbc:	1885883a 	add	r2,r3,r2
 4017fc0:	10879d04 	addi	r2,r2,7796
 4017fc4:	10800017 	ldw	r2,0(r2)
 4017fc8:	108000d8 	cmpnei	r2,r2,3
 4017fcc:	1000101e 	bne	r2,zero,4018010 <main+0x17a3c>
				{
					draw(white,COLOR08_BLACK,x,y+2);
 4017fd0:	e0b7c217 	ldw	r2,-8440(fp)
 4017fd4:	10c00084 	addi	r3,r2,2
 4017fd8:	e0b95e04 	addi	r2,fp,-6792
 4017fdc:	180f883a 	mov	r7,r3
 4017fe0:	e1b7c117 	ldw	r6,-8444(fp)
 4017fe4:	000b883a 	mov	r5,zero
 4017fe8:	1009883a 	mov	r4,r2
 4017fec:	40003c80 	call	40003c8 <draw>
					draw(three, COLOR08_PURPLE, x, y+2);
 4017ff0:	e0b7c217 	ldw	r2,-8440(fp)
 4017ff4:	10800084 	addi	r2,r2,2
 4017ff8:	100f883a 	mov	r7,r2
 4017ffc:	e1b7c117 	ldw	r6,-8444(fp)
 4018000:	01402084 	movi	r5,130
 4018004:	010100f4 	movhi	r4,1027
 4018008:	2135aa04 	addi	r4,r4,-10584
 401800c:	40003c80 	call	40003c8 <draw>
				}
				if(gameboard[y][x] == 4)
 4018010:	e0b7c217 	ldw	r2,-8440(fp)
 4018014:	01400504 	movi	r5,20
 4018018:	1009883a 	mov	r4,r2
 401801c:	40191000 	call	4019100 <__mulsi3>
 4018020:	1007883a 	mov	r3,r2
 4018024:	e0b7c117 	ldw	r2,-8444(fp)
 4018028:	1885883a 	add	r2,r3,r2
 401802c:	1085883a 	add	r2,r2,r2
 4018030:	1085883a 	add	r2,r2,r2
 4018034:	e0f7c104 	addi	r3,fp,-8444
 4018038:	1885883a 	add	r2,r3,r2
 401803c:	10879d04 	addi	r2,r2,7796
 4018040:	10800017 	ldw	r2,0(r2)
 4018044:	10800118 	cmpnei	r2,r2,4
 4018048:	1000101e 	bne	r2,zero,401808c <main+0x17ab8>
				{
					draw(white,COLOR08_BLACK,x,y+2);
 401804c:	e0b7c217 	ldw	r2,-8440(fp)
 4018050:	10c00084 	addi	r3,r2,2
 4018054:	e0b95e04 	addi	r2,fp,-6792
 4018058:	180f883a 	mov	r7,r3
 401805c:	e1b7c117 	ldw	r6,-8444(fp)
 4018060:	000b883a 	mov	r5,zero
 4018064:	1009883a 	mov	r4,r2
 4018068:	40003c80 	call	40003c8 <draw>
					draw(four, COLOR08_GOLD, x, y+2);
 401806c:	e0b7c217 	ldw	r2,-8440(fp)
 4018070:	10800084 	addi	r2,r2,2
 4018074:	100f883a 	mov	r7,r2
 4018078:	e1b7c117 	ldw	r6,-8444(fp)
 401807c:	01403e04 	movi	r5,248
 4018080:	010100f4 	movhi	r4,1027
 4018084:	21372a04 	addi	r4,r4,-9048
 4018088:	40003c80 	call	40003c8 <draw>
}
for(z=0;z<7;z++)
{
for(x=0;x<18;x++)
{
	for(y=0;y<8;y++)
 401808c:	e0b7c217 	ldw	r2,-8440(fp)
 4018090:	10800044 	addi	r2,r2,1
 4018094:	e0b7c215 	stw	r2,-8440(fp)
 4018098:	e0b7c217 	ldw	r2,-8440(fp)
 401809c:	10800210 	cmplti	r2,r2,8
 40180a0:	1035bd1e 	bne	r2,zero,4015798 <__alt_data_end+0xfc015798>
		/////////////
	}
}
for(z=0;z<7;z++)
{
for(x=0;x<18;x++)
 40180a4:	e0b7c117 	ldw	r2,-8444(fp)
 40180a8:	10800044 	addi	r2,r2,1
 40180ac:	e0b7c115 	stw	r2,-8444(fp)
 40180b0:	e0b7c117 	ldw	r2,-8444(fp)
 40180b4:	10800490 	cmplti	r2,r2,18
 40180b8:	1035b51e 	bne	r2,zero,4015790 <__alt_data_end+0xfc015790>

		}
		/////////////
	}
}
for(z=0;z<7;z++)
 40180bc:	e0b7c317 	ldw	r2,-8436(fp)
 40180c0:	10800044 	addi	r2,r2,1
 40180c4:	e0b7c315 	stw	r2,-8436(fp)
 40180c8:	e0b7c317 	ldw	r2,-8436(fp)
 40180cc:	108001d0 	cmplti	r2,r2,7
 40180d0:	1035ad1e 	bne	r2,zero,4015788 <__alt_data_end+0xfc015788>
		}
	}
}
}
//Delay_Medium();
for(x=0;x<18;x++)
 40180d4:	e037c115 	stw	zero,-8444(fp)
 40180d8:	00002206 	br	4018164 <main+0x17b90>
{
	for(y=0;y<8;y++)
 40180dc:	e037c215 	stw	zero,-8440(fp)
 40180e0:	00001a06 	br	401814c <main+0x17b78>
	{

		if(gameboard[y][x]==-1)
 40180e4:	e0b7c217 	ldw	r2,-8440(fp)
 40180e8:	01400504 	movi	r5,20
 40180ec:	1009883a 	mov	r4,r2
 40180f0:	40191000 	call	4019100 <__mulsi3>
 40180f4:	1007883a 	mov	r3,r2
 40180f8:	e0b7c117 	ldw	r2,-8444(fp)
 40180fc:	1885883a 	add	r2,r3,r2
 4018100:	1085883a 	add	r2,r2,r2
 4018104:	1085883a 	add	r2,r2,r2
 4018108:	e0f7c104 	addi	r3,fp,-8444
 401810c:	1885883a 	add	r2,r3,r2
 4018110:	10879d04 	addi	r2,r2,7796
 4018114:	10800017 	ldw	r2,0(r2)
 4018118:	10bfffd8 	cmpnei	r2,r2,-1
 401811c:	1000081e 	bne	r2,zero,4018140 <main+0x17b6c>
		{
			draw(white,COLOR08_RED,x,y+2);
 4018120:	e0b7c217 	ldw	r2,-8440(fp)
 4018124:	10c00084 	addi	r3,r2,2
 4018128:	e0b95e04 	addi	r2,fp,-6792
 401812c:	180f883a 	mov	r7,r3
 4018130:	e1b7c117 	ldw	r6,-8444(fp)
 4018134:	01403804 	movi	r5,224
 4018138:	1009883a 	mov	r4,r2
 401813c:	40003c80 	call	40003c8 <draw>
}
}
//Delay_Medium();
for(x=0;x<18;x++)
{
	for(y=0;y<8;y++)
 4018140:	e0b7c217 	ldw	r2,-8440(fp)
 4018144:	10800044 	addi	r2,r2,1
 4018148:	e0b7c215 	stw	r2,-8440(fp)
 401814c:	e0b7c217 	ldw	r2,-8440(fp)
 4018150:	10800210 	cmplti	r2,r2,8
 4018154:	103fe31e 	bne	r2,zero,40180e4 <__alt_data_end+0xfc0180e4>
		}
	}
}
}
//Delay_Medium();
for(x=0;x<18;x++)
 4018158:	e0b7c117 	ldw	r2,-8444(fp)
 401815c:	10800044 	addi	r2,r2,1
 4018160:	e0b7c115 	stw	r2,-8444(fp)
 4018164:	e0b7c117 	ldw	r2,-8444(fp)
 4018168:	10800490 	cmplti	r2,r2,18
 401816c:	103fdb1e 	bne	r2,zero,40180dc <__alt_data_end+0xfc0180dc>
			draw(white,COLOR08_RED,x,y+2);
		}
	}
}
//Delay_Medium();
for(x=0;x<18;x++)
 4018170:	e037c115 	stw	zero,-8444(fp)
 4018174:	0000c206 	br	4018480 <main+0x17eac>
{
	for(y=0;y<8;y++)
 4018178:	e037c215 	stw	zero,-8440(fp)
 401817c:	0000ba06 	br	4018468 <main+0x17e94>
	{
		nn = rand()%k;
 4018180:	40194f00 	call	40194f0 <rand>
 4018184:	e177c917 	ldw	r5,-8412(fp)
 4018188:	1009883a 	mov	r4,r2
 401818c:	4018fd00 	call	4018fd0 <__modsi3>
 4018190:	e0b7ca15 	stw	r2,-8408(fp)
		if(gameboard[y][x]==-1)
 4018194:	e0b7c217 	ldw	r2,-8440(fp)
 4018198:	01400504 	movi	r5,20
 401819c:	1009883a 	mov	r4,r2
 40181a0:	40191000 	call	4019100 <__mulsi3>
 40181a4:	1007883a 	mov	r3,r2
 40181a8:	e0b7c117 	ldw	r2,-8444(fp)
 40181ac:	1885883a 	add	r2,r3,r2
 40181b0:	1085883a 	add	r2,r2,r2
 40181b4:	1085883a 	add	r2,r2,r2
 40181b8:	e0f7c104 	addi	r3,fp,-8444
 40181bc:	1885883a 	add	r2,r3,r2
 40181c0:	10879d04 	addi	r2,r2,7796
 40181c4:	10800017 	ldw	r2,0(r2)
 40181c8:	10bfffd8 	cmpnei	r2,r2,-1
 40181cc:	1000a31e 	bne	r2,zero,401845c <main+0x17e88>
		{
			gameboard[y][x]=nn;
 40181d0:	e0b7c217 	ldw	r2,-8440(fp)
 40181d4:	01400504 	movi	r5,20
 40181d8:	1009883a 	mov	r4,r2
 40181dc:	40191000 	call	4019100 <__mulsi3>
 40181e0:	1007883a 	mov	r3,r2
 40181e4:	e0b7c117 	ldw	r2,-8444(fp)
 40181e8:	1885883a 	add	r2,r3,r2
 40181ec:	1085883a 	add	r2,r2,r2
 40181f0:	1085883a 	add	r2,r2,r2
 40181f4:	e0f7c104 	addi	r3,fp,-8444
 40181f8:	1885883a 	add	r2,r3,r2
 40181fc:	10879d04 	addi	r2,r2,7796
 4018200:	e0f7ca17 	ldw	r3,-8408(fp)
 4018204:	10c00015 	stw	r3,0(r2)
			if (nn == 0)
 4018208:	e0b7ca17 	ldw	r2,-8408(fp)
 401820c:	1000101e 	bne	r2,zero,4018250 <main+0x17c7c>
			{
				draw(white,COLOR08_BLACK,x,y+2);
 4018210:	e0b7c217 	ldw	r2,-8440(fp)
 4018214:	10c00084 	addi	r3,r2,2
 4018218:	e0b95e04 	addi	r2,fp,-6792
 401821c:	180f883a 	mov	r7,r3
 4018220:	e1b7c117 	ldw	r6,-8444(fp)
 4018224:	000b883a 	mov	r5,zero
 4018228:	1009883a 	mov	r4,r2
 401822c:	40003c80 	call	40003c8 <draw>
				draw(zero, COLOR08_CYAN, x, y+2);
 4018230:	e0b7c217 	ldw	r2,-8440(fp)
 4018234:	10800084 	addi	r2,r2,2
 4018238:	100f883a 	mov	r7,r2
 401823c:	e1b7c117 	ldw	r6,-8444(fp)
 4018240:	014007c4 	movi	r5,31
 4018244:	010100f4 	movhi	r4,1027
 4018248:	21312a04 	addi	r4,r4,-15192
 401824c:	40003c80 	call	40003c8 <draw>
			}
			if (nn == 1)
 4018250:	e0b7ca17 	ldw	r2,-8408(fp)
 4018254:	10800058 	cmpnei	r2,r2,1
 4018258:	1000101e 	bne	r2,zero,401829c <main+0x17cc8>
			{
				draw(white,COLOR08_BLACK,x,y+2);
 401825c:	e0b7c217 	ldw	r2,-8440(fp)
 4018260:	10c00084 	addi	r3,r2,2
 4018264:	e0b95e04 	addi	r2,fp,-6792
 4018268:	180f883a 	mov	r7,r3
 401826c:	e1b7c117 	ldw	r6,-8444(fp)
 4018270:	000b883a 	mov	r5,zero
 4018274:	1009883a 	mov	r4,r2
 4018278:	40003c80 	call	40003c8 <draw>
				draw(one, COLOR08_GREEN , x, y+2);
 401827c:	e0b7c217 	ldw	r2,-8440(fp)
 4018280:	10800084 	addi	r2,r2,2
 4018284:	100f883a 	mov	r7,r2
 4018288:	e1b7c117 	ldw	r6,-8444(fp)
 401828c:	01400404 	movi	r5,16
 4018290:	010100f4 	movhi	r4,1027
 4018294:	2132aa04 	addi	r4,r4,-13656
 4018298:	40003c80 	call	40003c8 <draw>
			}
			if (nn == 2)
 401829c:	e0b7ca17 	ldw	r2,-8408(fp)
 40182a0:	10800098 	cmpnei	r2,r2,2
 40182a4:	1000101e 	bne	r2,zero,40182e8 <main+0x17d14>
			{
				draw(white,COLOR08_BLACK,x,y+2);
 40182a8:	e0b7c217 	ldw	r2,-8440(fp)
 40182ac:	10c00084 	addi	r3,r2,2
 40182b0:	e0b95e04 	addi	r2,fp,-6792
 40182b4:	180f883a 	mov	r7,r3
 40182b8:	e1b7c117 	ldw	r6,-8444(fp)
 40182bc:	000b883a 	mov	r5,zero
 40182c0:	1009883a 	mov	r4,r2
 40182c4:	40003c80 	call	40003c8 <draw>
				draw(two, COLOR08_MAGENTA , x, y+2);
 40182c8:	e0b7c217 	ldw	r2,-8440(fp)
 40182cc:	10800084 	addi	r2,r2,2
 40182d0:	100f883a 	mov	r7,r2
 40182d4:	e1b7c117 	ldw	r6,-8444(fp)
 40182d8:	014038c4 	movi	r5,227
 40182dc:	010100f4 	movhi	r4,1027
 40182e0:	21342a04 	addi	r4,r4,-12120
 40182e4:	40003c80 	call	40003c8 <draw>
			}
			if (nn == 3)
 40182e8:	e0b7ca17 	ldw	r2,-8408(fp)
 40182ec:	108000d8 	cmpnei	r2,r2,3
 40182f0:	1000101e 	bne	r2,zero,4018334 <main+0x17d60>
			{
				draw(white,COLOR08_BLACK,x,y+2);
 40182f4:	e0b7c217 	ldw	r2,-8440(fp)
 40182f8:	10c00084 	addi	r3,r2,2
 40182fc:	e0b95e04 	addi	r2,fp,-6792
 4018300:	180f883a 	mov	r7,r3
 4018304:	e1b7c117 	ldw	r6,-8444(fp)
 4018308:	000b883a 	mov	r5,zero
 401830c:	1009883a 	mov	r4,r2
 4018310:	40003c80 	call	40003c8 <draw>
				draw(three, COLOR08_PURPLE, x, y+2);
 4018314:	e0b7c217 	ldw	r2,-8440(fp)
 4018318:	10800084 	addi	r2,r2,2
 401831c:	100f883a 	mov	r7,r2
 4018320:	e1b7c117 	ldw	r6,-8444(fp)
 4018324:	01402084 	movi	r5,130
 4018328:	010100f4 	movhi	r4,1027
 401832c:	2135aa04 	addi	r4,r4,-10584
 4018330:	40003c80 	call	40003c8 <draw>
			}
			if (nn == 4)
 4018334:	e0b7ca17 	ldw	r2,-8408(fp)
 4018338:	10800118 	cmpnei	r2,r2,4
 401833c:	1000101e 	bne	r2,zero,4018380 <main+0x17dac>
			{
				draw(white,COLOR08_BLACK,x,y+2);
 4018340:	e0b7c217 	ldw	r2,-8440(fp)
 4018344:	10c00084 	addi	r3,r2,2
 4018348:	e0b95e04 	addi	r2,fp,-6792
 401834c:	180f883a 	mov	r7,r3
 4018350:	e1b7c117 	ldw	r6,-8444(fp)
 4018354:	000b883a 	mov	r5,zero
 4018358:	1009883a 	mov	r4,r2
 401835c:	40003c80 	call	40003c8 <draw>
				draw(four, COLOR08_GOLD, x, y+2);
 4018360:	e0b7c217 	ldw	r2,-8440(fp)
 4018364:	10800084 	addi	r2,r2,2
 4018368:	100f883a 	mov	r7,r2
 401836c:	e1b7c117 	ldw	r6,-8444(fp)
 4018370:	01403e04 	movi	r5,248
 4018374:	010100f4 	movhi	r4,1027
 4018378:	21372a04 	addi	r4,r4,-9048
 401837c:	40003c80 	call	40003c8 <draw>
			}
			if (nn == 5)
 4018380:	e0b7ca17 	ldw	r2,-8408(fp)
 4018384:	10800158 	cmpnei	r2,r2,5
 4018388:	1000101e 	bne	r2,zero,40183cc <main+0x17df8>
			{
				draw(white,COLOR08_BLACK,x,y+2);
 401838c:	e0b7c217 	ldw	r2,-8440(fp)
 4018390:	10c00084 	addi	r3,r2,2
 4018394:	e0b95e04 	addi	r2,fp,-6792
 4018398:	180f883a 	mov	r7,r3
 401839c:	e1b7c117 	ldw	r6,-8444(fp)
 40183a0:	000b883a 	mov	r5,zero
 40183a4:	1009883a 	mov	r4,r2
 40183a8:	40003c80 	call	40003c8 <draw>
				draw(five, COLOR08_ORANGE, x, y+2);
 40183ac:	e0b7c217 	ldw	r2,-8440(fp)
 40183b0:	10800084 	addi	r2,r2,2
 40183b4:	100f883a 	mov	r7,r2
 40183b8:	e1b7c117 	ldw	r6,-8444(fp)
 40183bc:	01403d04 	movi	r5,244
 40183c0:	010100f4 	movhi	r4,1027
 40183c4:	2138aa04 	addi	r4,r4,-7512
 40183c8:	40003c80 	call	40003c8 <draw>
			}
			if (nn == 6)
 40183cc:	e0b7ca17 	ldw	r2,-8408(fp)
 40183d0:	10800198 	cmpnei	r2,r2,6
 40183d4:	1000061e 	bne	r2,zero,40183f0 <main+0x17e1c>
			{
				draw(six, COLOR08_ROYALBLUE, x, y);
 40183d8:	e1f7c217 	ldw	r7,-8440(fp)
 40183dc:	e1b7c117 	ldw	r6,-8444(fp)
 40183e0:	014013c4 	movi	r5,79
 40183e4:	010100f4 	movhi	r4,1027
 40183e8:	213a2a04 	addi	r4,r4,-5976
 40183ec:	40003c80 	call	40003c8 <draw>
			}
			if (nn == 7)
 40183f0:	e0b7ca17 	ldw	r2,-8408(fp)
 40183f4:	108001d8 	cmpnei	r2,r2,7
 40183f8:	1000061e 	bne	r2,zero,4018414 <main+0x17e40>
			{
				draw(seven, COLOR08_CRIMSON, x, y);
 40183fc:	e1f7c217 	ldw	r7,-8440(fp)
 4018400:	e1b7c117 	ldw	r6,-8444(fp)
 4018404:	01403004 	movi	r5,192
 4018408:	010100f4 	movhi	r4,1027
 401840c:	213baa04 	addi	r4,r4,-4440
 4018410:	40003c80 	call	40003c8 <draw>
			}
			if (nn == 8)
 4018414:	e0b7ca17 	ldw	r2,-8408(fp)
 4018418:	10800218 	cmpnei	r2,r2,8
 401841c:	1000061e 	bne	r2,zero,4018438 <main+0x17e64>
			{
				draw(eight, COLOR08_BLUE, x, y);
 4018420:	e1f7c217 	ldw	r7,-8440(fp)
 4018424:	e1b7c117 	ldw	r6,-8444(fp)
 4018428:	014000c4 	movi	r5,3
 401842c:	010100f4 	movhi	r4,1027
 4018430:	213d2a04 	addi	r4,r4,-2904
 4018434:	40003c80 	call	40003c8 <draw>
			}
			if (nn == 9)
 4018438:	e0b7ca17 	ldw	r2,-8408(fp)
 401843c:	10800258 	cmpnei	r2,r2,9
 4018440:	1000061e 	bne	r2,zero,401845c <main+0x17e88>
			{
				draw(nine, COLOR08_INDIGO, x, y);
 4018444:	e1f7c217 	ldw	r7,-8440(fp)
 4018448:	e1b7c117 	ldw	r6,-8444(fp)
 401844c:	01400884 	movi	r5,34
 4018450:	010100f4 	movhi	r4,1027
 4018454:	213eaa04 	addi	r4,r4,-1368
 4018458:	40003c80 	call	40003c8 <draw>
	}
}
//Delay_Medium();
for(x=0;x<18;x++)
{
	for(y=0;y<8;y++)
 401845c:	e0b7c217 	ldw	r2,-8440(fp)
 4018460:	10800044 	addi	r2,r2,1
 4018464:	e0b7c215 	stw	r2,-8440(fp)
 4018468:	e0b7c217 	ldw	r2,-8440(fp)
 401846c:	10800210 	cmplti	r2,r2,8
 4018470:	103f431e 	bne	r2,zero,4018180 <__alt_data_end+0xfc018180>
			draw(white,COLOR08_RED,x,y+2);
		}
	}
}
//Delay_Medium();
for(x=0;x<18;x++)
 4018474:	e0b7c117 	ldw	r2,-8444(fp)
 4018478:	10800044 	addi	r2,r2,1
 401847c:	e0b7c115 	stw	r2,-8444(fp)
 4018480:	e0b7c117 	ldw	r2,-8444(fp)
 4018484:	10800490 	cmplti	r2,r2,18
 4018488:	103f3b1e 	bne	r2,zero,4018178 <__alt_data_end+0xfc018178>
				draw(nine, COLOR08_INDIGO, x, y);
		}
	}
}
}
draw(white, COLOR08_BLACK, 19,1 );
 401848c:	e0b95e04 	addi	r2,fp,-6792
 4018490:	01c00044 	movi	r7,1
 4018494:	018004c4 	movi	r6,19
 4018498:	000b883a 	mov	r5,zero
 401849c:	1009883a 	mov	r4,r2
 40184a0:	40003c80 	call	40003c8 <draw>
draw(zero, COLOR08_GRAY, 19,1 );
 40184a4:	01c00044 	movi	r7,1
 40184a8:	018004c4 	movi	r6,19
 40184ac:	01402484 	movi	r5,146
 40184b0:	010100f4 	movhi	r4,1027
 40184b4:	21312a04 	addi	r4,r4,-15192
 40184b8:	40003c80 	call	40003c8 <draw>
draw(white, COLOR08_BLACK, 2,1 );
 40184bc:	e0b95e04 	addi	r2,fp,-6792
 40184c0:	01c00044 	movi	r7,1
 40184c4:	01800084 	movi	r6,2
 40184c8:	000b883a 	mov	r5,zero
 40184cc:	1009883a 	mov	r4,r2
 40184d0:	40003c80 	call	40003c8 <draw>
draw(zero, COLOR08_GRAY, 2,1 );
 40184d4:	01c00044 	movi	r7,1
 40184d8:	01800084 	movi	r6,2
 40184dc:	01402484 	movi	r5,146
 40184e0:	010100f4 	movhi	r4,1027
 40184e4:	21312a04 	addi	r4,r4,-15192
 40184e8:	40003c80 	call	40003c8 <draw>
draw(white, COLOR08_BLACK, 1,1 );
 40184ec:	e0b95e04 	addi	r2,fp,-6792
 40184f0:	01c00044 	movi	r7,1
 40184f4:	01800044 	movi	r6,1
 40184f8:	000b883a 	mov	r5,zero
 40184fc:	1009883a 	mov	r4,r2
 4018500:	40003c80 	call	40003c8 <draw>
draw(zero, COLOR08_GRAY, 1,1 );
 4018504:	01c00044 	movi	r7,1
 4018508:	01800044 	movi	r6,1
 401850c:	01402484 	movi	r5,146
 4018510:	010100f4 	movhi	r4,1027
 4018514:	21312a04 	addi	r4,r4,-15192
 4018518:	40003c80 	call	40003c8 <draw>
if(ct>9999){
 401851c:	e0b7c417 	ldw	r2,-8432(fp)
 4018520:	1089c410 	cmplti	r2,r2,10000
 4018524:	1000021e 	bne	r2,zero,4018530 <main+0x17f5c>
ct=1;
 4018528:	00800044 	movi	r2,1
 401852c:	e0b7c415 	stw	r2,-8432(fp)
}
t=ct%10;
 4018530:	e0b7c417 	ldw	r2,-8432(fp)
 4018534:	01400284 	movi	r5,10
 4018538:	1009883a 	mov	r4,r2
 401853c:	4018fd00 	call	4018fd0 <__modsi3>
 4018540:	e0b7db15 	stw	r2,-8340(fp)
q=(ct/10);
 4018544:	e0b7c417 	ldw	r2,-8432(fp)
 4018548:	01400284 	movi	r5,10
 401854c:	1009883a 	mov	r4,r2
 4018550:	4018f4c0 	call	4018f4c <__divsi3>
 4018554:	e0b7d715 	stw	r2,-8356(fp)
q=q%10;
 4018558:	e0b7d717 	ldw	r2,-8356(fp)
 401855c:	01400284 	movi	r5,10
 4018560:	1009883a 	mov	r4,r2
 4018564:	4018fd00 	call	4018fd0 <__modsi3>
 4018568:	e0b7d715 	stw	r2,-8356(fp)
w=(ct/100);
 401856c:	e0b7c417 	ldw	r2,-8432(fp)
 4018570:	01401904 	movi	r5,100
 4018574:	1009883a 	mov	r4,r2
 4018578:	4018f4c0 	call	4018f4c <__divsi3>
 401857c:	e0b7dc15 	stw	r2,-8336(fp)
w=w%10;
 4018580:	e0b7dc17 	ldw	r2,-8336(fp)
 4018584:	01400284 	movi	r5,10
 4018588:	1009883a 	mov	r4,r2
 401858c:	4018fd00 	call	4018fd0 <__modsi3>
 4018590:	e0b7dc15 	stw	r2,-8336(fp)
r=(ct/1000);
 4018594:	e0b7c417 	ldw	r2,-8432(fp)
 4018598:	0140fa04 	movi	r5,1000
 401859c:	1009883a 	mov	r4,r2
 40185a0:	4018f4c0 	call	4018f4c <__divsi3>
 40185a4:	e0b7dd15 	stw	r2,-8332(fp)
r=r%10;
 40185a8:	e0b7dd17 	ldw	r2,-8332(fp)
 40185ac:	01400284 	movi	r5,10
 40185b0:	1009883a 	mov	r4,r2
 40185b4:	4018fd00 	call	4018fd0 <__modsi3>
 40185b8:	e0b7dd15 	stw	r2,-8332(fp)
if(t==0)
 40185bc:	e0b7db17 	ldw	r2,-8340(fp)
 40185c0:	10000c1e 	bne	r2,zero,40185f4 <main+0x18020>
{
draw(white, COLOR08_BLACK,8,0);
 40185c4:	e0b95e04 	addi	r2,fp,-6792
 40185c8:	000f883a 	mov	r7,zero
 40185cc:	01800204 	movi	r6,8
 40185d0:	000b883a 	mov	r5,zero
 40185d4:	1009883a 	mov	r4,r2
 40185d8:	40003c80 	call	40003c8 <draw>
draw(zero,COLOR08_WHITE, 8, 0);
 40185dc:	000f883a 	mov	r7,zero
 40185e0:	01800204 	movi	r6,8
 40185e4:	01403fc4 	movi	r5,255
 40185e8:	010100f4 	movhi	r4,1027
 40185ec:	21312a04 	addi	r4,r4,-15192
 40185f0:	40003c80 	call	40003c8 <draw>
}
if(t==1)
 40185f4:	e0b7db17 	ldw	r2,-8340(fp)
 40185f8:	10800058 	cmpnei	r2,r2,1
 40185fc:	10000c1e 	bne	r2,zero,4018630 <main+0x1805c>
{
draw(white, COLOR08_BLACK,8,0);
 4018600:	e0b95e04 	addi	r2,fp,-6792
 4018604:	000f883a 	mov	r7,zero
 4018608:	01800204 	movi	r6,8
 401860c:	000b883a 	mov	r5,zero
 4018610:	1009883a 	mov	r4,r2
 4018614:	40003c80 	call	40003c8 <draw>
draw(one,COLOR08_WHITE, 8, 0);
 4018618:	000f883a 	mov	r7,zero
 401861c:	01800204 	movi	r6,8
 4018620:	01403fc4 	movi	r5,255
 4018624:	010100f4 	movhi	r4,1027
 4018628:	2132aa04 	addi	r4,r4,-13656
 401862c:	40003c80 	call	40003c8 <draw>
}
if(t==2)
 4018630:	e0b7db17 	ldw	r2,-8340(fp)
 4018634:	10800098 	cmpnei	r2,r2,2
 4018638:	10000c1e 	bne	r2,zero,401866c <main+0x18098>
{
draw(white, COLOR08_BLACK,8,0);
 401863c:	e0b95e04 	addi	r2,fp,-6792
 4018640:	000f883a 	mov	r7,zero
 4018644:	01800204 	movi	r6,8
 4018648:	000b883a 	mov	r5,zero
 401864c:	1009883a 	mov	r4,r2
 4018650:	40003c80 	call	40003c8 <draw>
draw(two,COLOR08_WHITE, 8, 0);
 4018654:	000f883a 	mov	r7,zero
 4018658:	01800204 	movi	r6,8
 401865c:	01403fc4 	movi	r5,255
 4018660:	010100f4 	movhi	r4,1027
 4018664:	21342a04 	addi	r4,r4,-12120
 4018668:	40003c80 	call	40003c8 <draw>
}
if(t==3)
 401866c:	e0b7db17 	ldw	r2,-8340(fp)
 4018670:	108000d8 	cmpnei	r2,r2,3
 4018674:	10000c1e 	bne	r2,zero,40186a8 <main+0x180d4>
{
draw(white, COLOR08_BLACK,8,0);
 4018678:	e0b95e04 	addi	r2,fp,-6792
 401867c:	000f883a 	mov	r7,zero
 4018680:	01800204 	movi	r6,8
 4018684:	000b883a 	mov	r5,zero
 4018688:	1009883a 	mov	r4,r2
 401868c:	40003c80 	call	40003c8 <draw>
draw(three,COLOR08_WHITE, 8, 0);
 4018690:	000f883a 	mov	r7,zero
 4018694:	01800204 	movi	r6,8
 4018698:	01403fc4 	movi	r5,255
 401869c:	010100f4 	movhi	r4,1027
 40186a0:	2135aa04 	addi	r4,r4,-10584
 40186a4:	40003c80 	call	40003c8 <draw>
}
if(t==4)
 40186a8:	e0b7db17 	ldw	r2,-8340(fp)
 40186ac:	10800118 	cmpnei	r2,r2,4
 40186b0:	10000c1e 	bne	r2,zero,40186e4 <main+0x18110>
{
draw(white, COLOR08_BLACK,8,0);
 40186b4:	e0b95e04 	addi	r2,fp,-6792
 40186b8:	000f883a 	mov	r7,zero
 40186bc:	01800204 	movi	r6,8
 40186c0:	000b883a 	mov	r5,zero
 40186c4:	1009883a 	mov	r4,r2
 40186c8:	40003c80 	call	40003c8 <draw>
draw(four,COLOR08_WHITE, 8, 0);
 40186cc:	000f883a 	mov	r7,zero
 40186d0:	01800204 	movi	r6,8
 40186d4:	01403fc4 	movi	r5,255
 40186d8:	010100f4 	movhi	r4,1027
 40186dc:	21372a04 	addi	r4,r4,-9048
 40186e0:	40003c80 	call	40003c8 <draw>
}
if(t==5)
 40186e4:	e0b7db17 	ldw	r2,-8340(fp)
 40186e8:	10800158 	cmpnei	r2,r2,5
 40186ec:	10000c1e 	bne	r2,zero,4018720 <main+0x1814c>
{
draw(white, COLOR08_BLACK,8,0);
 40186f0:	e0b95e04 	addi	r2,fp,-6792
 40186f4:	000f883a 	mov	r7,zero
 40186f8:	01800204 	movi	r6,8
 40186fc:	000b883a 	mov	r5,zero
 4018700:	1009883a 	mov	r4,r2
 4018704:	40003c80 	call	40003c8 <draw>
draw(five,COLOR08_WHITE, 8, 0);
 4018708:	000f883a 	mov	r7,zero
 401870c:	01800204 	movi	r6,8
 4018710:	01403fc4 	movi	r5,255
 4018714:	010100f4 	movhi	r4,1027
 4018718:	2138aa04 	addi	r4,r4,-7512
 401871c:	40003c80 	call	40003c8 <draw>
}
if(t==6)
 4018720:	e0b7db17 	ldw	r2,-8340(fp)
 4018724:	10800198 	cmpnei	r2,r2,6
 4018728:	10000c1e 	bne	r2,zero,401875c <main+0x18188>
{
draw(white, COLOR08_BLACK,8,0);
 401872c:	e0b95e04 	addi	r2,fp,-6792
 4018730:	000f883a 	mov	r7,zero
 4018734:	01800204 	movi	r6,8
 4018738:	000b883a 	mov	r5,zero
 401873c:	1009883a 	mov	r4,r2
 4018740:	40003c80 	call	40003c8 <draw>
draw(six,COLOR08_WHITE, 8, 0);
 4018744:	000f883a 	mov	r7,zero
 4018748:	01800204 	movi	r6,8
 401874c:	01403fc4 	movi	r5,255
 4018750:	010100f4 	movhi	r4,1027
 4018754:	213a2a04 	addi	r4,r4,-5976
 4018758:	40003c80 	call	40003c8 <draw>
}
if(t==7)
 401875c:	e0b7db17 	ldw	r2,-8340(fp)
 4018760:	108001d8 	cmpnei	r2,r2,7
 4018764:	10000c1e 	bne	r2,zero,4018798 <main+0x181c4>
{
draw(white, COLOR08_BLACK,8,0);
 4018768:	e0b95e04 	addi	r2,fp,-6792
 401876c:	000f883a 	mov	r7,zero
 4018770:	01800204 	movi	r6,8
 4018774:	000b883a 	mov	r5,zero
 4018778:	1009883a 	mov	r4,r2
 401877c:	40003c80 	call	40003c8 <draw>
draw(seven,COLOR08_WHITE, 8, 0);
 4018780:	000f883a 	mov	r7,zero
 4018784:	01800204 	movi	r6,8
 4018788:	01403fc4 	movi	r5,255
 401878c:	010100f4 	movhi	r4,1027
 4018790:	213baa04 	addi	r4,r4,-4440
 4018794:	40003c80 	call	40003c8 <draw>
}
if(t==8)
 4018798:	e0b7db17 	ldw	r2,-8340(fp)
 401879c:	10800218 	cmpnei	r2,r2,8
 40187a0:	10000c1e 	bne	r2,zero,40187d4 <main+0x18200>
{
draw(white, COLOR08_BLACK,8,0);
 40187a4:	e0b95e04 	addi	r2,fp,-6792
 40187a8:	000f883a 	mov	r7,zero
 40187ac:	01800204 	movi	r6,8
 40187b0:	000b883a 	mov	r5,zero
 40187b4:	1009883a 	mov	r4,r2
 40187b8:	40003c80 	call	40003c8 <draw>
draw(eight,COLOR08_WHITE, 8, 0);
 40187bc:	000f883a 	mov	r7,zero
 40187c0:	01800204 	movi	r6,8
 40187c4:	01403fc4 	movi	r5,255
 40187c8:	010100f4 	movhi	r4,1027
 40187cc:	213d2a04 	addi	r4,r4,-2904
 40187d0:	40003c80 	call	40003c8 <draw>
}
if(t==9)
 40187d4:	e0b7db17 	ldw	r2,-8340(fp)
 40187d8:	10800258 	cmpnei	r2,r2,9
 40187dc:	10000c1e 	bne	r2,zero,4018810 <main+0x1823c>
{
draw(white, COLOR08_BLACK,8,0);
 40187e0:	e0b95e04 	addi	r2,fp,-6792
 40187e4:	000f883a 	mov	r7,zero
 40187e8:	01800204 	movi	r6,8
 40187ec:	000b883a 	mov	r5,zero
 40187f0:	1009883a 	mov	r4,r2
 40187f4:	40003c80 	call	40003c8 <draw>
draw(nine,COLOR08_WHITE, 8, 0);
 40187f8:	000f883a 	mov	r7,zero
 40187fc:	01800204 	movi	r6,8
 4018800:	01403fc4 	movi	r5,255
 4018804:	010100f4 	movhi	r4,1027
 4018808:	213eaa04 	addi	r4,r4,-1368
 401880c:	40003c80 	call	40003c8 <draw>
}
if(q==0)
 4018810:	e0b7d717 	ldw	r2,-8356(fp)
 4018814:	10000c1e 	bne	r2,zero,4018848 <main+0x18274>
{
draw(white, COLOR08_BLACK,7,0);
 4018818:	e0b95e04 	addi	r2,fp,-6792
 401881c:	000f883a 	mov	r7,zero
 4018820:	018001c4 	movi	r6,7
 4018824:	000b883a 	mov	r5,zero
 4018828:	1009883a 	mov	r4,r2
 401882c:	40003c80 	call	40003c8 <draw>
draw(zero,COLOR08_WHITE, 7, 0);
 4018830:	000f883a 	mov	r7,zero
 4018834:	018001c4 	movi	r6,7
 4018838:	01403fc4 	movi	r5,255
 401883c:	010100f4 	movhi	r4,1027
 4018840:	21312a04 	addi	r4,r4,-15192
 4018844:	40003c80 	call	40003c8 <draw>
}
if(q==1)
 4018848:	e0b7d717 	ldw	r2,-8356(fp)
 401884c:	10800058 	cmpnei	r2,r2,1
 4018850:	10000c1e 	bne	r2,zero,4018884 <main+0x182b0>
{
draw(white, COLOR08_BLACK,7,0);
 4018854:	e0b95e04 	addi	r2,fp,-6792
 4018858:	000f883a 	mov	r7,zero
 401885c:	018001c4 	movi	r6,7
 4018860:	000b883a 	mov	r5,zero
 4018864:	1009883a 	mov	r4,r2
 4018868:	40003c80 	call	40003c8 <draw>
draw(one,COLOR08_WHITE, 7, 0);
 401886c:	000f883a 	mov	r7,zero
 4018870:	018001c4 	movi	r6,7
 4018874:	01403fc4 	movi	r5,255
 4018878:	010100f4 	movhi	r4,1027
 401887c:	2132aa04 	addi	r4,r4,-13656
 4018880:	40003c80 	call	40003c8 <draw>
}
if(q==2)
 4018884:	e0b7d717 	ldw	r2,-8356(fp)
 4018888:	10800098 	cmpnei	r2,r2,2
 401888c:	10000c1e 	bne	r2,zero,40188c0 <main+0x182ec>
{
draw(white, COLOR08_BLACK,7,0);
 4018890:	e0b95e04 	addi	r2,fp,-6792
 4018894:	000f883a 	mov	r7,zero
 4018898:	018001c4 	movi	r6,7
 401889c:	000b883a 	mov	r5,zero
 40188a0:	1009883a 	mov	r4,r2
 40188a4:	40003c80 	call	40003c8 <draw>
draw(two,COLOR08_WHITE, 7, 0);
 40188a8:	000f883a 	mov	r7,zero
 40188ac:	018001c4 	movi	r6,7
 40188b0:	01403fc4 	movi	r5,255
 40188b4:	010100f4 	movhi	r4,1027
 40188b8:	21342a04 	addi	r4,r4,-12120
 40188bc:	40003c80 	call	40003c8 <draw>
}
if(q==3)
 40188c0:	e0b7d717 	ldw	r2,-8356(fp)
 40188c4:	108000d8 	cmpnei	r2,r2,3
 40188c8:	10000c1e 	bne	r2,zero,40188fc <main+0x18328>
{
draw(white, COLOR08_BLACK,7,0);
 40188cc:	e0b95e04 	addi	r2,fp,-6792
 40188d0:	000f883a 	mov	r7,zero
 40188d4:	018001c4 	movi	r6,7
 40188d8:	000b883a 	mov	r5,zero
 40188dc:	1009883a 	mov	r4,r2
 40188e0:	40003c80 	call	40003c8 <draw>
draw(three,COLOR08_WHITE, 7, 0);
 40188e4:	000f883a 	mov	r7,zero
 40188e8:	018001c4 	movi	r6,7
 40188ec:	01403fc4 	movi	r5,255
 40188f0:	010100f4 	movhi	r4,1027
 40188f4:	2135aa04 	addi	r4,r4,-10584
 40188f8:	40003c80 	call	40003c8 <draw>
}
if(q==4)
 40188fc:	e0b7d717 	ldw	r2,-8356(fp)
 4018900:	10800118 	cmpnei	r2,r2,4
 4018904:	10000c1e 	bne	r2,zero,4018938 <main+0x18364>
{
draw(white, COLOR08_BLACK,7,0);
 4018908:	e0b95e04 	addi	r2,fp,-6792
 401890c:	000f883a 	mov	r7,zero
 4018910:	018001c4 	movi	r6,7
 4018914:	000b883a 	mov	r5,zero
 4018918:	1009883a 	mov	r4,r2
 401891c:	40003c80 	call	40003c8 <draw>
draw(four,COLOR08_WHITE, 7, 0);
 4018920:	000f883a 	mov	r7,zero
 4018924:	018001c4 	movi	r6,7
 4018928:	01403fc4 	movi	r5,255
 401892c:	010100f4 	movhi	r4,1027
 4018930:	21372a04 	addi	r4,r4,-9048
 4018934:	40003c80 	call	40003c8 <draw>
}
if(q==5)
 4018938:	e0b7d717 	ldw	r2,-8356(fp)
 401893c:	10800158 	cmpnei	r2,r2,5
 4018940:	10000c1e 	bne	r2,zero,4018974 <main+0x183a0>
{
draw(white, COLOR08_BLACK,7,0);
 4018944:	e0b95e04 	addi	r2,fp,-6792
 4018948:	000f883a 	mov	r7,zero
 401894c:	018001c4 	movi	r6,7
 4018950:	000b883a 	mov	r5,zero
 4018954:	1009883a 	mov	r4,r2
 4018958:	40003c80 	call	40003c8 <draw>
draw(five,COLOR08_WHITE, 7, 0);
 401895c:	000f883a 	mov	r7,zero
 4018960:	018001c4 	movi	r6,7
 4018964:	01403fc4 	movi	r5,255
 4018968:	010100f4 	movhi	r4,1027
 401896c:	2138aa04 	addi	r4,r4,-7512
 4018970:	40003c80 	call	40003c8 <draw>
}
if(q==6)
 4018974:	e0b7d717 	ldw	r2,-8356(fp)
 4018978:	10800198 	cmpnei	r2,r2,6
 401897c:	10000c1e 	bne	r2,zero,40189b0 <main+0x183dc>
{
draw(white, COLOR08_BLACK,7,0);
 4018980:	e0b95e04 	addi	r2,fp,-6792
 4018984:	000f883a 	mov	r7,zero
 4018988:	018001c4 	movi	r6,7
 401898c:	000b883a 	mov	r5,zero
 4018990:	1009883a 	mov	r4,r2
 4018994:	40003c80 	call	40003c8 <draw>
draw(six,COLOR08_WHITE, 7, 0);
 4018998:	000f883a 	mov	r7,zero
 401899c:	018001c4 	movi	r6,7
 40189a0:	01403fc4 	movi	r5,255
 40189a4:	010100f4 	movhi	r4,1027
 40189a8:	213a2a04 	addi	r4,r4,-5976
 40189ac:	40003c80 	call	40003c8 <draw>
}
if(q==7)
 40189b0:	e0b7d717 	ldw	r2,-8356(fp)
 40189b4:	108001d8 	cmpnei	r2,r2,7
 40189b8:	10000c1e 	bne	r2,zero,40189ec <main+0x18418>
{
draw(white, COLOR08_BLACK,7,0);
 40189bc:	e0b95e04 	addi	r2,fp,-6792
 40189c0:	000f883a 	mov	r7,zero
 40189c4:	018001c4 	movi	r6,7
 40189c8:	000b883a 	mov	r5,zero
 40189cc:	1009883a 	mov	r4,r2
 40189d0:	40003c80 	call	40003c8 <draw>
draw(seven,COLOR08_WHITE, 7, 0);
 40189d4:	000f883a 	mov	r7,zero
 40189d8:	018001c4 	movi	r6,7
 40189dc:	01403fc4 	movi	r5,255
 40189e0:	010100f4 	movhi	r4,1027
 40189e4:	213baa04 	addi	r4,r4,-4440
 40189e8:	40003c80 	call	40003c8 <draw>
}
if(q==8)
 40189ec:	e0b7d717 	ldw	r2,-8356(fp)
 40189f0:	10800218 	cmpnei	r2,r2,8
 40189f4:	10000c1e 	bne	r2,zero,4018a28 <main+0x18454>
{
draw(white, COLOR08_BLACK,7,0);
 40189f8:	e0b95e04 	addi	r2,fp,-6792
 40189fc:	000f883a 	mov	r7,zero
 4018a00:	018001c4 	movi	r6,7
 4018a04:	000b883a 	mov	r5,zero
 4018a08:	1009883a 	mov	r4,r2
 4018a0c:	40003c80 	call	40003c8 <draw>
draw(eight,COLOR08_WHITE, 7, 0);
 4018a10:	000f883a 	mov	r7,zero
 4018a14:	018001c4 	movi	r6,7
 4018a18:	01403fc4 	movi	r5,255
 4018a1c:	010100f4 	movhi	r4,1027
 4018a20:	213d2a04 	addi	r4,r4,-2904
 4018a24:	40003c80 	call	40003c8 <draw>
}
if(q==9)
 4018a28:	e0b7d717 	ldw	r2,-8356(fp)
 4018a2c:	10800258 	cmpnei	r2,r2,9
 4018a30:	10000c1e 	bne	r2,zero,4018a64 <main+0x18490>
{
draw(white, COLOR08_BLACK,7,0);
 4018a34:	e0b95e04 	addi	r2,fp,-6792
 4018a38:	000f883a 	mov	r7,zero
 4018a3c:	018001c4 	movi	r6,7
 4018a40:	000b883a 	mov	r5,zero
 4018a44:	1009883a 	mov	r4,r2
 4018a48:	40003c80 	call	40003c8 <draw>
draw(nine,COLOR08_WHITE, 7, 0);
 4018a4c:	000f883a 	mov	r7,zero
 4018a50:	018001c4 	movi	r6,7
 4018a54:	01403fc4 	movi	r5,255
 4018a58:	010100f4 	movhi	r4,1027
 4018a5c:	213eaa04 	addi	r4,r4,-1368
 4018a60:	40003c80 	call	40003c8 <draw>
}
if(w==0)
 4018a64:	e0b7dc17 	ldw	r2,-8336(fp)
 4018a68:	10000c1e 	bne	r2,zero,4018a9c <main+0x184c8>
{
draw(white, COLOR08_BLACK,6,0);
 4018a6c:	e0b95e04 	addi	r2,fp,-6792
 4018a70:	000f883a 	mov	r7,zero
 4018a74:	01800184 	movi	r6,6
 4018a78:	000b883a 	mov	r5,zero
 4018a7c:	1009883a 	mov	r4,r2
 4018a80:	40003c80 	call	40003c8 <draw>
draw(zero,COLOR08_WHITE, 6, 0);
 4018a84:	000f883a 	mov	r7,zero
 4018a88:	01800184 	movi	r6,6
 4018a8c:	01403fc4 	movi	r5,255
 4018a90:	010100f4 	movhi	r4,1027
 4018a94:	21312a04 	addi	r4,r4,-15192
 4018a98:	40003c80 	call	40003c8 <draw>
}
if(w==1)
 4018a9c:	e0b7dc17 	ldw	r2,-8336(fp)
 4018aa0:	10800058 	cmpnei	r2,r2,1
 4018aa4:	10000c1e 	bne	r2,zero,4018ad8 <main+0x18504>
{
draw(white, COLOR08_BLACK,6,0);
 4018aa8:	e0b95e04 	addi	r2,fp,-6792
 4018aac:	000f883a 	mov	r7,zero
 4018ab0:	01800184 	movi	r6,6
 4018ab4:	000b883a 	mov	r5,zero
 4018ab8:	1009883a 	mov	r4,r2
 4018abc:	40003c80 	call	40003c8 <draw>
draw(one,COLOR08_WHITE, 6, 0);
 4018ac0:	000f883a 	mov	r7,zero
 4018ac4:	01800184 	movi	r6,6
 4018ac8:	01403fc4 	movi	r5,255
 4018acc:	010100f4 	movhi	r4,1027
 4018ad0:	2132aa04 	addi	r4,r4,-13656
 4018ad4:	40003c80 	call	40003c8 <draw>
}
if(w==2)
 4018ad8:	e0b7dc17 	ldw	r2,-8336(fp)
 4018adc:	10800098 	cmpnei	r2,r2,2
 4018ae0:	10000c1e 	bne	r2,zero,4018b14 <main+0x18540>
{
draw(white, COLOR08_BLACK,6,0);
 4018ae4:	e0b95e04 	addi	r2,fp,-6792
 4018ae8:	000f883a 	mov	r7,zero
 4018aec:	01800184 	movi	r6,6
 4018af0:	000b883a 	mov	r5,zero
 4018af4:	1009883a 	mov	r4,r2
 4018af8:	40003c80 	call	40003c8 <draw>
draw(two,COLOR08_WHITE, 6, 0);
 4018afc:	000f883a 	mov	r7,zero
 4018b00:	01800184 	movi	r6,6
 4018b04:	01403fc4 	movi	r5,255
 4018b08:	010100f4 	movhi	r4,1027
 4018b0c:	21342a04 	addi	r4,r4,-12120
 4018b10:	40003c80 	call	40003c8 <draw>
}
if(w==3)
 4018b14:	e0b7dc17 	ldw	r2,-8336(fp)
 4018b18:	108000d8 	cmpnei	r2,r2,3
 4018b1c:	10000c1e 	bne	r2,zero,4018b50 <main+0x1857c>
{
draw(white, COLOR08_BLACK,6,0);
 4018b20:	e0b95e04 	addi	r2,fp,-6792
 4018b24:	000f883a 	mov	r7,zero
 4018b28:	01800184 	movi	r6,6
 4018b2c:	000b883a 	mov	r5,zero
 4018b30:	1009883a 	mov	r4,r2
 4018b34:	40003c80 	call	40003c8 <draw>
draw(three,COLOR08_WHITE, 6, 0);
 4018b38:	000f883a 	mov	r7,zero
 4018b3c:	01800184 	movi	r6,6
 4018b40:	01403fc4 	movi	r5,255
 4018b44:	010100f4 	movhi	r4,1027
 4018b48:	2135aa04 	addi	r4,r4,-10584
 4018b4c:	40003c80 	call	40003c8 <draw>
}
if(w==4)
 4018b50:	e0b7dc17 	ldw	r2,-8336(fp)
 4018b54:	10800118 	cmpnei	r2,r2,4
 4018b58:	10000c1e 	bne	r2,zero,4018b8c <main+0x185b8>
{
draw(white, COLOR08_BLACK,6,0);
 4018b5c:	e0b95e04 	addi	r2,fp,-6792
 4018b60:	000f883a 	mov	r7,zero
 4018b64:	01800184 	movi	r6,6
 4018b68:	000b883a 	mov	r5,zero
 4018b6c:	1009883a 	mov	r4,r2
 4018b70:	40003c80 	call	40003c8 <draw>
draw(four,COLOR08_WHITE, 6, 0);
 4018b74:	000f883a 	mov	r7,zero
 4018b78:	01800184 	movi	r6,6
 4018b7c:	01403fc4 	movi	r5,255
 4018b80:	010100f4 	movhi	r4,1027
 4018b84:	21372a04 	addi	r4,r4,-9048
 4018b88:	40003c80 	call	40003c8 <draw>
}
if(w==5)
 4018b8c:	e0b7dc17 	ldw	r2,-8336(fp)
 4018b90:	10800158 	cmpnei	r2,r2,5
 4018b94:	10000c1e 	bne	r2,zero,4018bc8 <main+0x185f4>
{
draw(white, COLOR08_BLACK,6,0);
 4018b98:	e0b95e04 	addi	r2,fp,-6792
 4018b9c:	000f883a 	mov	r7,zero
 4018ba0:	01800184 	movi	r6,6
 4018ba4:	000b883a 	mov	r5,zero
 4018ba8:	1009883a 	mov	r4,r2
 4018bac:	40003c80 	call	40003c8 <draw>
draw(five,COLOR08_WHITE, 6, 0);
 4018bb0:	000f883a 	mov	r7,zero
 4018bb4:	01800184 	movi	r6,6
 4018bb8:	01403fc4 	movi	r5,255
 4018bbc:	010100f4 	movhi	r4,1027
 4018bc0:	2138aa04 	addi	r4,r4,-7512
 4018bc4:	40003c80 	call	40003c8 <draw>
}
if(w==6)
 4018bc8:	e0b7dc17 	ldw	r2,-8336(fp)
 4018bcc:	10800198 	cmpnei	r2,r2,6
 4018bd0:	10000c1e 	bne	r2,zero,4018c04 <main+0x18630>
{
draw(white, COLOR08_BLACK,6,0);
 4018bd4:	e0b95e04 	addi	r2,fp,-6792
 4018bd8:	000f883a 	mov	r7,zero
 4018bdc:	01800184 	movi	r6,6
 4018be0:	000b883a 	mov	r5,zero
 4018be4:	1009883a 	mov	r4,r2
 4018be8:	40003c80 	call	40003c8 <draw>
draw(six,COLOR08_WHITE, 6, 0);
 4018bec:	000f883a 	mov	r7,zero
 4018bf0:	01800184 	movi	r6,6
 4018bf4:	01403fc4 	movi	r5,255
 4018bf8:	010100f4 	movhi	r4,1027
 4018bfc:	213a2a04 	addi	r4,r4,-5976
 4018c00:	40003c80 	call	40003c8 <draw>
}
if(w==7)
 4018c04:	e0b7dc17 	ldw	r2,-8336(fp)
 4018c08:	108001d8 	cmpnei	r2,r2,7
 4018c0c:	10000c1e 	bne	r2,zero,4018c40 <main+0x1866c>
{
draw(white, COLOR08_BLACK,6,0);
 4018c10:	e0b95e04 	addi	r2,fp,-6792
 4018c14:	000f883a 	mov	r7,zero
 4018c18:	01800184 	movi	r6,6
 4018c1c:	000b883a 	mov	r5,zero
 4018c20:	1009883a 	mov	r4,r2
 4018c24:	40003c80 	call	40003c8 <draw>
draw(seven,COLOR08_WHITE, 6, 0);
 4018c28:	000f883a 	mov	r7,zero
 4018c2c:	01800184 	movi	r6,6
 4018c30:	01403fc4 	movi	r5,255
 4018c34:	010100f4 	movhi	r4,1027
 4018c38:	213baa04 	addi	r4,r4,-4440
 4018c3c:	40003c80 	call	40003c8 <draw>
}
if(w==8)
 4018c40:	e0b7dc17 	ldw	r2,-8336(fp)
 4018c44:	10800218 	cmpnei	r2,r2,8
 4018c48:	10000c1e 	bne	r2,zero,4018c7c <main+0x186a8>
{
draw(white, COLOR08_BLACK, 6,0);
 4018c4c:	e0b95e04 	addi	r2,fp,-6792
 4018c50:	000f883a 	mov	r7,zero
 4018c54:	01800184 	movi	r6,6
 4018c58:	000b883a 	mov	r5,zero
 4018c5c:	1009883a 	mov	r4,r2
 4018c60:	40003c80 	call	40003c8 <draw>
draw(eight,COLOR08_WHITE, 6, 0);
 4018c64:	000f883a 	mov	r7,zero
 4018c68:	01800184 	movi	r6,6
 4018c6c:	01403fc4 	movi	r5,255
 4018c70:	010100f4 	movhi	r4,1027
 4018c74:	213d2a04 	addi	r4,r4,-2904
 4018c78:	40003c80 	call	40003c8 <draw>
}
if(w==9)
 4018c7c:	e0b7dc17 	ldw	r2,-8336(fp)
 4018c80:	10800258 	cmpnei	r2,r2,9
 4018c84:	10000c1e 	bne	r2,zero,4018cb8 <main+0x186e4>
{
draw(white, COLOR08_BLACK,6,0);
 4018c88:	e0b95e04 	addi	r2,fp,-6792
 4018c8c:	000f883a 	mov	r7,zero
 4018c90:	01800184 	movi	r6,6
 4018c94:	000b883a 	mov	r5,zero
 4018c98:	1009883a 	mov	r4,r2
 4018c9c:	40003c80 	call	40003c8 <draw>
draw(nine,COLOR08_WHITE,  6, 0);
 4018ca0:	000f883a 	mov	r7,zero
 4018ca4:	01800184 	movi	r6,6
 4018ca8:	01403fc4 	movi	r5,255
 4018cac:	010100f4 	movhi	r4,1027
 4018cb0:	213eaa04 	addi	r4,r4,-1368
 4018cb4:	40003c80 	call	40003c8 <draw>
}
if(r==0)
 4018cb8:	e0b7dd17 	ldw	r2,-8332(fp)
 4018cbc:	10000c1e 	bne	r2,zero,4018cf0 <main+0x1871c>
{
draw(white, COLOR08_BLACK,5,0);
 4018cc0:	e0b95e04 	addi	r2,fp,-6792
 4018cc4:	000f883a 	mov	r7,zero
 4018cc8:	01800144 	movi	r6,5
 4018ccc:	000b883a 	mov	r5,zero
 4018cd0:	1009883a 	mov	r4,r2
 4018cd4:	40003c80 	call	40003c8 <draw>
draw(zero,COLOR08_WHITE, 5, 0);
 4018cd8:	000f883a 	mov	r7,zero
 4018cdc:	01800144 	movi	r6,5
 4018ce0:	01403fc4 	movi	r5,255
 4018ce4:	010100f4 	movhi	r4,1027
 4018ce8:	21312a04 	addi	r4,r4,-15192
 4018cec:	40003c80 	call	40003c8 <draw>
}
if(r==1)
 4018cf0:	e0b7dd17 	ldw	r2,-8332(fp)
 4018cf4:	10800058 	cmpnei	r2,r2,1
 4018cf8:	10000c1e 	bne	r2,zero,4018d2c <main+0x18758>
{
draw(white, COLOR08_BLACK,5,0);
 4018cfc:	e0b95e04 	addi	r2,fp,-6792
 4018d00:	000f883a 	mov	r7,zero
 4018d04:	01800144 	movi	r6,5
 4018d08:	000b883a 	mov	r5,zero
 4018d0c:	1009883a 	mov	r4,r2
 4018d10:	40003c80 	call	40003c8 <draw>
draw(one,COLOR08_WHITE, 5, 0);
 4018d14:	000f883a 	mov	r7,zero
 4018d18:	01800144 	movi	r6,5
 4018d1c:	01403fc4 	movi	r5,255
 4018d20:	010100f4 	movhi	r4,1027
 4018d24:	2132aa04 	addi	r4,r4,-13656
 4018d28:	40003c80 	call	40003c8 <draw>
}
if(r==2)
 4018d2c:	e0b7dd17 	ldw	r2,-8332(fp)
 4018d30:	10800098 	cmpnei	r2,r2,2
 4018d34:	10000c1e 	bne	r2,zero,4018d68 <main+0x18794>
{
draw(white, COLOR08_BLACK,5,0);
 4018d38:	e0b95e04 	addi	r2,fp,-6792
 4018d3c:	000f883a 	mov	r7,zero
 4018d40:	01800144 	movi	r6,5
 4018d44:	000b883a 	mov	r5,zero
 4018d48:	1009883a 	mov	r4,r2
 4018d4c:	40003c80 	call	40003c8 <draw>
draw(two,COLOR08_WHITE, 5, 0);
 4018d50:	000f883a 	mov	r7,zero
 4018d54:	01800144 	movi	r6,5
 4018d58:	01403fc4 	movi	r5,255
 4018d5c:	010100f4 	movhi	r4,1027
 4018d60:	21342a04 	addi	r4,r4,-12120
 4018d64:	40003c80 	call	40003c8 <draw>
}
if(r==3)
 4018d68:	e0b7dd17 	ldw	r2,-8332(fp)
 4018d6c:	108000d8 	cmpnei	r2,r2,3
 4018d70:	10000c1e 	bne	r2,zero,4018da4 <main+0x187d0>
{
draw(white, COLOR08_BLACK,5,0);
 4018d74:	e0b95e04 	addi	r2,fp,-6792
 4018d78:	000f883a 	mov	r7,zero
 4018d7c:	01800144 	movi	r6,5
 4018d80:	000b883a 	mov	r5,zero
 4018d84:	1009883a 	mov	r4,r2
 4018d88:	40003c80 	call	40003c8 <draw>
draw(three,COLOR08_WHITE, 5, 0);
 4018d8c:	000f883a 	mov	r7,zero
 4018d90:	01800144 	movi	r6,5
 4018d94:	01403fc4 	movi	r5,255
 4018d98:	010100f4 	movhi	r4,1027
 4018d9c:	2135aa04 	addi	r4,r4,-10584
 4018da0:	40003c80 	call	40003c8 <draw>
}
if(r==4)
 4018da4:	e0b7dd17 	ldw	r2,-8332(fp)
 4018da8:	10800118 	cmpnei	r2,r2,4
 4018dac:	10000c1e 	bne	r2,zero,4018de0 <main+0x1880c>
{
draw(white, COLOR08_BLACK,5,0);
 4018db0:	e0b95e04 	addi	r2,fp,-6792
 4018db4:	000f883a 	mov	r7,zero
 4018db8:	01800144 	movi	r6,5
 4018dbc:	000b883a 	mov	r5,zero
 4018dc0:	1009883a 	mov	r4,r2
 4018dc4:	40003c80 	call	40003c8 <draw>
draw(four,COLOR08_WHITE, 5, 0);
 4018dc8:	000f883a 	mov	r7,zero
 4018dcc:	01800144 	movi	r6,5
 4018dd0:	01403fc4 	movi	r5,255
 4018dd4:	010100f4 	movhi	r4,1027
 4018dd8:	21372a04 	addi	r4,r4,-9048
 4018ddc:	40003c80 	call	40003c8 <draw>
}
if(r==5)
 4018de0:	e0b7dd17 	ldw	r2,-8332(fp)
 4018de4:	10800158 	cmpnei	r2,r2,5
 4018de8:	10000c1e 	bne	r2,zero,4018e1c <main+0x18848>
{
draw(white, COLOR08_BLACK,5,0);
 4018dec:	e0b95e04 	addi	r2,fp,-6792
 4018df0:	000f883a 	mov	r7,zero
 4018df4:	01800144 	movi	r6,5
 4018df8:	000b883a 	mov	r5,zero
 4018dfc:	1009883a 	mov	r4,r2
 4018e00:	40003c80 	call	40003c8 <draw>
draw(five,COLOR08_WHITE, 5, 0);
 4018e04:	000f883a 	mov	r7,zero
 4018e08:	01800144 	movi	r6,5
 4018e0c:	01403fc4 	movi	r5,255
 4018e10:	010100f4 	movhi	r4,1027
 4018e14:	2138aa04 	addi	r4,r4,-7512
 4018e18:	40003c80 	call	40003c8 <draw>
}
if(r==6)
 4018e1c:	e0b7dd17 	ldw	r2,-8332(fp)
 4018e20:	10800198 	cmpnei	r2,r2,6
 4018e24:	10000c1e 	bne	r2,zero,4018e58 <main+0x18884>
{
draw(white, COLOR08_BLACK,5,0);
 4018e28:	e0b95e04 	addi	r2,fp,-6792
 4018e2c:	000f883a 	mov	r7,zero
 4018e30:	01800144 	movi	r6,5
 4018e34:	000b883a 	mov	r5,zero
 4018e38:	1009883a 	mov	r4,r2
 4018e3c:	40003c80 	call	40003c8 <draw>
draw(six,COLOR08_WHITE, 5, 0);
 4018e40:	000f883a 	mov	r7,zero
 4018e44:	01800144 	movi	r6,5
 4018e48:	01403fc4 	movi	r5,255
 4018e4c:	010100f4 	movhi	r4,1027
 4018e50:	213a2a04 	addi	r4,r4,-5976
 4018e54:	40003c80 	call	40003c8 <draw>
}
if(r==7)
 4018e58:	e0b7dd17 	ldw	r2,-8332(fp)
 4018e5c:	108001d8 	cmpnei	r2,r2,7
 4018e60:	10000c1e 	bne	r2,zero,4018e94 <main+0x188c0>
{
draw(white, COLOR08_BLACK,5,0);
 4018e64:	e0b95e04 	addi	r2,fp,-6792
 4018e68:	000f883a 	mov	r7,zero
 4018e6c:	01800144 	movi	r6,5
 4018e70:	000b883a 	mov	r5,zero
 4018e74:	1009883a 	mov	r4,r2
 4018e78:	40003c80 	call	40003c8 <draw>
draw(seven,COLOR08_WHITE, 5, 0);
 4018e7c:	000f883a 	mov	r7,zero
 4018e80:	01800144 	movi	r6,5
 4018e84:	01403fc4 	movi	r5,255
 4018e88:	010100f4 	movhi	r4,1027
 4018e8c:	213baa04 	addi	r4,r4,-4440
 4018e90:	40003c80 	call	40003c8 <draw>
}
if(r==8)
 4018e94:	e0b7dd17 	ldw	r2,-8332(fp)
 4018e98:	10800218 	cmpnei	r2,r2,8
 4018e9c:	10000c1e 	bne	r2,zero,4018ed0 <main+0x188fc>
{
draw(white, COLOR08_BLACK,5,0);
 4018ea0:	e0b95e04 	addi	r2,fp,-6792
 4018ea4:	000f883a 	mov	r7,zero
 4018ea8:	01800144 	movi	r6,5
 4018eac:	000b883a 	mov	r5,zero
 4018eb0:	1009883a 	mov	r4,r2
 4018eb4:	40003c80 	call	40003c8 <draw>
draw(eight,COLOR08_WHITE, 5, 0);
 4018eb8:	000f883a 	mov	r7,zero
 4018ebc:	01800144 	movi	r6,5
 4018ec0:	01403fc4 	movi	r5,255
 4018ec4:	010100f4 	movhi	r4,1027
 4018ec8:	213d2a04 	addi	r4,r4,-2904
 4018ecc:	40003c80 	call	40003c8 <draw>
}
if(r==9)
 4018ed0:	e0b7dd17 	ldw	r2,-8332(fp)
 4018ed4:	10800258 	cmpnei	r2,r2,9
 4018ed8:	10000c1e 	bne	r2,zero,4018f0c <main+0x18938>
{
draw(white, COLOR08_BLACK,5,0);
 4018edc:	e0b95e04 	addi	r2,fp,-6792
 4018ee0:	000f883a 	mov	r7,zero
 4018ee4:	01800144 	movi	r6,5
 4018ee8:	000b883a 	mov	r5,zero
 4018eec:	1009883a 	mov	r4,r2
 4018ef0:	40003c80 	call	40003c8 <draw>
draw(nine,COLOR08_WHITE, 5, 0);
 4018ef4:	000f883a 	mov	r7,zero
 4018ef8:	01800144 	movi	r6,5
 4018efc:	01403fc4 	movi	r5,255
 4018f00:	010100f4 	movhi	r4,1027
 4018f04:	213eaa04 	addi	r4,r4,-1368
 4018f08:	40003c80 	call	40003c8 <draw>
	printf("%u \n",IORD_ALTERA_AVALON_PIO_DATA(DIGITAL_CLOCK_BASE));
}
*/
//right

for(f=0;f<100000;f++)
 4018f0c:	e0b7c517 	ldw	r2,-8428(fp)
 4018f10:	10800044 	addi	r2,r2,1
 4018f14:	e0b7c515 	stw	r2,-8428(fp)
 4018f18:	e0f7c517 	ldw	r3,-8428(fp)
 4018f1c:	008000b4 	movhi	r2,2
 4018f20:	10a1a7c4 	addi	r2,r2,-31073
 4018f24:	10c00116 	blt	r2,r3,4018f2c <main+0x18958>
 4018f28:	40012101 	jmpi	4001210 <main+0xc3c>
{
draw(white, COLOR08_BLACK,5,0);
draw(nine,COLOR08_WHITE, 5, 0);
}
}
return 0;
 4018f2c:	0005883a 	mov	r2,zero
}
 4018f30:	e6fffe04 	addi	sp,fp,-8
 4018f34:	dfc00317 	ldw	ra,12(sp)
 4018f38:	df000217 	ldw	fp,8(sp)
 4018f3c:	dc400117 	ldw	r17,4(sp)
 4018f40:	dc000017 	ldw	r16,0(sp)
 4018f44:	dec00404 	addi	sp,sp,16
 4018f48:	f800283a 	ret

04018f4c <__divsi3>:
 4018f4c:	20001b16 	blt	r4,zero,4018fbc <__divsi3+0x70>
 4018f50:	000f883a 	mov	r7,zero
 4018f54:	28001616 	blt	r5,zero,4018fb0 <__divsi3+0x64>
 4018f58:	200d883a 	mov	r6,r4
 4018f5c:	29001a2e 	bgeu	r5,r4,4018fc8 <__divsi3+0x7c>
 4018f60:	00800804 	movi	r2,32
 4018f64:	00c00044 	movi	r3,1
 4018f68:	00000106 	br	4018f70 <__divsi3+0x24>
 4018f6c:	10000d26 	beq	r2,zero,4018fa4 <__divsi3+0x58>
 4018f70:	294b883a 	add	r5,r5,r5
 4018f74:	10bfffc4 	addi	r2,r2,-1
 4018f78:	18c7883a 	add	r3,r3,r3
 4018f7c:	293ffb36 	bltu	r5,r4,4018f6c <__alt_data_end+0xfc018f6c>
 4018f80:	0005883a 	mov	r2,zero
 4018f84:	18000726 	beq	r3,zero,4018fa4 <__divsi3+0x58>
 4018f88:	0005883a 	mov	r2,zero
 4018f8c:	31400236 	bltu	r6,r5,4018f98 <__divsi3+0x4c>
 4018f90:	314dc83a 	sub	r6,r6,r5
 4018f94:	10c4b03a 	or	r2,r2,r3
 4018f98:	1806d07a 	srli	r3,r3,1
 4018f9c:	280ad07a 	srli	r5,r5,1
 4018fa0:	183ffa1e 	bne	r3,zero,4018f8c <__alt_data_end+0xfc018f8c>
 4018fa4:	38000126 	beq	r7,zero,4018fac <__divsi3+0x60>
 4018fa8:	0085c83a 	sub	r2,zero,r2
 4018fac:	f800283a 	ret
 4018fb0:	014bc83a 	sub	r5,zero,r5
 4018fb4:	39c0005c 	xori	r7,r7,1
 4018fb8:	003fe706 	br	4018f58 <__alt_data_end+0xfc018f58>
 4018fbc:	0109c83a 	sub	r4,zero,r4
 4018fc0:	01c00044 	movi	r7,1
 4018fc4:	003fe306 	br	4018f54 <__alt_data_end+0xfc018f54>
 4018fc8:	00c00044 	movi	r3,1
 4018fcc:	003fee06 	br	4018f88 <__alt_data_end+0xfc018f88>

04018fd0 <__modsi3>:
 4018fd0:	20001716 	blt	r4,zero,4019030 <__modsi3+0x60>
 4018fd4:	000f883a 	mov	r7,zero
 4018fd8:	2005883a 	mov	r2,r4
 4018fdc:	28001216 	blt	r5,zero,4019028 <__modsi3+0x58>
 4018fe0:	2900162e 	bgeu	r5,r4,401903c <__modsi3+0x6c>
 4018fe4:	01800804 	movi	r6,32
 4018fe8:	00c00044 	movi	r3,1
 4018fec:	00000106 	br	4018ff4 <__modsi3+0x24>
 4018ff0:	30000a26 	beq	r6,zero,401901c <__modsi3+0x4c>
 4018ff4:	294b883a 	add	r5,r5,r5
 4018ff8:	31bfffc4 	addi	r6,r6,-1
 4018ffc:	18c7883a 	add	r3,r3,r3
 4019000:	293ffb36 	bltu	r5,r4,4018ff0 <__alt_data_end+0xfc018ff0>
 4019004:	18000526 	beq	r3,zero,401901c <__modsi3+0x4c>
 4019008:	1806d07a 	srli	r3,r3,1
 401900c:	11400136 	bltu	r2,r5,4019014 <__modsi3+0x44>
 4019010:	1145c83a 	sub	r2,r2,r5
 4019014:	280ad07a 	srli	r5,r5,1
 4019018:	183ffb1e 	bne	r3,zero,4019008 <__alt_data_end+0xfc019008>
 401901c:	38000126 	beq	r7,zero,4019024 <__modsi3+0x54>
 4019020:	0085c83a 	sub	r2,zero,r2
 4019024:	f800283a 	ret
 4019028:	014bc83a 	sub	r5,zero,r5
 401902c:	003fec06 	br	4018fe0 <__alt_data_end+0xfc018fe0>
 4019030:	0109c83a 	sub	r4,zero,r4
 4019034:	01c00044 	movi	r7,1
 4019038:	003fe706 	br	4018fd8 <__alt_data_end+0xfc018fd8>
 401903c:	00c00044 	movi	r3,1
 4019040:	003ff106 	br	4019008 <__alt_data_end+0xfc019008>

04019044 <__udivsi3>:
 4019044:	200d883a 	mov	r6,r4
 4019048:	2900152e 	bgeu	r5,r4,40190a0 <__udivsi3+0x5c>
 401904c:	28001416 	blt	r5,zero,40190a0 <__udivsi3+0x5c>
 4019050:	00800804 	movi	r2,32
 4019054:	00c00044 	movi	r3,1
 4019058:	00000206 	br	4019064 <__udivsi3+0x20>
 401905c:	10000e26 	beq	r2,zero,4019098 <__udivsi3+0x54>
 4019060:	28000516 	blt	r5,zero,4019078 <__udivsi3+0x34>
 4019064:	294b883a 	add	r5,r5,r5
 4019068:	10bfffc4 	addi	r2,r2,-1
 401906c:	18c7883a 	add	r3,r3,r3
 4019070:	293ffa36 	bltu	r5,r4,401905c <__alt_data_end+0xfc01905c>
 4019074:	18000826 	beq	r3,zero,4019098 <__udivsi3+0x54>
 4019078:	0005883a 	mov	r2,zero
 401907c:	31400236 	bltu	r6,r5,4019088 <__udivsi3+0x44>
 4019080:	314dc83a 	sub	r6,r6,r5
 4019084:	10c4b03a 	or	r2,r2,r3
 4019088:	1806d07a 	srli	r3,r3,1
 401908c:	280ad07a 	srli	r5,r5,1
 4019090:	183ffa1e 	bne	r3,zero,401907c <__alt_data_end+0xfc01907c>
 4019094:	f800283a 	ret
 4019098:	0005883a 	mov	r2,zero
 401909c:	f800283a 	ret
 40190a0:	00c00044 	movi	r3,1
 40190a4:	003ff406 	br	4019078 <__alt_data_end+0xfc019078>

040190a8 <__umodsi3>:
 40190a8:	2005883a 	mov	r2,r4
 40190ac:	2900122e 	bgeu	r5,r4,40190f8 <__umodsi3+0x50>
 40190b0:	28001116 	blt	r5,zero,40190f8 <__umodsi3+0x50>
 40190b4:	01800804 	movi	r6,32
 40190b8:	00c00044 	movi	r3,1
 40190bc:	00000206 	br	40190c8 <__umodsi3+0x20>
 40190c0:	30000c26 	beq	r6,zero,40190f4 <__umodsi3+0x4c>
 40190c4:	28000516 	blt	r5,zero,40190dc <__umodsi3+0x34>
 40190c8:	294b883a 	add	r5,r5,r5
 40190cc:	31bfffc4 	addi	r6,r6,-1
 40190d0:	18c7883a 	add	r3,r3,r3
 40190d4:	293ffa36 	bltu	r5,r4,40190c0 <__alt_data_end+0xfc0190c0>
 40190d8:	18000626 	beq	r3,zero,40190f4 <__umodsi3+0x4c>
 40190dc:	1806d07a 	srli	r3,r3,1
 40190e0:	11400136 	bltu	r2,r5,40190e8 <__umodsi3+0x40>
 40190e4:	1145c83a 	sub	r2,r2,r5
 40190e8:	280ad07a 	srli	r5,r5,1
 40190ec:	183ffb1e 	bne	r3,zero,40190dc <__alt_data_end+0xfc0190dc>
 40190f0:	f800283a 	ret
 40190f4:	f800283a 	ret
 40190f8:	00c00044 	movi	r3,1
 40190fc:	003ff706 	br	40190dc <__alt_data_end+0xfc0190dc>

04019100 <__mulsi3>:
 4019100:	0005883a 	mov	r2,zero
 4019104:	20000726 	beq	r4,zero,4019124 <__mulsi3+0x24>
 4019108:	20c0004c 	andi	r3,r4,1
 401910c:	2008d07a 	srli	r4,r4,1
 4019110:	18000126 	beq	r3,zero,4019118 <__mulsi3+0x18>
 4019114:	1145883a 	add	r2,r2,r5
 4019118:	294b883a 	add	r5,r5,r5
 401911c:	203ffa1e 	bne	r4,zero,4019108 <__alt_data_end+0xfc019108>
 4019120:	f800283a 	ret
 4019124:	f800283a 	ret

04019128 <memcpy>:
 4019128:	defffd04 	addi	sp,sp,-12
 401912c:	dfc00215 	stw	ra,8(sp)
 4019130:	dc400115 	stw	r17,4(sp)
 4019134:	dc000015 	stw	r16,0(sp)
 4019138:	00c003c4 	movi	r3,15
 401913c:	2005883a 	mov	r2,r4
 4019140:	1980452e 	bgeu	r3,r6,4019258 <memcpy+0x130>
 4019144:	2906b03a 	or	r3,r5,r4
 4019148:	18c000cc 	andi	r3,r3,3
 401914c:	1800441e 	bne	r3,zero,4019260 <memcpy+0x138>
 4019150:	347ffc04 	addi	r17,r6,-16
 4019154:	8822d13a 	srli	r17,r17,4
 4019158:	28c00104 	addi	r3,r5,4
 401915c:	23400104 	addi	r13,r4,4
 4019160:	8820913a 	slli	r16,r17,4
 4019164:	2b000204 	addi	r12,r5,8
 4019168:	22c00204 	addi	r11,r4,8
 401916c:	84000504 	addi	r16,r16,20
 4019170:	2a800304 	addi	r10,r5,12
 4019174:	22400304 	addi	r9,r4,12
 4019178:	2c21883a 	add	r16,r5,r16
 401917c:	2811883a 	mov	r8,r5
 4019180:	200f883a 	mov	r7,r4
 4019184:	41000017 	ldw	r4,0(r8)
 4019188:	1fc00017 	ldw	ra,0(r3)
 401918c:	63c00017 	ldw	r15,0(r12)
 4019190:	39000015 	stw	r4,0(r7)
 4019194:	53800017 	ldw	r14,0(r10)
 4019198:	6fc00015 	stw	ra,0(r13)
 401919c:	5bc00015 	stw	r15,0(r11)
 40191a0:	4b800015 	stw	r14,0(r9)
 40191a4:	18c00404 	addi	r3,r3,16
 40191a8:	39c00404 	addi	r7,r7,16
 40191ac:	42000404 	addi	r8,r8,16
 40191b0:	6b400404 	addi	r13,r13,16
 40191b4:	63000404 	addi	r12,r12,16
 40191b8:	5ac00404 	addi	r11,r11,16
 40191bc:	52800404 	addi	r10,r10,16
 40191c0:	4a400404 	addi	r9,r9,16
 40191c4:	1c3fef1e 	bne	r3,r16,4019184 <__alt_data_end+0xfc019184>
 40191c8:	89c00044 	addi	r7,r17,1
 40191cc:	380e913a 	slli	r7,r7,4
 40191d0:	310003cc 	andi	r4,r6,15
 40191d4:	02c000c4 	movi	r11,3
 40191d8:	11c7883a 	add	r3,r2,r7
 40191dc:	29cb883a 	add	r5,r5,r7
 40191e0:	5900212e 	bgeu	r11,r4,4019268 <memcpy+0x140>
 40191e4:	1813883a 	mov	r9,r3
 40191e8:	2811883a 	mov	r8,r5
 40191ec:	200f883a 	mov	r7,r4
 40191f0:	42800017 	ldw	r10,0(r8)
 40191f4:	4a400104 	addi	r9,r9,4
 40191f8:	39ffff04 	addi	r7,r7,-4
 40191fc:	4abfff15 	stw	r10,-4(r9)
 4019200:	42000104 	addi	r8,r8,4
 4019204:	59fffa36 	bltu	r11,r7,40191f0 <__alt_data_end+0xfc0191f0>
 4019208:	213fff04 	addi	r4,r4,-4
 401920c:	2008d0ba 	srli	r4,r4,2
 4019210:	318000cc 	andi	r6,r6,3
 4019214:	21000044 	addi	r4,r4,1
 4019218:	2109883a 	add	r4,r4,r4
 401921c:	2109883a 	add	r4,r4,r4
 4019220:	1907883a 	add	r3,r3,r4
 4019224:	290b883a 	add	r5,r5,r4
 4019228:	30000626 	beq	r6,zero,4019244 <memcpy+0x11c>
 401922c:	198d883a 	add	r6,r3,r6
 4019230:	29c00003 	ldbu	r7,0(r5)
 4019234:	18c00044 	addi	r3,r3,1
 4019238:	29400044 	addi	r5,r5,1
 401923c:	19ffffc5 	stb	r7,-1(r3)
 4019240:	19bffb1e 	bne	r3,r6,4019230 <__alt_data_end+0xfc019230>
 4019244:	dfc00217 	ldw	ra,8(sp)
 4019248:	dc400117 	ldw	r17,4(sp)
 401924c:	dc000017 	ldw	r16,0(sp)
 4019250:	dec00304 	addi	sp,sp,12
 4019254:	f800283a 	ret
 4019258:	2007883a 	mov	r3,r4
 401925c:	003ff206 	br	4019228 <__alt_data_end+0xfc019228>
 4019260:	2007883a 	mov	r3,r4
 4019264:	003ff106 	br	401922c <__alt_data_end+0xfc01922c>
 4019268:	200d883a 	mov	r6,r4
 401926c:	003fee06 	br	4019228 <__alt_data_end+0xfc019228>

04019270 <memset>:
 4019270:	20c000cc 	andi	r3,r4,3
 4019274:	2005883a 	mov	r2,r4
 4019278:	18004426 	beq	r3,zero,401938c <memset+0x11c>
 401927c:	31ffffc4 	addi	r7,r6,-1
 4019280:	30004026 	beq	r6,zero,4019384 <memset+0x114>
 4019284:	2813883a 	mov	r9,r5
 4019288:	200d883a 	mov	r6,r4
 401928c:	2007883a 	mov	r3,r4
 4019290:	00000406 	br	40192a4 <memset+0x34>
 4019294:	3a3fffc4 	addi	r8,r7,-1
 4019298:	31800044 	addi	r6,r6,1
 401929c:	38003926 	beq	r7,zero,4019384 <memset+0x114>
 40192a0:	400f883a 	mov	r7,r8
 40192a4:	18c00044 	addi	r3,r3,1
 40192a8:	32400005 	stb	r9,0(r6)
 40192ac:	1a0000cc 	andi	r8,r3,3
 40192b0:	403ff81e 	bne	r8,zero,4019294 <__alt_data_end+0xfc019294>
 40192b4:	010000c4 	movi	r4,3
 40192b8:	21c02d2e 	bgeu	r4,r7,4019370 <memset+0x100>
 40192bc:	29003fcc 	andi	r4,r5,255
 40192c0:	200c923a 	slli	r6,r4,8
 40192c4:	3108b03a 	or	r4,r6,r4
 40192c8:	200c943a 	slli	r6,r4,16
 40192cc:	218cb03a 	or	r6,r4,r6
 40192d0:	010003c4 	movi	r4,15
 40192d4:	21c0182e 	bgeu	r4,r7,4019338 <memset+0xc8>
 40192d8:	3b3ffc04 	addi	r12,r7,-16
 40192dc:	6018d13a 	srli	r12,r12,4
 40192e0:	1a000104 	addi	r8,r3,4
 40192e4:	1ac00204 	addi	r11,r3,8
 40192e8:	6008913a 	slli	r4,r12,4
 40192ec:	1a800304 	addi	r10,r3,12
 40192f0:	1813883a 	mov	r9,r3
 40192f4:	21000504 	addi	r4,r4,20
 40192f8:	1909883a 	add	r4,r3,r4
 40192fc:	49800015 	stw	r6,0(r9)
 4019300:	41800015 	stw	r6,0(r8)
 4019304:	59800015 	stw	r6,0(r11)
 4019308:	51800015 	stw	r6,0(r10)
 401930c:	42000404 	addi	r8,r8,16
 4019310:	4a400404 	addi	r9,r9,16
 4019314:	5ac00404 	addi	r11,r11,16
 4019318:	52800404 	addi	r10,r10,16
 401931c:	413ff71e 	bne	r8,r4,40192fc <__alt_data_end+0xfc0192fc>
 4019320:	63000044 	addi	r12,r12,1
 4019324:	6018913a 	slli	r12,r12,4
 4019328:	39c003cc 	andi	r7,r7,15
 401932c:	010000c4 	movi	r4,3
 4019330:	1b07883a 	add	r3,r3,r12
 4019334:	21c00e2e 	bgeu	r4,r7,4019370 <memset+0x100>
 4019338:	1813883a 	mov	r9,r3
 401933c:	3811883a 	mov	r8,r7
 4019340:	010000c4 	movi	r4,3
 4019344:	49800015 	stw	r6,0(r9)
 4019348:	423fff04 	addi	r8,r8,-4
 401934c:	4a400104 	addi	r9,r9,4
 4019350:	223ffc36 	bltu	r4,r8,4019344 <__alt_data_end+0xfc019344>
 4019354:	393fff04 	addi	r4,r7,-4
 4019358:	2008d0ba 	srli	r4,r4,2
 401935c:	39c000cc 	andi	r7,r7,3
 4019360:	21000044 	addi	r4,r4,1
 4019364:	2109883a 	add	r4,r4,r4
 4019368:	2109883a 	add	r4,r4,r4
 401936c:	1907883a 	add	r3,r3,r4
 4019370:	38000526 	beq	r7,zero,4019388 <memset+0x118>
 4019374:	19cf883a 	add	r7,r3,r7
 4019378:	19400005 	stb	r5,0(r3)
 401937c:	18c00044 	addi	r3,r3,1
 4019380:	38fffd1e 	bne	r7,r3,4019378 <__alt_data_end+0xfc019378>
 4019384:	f800283a 	ret
 4019388:	f800283a 	ret
 401938c:	2007883a 	mov	r3,r4
 4019390:	300f883a 	mov	r7,r6
 4019394:	003fc706 	br	40192b4 <__alt_data_end+0xfc0192b4>

04019398 <_printf_r>:
 4019398:	defffd04 	addi	sp,sp,-12
 401939c:	2805883a 	mov	r2,r5
 40193a0:	dfc00015 	stw	ra,0(sp)
 40193a4:	d9800115 	stw	r6,4(sp)
 40193a8:	d9c00215 	stw	r7,8(sp)
 40193ac:	21400217 	ldw	r5,8(r4)
 40193b0:	d9c00104 	addi	r7,sp,4
 40193b4:	100d883a 	mov	r6,r2
 40193b8:	40195ec0 	call	40195ec <___vfprintf_internal_r>
 40193bc:	dfc00017 	ldw	ra,0(sp)
 40193c0:	dec00304 	addi	sp,sp,12
 40193c4:	f800283a 	ret

040193c8 <printf>:
 40193c8:	defffc04 	addi	sp,sp,-16
 40193cc:	dfc00015 	stw	ra,0(sp)
 40193d0:	d9400115 	stw	r5,4(sp)
 40193d4:	d9800215 	stw	r6,8(sp)
 40193d8:	d9c00315 	stw	r7,12(sp)
 40193dc:	00810134 	movhi	r2,1028
 40193e0:	10af8104 	addi	r2,r2,-16892
 40193e4:	10800017 	ldw	r2,0(r2)
 40193e8:	200b883a 	mov	r5,r4
 40193ec:	d9800104 	addi	r6,sp,4
 40193f0:	11000217 	ldw	r4,8(r2)
 40193f4:	401b8c80 	call	401b8c8 <__vfprintf_internal>
 40193f8:	dfc00017 	ldw	ra,0(sp)
 40193fc:	dec00404 	addi	sp,sp,16
 4019400:	f800283a 	ret

04019404 <_puts_r>:
 4019404:	defff604 	addi	sp,sp,-40
 4019408:	dc000715 	stw	r16,28(sp)
 401940c:	2021883a 	mov	r16,r4
 4019410:	2809883a 	mov	r4,r5
 4019414:	dc400815 	stw	r17,32(sp)
 4019418:	dfc00915 	stw	ra,36(sp)
 401941c:	2823883a 	mov	r17,r5
 4019420:	40195540 	call	4019554 <strlen>
 4019424:	10c00044 	addi	r3,r2,1
 4019428:	d8800115 	stw	r2,4(sp)
 401942c:	008100f4 	movhi	r2,1027
 4019430:	10b05e04 	addi	r2,r2,-16008
 4019434:	d8800215 	stw	r2,8(sp)
 4019438:	00800044 	movi	r2,1
 401943c:	d8800315 	stw	r2,12(sp)
 4019440:	00800084 	movi	r2,2
 4019444:	dc400015 	stw	r17,0(sp)
 4019448:	d8c00615 	stw	r3,24(sp)
 401944c:	dec00415 	stw	sp,16(sp)
 4019450:	d8800515 	stw	r2,20(sp)
 4019454:	80000226 	beq	r16,zero,4019460 <_puts_r+0x5c>
 4019458:	80800e17 	ldw	r2,56(r16)
 401945c:	10001426 	beq	r2,zero,40194b0 <_puts_r+0xac>
 4019460:	81400217 	ldw	r5,8(r16)
 4019464:	2880030b 	ldhu	r2,12(r5)
 4019468:	10c8000c 	andi	r3,r2,8192
 401946c:	1800061e 	bne	r3,zero,4019488 <_puts_r+0x84>
 4019470:	29001917 	ldw	r4,100(r5)
 4019474:	00f7ffc4 	movi	r3,-8193
 4019478:	10880014 	ori	r2,r2,8192
 401947c:	20c6703a 	and	r3,r4,r3
 4019480:	2880030d 	sth	r2,12(r5)
 4019484:	28c01915 	stw	r3,100(r5)
 4019488:	d9800404 	addi	r6,sp,16
 401948c:	8009883a 	mov	r4,r16
 4019490:	401de300 	call	401de30 <__sfvwrite_r>
 4019494:	1000091e 	bne	r2,zero,40194bc <_puts_r+0xb8>
 4019498:	00800284 	movi	r2,10
 401949c:	dfc00917 	ldw	ra,36(sp)
 40194a0:	dc400817 	ldw	r17,32(sp)
 40194a4:	dc000717 	ldw	r16,28(sp)
 40194a8:	dec00a04 	addi	sp,sp,40
 40194ac:	f800283a 	ret
 40194b0:	8009883a 	mov	r4,r16
 40194b4:	401d9ac0 	call	401d9ac <__sinit>
 40194b8:	003fe906 	br	4019460 <__alt_data_end+0xfc019460>
 40194bc:	00bfffc4 	movi	r2,-1
 40194c0:	003ff606 	br	401949c <__alt_data_end+0xfc01949c>

040194c4 <puts>:
 40194c4:	00810134 	movhi	r2,1028
 40194c8:	10af8104 	addi	r2,r2,-16892
 40194cc:	200b883a 	mov	r5,r4
 40194d0:	11000017 	ldw	r4,0(r2)
 40194d4:	40194041 	jmpi	4019404 <_puts_r>

040194d8 <srand>:
 40194d8:	00810134 	movhi	r2,1028
 40194dc:	10af8104 	addi	r2,r2,-16892
 40194e0:	10800017 	ldw	r2,0(r2)
 40194e4:	11002915 	stw	r4,164(r2)
 40194e8:	10002a15 	stw	zero,168(r2)
 40194ec:	f800283a 	ret

040194f0 <rand>:
 40194f0:	00810134 	movhi	r2,1028
 40194f4:	defffe04 	addi	sp,sp,-8
 40194f8:	10af8104 	addi	r2,r2,-16892
 40194fc:	dc000015 	stw	r16,0(sp)
 4019500:	14000017 	ldw	r16,0(r2)
 4019504:	dfc00115 	stw	ra,4(sp)
 4019508:	01932574 	movhi	r6,19605
 401950c:	81002917 	ldw	r4,164(r16)
 4019510:	81402a17 	ldw	r5,168(r16)
 4019514:	01d614b4 	movhi	r7,22610
 4019518:	319fcb44 	addi	r6,r6,32557
 401951c:	39fd0b44 	addi	r7,r7,-3027
 4019520:	4022aa40 	call	4022aa4 <__muldi3>
 4019524:	11000044 	addi	r4,r2,1
 4019528:	2085803a 	cmpltu	r2,r4,r2
 401952c:	10c7883a 	add	r3,r2,r3
 4019530:	00a00034 	movhi	r2,32768
 4019534:	10bfffc4 	addi	r2,r2,-1
 4019538:	1884703a 	and	r2,r3,r2
 401953c:	81002915 	stw	r4,164(r16)
 4019540:	80c02a15 	stw	r3,168(r16)
 4019544:	dfc00117 	ldw	ra,4(sp)
 4019548:	dc000017 	ldw	r16,0(sp)
 401954c:	dec00204 	addi	sp,sp,8
 4019550:	f800283a 	ret

04019554 <strlen>:
 4019554:	208000cc 	andi	r2,r4,3
 4019558:	10002026 	beq	r2,zero,40195dc <strlen+0x88>
 401955c:	20800007 	ldb	r2,0(r4)
 4019560:	10002026 	beq	r2,zero,40195e4 <strlen+0x90>
 4019564:	2005883a 	mov	r2,r4
 4019568:	00000206 	br	4019574 <strlen+0x20>
 401956c:	10c00007 	ldb	r3,0(r2)
 4019570:	18001826 	beq	r3,zero,40195d4 <strlen+0x80>
 4019574:	10800044 	addi	r2,r2,1
 4019578:	10c000cc 	andi	r3,r2,3
 401957c:	183ffb1e 	bne	r3,zero,401956c <__alt_data_end+0xfc01956c>
 4019580:	10c00017 	ldw	r3,0(r2)
 4019584:	01ffbff4 	movhi	r7,65279
 4019588:	39ffbfc4 	addi	r7,r7,-257
 401958c:	00ca303a 	nor	r5,zero,r3
 4019590:	01a02074 	movhi	r6,32897
 4019594:	19c7883a 	add	r3,r3,r7
 4019598:	31a02004 	addi	r6,r6,-32640
 401959c:	1946703a 	and	r3,r3,r5
 40195a0:	1986703a 	and	r3,r3,r6
 40195a4:	1800091e 	bne	r3,zero,40195cc <strlen+0x78>
 40195a8:	10800104 	addi	r2,r2,4
 40195ac:	10c00017 	ldw	r3,0(r2)
 40195b0:	19cb883a 	add	r5,r3,r7
 40195b4:	00c6303a 	nor	r3,zero,r3
 40195b8:	28c6703a 	and	r3,r5,r3
 40195bc:	1986703a 	and	r3,r3,r6
 40195c0:	183ff926 	beq	r3,zero,40195a8 <__alt_data_end+0xfc0195a8>
 40195c4:	00000106 	br	40195cc <strlen+0x78>
 40195c8:	10800044 	addi	r2,r2,1
 40195cc:	10c00007 	ldb	r3,0(r2)
 40195d0:	183ffd1e 	bne	r3,zero,40195c8 <__alt_data_end+0xfc0195c8>
 40195d4:	1105c83a 	sub	r2,r2,r4
 40195d8:	f800283a 	ret
 40195dc:	2005883a 	mov	r2,r4
 40195e0:	003fe706 	br	4019580 <__alt_data_end+0xfc019580>
 40195e4:	0005883a 	mov	r2,zero
 40195e8:	f800283a 	ret

040195ec <___vfprintf_internal_r>:
 40195ec:	deffb804 	addi	sp,sp,-288
 40195f0:	dfc04715 	stw	ra,284(sp)
 40195f4:	ddc04515 	stw	r23,276(sp)
 40195f8:	dd404315 	stw	r21,268(sp)
 40195fc:	d9002d15 	stw	r4,180(sp)
 4019600:	282f883a 	mov	r23,r5
 4019604:	302b883a 	mov	r21,r6
 4019608:	d9c02e15 	stw	r7,184(sp)
 401960c:	df004615 	stw	fp,280(sp)
 4019610:	dd804415 	stw	r22,272(sp)
 4019614:	dd004215 	stw	r20,264(sp)
 4019618:	dcc04115 	stw	r19,260(sp)
 401961c:	dc804015 	stw	r18,256(sp)
 4019620:	dc403f15 	stw	r17,252(sp)
 4019624:	dc003e15 	stw	r16,248(sp)
 4019628:	401e52c0 	call	401e52c <_localeconv_r>
 401962c:	10800017 	ldw	r2,0(r2)
 4019630:	1009883a 	mov	r4,r2
 4019634:	d8803415 	stw	r2,208(sp)
 4019638:	40195540 	call	4019554 <strlen>
 401963c:	d8803715 	stw	r2,220(sp)
 4019640:	d8802d17 	ldw	r2,180(sp)
 4019644:	10000226 	beq	r2,zero,4019650 <___vfprintf_internal_r+0x64>
 4019648:	10800e17 	ldw	r2,56(r2)
 401964c:	1000fb26 	beq	r2,zero,4019a3c <___vfprintf_internal_r+0x450>
 4019650:	b880030b 	ldhu	r2,12(r23)
 4019654:	10c8000c 	andi	r3,r2,8192
 4019658:	1800061e 	bne	r3,zero,4019674 <___vfprintf_internal_r+0x88>
 401965c:	b9001917 	ldw	r4,100(r23)
 4019660:	00f7ffc4 	movi	r3,-8193
 4019664:	10880014 	ori	r2,r2,8192
 4019668:	20c6703a 	and	r3,r4,r3
 401966c:	b880030d 	sth	r2,12(r23)
 4019670:	b8c01915 	stw	r3,100(r23)
 4019674:	10c0020c 	andi	r3,r2,8
 4019678:	1800c326 	beq	r3,zero,4019988 <___vfprintf_internal_r+0x39c>
 401967c:	b8c00417 	ldw	r3,16(r23)
 4019680:	1800c126 	beq	r3,zero,4019988 <___vfprintf_internal_r+0x39c>
 4019684:	1080068c 	andi	r2,r2,26
 4019688:	00c00284 	movi	r3,10
 401968c:	10c0c626 	beq	r2,r3,40199a8 <___vfprintf_internal_r+0x3bc>
 4019690:	d8c00404 	addi	r3,sp,16
 4019694:	050100f4 	movhi	r20,1027
 4019698:	d9001e04 	addi	r4,sp,120
 401969c:	a5306f84 	addi	r20,r20,-15938
 40196a0:	d8c01e15 	stw	r3,120(sp)
 40196a4:	d8002015 	stw	zero,128(sp)
 40196a8:	d8001f15 	stw	zero,124(sp)
 40196ac:	d8003315 	stw	zero,204(sp)
 40196b0:	d8003615 	stw	zero,216(sp)
 40196b4:	d8003815 	stw	zero,224(sp)
 40196b8:	1811883a 	mov	r8,r3
 40196bc:	d8003915 	stw	zero,228(sp)
 40196c0:	d8003a15 	stw	zero,232(sp)
 40196c4:	d8002f15 	stw	zero,188(sp)
 40196c8:	d9002815 	stw	r4,160(sp)
 40196cc:	a8800007 	ldb	r2,0(r21)
 40196d0:	10028b26 	beq	r2,zero,401a100 <___vfprintf_internal_r+0xb14>
 40196d4:	00c00944 	movi	r3,37
 40196d8:	a823883a 	mov	r17,r21
 40196dc:	10c0021e 	bne	r2,r3,40196e8 <___vfprintf_internal_r+0xfc>
 40196e0:	00001406 	br	4019734 <___vfprintf_internal_r+0x148>
 40196e4:	10c00326 	beq	r2,r3,40196f4 <___vfprintf_internal_r+0x108>
 40196e8:	8c400044 	addi	r17,r17,1
 40196ec:	88800007 	ldb	r2,0(r17)
 40196f0:	103ffc1e 	bne	r2,zero,40196e4 <__alt_data_end+0xfc0196e4>
 40196f4:	8d61c83a 	sub	r16,r17,r21
 40196f8:	80000e26 	beq	r16,zero,4019734 <___vfprintf_internal_r+0x148>
 40196fc:	d8c02017 	ldw	r3,128(sp)
 4019700:	d8801f17 	ldw	r2,124(sp)
 4019704:	45400015 	stw	r21,0(r8)
 4019708:	1c07883a 	add	r3,r3,r16
 401970c:	10800044 	addi	r2,r2,1
 4019710:	d8c02015 	stw	r3,128(sp)
 4019714:	44000115 	stw	r16,4(r8)
 4019718:	d8801f15 	stw	r2,124(sp)
 401971c:	00c001c4 	movi	r3,7
 4019720:	1880a916 	blt	r3,r2,40199c8 <___vfprintf_internal_r+0x3dc>
 4019724:	42000204 	addi	r8,r8,8
 4019728:	d9402f17 	ldw	r5,188(sp)
 401972c:	2c0b883a 	add	r5,r5,r16
 4019730:	d9402f15 	stw	r5,188(sp)
 4019734:	88800007 	ldb	r2,0(r17)
 4019738:	1000aa26 	beq	r2,zero,40199e4 <___vfprintf_internal_r+0x3f8>
 401973c:	8d400044 	addi	r21,r17,1
 4019740:	8c400047 	ldb	r17,1(r17)
 4019744:	0021883a 	mov	r16,zero
 4019748:	00bfffc4 	movi	r2,-1
 401974c:	0025883a 	mov	r18,zero
 4019750:	dc002905 	stb	r16,164(sp)
 4019754:	d8002785 	stb	zero,158(sp)
 4019758:	d8002b05 	stb	zero,172(sp)
 401975c:	d8802a15 	stw	r2,168(sp)
 4019760:	d8003115 	stw	zero,196(sp)
 4019764:	04c01604 	movi	r19,88
 4019768:	05800244 	movi	r22,9
 401976c:	9021883a 	mov	r16,r18
 4019770:	4039883a 	mov	fp,r8
 4019774:	ad400044 	addi	r21,r21,1
 4019778:	88bff804 	addi	r2,r17,-32
 401977c:	98833236 	bltu	r19,r2,401a448 <___vfprintf_internal_r+0xe5c>
 4019780:	100490ba 	slli	r2,r2,2
 4019784:	00c100b4 	movhi	r3,1026
 4019788:	18e5e604 	addi	r3,r3,-26728
 401978c:	10c5883a 	add	r2,r2,r3
 4019790:	10800017 	ldw	r2,0(r2)
 4019794:	1000683a 	jmp	r2
 4019798:	0401a340 	call	401a34 <__alt_mem_SDRAM-0x3bfe5cc>
 401979c:	0401a448 	cmpgei	r16,zero,1681
 40197a0:	0401a448 	cmpgei	r16,zero,1681
 40197a4:	0401a360 	cmpeqi	r16,zero,1677
 40197a8:	0401a448 	cmpgei	r16,zero,1681
 40197ac:	0401a448 	cmpgei	r16,zero,1681
 40197b0:	0401a448 	cmpgei	r16,zero,1681
 40197b4:	0401a448 	cmpgei	r16,zero,1681
 40197b8:	0401a448 	cmpgei	r16,zero,1681
 40197bc:	0401a448 	cmpgei	r16,zero,1681
 40197c0:	04019a48 	cmpgei	r16,zero,1641
 40197c4:	0401a250 	cmplti	r16,zero,1673
 40197c8:	0401a448 	cmpgei	r16,zero,1681
 40197cc:	0401990c 	andi	r16,zero,1636
 40197d0:	04019a6c 	andhi	r16,zero,1641
 40197d4:	0401a448 	cmpgei	r16,zero,1681
 40197d8:	04019abc 	xorhi	r16,zero,1642
 40197dc:	04019ac8 	cmpgei	r16,zero,1643
 40197e0:	04019ac8 	cmpgei	r16,zero,1643
 40197e4:	04019ac8 	cmpgei	r16,zero,1643
 40197e8:	04019ac8 	cmpgei	r16,zero,1643
 40197ec:	04019ac8 	cmpgei	r16,zero,1643
 40197f0:	04019ac8 	cmpgei	r16,zero,1643
 40197f4:	04019ac8 	cmpgei	r16,zero,1643
 40197f8:	04019ac8 	cmpgei	r16,zero,1643
 40197fc:	04019ac8 	cmpgei	r16,zero,1643
 4019800:	0401a448 	cmpgei	r16,zero,1681
 4019804:	0401a448 	cmpgei	r16,zero,1681
 4019808:	0401a448 	cmpgei	r16,zero,1681
 401980c:	0401a448 	cmpgei	r16,zero,1681
 4019810:	0401a448 	cmpgei	r16,zero,1681
 4019814:	0401a448 	cmpgei	r16,zero,1681
 4019818:	0401a448 	cmpgei	r16,zero,1681
 401981c:	0401a448 	cmpgei	r16,zero,1681
 4019820:	0401a448 	cmpgei	r16,zero,1681
 4019824:	0401a448 	cmpgei	r16,zero,1681
 4019828:	04019b04 	movi	r16,1644
 401982c:	04019bcc 	andi	r16,zero,1647
 4019830:	0401a448 	cmpgei	r16,zero,1681
 4019834:	04019bcc 	andi	r16,zero,1647
 4019838:	0401a448 	cmpgei	r16,zero,1681
 401983c:	0401a448 	cmpgei	r16,zero,1681
 4019840:	0401a448 	cmpgei	r16,zero,1681
 4019844:	0401a448 	cmpgei	r16,zero,1681
 4019848:	04019c78 	rdprs	r16,zero,1649
 401984c:	0401a448 	cmpgei	r16,zero,1681
 4019850:	0401a448 	cmpgei	r16,zero,1681
 4019854:	04019c84 	movi	r16,1650
 4019858:	0401a448 	cmpgei	r16,zero,1681
 401985c:	0401a448 	cmpgei	r16,zero,1681
 4019860:	0401a448 	cmpgei	r16,zero,1681
 4019864:	0401a448 	cmpgei	r16,zero,1681
 4019868:	0401a448 	cmpgei	r16,zero,1681
 401986c:	0401a108 	cmpgei	r16,zero,1668
 4019870:	0401a448 	cmpgei	r16,zero,1681
 4019874:	0401a448 	cmpgei	r16,zero,1681
 4019878:	0401a174 	movhi	r16,1669
 401987c:	0401a448 	cmpgei	r16,zero,1681
 4019880:	0401a448 	cmpgei	r16,zero,1681
 4019884:	0401a448 	cmpgei	r16,zero,1681
 4019888:	0401a448 	cmpgei	r16,zero,1681
 401988c:	0401a448 	cmpgei	r16,zero,1681
 4019890:	0401a448 	cmpgei	r16,zero,1681
 4019894:	0401a448 	cmpgei	r16,zero,1681
 4019898:	0401a448 	cmpgei	r16,zero,1681
 401989c:	0401a448 	cmpgei	r16,zero,1681
 40198a0:	0401a448 	cmpgei	r16,zero,1681
 40198a4:	0401a3ec 	andhi	r16,zero,1679
 40198a8:	0401a36c 	andhi	r16,zero,1677
 40198ac:	04019bcc 	andi	r16,zero,1647
 40198b0:	04019bcc 	andi	r16,zero,1647
 40198b4:	04019bcc 	andi	r16,zero,1647
 40198b8:	0401a38c 	andi	r16,zero,1678
 40198bc:	0401a36c 	andhi	r16,zero,1677
 40198c0:	0401a448 	cmpgei	r16,zero,1681
 40198c4:	0401a448 	cmpgei	r16,zero,1681
 40198c8:	0401a398 	cmpnei	r16,zero,1678
 40198cc:	0401a448 	cmpgei	r16,zero,1681
 40198d0:	0401a3ac 	andhi	r16,zero,1678
 40198d4:	0401a230 	cmpltui	r16,zero,1672
 40198d8:	04019918 	cmpnei	r16,zero,1636
 40198dc:	0401a268 	cmpgeui	r16,zero,1673
 40198e0:	0401a448 	cmpgei	r16,zero,1681
 40198e4:	0401a274 	movhi	r16,1673
 40198e8:	0401a448 	cmpgei	r16,zero,1681
 40198ec:	0401a2d8 	cmpnei	r16,zero,1675
 40198f0:	0401a448 	cmpgei	r16,zero,1681
 40198f4:	0401a448 	cmpgei	r16,zero,1681
 40198f8:	0401a2f8 	rdprs	r16,zero,1675
 40198fc:	d8c03117 	ldw	r3,196(sp)
 4019900:	d8802e15 	stw	r2,184(sp)
 4019904:	00c7c83a 	sub	r3,zero,r3
 4019908:	d8c03115 	stw	r3,196(sp)
 401990c:	84000114 	ori	r16,r16,4
 4019910:	ac400007 	ldb	r17,0(r21)
 4019914:	003f9706 	br	4019774 <__alt_data_end+0xfc019774>
 4019918:	00800c04 	movi	r2,48
 401991c:	d8802705 	stb	r2,156(sp)
 4019920:	00801e04 	movi	r2,120
 4019924:	d8802745 	stb	r2,157(sp)
 4019928:	d9002a17 	ldw	r4,168(sp)
 401992c:	d8802e17 	ldw	r2,184(sp)
 4019930:	d8002785 	stb	zero,158(sp)
 4019934:	e011883a 	mov	r8,fp
 4019938:	10c00104 	addi	r3,r2,4
 401993c:	14c00017 	ldw	r19,0(r2)
 4019940:	002d883a 	mov	r22,zero
 4019944:	80800094 	ori	r2,r16,2
 4019948:	2002ca16 	blt	r4,zero,401a474 <___vfprintf_internal_r+0xe88>
 401994c:	00bfdfc4 	movi	r2,-129
 4019950:	80a4703a 	and	r18,r16,r2
 4019954:	d8c02e15 	stw	r3,184(sp)
 4019958:	94800094 	ori	r18,r18,2
 401995c:	9802b41e 	bne	r19,zero,401a430 <___vfprintf_internal_r+0xe44>
 4019960:	014100f4 	movhi	r5,1027
 4019964:	29706804 	addi	r5,r5,-15968
 4019968:	d9403915 	stw	r5,228(sp)
 401996c:	04401e04 	movi	r17,120
 4019970:	d8802a17 	ldw	r2,168(sp)
 4019974:	0039883a 	mov	fp,zero
 4019978:	1001fa26 	beq	r2,zero,401a164 <___vfprintf_internal_r+0xb78>
 401997c:	0027883a 	mov	r19,zero
 4019980:	002d883a 	mov	r22,zero
 4019984:	00021906 	br	401a1ec <___vfprintf_internal_r+0xc00>
 4019988:	d9002d17 	ldw	r4,180(sp)
 401998c:	b80b883a 	mov	r5,r23
 4019990:	401b9a00 	call	401b9a0 <__swsetup_r>
 4019994:	1005dc1e 	bne	r2,zero,401b108 <___vfprintf_internal_r+0x1b1c>
 4019998:	b880030b 	ldhu	r2,12(r23)
 401999c:	00c00284 	movi	r3,10
 40199a0:	1080068c 	andi	r2,r2,26
 40199a4:	10ff3a1e 	bne	r2,r3,4019690 <__alt_data_end+0xfc019690>
 40199a8:	b880038f 	ldh	r2,14(r23)
 40199ac:	103f3816 	blt	r2,zero,4019690 <__alt_data_end+0xfc019690>
 40199b0:	d9c02e17 	ldw	r7,184(sp)
 40199b4:	d9002d17 	ldw	r4,180(sp)
 40199b8:	a80d883a 	mov	r6,r21
 40199bc:	b80b883a 	mov	r5,r23
 40199c0:	401b8e40 	call	401b8e4 <__sbprintf>
 40199c4:	00001106 	br	4019a0c <___vfprintf_internal_r+0x420>
 40199c8:	d9002d17 	ldw	r4,180(sp)
 40199cc:	d9801e04 	addi	r6,sp,120
 40199d0:	b80b883a 	mov	r5,r23
 40199d4:	4020b5c0 	call	4020b5c <__sprint_r>
 40199d8:	1000081e 	bne	r2,zero,40199fc <___vfprintf_internal_r+0x410>
 40199dc:	da000404 	addi	r8,sp,16
 40199e0:	003f5106 	br	4019728 <__alt_data_end+0xfc019728>
 40199e4:	d8802017 	ldw	r2,128(sp)
 40199e8:	10000426 	beq	r2,zero,40199fc <___vfprintf_internal_r+0x410>
 40199ec:	d9002d17 	ldw	r4,180(sp)
 40199f0:	d9801e04 	addi	r6,sp,120
 40199f4:	b80b883a 	mov	r5,r23
 40199f8:	4020b5c0 	call	4020b5c <__sprint_r>
 40199fc:	b880030b 	ldhu	r2,12(r23)
 4019a00:	1080100c 	andi	r2,r2,64
 4019a04:	1005c01e 	bne	r2,zero,401b108 <___vfprintf_internal_r+0x1b1c>
 4019a08:	d8802f17 	ldw	r2,188(sp)
 4019a0c:	dfc04717 	ldw	ra,284(sp)
 4019a10:	df004617 	ldw	fp,280(sp)
 4019a14:	ddc04517 	ldw	r23,276(sp)
 4019a18:	dd804417 	ldw	r22,272(sp)
 4019a1c:	dd404317 	ldw	r21,268(sp)
 4019a20:	dd004217 	ldw	r20,264(sp)
 4019a24:	dcc04117 	ldw	r19,260(sp)
 4019a28:	dc804017 	ldw	r18,256(sp)
 4019a2c:	dc403f17 	ldw	r17,252(sp)
 4019a30:	dc003e17 	ldw	r16,248(sp)
 4019a34:	dec04804 	addi	sp,sp,288
 4019a38:	f800283a 	ret
 4019a3c:	d9002d17 	ldw	r4,180(sp)
 4019a40:	401d9ac0 	call	401d9ac <__sinit>
 4019a44:	003f0206 	br	4019650 <__alt_data_end+0xfc019650>
 4019a48:	d9002e17 	ldw	r4,184(sp)
 4019a4c:	d9402e17 	ldw	r5,184(sp)
 4019a50:	21000017 	ldw	r4,0(r4)
 4019a54:	28800104 	addi	r2,r5,4
 4019a58:	d9003115 	stw	r4,196(sp)
 4019a5c:	203fa716 	blt	r4,zero,40198fc <__alt_data_end+0xfc0198fc>
 4019a60:	d8802e15 	stw	r2,184(sp)
 4019a64:	ac400007 	ldb	r17,0(r21)
 4019a68:	003f4206 	br	4019774 <__alt_data_end+0xfc019774>
 4019a6c:	ac400007 	ldb	r17,0(r21)
 4019a70:	01000a84 	movi	r4,42
 4019a74:	a8c00044 	addi	r3,r21,1
 4019a78:	89075826 	beq	r17,r4,401b7dc <___vfprintf_internal_r+0x21f0>
 4019a7c:	8cbff404 	addi	r18,r17,-48
 4019a80:	b486ae36 	bltu	r22,r18,401b53c <___vfprintf_internal_r+0x1f50>
 4019a84:	0009883a 	mov	r4,zero
 4019a88:	1823883a 	mov	r17,r3
 4019a8c:	01400284 	movi	r5,10
 4019a90:	40191000 	call	4019100 <__mulsi3>
 4019a94:	88c00007 	ldb	r3,0(r17)
 4019a98:	1489883a 	add	r4,r2,r18
 4019a9c:	8d400044 	addi	r21,r17,1
 4019aa0:	1cbff404 	addi	r18,r3,-48
 4019aa4:	a823883a 	mov	r17,r21
 4019aa8:	b4bff82e 	bgeu	r22,r18,4019a8c <__alt_data_end+0xfc019a8c>
 4019aac:	1823883a 	mov	r17,r3
 4019ab0:	2005f616 	blt	r4,zero,401b28c <___vfprintf_internal_r+0x1ca0>
 4019ab4:	d9002a15 	stw	r4,168(sp)
 4019ab8:	003f2f06 	br	4019778 <__alt_data_end+0xfc019778>
 4019abc:	84002014 	ori	r16,r16,128
 4019ac0:	ac400007 	ldb	r17,0(r21)
 4019ac4:	003f2b06 	br	4019774 <__alt_data_end+0xfc019774>
 4019ac8:	8cbff404 	addi	r18,r17,-48
 4019acc:	d8003115 	stw	zero,196(sp)
 4019ad0:	0009883a 	mov	r4,zero
 4019ad4:	a823883a 	mov	r17,r21
 4019ad8:	01400284 	movi	r5,10
 4019adc:	40191000 	call	4019100 <__mulsi3>
 4019ae0:	88c00007 	ldb	r3,0(r17)
 4019ae4:	9089883a 	add	r4,r18,r2
 4019ae8:	ad400044 	addi	r21,r21,1
 4019aec:	1cbff404 	addi	r18,r3,-48
 4019af0:	a823883a 	mov	r17,r21
 4019af4:	b4bff82e 	bgeu	r22,r18,4019ad8 <__alt_data_end+0xfc019ad8>
 4019af8:	1823883a 	mov	r17,r3
 4019afc:	d9003115 	stw	r4,196(sp)
 4019b00:	003f1d06 	br	4019778 <__alt_data_end+0xfc019778>
 4019b04:	8025883a 	mov	r18,r16
 4019b08:	dc002903 	ldbu	r16,164(sp)
 4019b0c:	e011883a 	mov	r8,fp
 4019b10:	84003fcc 	andi	r16,r16,255
 4019b14:	8007531e 	bne	r16,zero,401b864 <___vfprintf_internal_r+0x2278>
 4019b18:	94800414 	ori	r18,r18,16
 4019b1c:	9080080c 	andi	r2,r18,32
 4019b20:	1003a326 	beq	r2,zero,401a9b0 <___vfprintf_internal_r+0x13c4>
 4019b24:	d9002e17 	ldw	r4,184(sp)
 4019b28:	20800117 	ldw	r2,4(r4)
 4019b2c:	24c00017 	ldw	r19,0(r4)
 4019b30:	21000204 	addi	r4,r4,8
 4019b34:	d9002e15 	stw	r4,184(sp)
 4019b38:	102d883a 	mov	r22,r2
 4019b3c:	10047316 	blt	r2,zero,401ad0c <___vfprintf_internal_r+0x1720>
 4019b40:	d9002a17 	ldw	r4,168(sp)
 4019b44:	df002783 	ldbu	fp,158(sp)
 4019b48:	2003e416 	blt	r4,zero,401aadc <___vfprintf_internal_r+0x14f0>
 4019b4c:	00ffdfc4 	movi	r3,-129
 4019b50:	9d84b03a 	or	r2,r19,r22
 4019b54:	90e4703a 	and	r18,r18,r3
 4019b58:	10018026 	beq	r2,zero,401a15c <___vfprintf_internal_r+0xb70>
 4019b5c:	b003ab26 	beq	r22,zero,401aa0c <___vfprintf_internal_r+0x1420>
 4019b60:	dc402915 	stw	r17,164(sp)
 4019b64:	dc001e04 	addi	r16,sp,120
 4019b68:	b023883a 	mov	r17,r22
 4019b6c:	402d883a 	mov	r22,r8
 4019b70:	9809883a 	mov	r4,r19
 4019b74:	880b883a 	mov	r5,r17
 4019b78:	01800284 	movi	r6,10
 4019b7c:	000f883a 	mov	r7,zero
 4019b80:	40231ac0 	call	40231ac <__umoddi3>
 4019b84:	10800c04 	addi	r2,r2,48
 4019b88:	843fffc4 	addi	r16,r16,-1
 4019b8c:	9809883a 	mov	r4,r19
 4019b90:	880b883a 	mov	r5,r17
 4019b94:	80800005 	stb	r2,0(r16)
 4019b98:	01800284 	movi	r6,10
 4019b9c:	000f883a 	mov	r7,zero
 4019ba0:	4022bb00 	call	4022bb0 <__udivdi3>
 4019ba4:	1027883a 	mov	r19,r2
 4019ba8:	10c4b03a 	or	r2,r2,r3
 4019bac:	1823883a 	mov	r17,r3
 4019bb0:	103fef1e 	bne	r2,zero,4019b70 <__alt_data_end+0xfc019b70>
 4019bb4:	d8c02817 	ldw	r3,160(sp)
 4019bb8:	dc402917 	ldw	r17,164(sp)
 4019bbc:	b011883a 	mov	r8,r22
 4019bc0:	1c07c83a 	sub	r3,r3,r16
 4019bc4:	d8c02b15 	stw	r3,172(sp)
 4019bc8:	00005f06 	br	4019d48 <___vfprintf_internal_r+0x75c>
 4019bcc:	8025883a 	mov	r18,r16
 4019bd0:	dc002903 	ldbu	r16,164(sp)
 4019bd4:	e011883a 	mov	r8,fp
 4019bd8:	84003fcc 	andi	r16,r16,255
 4019bdc:	80071e1e 	bne	r16,zero,401b858 <___vfprintf_internal_r+0x226c>
 4019be0:	9080020c 	andi	r2,r18,8
 4019be4:	1004af26 	beq	r2,zero,401aea4 <___vfprintf_internal_r+0x18b8>
 4019be8:	d9002e17 	ldw	r4,184(sp)
 4019bec:	d9402e17 	ldw	r5,184(sp)
 4019bf0:	d8802e17 	ldw	r2,184(sp)
 4019bf4:	21000017 	ldw	r4,0(r4)
 4019bf8:	29400117 	ldw	r5,4(r5)
 4019bfc:	10800204 	addi	r2,r2,8
 4019c00:	d9003615 	stw	r4,216(sp)
 4019c04:	d9403815 	stw	r5,224(sp)
 4019c08:	d8802e15 	stw	r2,184(sp)
 4019c0c:	d9003617 	ldw	r4,216(sp)
 4019c10:	d9403817 	ldw	r5,224(sp)
 4019c14:	da003d15 	stw	r8,244(sp)
 4019c18:	04000044 	movi	r16,1
 4019c1c:	40207800 	call	4020780 <__fpclassifyd>
 4019c20:	da003d17 	ldw	r8,244(sp)
 4019c24:	1404441e 	bne	r2,r16,401ad38 <___vfprintf_internal_r+0x174c>
 4019c28:	d9003617 	ldw	r4,216(sp)
 4019c2c:	d9403817 	ldw	r5,224(sp)
 4019c30:	000d883a 	mov	r6,zero
 4019c34:	000f883a 	mov	r7,zero
 4019c38:	4024b500 	call	4024b50 <__ledf2>
 4019c3c:	da003d17 	ldw	r8,244(sp)
 4019c40:	1005e316 	blt	r2,zero,401b3d0 <___vfprintf_internal_r+0x1de4>
 4019c44:	df002783 	ldbu	fp,158(sp)
 4019c48:	008011c4 	movi	r2,71
 4019c4c:	1445580e 	bge	r2,r17,401b1b0 <___vfprintf_internal_r+0x1bc4>
 4019c50:	040100f4 	movhi	r16,1027
 4019c54:	84306004 	addi	r16,r16,-16000
 4019c58:	00c000c4 	movi	r3,3
 4019c5c:	00bfdfc4 	movi	r2,-129
 4019c60:	d8c02915 	stw	r3,164(sp)
 4019c64:	90a4703a 	and	r18,r18,r2
 4019c68:	d8c02b15 	stw	r3,172(sp)
 4019c6c:	d8002a15 	stw	zero,168(sp)
 4019c70:	d8003215 	stw	zero,200(sp)
 4019c74:	00003a06 	br	4019d60 <___vfprintf_internal_r+0x774>
 4019c78:	84000214 	ori	r16,r16,8
 4019c7c:	ac400007 	ldb	r17,0(r21)
 4019c80:	003ebc06 	br	4019774 <__alt_data_end+0xfc019774>
 4019c84:	8025883a 	mov	r18,r16
 4019c88:	dc002903 	ldbu	r16,164(sp)
 4019c8c:	e011883a 	mov	r8,fp
 4019c90:	84003fcc 	andi	r16,r16,255
 4019c94:	8007001e 	bne	r16,zero,401b898 <___vfprintf_internal_r+0x22ac>
 4019c98:	94800414 	ori	r18,r18,16
 4019c9c:	9080080c 	andi	r2,r18,32
 4019ca0:	1002fa26 	beq	r2,zero,401a88c <___vfprintf_internal_r+0x12a0>
 4019ca4:	d9002e17 	ldw	r4,184(sp)
 4019ca8:	d9402a17 	ldw	r5,168(sp)
 4019cac:	d8002785 	stb	zero,158(sp)
 4019cb0:	20800204 	addi	r2,r4,8
 4019cb4:	24c00017 	ldw	r19,0(r4)
 4019cb8:	25800117 	ldw	r22,4(r4)
 4019cbc:	2804b116 	blt	r5,zero,401af84 <___vfprintf_internal_r+0x1998>
 4019cc0:	013fdfc4 	movi	r4,-129
 4019cc4:	9d86b03a 	or	r3,r19,r22
 4019cc8:	d8802e15 	stw	r2,184(sp)
 4019ccc:	9124703a 	and	r18,r18,r4
 4019cd0:	1802fb1e 	bne	r3,zero,401a8c0 <___vfprintf_internal_r+0x12d4>
 4019cd4:	d8c02a17 	ldw	r3,168(sp)
 4019cd8:	0039883a 	mov	fp,zero
 4019cdc:	1805e526 	beq	r3,zero,401b474 <___vfprintf_internal_r+0x1e88>
 4019ce0:	0027883a 	mov	r19,zero
 4019ce4:	002d883a 	mov	r22,zero
 4019ce8:	dc001e04 	addi	r16,sp,120
 4019cec:	9806d0fa 	srli	r3,r19,3
 4019cf0:	b008977a 	slli	r4,r22,29
 4019cf4:	b02cd0fa 	srli	r22,r22,3
 4019cf8:	9cc001cc 	andi	r19,r19,7
 4019cfc:	98800c04 	addi	r2,r19,48
 4019d00:	843fffc4 	addi	r16,r16,-1
 4019d04:	20e6b03a 	or	r19,r4,r3
 4019d08:	80800005 	stb	r2,0(r16)
 4019d0c:	9d86b03a 	or	r3,r19,r22
 4019d10:	183ff61e 	bne	r3,zero,4019cec <__alt_data_end+0xfc019cec>
 4019d14:	90c0004c 	andi	r3,r18,1
 4019d18:	18014126 	beq	r3,zero,401a220 <___vfprintf_internal_r+0xc34>
 4019d1c:	10803fcc 	andi	r2,r2,255
 4019d20:	1080201c 	xori	r2,r2,128
 4019d24:	10bfe004 	addi	r2,r2,-128
 4019d28:	00c00c04 	movi	r3,48
 4019d2c:	10c13c26 	beq	r2,r3,401a220 <___vfprintf_internal_r+0xc34>
 4019d30:	80ffffc5 	stb	r3,-1(r16)
 4019d34:	d8c02817 	ldw	r3,160(sp)
 4019d38:	80bfffc4 	addi	r2,r16,-1
 4019d3c:	1021883a 	mov	r16,r2
 4019d40:	1887c83a 	sub	r3,r3,r2
 4019d44:	d8c02b15 	stw	r3,172(sp)
 4019d48:	d8802b17 	ldw	r2,172(sp)
 4019d4c:	d9002a17 	ldw	r4,168(sp)
 4019d50:	1100010e 	bge	r2,r4,4019d58 <___vfprintf_internal_r+0x76c>
 4019d54:	2005883a 	mov	r2,r4
 4019d58:	d8802915 	stw	r2,164(sp)
 4019d5c:	d8003215 	stw	zero,200(sp)
 4019d60:	e7003fcc 	andi	fp,fp,255
 4019d64:	e700201c 	xori	fp,fp,128
 4019d68:	e73fe004 	addi	fp,fp,-128
 4019d6c:	e0000326 	beq	fp,zero,4019d7c <___vfprintf_internal_r+0x790>
 4019d70:	d8c02917 	ldw	r3,164(sp)
 4019d74:	18c00044 	addi	r3,r3,1
 4019d78:	d8c02915 	stw	r3,164(sp)
 4019d7c:	90c0008c 	andi	r3,r18,2
 4019d80:	d8c02c15 	stw	r3,176(sp)
 4019d84:	18000326 	beq	r3,zero,4019d94 <___vfprintf_internal_r+0x7a8>
 4019d88:	d8c02917 	ldw	r3,164(sp)
 4019d8c:	18c00084 	addi	r3,r3,2
 4019d90:	d8c02915 	stw	r3,164(sp)
 4019d94:	90c0210c 	andi	r3,r18,132
 4019d98:	d8c03015 	stw	r3,192(sp)
 4019d9c:	1801c51e 	bne	r3,zero,401a4b4 <___vfprintf_internal_r+0xec8>
 4019da0:	d9003117 	ldw	r4,196(sp)
 4019da4:	d8c02917 	ldw	r3,164(sp)
 4019da8:	20e7c83a 	sub	r19,r4,r3
 4019dac:	04c1c10e 	bge	zero,r19,401a4b4 <___vfprintf_internal_r+0xec8>
 4019db0:	02400404 	movi	r9,16
 4019db4:	d8c02017 	ldw	r3,128(sp)
 4019db8:	d8801f17 	ldw	r2,124(sp)
 4019dbc:	4cc52f0e 	bge	r9,r19,401b27c <___vfprintf_internal_r+0x1c90>
 4019dc0:	014100f4 	movhi	r5,1027
 4019dc4:	29707384 	addi	r5,r5,-15922
 4019dc8:	dc403b15 	stw	r17,236(sp)
 4019dcc:	d9403515 	stw	r5,212(sp)
 4019dd0:	9823883a 	mov	r17,r19
 4019dd4:	482d883a 	mov	r22,r9
 4019dd8:	9027883a 	mov	r19,r18
 4019ddc:	070001c4 	movi	fp,7
 4019de0:	8025883a 	mov	r18,r16
 4019de4:	dc002d17 	ldw	r16,180(sp)
 4019de8:	00000306 	br	4019df8 <___vfprintf_internal_r+0x80c>
 4019dec:	8c7ffc04 	addi	r17,r17,-16
 4019df0:	42000204 	addi	r8,r8,8
 4019df4:	b440130e 	bge	r22,r17,4019e44 <___vfprintf_internal_r+0x858>
 4019df8:	010100f4 	movhi	r4,1027
 4019dfc:	18c00404 	addi	r3,r3,16
 4019e00:	10800044 	addi	r2,r2,1
 4019e04:	21307384 	addi	r4,r4,-15922
 4019e08:	41000015 	stw	r4,0(r8)
 4019e0c:	45800115 	stw	r22,4(r8)
 4019e10:	d8c02015 	stw	r3,128(sp)
 4019e14:	d8801f15 	stw	r2,124(sp)
 4019e18:	e0bff40e 	bge	fp,r2,4019dec <__alt_data_end+0xfc019dec>
 4019e1c:	d9801e04 	addi	r6,sp,120
 4019e20:	b80b883a 	mov	r5,r23
 4019e24:	8009883a 	mov	r4,r16
 4019e28:	4020b5c0 	call	4020b5c <__sprint_r>
 4019e2c:	103ef31e 	bne	r2,zero,40199fc <__alt_data_end+0xfc0199fc>
 4019e30:	8c7ffc04 	addi	r17,r17,-16
 4019e34:	d8c02017 	ldw	r3,128(sp)
 4019e38:	d8801f17 	ldw	r2,124(sp)
 4019e3c:	da000404 	addi	r8,sp,16
 4019e40:	b47fed16 	blt	r22,r17,4019df8 <__alt_data_end+0xfc019df8>
 4019e44:	9021883a 	mov	r16,r18
 4019e48:	9825883a 	mov	r18,r19
 4019e4c:	8827883a 	mov	r19,r17
 4019e50:	dc403b17 	ldw	r17,236(sp)
 4019e54:	d9403517 	ldw	r5,212(sp)
 4019e58:	98c7883a 	add	r3,r19,r3
 4019e5c:	10800044 	addi	r2,r2,1
 4019e60:	41400015 	stw	r5,0(r8)
 4019e64:	44c00115 	stw	r19,4(r8)
 4019e68:	d8c02015 	stw	r3,128(sp)
 4019e6c:	d8801f15 	stw	r2,124(sp)
 4019e70:	010001c4 	movi	r4,7
 4019e74:	2082c516 	blt	r4,r2,401a98c <___vfprintf_internal_r+0x13a0>
 4019e78:	df002787 	ldb	fp,158(sp)
 4019e7c:	42000204 	addi	r8,r8,8
 4019e80:	e0000c26 	beq	fp,zero,4019eb4 <___vfprintf_internal_r+0x8c8>
 4019e84:	d8801f17 	ldw	r2,124(sp)
 4019e88:	d9002784 	addi	r4,sp,158
 4019e8c:	18c00044 	addi	r3,r3,1
 4019e90:	10800044 	addi	r2,r2,1
 4019e94:	41000015 	stw	r4,0(r8)
 4019e98:	01000044 	movi	r4,1
 4019e9c:	41000115 	stw	r4,4(r8)
 4019ea0:	d8c02015 	stw	r3,128(sp)
 4019ea4:	d8801f15 	stw	r2,124(sp)
 4019ea8:	010001c4 	movi	r4,7
 4019eac:	20825e16 	blt	r4,r2,401a828 <___vfprintf_internal_r+0x123c>
 4019eb0:	42000204 	addi	r8,r8,8
 4019eb4:	d8802c17 	ldw	r2,176(sp)
 4019eb8:	10000c26 	beq	r2,zero,4019eec <___vfprintf_internal_r+0x900>
 4019ebc:	d8801f17 	ldw	r2,124(sp)
 4019ec0:	d9002704 	addi	r4,sp,156
 4019ec4:	18c00084 	addi	r3,r3,2
 4019ec8:	10800044 	addi	r2,r2,1
 4019ecc:	41000015 	stw	r4,0(r8)
 4019ed0:	01000084 	movi	r4,2
 4019ed4:	41000115 	stw	r4,4(r8)
 4019ed8:	d8c02015 	stw	r3,128(sp)
 4019edc:	d8801f15 	stw	r2,124(sp)
 4019ee0:	010001c4 	movi	r4,7
 4019ee4:	20825816 	blt	r4,r2,401a848 <___vfprintf_internal_r+0x125c>
 4019ee8:	42000204 	addi	r8,r8,8
 4019eec:	d9003017 	ldw	r4,192(sp)
 4019ef0:	00802004 	movi	r2,128
 4019ef4:	2081bb26 	beq	r4,r2,401a5e4 <___vfprintf_internal_r+0xff8>
 4019ef8:	d9402a17 	ldw	r5,168(sp)
 4019efc:	d8802b17 	ldw	r2,172(sp)
 4019f00:	28adc83a 	sub	r22,r5,r2
 4019f04:	0580310e 	bge	zero,r22,4019fcc <___vfprintf_internal_r+0x9e0>
 4019f08:	07000404 	movi	fp,16
 4019f0c:	d8801f17 	ldw	r2,124(sp)
 4019f10:	e584360e 	bge	fp,r22,401afec <___vfprintf_internal_r+0x1a00>
 4019f14:	014100f4 	movhi	r5,1027
 4019f18:	29706f84 	addi	r5,r5,-15938
 4019f1c:	dc402a15 	stw	r17,168(sp)
 4019f20:	d9402c15 	stw	r5,176(sp)
 4019f24:	b023883a 	mov	r17,r22
 4019f28:	04c001c4 	movi	r19,7
 4019f2c:	a82d883a 	mov	r22,r21
 4019f30:	902b883a 	mov	r21,r18
 4019f34:	8025883a 	mov	r18,r16
 4019f38:	dc002d17 	ldw	r16,180(sp)
 4019f3c:	00000306 	br	4019f4c <___vfprintf_internal_r+0x960>
 4019f40:	8c7ffc04 	addi	r17,r17,-16
 4019f44:	42000204 	addi	r8,r8,8
 4019f48:	e440110e 	bge	fp,r17,4019f90 <___vfprintf_internal_r+0x9a4>
 4019f4c:	18c00404 	addi	r3,r3,16
 4019f50:	10800044 	addi	r2,r2,1
 4019f54:	45000015 	stw	r20,0(r8)
 4019f58:	47000115 	stw	fp,4(r8)
 4019f5c:	d8c02015 	stw	r3,128(sp)
 4019f60:	d8801f15 	stw	r2,124(sp)
 4019f64:	98bff60e 	bge	r19,r2,4019f40 <__alt_data_end+0xfc019f40>
 4019f68:	d9801e04 	addi	r6,sp,120
 4019f6c:	b80b883a 	mov	r5,r23
 4019f70:	8009883a 	mov	r4,r16
 4019f74:	4020b5c0 	call	4020b5c <__sprint_r>
 4019f78:	103ea01e 	bne	r2,zero,40199fc <__alt_data_end+0xfc0199fc>
 4019f7c:	8c7ffc04 	addi	r17,r17,-16
 4019f80:	d8c02017 	ldw	r3,128(sp)
 4019f84:	d8801f17 	ldw	r2,124(sp)
 4019f88:	da000404 	addi	r8,sp,16
 4019f8c:	e47fef16 	blt	fp,r17,4019f4c <__alt_data_end+0xfc019f4c>
 4019f90:	9021883a 	mov	r16,r18
 4019f94:	a825883a 	mov	r18,r21
 4019f98:	b02b883a 	mov	r21,r22
 4019f9c:	882d883a 	mov	r22,r17
 4019fa0:	dc402a17 	ldw	r17,168(sp)
 4019fa4:	d9002c17 	ldw	r4,176(sp)
 4019fa8:	1d87883a 	add	r3,r3,r22
 4019fac:	10800044 	addi	r2,r2,1
 4019fb0:	41000015 	stw	r4,0(r8)
 4019fb4:	45800115 	stw	r22,4(r8)
 4019fb8:	d8c02015 	stw	r3,128(sp)
 4019fbc:	d8801f15 	stw	r2,124(sp)
 4019fc0:	010001c4 	movi	r4,7
 4019fc4:	20821016 	blt	r4,r2,401a808 <___vfprintf_internal_r+0x121c>
 4019fc8:	42000204 	addi	r8,r8,8
 4019fcc:	9080400c 	andi	r2,r18,256
 4019fd0:	10013a1e 	bne	r2,zero,401a4bc <___vfprintf_internal_r+0xed0>
 4019fd4:	d9402b17 	ldw	r5,172(sp)
 4019fd8:	d8801f17 	ldw	r2,124(sp)
 4019fdc:	44000015 	stw	r16,0(r8)
 4019fe0:	1947883a 	add	r3,r3,r5
 4019fe4:	10800044 	addi	r2,r2,1
 4019fe8:	41400115 	stw	r5,4(r8)
 4019fec:	d8c02015 	stw	r3,128(sp)
 4019ff0:	d8801f15 	stw	r2,124(sp)
 4019ff4:	010001c4 	movi	r4,7
 4019ff8:	2081f516 	blt	r4,r2,401a7d0 <___vfprintf_internal_r+0x11e4>
 4019ffc:	42000204 	addi	r8,r8,8
 401a000:	9480010c 	andi	r18,r18,4
 401a004:	90003226 	beq	r18,zero,401a0d0 <___vfprintf_internal_r+0xae4>
 401a008:	d9403117 	ldw	r5,196(sp)
 401a00c:	d8802917 	ldw	r2,164(sp)
 401a010:	28a1c83a 	sub	r16,r5,r2
 401a014:	04002e0e 	bge	zero,r16,401a0d0 <___vfprintf_internal_r+0xae4>
 401a018:	04400404 	movi	r17,16
 401a01c:	d8801f17 	ldw	r2,124(sp)
 401a020:	8c04c40e 	bge	r17,r16,401b334 <___vfprintf_internal_r+0x1d48>
 401a024:	014100f4 	movhi	r5,1027
 401a028:	29707384 	addi	r5,r5,-15922
 401a02c:	d9403515 	stw	r5,212(sp)
 401a030:	048001c4 	movi	r18,7
 401a034:	dcc02d17 	ldw	r19,180(sp)
 401a038:	00000306 	br	401a048 <___vfprintf_internal_r+0xa5c>
 401a03c:	843ffc04 	addi	r16,r16,-16
 401a040:	42000204 	addi	r8,r8,8
 401a044:	8c00130e 	bge	r17,r16,401a094 <___vfprintf_internal_r+0xaa8>
 401a048:	010100f4 	movhi	r4,1027
 401a04c:	18c00404 	addi	r3,r3,16
 401a050:	10800044 	addi	r2,r2,1
 401a054:	21307384 	addi	r4,r4,-15922
 401a058:	41000015 	stw	r4,0(r8)
 401a05c:	44400115 	stw	r17,4(r8)
 401a060:	d8c02015 	stw	r3,128(sp)
 401a064:	d8801f15 	stw	r2,124(sp)
 401a068:	90bff40e 	bge	r18,r2,401a03c <__alt_data_end+0xfc01a03c>
 401a06c:	d9801e04 	addi	r6,sp,120
 401a070:	b80b883a 	mov	r5,r23
 401a074:	9809883a 	mov	r4,r19
 401a078:	4020b5c0 	call	4020b5c <__sprint_r>
 401a07c:	103e5f1e 	bne	r2,zero,40199fc <__alt_data_end+0xfc0199fc>
 401a080:	843ffc04 	addi	r16,r16,-16
 401a084:	d8c02017 	ldw	r3,128(sp)
 401a088:	d8801f17 	ldw	r2,124(sp)
 401a08c:	da000404 	addi	r8,sp,16
 401a090:	8c3fed16 	blt	r17,r16,401a048 <__alt_data_end+0xfc01a048>
 401a094:	d9403517 	ldw	r5,212(sp)
 401a098:	1c07883a 	add	r3,r3,r16
 401a09c:	10800044 	addi	r2,r2,1
 401a0a0:	41400015 	stw	r5,0(r8)
 401a0a4:	44000115 	stw	r16,4(r8)
 401a0a8:	d8c02015 	stw	r3,128(sp)
 401a0ac:	d8801f15 	stw	r2,124(sp)
 401a0b0:	010001c4 	movi	r4,7
 401a0b4:	2080060e 	bge	r4,r2,401a0d0 <___vfprintf_internal_r+0xae4>
 401a0b8:	d9002d17 	ldw	r4,180(sp)
 401a0bc:	d9801e04 	addi	r6,sp,120
 401a0c0:	b80b883a 	mov	r5,r23
 401a0c4:	4020b5c0 	call	4020b5c <__sprint_r>
 401a0c8:	103e4c1e 	bne	r2,zero,40199fc <__alt_data_end+0xfc0199fc>
 401a0cc:	d8c02017 	ldw	r3,128(sp)
 401a0d0:	d8803117 	ldw	r2,196(sp)
 401a0d4:	d9002917 	ldw	r4,164(sp)
 401a0d8:	1100010e 	bge	r2,r4,401a0e0 <___vfprintf_internal_r+0xaf4>
 401a0dc:	2005883a 	mov	r2,r4
 401a0e0:	d9402f17 	ldw	r5,188(sp)
 401a0e4:	288b883a 	add	r5,r5,r2
 401a0e8:	d9402f15 	stw	r5,188(sp)
 401a0ec:	1801c01e 	bne	r3,zero,401a7f0 <___vfprintf_internal_r+0x1204>
 401a0f0:	a8800007 	ldb	r2,0(r21)
 401a0f4:	d8001f15 	stw	zero,124(sp)
 401a0f8:	da000404 	addi	r8,sp,16
 401a0fc:	103d751e 	bne	r2,zero,40196d4 <__alt_data_end+0xfc0196d4>
 401a100:	a823883a 	mov	r17,r21
 401a104:	003d8b06 	br	4019734 <__alt_data_end+0xfc019734>
 401a108:	8025883a 	mov	r18,r16
 401a10c:	dc002903 	ldbu	r16,164(sp)
 401a110:	e011883a 	mov	r8,fp
 401a114:	84003fcc 	andi	r16,r16,255
 401a118:	8005e51e 	bne	r16,zero,401b8b0 <___vfprintf_internal_r+0x22c4>
 401a11c:	94800414 	ori	r18,r18,16
 401a120:	9080080c 	andi	r2,r18,32
 401a124:	10022b26 	beq	r2,zero,401a9d4 <___vfprintf_internal_r+0x13e8>
 401a128:	d9002e17 	ldw	r4,184(sp)
 401a12c:	d9402a17 	ldw	r5,168(sp)
 401a130:	d8002785 	stb	zero,158(sp)
 401a134:	20c00204 	addi	r3,r4,8
 401a138:	24c00017 	ldw	r19,0(r4)
 401a13c:	25800117 	ldw	r22,4(r4)
 401a140:	28042e16 	blt	r5,zero,401b1fc <___vfprintf_internal_r+0x1c10>
 401a144:	013fdfc4 	movi	r4,-129
 401a148:	9d84b03a 	or	r2,r19,r22
 401a14c:	d8c02e15 	stw	r3,184(sp)
 401a150:	9124703a 	and	r18,r18,r4
 401a154:	0039883a 	mov	fp,zero
 401a158:	103e801e 	bne	r2,zero,4019b5c <__alt_data_end+0xfc019b5c>
 401a15c:	d9002a17 	ldw	r4,168(sp)
 401a160:	2002e01e 	bne	r4,zero,401ace4 <___vfprintf_internal_r+0x16f8>
 401a164:	d8002a15 	stw	zero,168(sp)
 401a168:	d8002b15 	stw	zero,172(sp)
 401a16c:	dc001e04 	addi	r16,sp,120
 401a170:	003ef506 	br	4019d48 <__alt_data_end+0xfc019d48>
 401a174:	8025883a 	mov	r18,r16
 401a178:	dc002903 	ldbu	r16,164(sp)
 401a17c:	e011883a 	mov	r8,fp
 401a180:	84003fcc 	andi	r16,r16,255
 401a184:	8005ba1e 	bne	r16,zero,401b870 <___vfprintf_internal_r+0x2284>
 401a188:	010100f4 	movhi	r4,1027
 401a18c:	21306304 	addi	r4,r4,-15988
 401a190:	d9003915 	stw	r4,228(sp)
 401a194:	9080080c 	andi	r2,r18,32
 401a198:	10006126 	beq	r2,zero,401a320 <___vfprintf_internal_r+0xd34>
 401a19c:	d9402e17 	ldw	r5,184(sp)
 401a1a0:	2cc00017 	ldw	r19,0(r5)
 401a1a4:	2d800117 	ldw	r22,4(r5)
 401a1a8:	29400204 	addi	r5,r5,8
 401a1ac:	d9402e15 	stw	r5,184(sp)
 401a1b0:	9080004c 	andi	r2,r18,1
 401a1b4:	1001ac26 	beq	r2,zero,401a868 <___vfprintf_internal_r+0x127c>
 401a1b8:	9d84b03a 	or	r2,r19,r22
 401a1bc:	10038526 	beq	r2,zero,401afd4 <___vfprintf_internal_r+0x19e8>
 401a1c0:	d8c02a17 	ldw	r3,168(sp)
 401a1c4:	00800c04 	movi	r2,48
 401a1c8:	d8802705 	stb	r2,156(sp)
 401a1cc:	dc402745 	stb	r17,157(sp)
 401a1d0:	d8002785 	stb	zero,158(sp)
 401a1d4:	90800094 	ori	r2,r18,2
 401a1d8:	18047916 	blt	r3,zero,401b3c0 <___vfprintf_internal_r+0x1dd4>
 401a1dc:	00bfdfc4 	movi	r2,-129
 401a1e0:	90a4703a 	and	r18,r18,r2
 401a1e4:	94800094 	ori	r18,r18,2
 401a1e8:	0039883a 	mov	fp,zero
 401a1ec:	d9003917 	ldw	r4,228(sp)
 401a1f0:	dc001e04 	addi	r16,sp,120
 401a1f4:	988003cc 	andi	r2,r19,15
 401a1f8:	b006973a 	slli	r3,r22,28
 401a1fc:	2085883a 	add	r2,r4,r2
 401a200:	9826d13a 	srli	r19,r19,4
 401a204:	10800003 	ldbu	r2,0(r2)
 401a208:	b02cd13a 	srli	r22,r22,4
 401a20c:	843fffc4 	addi	r16,r16,-1
 401a210:	1ce6b03a 	or	r19,r3,r19
 401a214:	80800005 	stb	r2,0(r16)
 401a218:	9d84b03a 	or	r2,r19,r22
 401a21c:	103ff51e 	bne	r2,zero,401a1f4 <__alt_data_end+0xfc01a1f4>
 401a220:	d8c02817 	ldw	r3,160(sp)
 401a224:	1c07c83a 	sub	r3,r3,r16
 401a228:	d8c02b15 	stw	r3,172(sp)
 401a22c:	003ec606 	br	4019d48 <__alt_data_end+0xfc019d48>
 401a230:	8025883a 	mov	r18,r16
 401a234:	dc002903 	ldbu	r16,164(sp)
 401a238:	e011883a 	mov	r8,fp
 401a23c:	84003fcc 	andi	r16,r16,255
 401a240:	803e9626 	beq	r16,zero,4019c9c <__alt_data_end+0xfc019c9c>
 401a244:	d8c02b03 	ldbu	r3,172(sp)
 401a248:	d8c02785 	stb	r3,158(sp)
 401a24c:	003e9306 	br	4019c9c <__alt_data_end+0xfc019c9c>
 401a250:	00c00044 	movi	r3,1
 401a254:	d8c02905 	stb	r3,164(sp)
 401a258:	00c00ac4 	movi	r3,43
 401a25c:	d8c02b05 	stb	r3,172(sp)
 401a260:	ac400007 	ldb	r17,0(r21)
 401a264:	003d4306 	br	4019774 <__alt_data_end+0xfc019774>
 401a268:	84000814 	ori	r16,r16,32
 401a26c:	ac400007 	ldb	r17,0(r21)
 401a270:	003d4006 	br	4019774 <__alt_data_end+0xfc019774>
 401a274:	d8802e17 	ldw	r2,184(sp)
 401a278:	8025883a 	mov	r18,r16
 401a27c:	d8002785 	stb	zero,158(sp)
 401a280:	14000017 	ldw	r16,0(r2)
 401a284:	e011883a 	mov	r8,fp
 401a288:	14c00104 	addi	r19,r2,4
 401a28c:	80042d26 	beq	r16,zero,401b344 <___vfprintf_internal_r+0x1d58>
 401a290:	d8c02a17 	ldw	r3,168(sp)
 401a294:	1803e416 	blt	r3,zero,401b228 <___vfprintf_internal_r+0x1c3c>
 401a298:	180d883a 	mov	r6,r3
 401a29c:	000b883a 	mov	r5,zero
 401a2a0:	8009883a 	mov	r4,r16
 401a2a4:	df003d15 	stw	fp,244(sp)
 401a2a8:	401ef240 	call	401ef24 <memchr>
 401a2ac:	da003d17 	ldw	r8,244(sp)
 401a2b0:	10046826 	beq	r2,zero,401b454 <___vfprintf_internal_r+0x1e68>
 401a2b4:	1405c83a 	sub	r2,r2,r16
 401a2b8:	d8802b15 	stw	r2,172(sp)
 401a2bc:	1003e016 	blt	r2,zero,401b240 <___vfprintf_internal_r+0x1c54>
 401a2c0:	df002783 	ldbu	fp,158(sp)
 401a2c4:	d8802915 	stw	r2,164(sp)
 401a2c8:	dcc02e15 	stw	r19,184(sp)
 401a2cc:	d8002a15 	stw	zero,168(sp)
 401a2d0:	d8003215 	stw	zero,200(sp)
 401a2d4:	003ea206 	br	4019d60 <__alt_data_end+0xfc019d60>
 401a2d8:	8025883a 	mov	r18,r16
 401a2dc:	dc002903 	ldbu	r16,164(sp)
 401a2e0:	e011883a 	mov	r8,fp
 401a2e4:	84003fcc 	andi	r16,r16,255
 401a2e8:	803f8d26 	beq	r16,zero,401a120 <__alt_data_end+0xfc01a120>
 401a2ec:	d8c02b03 	ldbu	r3,172(sp)
 401a2f0:	d8c02785 	stb	r3,158(sp)
 401a2f4:	003f8a06 	br	401a120 <__alt_data_end+0xfc01a120>
 401a2f8:	8025883a 	mov	r18,r16
 401a2fc:	dc002903 	ldbu	r16,164(sp)
 401a300:	e011883a 	mov	r8,fp
 401a304:	84003fcc 	andi	r16,r16,255
 401a308:	8005661e 	bne	r16,zero,401b8a4 <___vfprintf_internal_r+0x22b8>
 401a30c:	010100f4 	movhi	r4,1027
 401a310:	21306804 	addi	r4,r4,-15968
 401a314:	d9003915 	stw	r4,228(sp)
 401a318:	9080080c 	andi	r2,r18,32
 401a31c:	103f9f1e 	bne	r2,zero,401a19c <__alt_data_end+0xfc01a19c>
 401a320:	9080040c 	andi	r2,r18,16
 401a324:	1002eb26 	beq	r2,zero,401aed4 <___vfprintf_internal_r+0x18e8>
 401a328:	d8802e17 	ldw	r2,184(sp)
 401a32c:	002d883a 	mov	r22,zero
 401a330:	14c00017 	ldw	r19,0(r2)
 401a334:	10800104 	addi	r2,r2,4
 401a338:	d8802e15 	stw	r2,184(sp)
 401a33c:	003f9c06 	br	401a1b0 <__alt_data_end+0xfc01a1b0>
 401a340:	d8802b07 	ldb	r2,172(sp)
 401a344:	1002e11e 	bne	r2,zero,401aecc <___vfprintf_internal_r+0x18e0>
 401a348:	00c00044 	movi	r3,1
 401a34c:	d8c02905 	stb	r3,164(sp)
 401a350:	00c00804 	movi	r3,32
 401a354:	d8c02b05 	stb	r3,172(sp)
 401a358:	ac400007 	ldb	r17,0(r21)
 401a35c:	003d0506 	br	4019774 <__alt_data_end+0xfc019774>
 401a360:	84000054 	ori	r16,r16,1
 401a364:	ac400007 	ldb	r17,0(r21)
 401a368:	003d0206 	br	4019774 <__alt_data_end+0xfc019774>
 401a36c:	8025883a 	mov	r18,r16
 401a370:	dc002903 	ldbu	r16,164(sp)
 401a374:	e011883a 	mov	r8,fp
 401a378:	84003fcc 	andi	r16,r16,255
 401a37c:	803de726 	beq	r16,zero,4019b1c <__alt_data_end+0xfc019b1c>
 401a380:	d8c02b03 	ldbu	r3,172(sp)
 401a384:	d8c02785 	stb	r3,158(sp)
 401a388:	003de406 	br	4019b1c <__alt_data_end+0xfc019b1c>
 401a38c:	84001014 	ori	r16,r16,64
 401a390:	ac400007 	ldb	r17,0(r21)
 401a394:	003cf706 	br	4019774 <__alt_data_end+0xfc019774>
 401a398:	ac400007 	ldb	r17,0(r21)
 401a39c:	00801b04 	movi	r2,108
 401a3a0:	88838f26 	beq	r17,r2,401b1e0 <___vfprintf_internal_r+0x1bf4>
 401a3a4:	84000414 	ori	r16,r16,16
 401a3a8:	003cf206 	br	4019774 <__alt_data_end+0xfc019774>
 401a3ac:	8025883a 	mov	r18,r16
 401a3b0:	dc002903 	ldbu	r16,164(sp)
 401a3b4:	e011883a 	mov	r8,fp
 401a3b8:	84003fcc 	andi	r16,r16,255
 401a3bc:	80053f1e 	bne	r16,zero,401b8bc <___vfprintf_internal_r+0x22d0>
 401a3c0:	9080080c 	andi	r2,r18,32
 401a3c4:	1002d226 	beq	r2,zero,401af10 <___vfprintf_internal_r+0x1924>
 401a3c8:	d9002e17 	ldw	r4,184(sp)
 401a3cc:	d9402f17 	ldw	r5,188(sp)
 401a3d0:	20800017 	ldw	r2,0(r4)
 401a3d4:	2807d7fa 	srai	r3,r5,31
 401a3d8:	21000104 	addi	r4,r4,4
 401a3dc:	d9002e15 	stw	r4,184(sp)
 401a3e0:	11400015 	stw	r5,0(r2)
 401a3e4:	10c00115 	stw	r3,4(r2)
 401a3e8:	003cb806 	br	40196cc <__alt_data_end+0xfc0196cc>
 401a3ec:	d8c02e17 	ldw	r3,184(sp)
 401a3f0:	d9002e17 	ldw	r4,184(sp)
 401a3f4:	8025883a 	mov	r18,r16
 401a3f8:	18800017 	ldw	r2,0(r3)
 401a3fc:	21000104 	addi	r4,r4,4
 401a400:	00c00044 	movi	r3,1
 401a404:	e011883a 	mov	r8,fp
 401a408:	d8c02915 	stw	r3,164(sp)
 401a40c:	d8002785 	stb	zero,158(sp)
 401a410:	d8801405 	stb	r2,80(sp)
 401a414:	d9002e15 	stw	r4,184(sp)
 401a418:	d8c02b15 	stw	r3,172(sp)
 401a41c:	d8002a15 	stw	zero,168(sp)
 401a420:	d8003215 	stw	zero,200(sp)
 401a424:	dc001404 	addi	r16,sp,80
 401a428:	0039883a 	mov	fp,zero
 401a42c:	003e5306 	br	4019d7c <__alt_data_end+0xfc019d7c>
 401a430:	010100f4 	movhi	r4,1027
 401a434:	21306804 	addi	r4,r4,-15968
 401a438:	0039883a 	mov	fp,zero
 401a43c:	d9003915 	stw	r4,228(sp)
 401a440:	04401e04 	movi	r17,120
 401a444:	003f6906 	br	401a1ec <__alt_data_end+0xfc01a1ec>
 401a448:	8025883a 	mov	r18,r16
 401a44c:	dc002903 	ldbu	r16,164(sp)
 401a450:	e011883a 	mov	r8,fp
 401a454:	84003fcc 	andi	r16,r16,255
 401a458:	8005081e 	bne	r16,zero,401b87c <___vfprintf_internal_r+0x2290>
 401a45c:	883d6126 	beq	r17,zero,40199e4 <__alt_data_end+0xfc0199e4>
 401a460:	00c00044 	movi	r3,1
 401a464:	d8c02915 	stw	r3,164(sp)
 401a468:	dc401405 	stb	r17,80(sp)
 401a46c:	d8002785 	stb	zero,158(sp)
 401a470:	003fe906 	br	401a418 <__alt_data_end+0xfc01a418>
 401a474:	014100f4 	movhi	r5,1027
 401a478:	29706804 	addi	r5,r5,-15968
 401a47c:	d9403915 	stw	r5,228(sp)
 401a480:	d8c02e15 	stw	r3,184(sp)
 401a484:	1025883a 	mov	r18,r2
 401a488:	04401e04 	movi	r17,120
 401a48c:	9d84b03a 	or	r2,r19,r22
 401a490:	1000fc1e 	bne	r2,zero,401a884 <___vfprintf_internal_r+0x1298>
 401a494:	0039883a 	mov	fp,zero
 401a498:	00800084 	movi	r2,2
 401a49c:	10803fcc 	andi	r2,r2,255
 401a4a0:	00c00044 	movi	r3,1
 401a4a4:	10c20f26 	beq	r2,r3,401ace4 <___vfprintf_internal_r+0x16f8>
 401a4a8:	00c00084 	movi	r3,2
 401a4ac:	10fd3326 	beq	r2,r3,401997c <__alt_data_end+0xfc01997c>
 401a4b0:	003e0b06 	br	4019ce0 <__alt_data_end+0xfc019ce0>
 401a4b4:	d8c02017 	ldw	r3,128(sp)
 401a4b8:	003e7106 	br	4019e80 <__alt_data_end+0xfc019e80>
 401a4bc:	00801944 	movi	r2,101
 401a4c0:	14407e0e 	bge	r2,r17,401a6bc <___vfprintf_internal_r+0x10d0>
 401a4c4:	d9003617 	ldw	r4,216(sp)
 401a4c8:	d9403817 	ldw	r5,224(sp)
 401a4cc:	000d883a 	mov	r6,zero
 401a4d0:	000f883a 	mov	r7,zero
 401a4d4:	d8c03c15 	stw	r3,240(sp)
 401a4d8:	da003d15 	stw	r8,244(sp)
 401a4dc:	40249ec0 	call	40249ec <__eqdf2>
 401a4e0:	d8c03c17 	ldw	r3,240(sp)
 401a4e4:	da003d17 	ldw	r8,244(sp)
 401a4e8:	1000f71e 	bne	r2,zero,401a8c8 <___vfprintf_internal_r+0x12dc>
 401a4ec:	d8801f17 	ldw	r2,124(sp)
 401a4f0:	010100f4 	movhi	r4,1027
 401a4f4:	21306f04 	addi	r4,r4,-15940
 401a4f8:	18c00044 	addi	r3,r3,1
 401a4fc:	10800044 	addi	r2,r2,1
 401a500:	41000015 	stw	r4,0(r8)
 401a504:	01000044 	movi	r4,1
 401a508:	41000115 	stw	r4,4(r8)
 401a50c:	d8c02015 	stw	r3,128(sp)
 401a510:	d8801f15 	stw	r2,124(sp)
 401a514:	010001c4 	movi	r4,7
 401a518:	2082b816 	blt	r4,r2,401affc <___vfprintf_internal_r+0x1a10>
 401a51c:	42000204 	addi	r8,r8,8
 401a520:	d8802617 	ldw	r2,152(sp)
 401a524:	d9403317 	ldw	r5,204(sp)
 401a528:	11400216 	blt	r2,r5,401a534 <___vfprintf_internal_r+0xf48>
 401a52c:	9080004c 	andi	r2,r18,1
 401a530:	103eb326 	beq	r2,zero,401a000 <__alt_data_end+0xfc01a000>
 401a534:	d8803717 	ldw	r2,220(sp)
 401a538:	d9003417 	ldw	r4,208(sp)
 401a53c:	d9403717 	ldw	r5,220(sp)
 401a540:	1887883a 	add	r3,r3,r2
 401a544:	d8801f17 	ldw	r2,124(sp)
 401a548:	41000015 	stw	r4,0(r8)
 401a54c:	41400115 	stw	r5,4(r8)
 401a550:	10800044 	addi	r2,r2,1
 401a554:	d8c02015 	stw	r3,128(sp)
 401a558:	d8801f15 	stw	r2,124(sp)
 401a55c:	010001c4 	movi	r4,7
 401a560:	20832916 	blt	r4,r2,401b208 <___vfprintf_internal_r+0x1c1c>
 401a564:	42000204 	addi	r8,r8,8
 401a568:	d8803317 	ldw	r2,204(sp)
 401a56c:	143fffc4 	addi	r16,r2,-1
 401a570:	043ea30e 	bge	zero,r16,401a000 <__alt_data_end+0xfc01a000>
 401a574:	04400404 	movi	r17,16
 401a578:	d8801f17 	ldw	r2,124(sp)
 401a57c:	8c00880e 	bge	r17,r16,401a7a0 <___vfprintf_internal_r+0x11b4>
 401a580:	014100f4 	movhi	r5,1027
 401a584:	29706f84 	addi	r5,r5,-15938
 401a588:	d9402c15 	stw	r5,176(sp)
 401a58c:	058001c4 	movi	r22,7
 401a590:	dcc02d17 	ldw	r19,180(sp)
 401a594:	00000306 	br	401a5a4 <___vfprintf_internal_r+0xfb8>
 401a598:	42000204 	addi	r8,r8,8
 401a59c:	843ffc04 	addi	r16,r16,-16
 401a5a0:	8c00820e 	bge	r17,r16,401a7ac <___vfprintf_internal_r+0x11c0>
 401a5a4:	18c00404 	addi	r3,r3,16
 401a5a8:	10800044 	addi	r2,r2,1
 401a5ac:	45000015 	stw	r20,0(r8)
 401a5b0:	44400115 	stw	r17,4(r8)
 401a5b4:	d8c02015 	stw	r3,128(sp)
 401a5b8:	d8801f15 	stw	r2,124(sp)
 401a5bc:	b0bff60e 	bge	r22,r2,401a598 <__alt_data_end+0xfc01a598>
 401a5c0:	d9801e04 	addi	r6,sp,120
 401a5c4:	b80b883a 	mov	r5,r23
 401a5c8:	9809883a 	mov	r4,r19
 401a5cc:	4020b5c0 	call	4020b5c <__sprint_r>
 401a5d0:	103d0a1e 	bne	r2,zero,40199fc <__alt_data_end+0xfc0199fc>
 401a5d4:	d8c02017 	ldw	r3,128(sp)
 401a5d8:	d8801f17 	ldw	r2,124(sp)
 401a5dc:	da000404 	addi	r8,sp,16
 401a5e0:	003fee06 	br	401a59c <__alt_data_end+0xfc01a59c>
 401a5e4:	d9403117 	ldw	r5,196(sp)
 401a5e8:	d8802917 	ldw	r2,164(sp)
 401a5ec:	28adc83a 	sub	r22,r5,r2
 401a5f0:	05be410e 	bge	zero,r22,4019ef8 <__alt_data_end+0xfc019ef8>
 401a5f4:	07000404 	movi	fp,16
 401a5f8:	d8801f17 	ldw	r2,124(sp)
 401a5fc:	e5838f0e 	bge	fp,r22,401b43c <___vfprintf_internal_r+0x1e50>
 401a600:	014100f4 	movhi	r5,1027
 401a604:	29706f84 	addi	r5,r5,-15938
 401a608:	dc403015 	stw	r17,192(sp)
 401a60c:	d9402c15 	stw	r5,176(sp)
 401a610:	b023883a 	mov	r17,r22
 401a614:	04c001c4 	movi	r19,7
 401a618:	a82d883a 	mov	r22,r21
 401a61c:	902b883a 	mov	r21,r18
 401a620:	8025883a 	mov	r18,r16
 401a624:	dc002d17 	ldw	r16,180(sp)
 401a628:	00000306 	br	401a638 <___vfprintf_internal_r+0x104c>
 401a62c:	8c7ffc04 	addi	r17,r17,-16
 401a630:	42000204 	addi	r8,r8,8
 401a634:	e440110e 	bge	fp,r17,401a67c <___vfprintf_internal_r+0x1090>
 401a638:	18c00404 	addi	r3,r3,16
 401a63c:	10800044 	addi	r2,r2,1
 401a640:	45000015 	stw	r20,0(r8)
 401a644:	47000115 	stw	fp,4(r8)
 401a648:	d8c02015 	stw	r3,128(sp)
 401a64c:	d8801f15 	stw	r2,124(sp)
 401a650:	98bff60e 	bge	r19,r2,401a62c <__alt_data_end+0xfc01a62c>
 401a654:	d9801e04 	addi	r6,sp,120
 401a658:	b80b883a 	mov	r5,r23
 401a65c:	8009883a 	mov	r4,r16
 401a660:	4020b5c0 	call	4020b5c <__sprint_r>
 401a664:	103ce51e 	bne	r2,zero,40199fc <__alt_data_end+0xfc0199fc>
 401a668:	8c7ffc04 	addi	r17,r17,-16
 401a66c:	d8c02017 	ldw	r3,128(sp)
 401a670:	d8801f17 	ldw	r2,124(sp)
 401a674:	da000404 	addi	r8,sp,16
 401a678:	e47fef16 	blt	fp,r17,401a638 <__alt_data_end+0xfc01a638>
 401a67c:	9021883a 	mov	r16,r18
 401a680:	a825883a 	mov	r18,r21
 401a684:	b02b883a 	mov	r21,r22
 401a688:	882d883a 	mov	r22,r17
 401a68c:	dc403017 	ldw	r17,192(sp)
 401a690:	d9002c17 	ldw	r4,176(sp)
 401a694:	1d87883a 	add	r3,r3,r22
 401a698:	10800044 	addi	r2,r2,1
 401a69c:	41000015 	stw	r4,0(r8)
 401a6a0:	45800115 	stw	r22,4(r8)
 401a6a4:	d8c02015 	stw	r3,128(sp)
 401a6a8:	d8801f15 	stw	r2,124(sp)
 401a6ac:	010001c4 	movi	r4,7
 401a6b0:	20818e16 	blt	r4,r2,401acec <___vfprintf_internal_r+0x1700>
 401a6b4:	42000204 	addi	r8,r8,8
 401a6b8:	003e0f06 	br	4019ef8 <__alt_data_end+0xfc019ef8>
 401a6bc:	d9403317 	ldw	r5,204(sp)
 401a6c0:	00800044 	movi	r2,1
 401a6c4:	18c00044 	addi	r3,r3,1
 401a6c8:	1141530e 	bge	r2,r5,401ac18 <___vfprintf_internal_r+0x162c>
 401a6cc:	dc401f17 	ldw	r17,124(sp)
 401a6d0:	00800044 	movi	r2,1
 401a6d4:	40800115 	stw	r2,4(r8)
 401a6d8:	8c400044 	addi	r17,r17,1
 401a6dc:	44000015 	stw	r16,0(r8)
 401a6e0:	d8c02015 	stw	r3,128(sp)
 401a6e4:	dc401f15 	stw	r17,124(sp)
 401a6e8:	008001c4 	movi	r2,7
 401a6ec:	14416b16 	blt	r2,r17,401ac9c <___vfprintf_internal_r+0x16b0>
 401a6f0:	42000204 	addi	r8,r8,8
 401a6f4:	d8803717 	ldw	r2,220(sp)
 401a6f8:	d9003417 	ldw	r4,208(sp)
 401a6fc:	8c400044 	addi	r17,r17,1
 401a700:	10c7883a 	add	r3,r2,r3
 401a704:	40800115 	stw	r2,4(r8)
 401a708:	41000015 	stw	r4,0(r8)
 401a70c:	d8c02015 	stw	r3,128(sp)
 401a710:	dc401f15 	stw	r17,124(sp)
 401a714:	008001c4 	movi	r2,7
 401a718:	14416916 	blt	r2,r17,401acc0 <___vfprintf_internal_r+0x16d4>
 401a71c:	45800204 	addi	r22,r8,8
 401a720:	d9003617 	ldw	r4,216(sp)
 401a724:	d9403817 	ldw	r5,224(sp)
 401a728:	000d883a 	mov	r6,zero
 401a72c:	000f883a 	mov	r7,zero
 401a730:	d8c03c15 	stw	r3,240(sp)
 401a734:	40249ec0 	call	40249ec <__eqdf2>
 401a738:	d8c03c17 	ldw	r3,240(sp)
 401a73c:	1000bc26 	beq	r2,zero,401aa30 <___vfprintf_internal_r+0x1444>
 401a740:	d9403317 	ldw	r5,204(sp)
 401a744:	84000044 	addi	r16,r16,1
 401a748:	8c400044 	addi	r17,r17,1
 401a74c:	28bfffc4 	addi	r2,r5,-1
 401a750:	1887883a 	add	r3,r3,r2
 401a754:	b0800115 	stw	r2,4(r22)
 401a758:	b4000015 	stw	r16,0(r22)
 401a75c:	d8c02015 	stw	r3,128(sp)
 401a760:	dc401f15 	stw	r17,124(sp)
 401a764:	008001c4 	movi	r2,7
 401a768:	14414316 	blt	r2,r17,401ac78 <___vfprintf_internal_r+0x168c>
 401a76c:	b5800204 	addi	r22,r22,8
 401a770:	d9003a17 	ldw	r4,232(sp)
 401a774:	df0022c4 	addi	fp,sp,139
 401a778:	8c400044 	addi	r17,r17,1
 401a77c:	20c7883a 	add	r3,r4,r3
 401a780:	b7000015 	stw	fp,0(r22)
 401a784:	b1000115 	stw	r4,4(r22)
 401a788:	d8c02015 	stw	r3,128(sp)
 401a78c:	dc401f15 	stw	r17,124(sp)
 401a790:	008001c4 	movi	r2,7
 401a794:	14400e16 	blt	r2,r17,401a7d0 <___vfprintf_internal_r+0x11e4>
 401a798:	b2000204 	addi	r8,r22,8
 401a79c:	003e1806 	br	401a000 <__alt_data_end+0xfc01a000>
 401a7a0:	010100f4 	movhi	r4,1027
 401a7a4:	21306f84 	addi	r4,r4,-15938
 401a7a8:	d9002c15 	stw	r4,176(sp)
 401a7ac:	d9002c17 	ldw	r4,176(sp)
 401a7b0:	1c07883a 	add	r3,r3,r16
 401a7b4:	44000115 	stw	r16,4(r8)
 401a7b8:	41000015 	stw	r4,0(r8)
 401a7bc:	10800044 	addi	r2,r2,1
 401a7c0:	d8c02015 	stw	r3,128(sp)
 401a7c4:	d8801f15 	stw	r2,124(sp)
 401a7c8:	010001c4 	movi	r4,7
 401a7cc:	20be0b0e 	bge	r4,r2,4019ffc <__alt_data_end+0xfc019ffc>
 401a7d0:	d9002d17 	ldw	r4,180(sp)
 401a7d4:	d9801e04 	addi	r6,sp,120
 401a7d8:	b80b883a 	mov	r5,r23
 401a7dc:	4020b5c0 	call	4020b5c <__sprint_r>
 401a7e0:	103c861e 	bne	r2,zero,40199fc <__alt_data_end+0xfc0199fc>
 401a7e4:	d8c02017 	ldw	r3,128(sp)
 401a7e8:	da000404 	addi	r8,sp,16
 401a7ec:	003e0406 	br	401a000 <__alt_data_end+0xfc01a000>
 401a7f0:	d9002d17 	ldw	r4,180(sp)
 401a7f4:	d9801e04 	addi	r6,sp,120
 401a7f8:	b80b883a 	mov	r5,r23
 401a7fc:	4020b5c0 	call	4020b5c <__sprint_r>
 401a800:	103e3b26 	beq	r2,zero,401a0f0 <__alt_data_end+0xfc01a0f0>
 401a804:	003c7d06 	br	40199fc <__alt_data_end+0xfc0199fc>
 401a808:	d9002d17 	ldw	r4,180(sp)
 401a80c:	d9801e04 	addi	r6,sp,120
 401a810:	b80b883a 	mov	r5,r23
 401a814:	4020b5c0 	call	4020b5c <__sprint_r>
 401a818:	103c781e 	bne	r2,zero,40199fc <__alt_data_end+0xfc0199fc>
 401a81c:	d8c02017 	ldw	r3,128(sp)
 401a820:	da000404 	addi	r8,sp,16
 401a824:	003de906 	br	4019fcc <__alt_data_end+0xfc019fcc>
 401a828:	d9002d17 	ldw	r4,180(sp)
 401a82c:	d9801e04 	addi	r6,sp,120
 401a830:	b80b883a 	mov	r5,r23
 401a834:	4020b5c0 	call	4020b5c <__sprint_r>
 401a838:	103c701e 	bne	r2,zero,40199fc <__alt_data_end+0xfc0199fc>
 401a83c:	d8c02017 	ldw	r3,128(sp)
 401a840:	da000404 	addi	r8,sp,16
 401a844:	003d9b06 	br	4019eb4 <__alt_data_end+0xfc019eb4>
 401a848:	d9002d17 	ldw	r4,180(sp)
 401a84c:	d9801e04 	addi	r6,sp,120
 401a850:	b80b883a 	mov	r5,r23
 401a854:	4020b5c0 	call	4020b5c <__sprint_r>
 401a858:	103c681e 	bne	r2,zero,40199fc <__alt_data_end+0xfc0199fc>
 401a85c:	d8c02017 	ldw	r3,128(sp)
 401a860:	da000404 	addi	r8,sp,16
 401a864:	003da106 	br	4019eec <__alt_data_end+0xfc019eec>
 401a868:	d9402a17 	ldw	r5,168(sp)
 401a86c:	d8002785 	stb	zero,158(sp)
 401a870:	283f0616 	blt	r5,zero,401a48c <__alt_data_end+0xfc01a48c>
 401a874:	00ffdfc4 	movi	r3,-129
 401a878:	9d84b03a 	or	r2,r19,r22
 401a87c:	90e4703a 	and	r18,r18,r3
 401a880:	103c3b26 	beq	r2,zero,4019970 <__alt_data_end+0xfc019970>
 401a884:	0039883a 	mov	fp,zero
 401a888:	003e5806 	br	401a1ec <__alt_data_end+0xfc01a1ec>
 401a88c:	9080040c 	andi	r2,r18,16
 401a890:	1001b326 	beq	r2,zero,401af60 <___vfprintf_internal_r+0x1974>
 401a894:	d8c02e17 	ldw	r3,184(sp)
 401a898:	d9002a17 	ldw	r4,168(sp)
 401a89c:	d8002785 	stb	zero,158(sp)
 401a8a0:	18800104 	addi	r2,r3,4
 401a8a4:	1cc00017 	ldw	r19,0(r3)
 401a8a8:	002d883a 	mov	r22,zero
 401a8ac:	2001b516 	blt	r4,zero,401af84 <___vfprintf_internal_r+0x1998>
 401a8b0:	00ffdfc4 	movi	r3,-129
 401a8b4:	d8802e15 	stw	r2,184(sp)
 401a8b8:	90e4703a 	and	r18,r18,r3
 401a8bc:	983d0526 	beq	r19,zero,4019cd4 <__alt_data_end+0xfc019cd4>
 401a8c0:	0039883a 	mov	fp,zero
 401a8c4:	003d0806 	br	4019ce8 <__alt_data_end+0xfc019ce8>
 401a8c8:	dc402617 	ldw	r17,152(sp)
 401a8cc:	0441d30e 	bge	zero,r17,401b01c <___vfprintf_internal_r+0x1a30>
 401a8d0:	dc403217 	ldw	r17,200(sp)
 401a8d4:	d8803317 	ldw	r2,204(sp)
 401a8d8:	1440010e 	bge	r2,r17,401a8e0 <___vfprintf_internal_r+0x12f4>
 401a8dc:	1023883a 	mov	r17,r2
 401a8e0:	04400a0e 	bge	zero,r17,401a90c <___vfprintf_internal_r+0x1320>
 401a8e4:	d8801f17 	ldw	r2,124(sp)
 401a8e8:	1c47883a 	add	r3,r3,r17
 401a8ec:	44000015 	stw	r16,0(r8)
 401a8f0:	10800044 	addi	r2,r2,1
 401a8f4:	44400115 	stw	r17,4(r8)
 401a8f8:	d8c02015 	stw	r3,128(sp)
 401a8fc:	d8801f15 	stw	r2,124(sp)
 401a900:	010001c4 	movi	r4,7
 401a904:	20826516 	blt	r4,r2,401b29c <___vfprintf_internal_r+0x1cb0>
 401a908:	42000204 	addi	r8,r8,8
 401a90c:	88026116 	blt	r17,zero,401b294 <___vfprintf_internal_r+0x1ca8>
 401a910:	d9003217 	ldw	r4,200(sp)
 401a914:	2463c83a 	sub	r17,r4,r17
 401a918:	04407b0e 	bge	zero,r17,401ab08 <___vfprintf_internal_r+0x151c>
 401a91c:	05800404 	movi	r22,16
 401a920:	d8801f17 	ldw	r2,124(sp)
 401a924:	b4419d0e 	bge	r22,r17,401af9c <___vfprintf_internal_r+0x19b0>
 401a928:	010100f4 	movhi	r4,1027
 401a92c:	21306f84 	addi	r4,r4,-15938
 401a930:	d9002c15 	stw	r4,176(sp)
 401a934:	070001c4 	movi	fp,7
 401a938:	dcc02d17 	ldw	r19,180(sp)
 401a93c:	00000306 	br	401a94c <___vfprintf_internal_r+0x1360>
 401a940:	42000204 	addi	r8,r8,8
 401a944:	8c7ffc04 	addi	r17,r17,-16
 401a948:	b441970e 	bge	r22,r17,401afa8 <___vfprintf_internal_r+0x19bc>
 401a94c:	18c00404 	addi	r3,r3,16
 401a950:	10800044 	addi	r2,r2,1
 401a954:	45000015 	stw	r20,0(r8)
 401a958:	45800115 	stw	r22,4(r8)
 401a95c:	d8c02015 	stw	r3,128(sp)
 401a960:	d8801f15 	stw	r2,124(sp)
 401a964:	e0bff60e 	bge	fp,r2,401a940 <__alt_data_end+0xfc01a940>
 401a968:	d9801e04 	addi	r6,sp,120
 401a96c:	b80b883a 	mov	r5,r23
 401a970:	9809883a 	mov	r4,r19
 401a974:	4020b5c0 	call	4020b5c <__sprint_r>
 401a978:	103c201e 	bne	r2,zero,40199fc <__alt_data_end+0xfc0199fc>
 401a97c:	d8c02017 	ldw	r3,128(sp)
 401a980:	d8801f17 	ldw	r2,124(sp)
 401a984:	da000404 	addi	r8,sp,16
 401a988:	003fee06 	br	401a944 <__alt_data_end+0xfc01a944>
 401a98c:	d9002d17 	ldw	r4,180(sp)
 401a990:	d9801e04 	addi	r6,sp,120
 401a994:	b80b883a 	mov	r5,r23
 401a998:	4020b5c0 	call	4020b5c <__sprint_r>
 401a99c:	103c171e 	bne	r2,zero,40199fc <__alt_data_end+0xfc0199fc>
 401a9a0:	d8c02017 	ldw	r3,128(sp)
 401a9a4:	df002787 	ldb	fp,158(sp)
 401a9a8:	da000404 	addi	r8,sp,16
 401a9ac:	003d3406 	br	4019e80 <__alt_data_end+0xfc019e80>
 401a9b0:	9080040c 	andi	r2,r18,16
 401a9b4:	10016126 	beq	r2,zero,401af3c <___vfprintf_internal_r+0x1950>
 401a9b8:	d9402e17 	ldw	r5,184(sp)
 401a9bc:	2cc00017 	ldw	r19,0(r5)
 401a9c0:	29400104 	addi	r5,r5,4
 401a9c4:	d9402e15 	stw	r5,184(sp)
 401a9c8:	982dd7fa 	srai	r22,r19,31
 401a9cc:	b005883a 	mov	r2,r22
 401a9d0:	003c5a06 	br	4019b3c <__alt_data_end+0xfc019b3c>
 401a9d4:	9080040c 	andi	r2,r18,16
 401a9d8:	10003526 	beq	r2,zero,401aab0 <___vfprintf_internal_r+0x14c4>
 401a9dc:	d8c02e17 	ldw	r3,184(sp)
 401a9e0:	d9002a17 	ldw	r4,168(sp)
 401a9e4:	d8002785 	stb	zero,158(sp)
 401a9e8:	18800104 	addi	r2,r3,4
 401a9ec:	1cc00017 	ldw	r19,0(r3)
 401a9f0:	002d883a 	mov	r22,zero
 401a9f4:	20003716 	blt	r4,zero,401aad4 <___vfprintf_internal_r+0x14e8>
 401a9f8:	00ffdfc4 	movi	r3,-129
 401a9fc:	d8802e15 	stw	r2,184(sp)
 401aa00:	90e4703a 	and	r18,r18,r3
 401aa04:	0039883a 	mov	fp,zero
 401aa08:	983dd426 	beq	r19,zero,401a15c <__alt_data_end+0xfc01a15c>
 401aa0c:	00800244 	movi	r2,9
 401aa10:	14fc5336 	bltu	r2,r19,4019b60 <__alt_data_end+0xfc019b60>
 401aa14:	d8c02817 	ldw	r3,160(sp)
 401aa18:	dc001dc4 	addi	r16,sp,119
 401aa1c:	9cc00c04 	addi	r19,r19,48
 401aa20:	1c07c83a 	sub	r3,r3,r16
 401aa24:	dcc01dc5 	stb	r19,119(sp)
 401aa28:	d8c02b15 	stw	r3,172(sp)
 401aa2c:	003cc606 	br	4019d48 <__alt_data_end+0xfc019d48>
 401aa30:	d8803317 	ldw	r2,204(sp)
 401aa34:	143fffc4 	addi	r16,r2,-1
 401aa38:	043f4d0e 	bge	zero,r16,401a770 <__alt_data_end+0xfc01a770>
 401aa3c:	07000404 	movi	fp,16
 401aa40:	e400810e 	bge	fp,r16,401ac48 <___vfprintf_internal_r+0x165c>
 401aa44:	014100f4 	movhi	r5,1027
 401aa48:	29706f84 	addi	r5,r5,-15938
 401aa4c:	d9402c15 	stw	r5,176(sp)
 401aa50:	01c001c4 	movi	r7,7
 401aa54:	dcc02d17 	ldw	r19,180(sp)
 401aa58:	00000306 	br	401aa68 <___vfprintf_internal_r+0x147c>
 401aa5c:	b5800204 	addi	r22,r22,8
 401aa60:	843ffc04 	addi	r16,r16,-16
 401aa64:	e4007b0e 	bge	fp,r16,401ac54 <___vfprintf_internal_r+0x1668>
 401aa68:	18c00404 	addi	r3,r3,16
 401aa6c:	8c400044 	addi	r17,r17,1
 401aa70:	b5000015 	stw	r20,0(r22)
 401aa74:	b7000115 	stw	fp,4(r22)
 401aa78:	d8c02015 	stw	r3,128(sp)
 401aa7c:	dc401f15 	stw	r17,124(sp)
 401aa80:	3c7ff60e 	bge	r7,r17,401aa5c <__alt_data_end+0xfc01aa5c>
 401aa84:	d9801e04 	addi	r6,sp,120
 401aa88:	b80b883a 	mov	r5,r23
 401aa8c:	9809883a 	mov	r4,r19
 401aa90:	d9c03c15 	stw	r7,240(sp)
 401aa94:	4020b5c0 	call	4020b5c <__sprint_r>
 401aa98:	d9c03c17 	ldw	r7,240(sp)
 401aa9c:	103bd71e 	bne	r2,zero,40199fc <__alt_data_end+0xfc0199fc>
 401aaa0:	d8c02017 	ldw	r3,128(sp)
 401aaa4:	dc401f17 	ldw	r17,124(sp)
 401aaa8:	dd800404 	addi	r22,sp,16
 401aaac:	003fec06 	br	401aa60 <__alt_data_end+0xfc01aa60>
 401aab0:	9080100c 	andi	r2,r18,64
 401aab4:	d8002785 	stb	zero,158(sp)
 401aab8:	10010e26 	beq	r2,zero,401aef4 <___vfprintf_internal_r+0x1908>
 401aabc:	d9402e17 	ldw	r5,184(sp)
 401aac0:	d8c02a17 	ldw	r3,168(sp)
 401aac4:	002d883a 	mov	r22,zero
 401aac8:	28800104 	addi	r2,r5,4
 401aacc:	2cc0000b 	ldhu	r19,0(r5)
 401aad0:	183fc90e 	bge	r3,zero,401a9f8 <__alt_data_end+0xfc01a9f8>
 401aad4:	d8802e15 	stw	r2,184(sp)
 401aad8:	0039883a 	mov	fp,zero
 401aadc:	9d84b03a 	or	r2,r19,r22
 401aae0:	103c1e1e 	bne	r2,zero,4019b5c <__alt_data_end+0xfc019b5c>
 401aae4:	00800044 	movi	r2,1
 401aae8:	003e6c06 	br	401a49c <__alt_data_end+0xfc01a49c>
 401aaec:	d9002d17 	ldw	r4,180(sp)
 401aaf0:	d9801e04 	addi	r6,sp,120
 401aaf4:	b80b883a 	mov	r5,r23
 401aaf8:	4020b5c0 	call	4020b5c <__sprint_r>
 401aafc:	103bbf1e 	bne	r2,zero,40199fc <__alt_data_end+0xfc0199fc>
 401ab00:	d8c02017 	ldw	r3,128(sp)
 401ab04:	da000404 	addi	r8,sp,16
 401ab08:	d9003217 	ldw	r4,200(sp)
 401ab0c:	d8802617 	ldw	r2,152(sp)
 401ab10:	d9403317 	ldw	r5,204(sp)
 401ab14:	8123883a 	add	r17,r16,r4
 401ab18:	11400216 	blt	r2,r5,401ab24 <___vfprintf_internal_r+0x1538>
 401ab1c:	9100004c 	andi	r4,r18,1
 401ab20:	20000d26 	beq	r4,zero,401ab58 <___vfprintf_internal_r+0x156c>
 401ab24:	d9003717 	ldw	r4,220(sp)
 401ab28:	d9403417 	ldw	r5,208(sp)
 401ab2c:	1907883a 	add	r3,r3,r4
 401ab30:	d9001f17 	ldw	r4,124(sp)
 401ab34:	41400015 	stw	r5,0(r8)
 401ab38:	d9403717 	ldw	r5,220(sp)
 401ab3c:	21000044 	addi	r4,r4,1
 401ab40:	d8c02015 	stw	r3,128(sp)
 401ab44:	41400115 	stw	r5,4(r8)
 401ab48:	d9001f15 	stw	r4,124(sp)
 401ab4c:	014001c4 	movi	r5,7
 401ab50:	2901e816 	blt	r5,r4,401b2f4 <___vfprintf_internal_r+0x1d08>
 401ab54:	42000204 	addi	r8,r8,8
 401ab58:	d9003317 	ldw	r4,204(sp)
 401ab5c:	8121883a 	add	r16,r16,r4
 401ab60:	2085c83a 	sub	r2,r4,r2
 401ab64:	8461c83a 	sub	r16,r16,r17
 401ab68:	1400010e 	bge	r2,r16,401ab70 <___vfprintf_internal_r+0x1584>
 401ab6c:	1021883a 	mov	r16,r2
 401ab70:	04000a0e 	bge	zero,r16,401ab9c <___vfprintf_internal_r+0x15b0>
 401ab74:	d9001f17 	ldw	r4,124(sp)
 401ab78:	1c07883a 	add	r3,r3,r16
 401ab7c:	44400015 	stw	r17,0(r8)
 401ab80:	21000044 	addi	r4,r4,1
 401ab84:	44000115 	stw	r16,4(r8)
 401ab88:	d8c02015 	stw	r3,128(sp)
 401ab8c:	d9001f15 	stw	r4,124(sp)
 401ab90:	014001c4 	movi	r5,7
 401ab94:	2901fb16 	blt	r5,r4,401b384 <___vfprintf_internal_r+0x1d98>
 401ab98:	42000204 	addi	r8,r8,8
 401ab9c:	8001f716 	blt	r16,zero,401b37c <___vfprintf_internal_r+0x1d90>
 401aba0:	1421c83a 	sub	r16,r2,r16
 401aba4:	043d160e 	bge	zero,r16,401a000 <__alt_data_end+0xfc01a000>
 401aba8:	04400404 	movi	r17,16
 401abac:	d8801f17 	ldw	r2,124(sp)
 401abb0:	8c3efb0e 	bge	r17,r16,401a7a0 <__alt_data_end+0xfc01a7a0>
 401abb4:	014100f4 	movhi	r5,1027
 401abb8:	29706f84 	addi	r5,r5,-15938
 401abbc:	d9402c15 	stw	r5,176(sp)
 401abc0:	058001c4 	movi	r22,7
 401abc4:	dcc02d17 	ldw	r19,180(sp)
 401abc8:	00000306 	br	401abd8 <___vfprintf_internal_r+0x15ec>
 401abcc:	42000204 	addi	r8,r8,8
 401abd0:	843ffc04 	addi	r16,r16,-16
 401abd4:	8c3ef50e 	bge	r17,r16,401a7ac <__alt_data_end+0xfc01a7ac>
 401abd8:	18c00404 	addi	r3,r3,16
 401abdc:	10800044 	addi	r2,r2,1
 401abe0:	45000015 	stw	r20,0(r8)
 401abe4:	44400115 	stw	r17,4(r8)
 401abe8:	d8c02015 	stw	r3,128(sp)
 401abec:	d8801f15 	stw	r2,124(sp)
 401abf0:	b0bff60e 	bge	r22,r2,401abcc <__alt_data_end+0xfc01abcc>
 401abf4:	d9801e04 	addi	r6,sp,120
 401abf8:	b80b883a 	mov	r5,r23
 401abfc:	9809883a 	mov	r4,r19
 401ac00:	4020b5c0 	call	4020b5c <__sprint_r>
 401ac04:	103b7d1e 	bne	r2,zero,40199fc <__alt_data_end+0xfc0199fc>
 401ac08:	d8c02017 	ldw	r3,128(sp)
 401ac0c:	d8801f17 	ldw	r2,124(sp)
 401ac10:	da000404 	addi	r8,sp,16
 401ac14:	003fee06 	br	401abd0 <__alt_data_end+0xfc01abd0>
 401ac18:	9088703a 	and	r4,r18,r2
 401ac1c:	203eab1e 	bne	r4,zero,401a6cc <__alt_data_end+0xfc01a6cc>
 401ac20:	dc401f17 	ldw	r17,124(sp)
 401ac24:	40800115 	stw	r2,4(r8)
 401ac28:	44000015 	stw	r16,0(r8)
 401ac2c:	8c400044 	addi	r17,r17,1
 401ac30:	d8c02015 	stw	r3,128(sp)
 401ac34:	dc401f15 	stw	r17,124(sp)
 401ac38:	008001c4 	movi	r2,7
 401ac3c:	14400e16 	blt	r2,r17,401ac78 <___vfprintf_internal_r+0x168c>
 401ac40:	45800204 	addi	r22,r8,8
 401ac44:	003eca06 	br	401a770 <__alt_data_end+0xfc01a770>
 401ac48:	010100f4 	movhi	r4,1027
 401ac4c:	21306f84 	addi	r4,r4,-15938
 401ac50:	d9002c15 	stw	r4,176(sp)
 401ac54:	d8802c17 	ldw	r2,176(sp)
 401ac58:	1c07883a 	add	r3,r3,r16
 401ac5c:	8c400044 	addi	r17,r17,1
 401ac60:	b0800015 	stw	r2,0(r22)
 401ac64:	b4000115 	stw	r16,4(r22)
 401ac68:	d8c02015 	stw	r3,128(sp)
 401ac6c:	dc401f15 	stw	r17,124(sp)
 401ac70:	008001c4 	movi	r2,7
 401ac74:	147ebd0e 	bge	r2,r17,401a76c <__alt_data_end+0xfc01a76c>
 401ac78:	d9002d17 	ldw	r4,180(sp)
 401ac7c:	d9801e04 	addi	r6,sp,120
 401ac80:	b80b883a 	mov	r5,r23
 401ac84:	4020b5c0 	call	4020b5c <__sprint_r>
 401ac88:	103b5c1e 	bne	r2,zero,40199fc <__alt_data_end+0xfc0199fc>
 401ac8c:	d8c02017 	ldw	r3,128(sp)
 401ac90:	dc401f17 	ldw	r17,124(sp)
 401ac94:	dd800404 	addi	r22,sp,16
 401ac98:	003eb506 	br	401a770 <__alt_data_end+0xfc01a770>
 401ac9c:	d9002d17 	ldw	r4,180(sp)
 401aca0:	d9801e04 	addi	r6,sp,120
 401aca4:	b80b883a 	mov	r5,r23
 401aca8:	4020b5c0 	call	4020b5c <__sprint_r>
 401acac:	103b531e 	bne	r2,zero,40199fc <__alt_data_end+0xfc0199fc>
 401acb0:	d8c02017 	ldw	r3,128(sp)
 401acb4:	dc401f17 	ldw	r17,124(sp)
 401acb8:	da000404 	addi	r8,sp,16
 401acbc:	003e8d06 	br	401a6f4 <__alt_data_end+0xfc01a6f4>
 401acc0:	d9002d17 	ldw	r4,180(sp)
 401acc4:	d9801e04 	addi	r6,sp,120
 401acc8:	b80b883a 	mov	r5,r23
 401accc:	4020b5c0 	call	4020b5c <__sprint_r>
 401acd0:	103b4a1e 	bne	r2,zero,40199fc <__alt_data_end+0xfc0199fc>
 401acd4:	d8c02017 	ldw	r3,128(sp)
 401acd8:	dc401f17 	ldw	r17,124(sp)
 401acdc:	dd800404 	addi	r22,sp,16
 401ace0:	003e8f06 	br	401a720 <__alt_data_end+0xfc01a720>
 401ace4:	0027883a 	mov	r19,zero
 401ace8:	003f4a06 	br	401aa14 <__alt_data_end+0xfc01aa14>
 401acec:	d9002d17 	ldw	r4,180(sp)
 401acf0:	d9801e04 	addi	r6,sp,120
 401acf4:	b80b883a 	mov	r5,r23
 401acf8:	4020b5c0 	call	4020b5c <__sprint_r>
 401acfc:	103b3f1e 	bne	r2,zero,40199fc <__alt_data_end+0xfc0199fc>
 401ad00:	d8c02017 	ldw	r3,128(sp)
 401ad04:	da000404 	addi	r8,sp,16
 401ad08:	003c7b06 	br	4019ef8 <__alt_data_end+0xfc019ef8>
 401ad0c:	d9402a17 	ldw	r5,168(sp)
 401ad10:	04e7c83a 	sub	r19,zero,r19
 401ad14:	07000b44 	movi	fp,45
 401ad18:	9804c03a 	cmpne	r2,r19,zero
 401ad1c:	05adc83a 	sub	r22,zero,r22
 401ad20:	df002785 	stb	fp,158(sp)
 401ad24:	b0adc83a 	sub	r22,r22,r2
 401ad28:	28017b16 	blt	r5,zero,401b318 <___vfprintf_internal_r+0x1d2c>
 401ad2c:	00bfdfc4 	movi	r2,-129
 401ad30:	90a4703a 	and	r18,r18,r2
 401ad34:	003b8906 	br	4019b5c <__alt_data_end+0xfc019b5c>
 401ad38:	d9003617 	ldw	r4,216(sp)
 401ad3c:	d9403817 	ldw	r5,224(sp)
 401ad40:	da003d15 	stw	r8,244(sp)
 401ad44:	40207800 	call	4020780 <__fpclassifyd>
 401ad48:	da003d17 	ldw	r8,244(sp)
 401ad4c:	1000f026 	beq	r2,zero,401b110 <___vfprintf_internal_r+0x1b24>
 401ad50:	d9002a17 	ldw	r4,168(sp)
 401ad54:	05bff7c4 	movi	r22,-33
 401ad58:	00bfffc4 	movi	r2,-1
 401ad5c:	8dac703a 	and	r22,r17,r22
 401ad60:	20820026 	beq	r4,r2,401b564 <___vfprintf_internal_r+0x1f78>
 401ad64:	008011c4 	movi	r2,71
 401ad68:	b081f726 	beq	r22,r2,401b548 <___vfprintf_internal_r+0x1f5c>
 401ad6c:	d9003817 	ldw	r4,224(sp)
 401ad70:	90c04014 	ori	r3,r18,256
 401ad74:	d8c02c15 	stw	r3,176(sp)
 401ad78:	20021516 	blt	r4,zero,401b5d0 <___vfprintf_internal_r+0x1fe4>
 401ad7c:	dcc03817 	ldw	r19,224(sp)
 401ad80:	d8002905 	stb	zero,164(sp)
 401ad84:	00801984 	movi	r2,102
 401ad88:	8881f926 	beq	r17,r2,401b570 <___vfprintf_internal_r+0x1f84>
 401ad8c:	00801184 	movi	r2,70
 401ad90:	88821c26 	beq	r17,r2,401b604 <___vfprintf_internal_r+0x2018>
 401ad94:	00801144 	movi	r2,69
 401ad98:	b081ef26 	beq	r22,r2,401b558 <___vfprintf_internal_r+0x1f6c>
 401ad9c:	d8c02a17 	ldw	r3,168(sp)
 401ada0:	d8802104 	addi	r2,sp,132
 401ada4:	d8800315 	stw	r2,12(sp)
 401ada8:	d9403617 	ldw	r5,216(sp)
 401adac:	d8802504 	addi	r2,sp,148
 401adb0:	d9002d17 	ldw	r4,180(sp)
 401adb4:	d8800215 	stw	r2,8(sp)
 401adb8:	d8802604 	addi	r2,sp,152
 401adbc:	d8c00015 	stw	r3,0(sp)
 401adc0:	d8800115 	stw	r2,4(sp)
 401adc4:	01c00084 	movi	r7,2
 401adc8:	980d883a 	mov	r6,r19
 401adcc:	d8c03c15 	stw	r3,240(sp)
 401add0:	da003d15 	stw	r8,244(sp)
 401add4:	401bd1c0 	call	401bd1c <_dtoa_r>
 401add8:	1021883a 	mov	r16,r2
 401addc:	008019c4 	movi	r2,103
 401ade0:	d8c03c17 	ldw	r3,240(sp)
 401ade4:	da003d17 	ldw	r8,244(sp)
 401ade8:	88817126 	beq	r17,r2,401b3b0 <___vfprintf_internal_r+0x1dc4>
 401adec:	008011c4 	movi	r2,71
 401adf0:	88829126 	beq	r17,r2,401b838 <___vfprintf_internal_r+0x224c>
 401adf4:	80f9883a 	add	fp,r16,r3
 401adf8:	d9003617 	ldw	r4,216(sp)
 401adfc:	000d883a 	mov	r6,zero
 401ae00:	000f883a 	mov	r7,zero
 401ae04:	980b883a 	mov	r5,r19
 401ae08:	da003d15 	stw	r8,244(sp)
 401ae0c:	40249ec0 	call	40249ec <__eqdf2>
 401ae10:	da003d17 	ldw	r8,244(sp)
 401ae14:	10018d26 	beq	r2,zero,401b44c <___vfprintf_internal_r+0x1e60>
 401ae18:	d8802117 	ldw	r2,132(sp)
 401ae1c:	1700062e 	bgeu	r2,fp,401ae38 <___vfprintf_internal_r+0x184c>
 401ae20:	01000c04 	movi	r4,48
 401ae24:	10c00044 	addi	r3,r2,1
 401ae28:	d8c02115 	stw	r3,132(sp)
 401ae2c:	11000005 	stb	r4,0(r2)
 401ae30:	d8802117 	ldw	r2,132(sp)
 401ae34:	173ffb36 	bltu	r2,fp,401ae24 <__alt_data_end+0xfc01ae24>
 401ae38:	1405c83a 	sub	r2,r2,r16
 401ae3c:	d8803315 	stw	r2,204(sp)
 401ae40:	008011c4 	movi	r2,71
 401ae44:	b0817626 	beq	r22,r2,401b420 <___vfprintf_internal_r+0x1e34>
 401ae48:	00801944 	movi	r2,101
 401ae4c:	1442800e 	bge	r2,r17,401b850 <___vfprintf_internal_r+0x2264>
 401ae50:	d8c02617 	ldw	r3,152(sp)
 401ae54:	00801984 	movi	r2,102
 401ae58:	d8c03215 	stw	r3,200(sp)
 401ae5c:	8881fe26 	beq	r17,r2,401b658 <___vfprintf_internal_r+0x206c>
 401ae60:	d8c03217 	ldw	r3,200(sp)
 401ae64:	d9003317 	ldw	r4,204(sp)
 401ae68:	1901dd16 	blt	r3,r4,401b5e0 <___vfprintf_internal_r+0x1ff4>
 401ae6c:	9480004c 	andi	r18,r18,1
 401ae70:	90022b1e 	bne	r18,zero,401b720 <___vfprintf_internal_r+0x2134>
 401ae74:	1805883a 	mov	r2,r3
 401ae78:	18028316 	blt	r3,zero,401b888 <___vfprintf_internal_r+0x229c>
 401ae7c:	d8c03217 	ldw	r3,200(sp)
 401ae80:	044019c4 	movi	r17,103
 401ae84:	d8c02b15 	stw	r3,172(sp)
 401ae88:	df002907 	ldb	fp,164(sp)
 401ae8c:	e001531e 	bne	fp,zero,401b3dc <___vfprintf_internal_r+0x1df0>
 401ae90:	df002783 	ldbu	fp,158(sp)
 401ae94:	d8802915 	stw	r2,164(sp)
 401ae98:	dc802c17 	ldw	r18,176(sp)
 401ae9c:	d8002a15 	stw	zero,168(sp)
 401aea0:	003baf06 	br	4019d60 <__alt_data_end+0xfc019d60>
 401aea4:	d8c02e17 	ldw	r3,184(sp)
 401aea8:	d9002e17 	ldw	r4,184(sp)
 401aeac:	d9402e17 	ldw	r5,184(sp)
 401aeb0:	18c00017 	ldw	r3,0(r3)
 401aeb4:	21000117 	ldw	r4,4(r4)
 401aeb8:	29400204 	addi	r5,r5,8
 401aebc:	d8c03615 	stw	r3,216(sp)
 401aec0:	d9003815 	stw	r4,224(sp)
 401aec4:	d9402e15 	stw	r5,184(sp)
 401aec8:	003b5006 	br	4019c0c <__alt_data_end+0xfc019c0c>
 401aecc:	ac400007 	ldb	r17,0(r21)
 401aed0:	003a2806 	br	4019774 <__alt_data_end+0xfc019774>
 401aed4:	9080100c 	andi	r2,r18,64
 401aed8:	1000a826 	beq	r2,zero,401b17c <___vfprintf_internal_r+0x1b90>
 401aedc:	d8c02e17 	ldw	r3,184(sp)
 401aee0:	002d883a 	mov	r22,zero
 401aee4:	1cc0000b 	ldhu	r19,0(r3)
 401aee8:	18c00104 	addi	r3,r3,4
 401aeec:	d8c02e15 	stw	r3,184(sp)
 401aef0:	003caf06 	br	401a1b0 <__alt_data_end+0xfc01a1b0>
 401aef4:	d9002e17 	ldw	r4,184(sp)
 401aef8:	d9402a17 	ldw	r5,168(sp)
 401aefc:	002d883a 	mov	r22,zero
 401af00:	20800104 	addi	r2,r4,4
 401af04:	24c00017 	ldw	r19,0(r4)
 401af08:	283ebb0e 	bge	r5,zero,401a9f8 <__alt_data_end+0xfc01a9f8>
 401af0c:	003ef106 	br	401aad4 <__alt_data_end+0xfc01aad4>
 401af10:	9080040c 	andi	r2,r18,16
 401af14:	1000921e 	bne	r2,zero,401b160 <___vfprintf_internal_r+0x1b74>
 401af18:	9480100c 	andi	r18,r18,64
 401af1c:	90013926 	beq	r18,zero,401b404 <___vfprintf_internal_r+0x1e18>
 401af20:	d9402e17 	ldw	r5,184(sp)
 401af24:	d8c02f17 	ldw	r3,188(sp)
 401af28:	28800017 	ldw	r2,0(r5)
 401af2c:	29400104 	addi	r5,r5,4
 401af30:	d9402e15 	stw	r5,184(sp)
 401af34:	10c0000d 	sth	r3,0(r2)
 401af38:	0039e406 	br	40196cc <__alt_data_end+0xfc0196cc>
 401af3c:	9080100c 	andi	r2,r18,64
 401af40:	10008026 	beq	r2,zero,401b144 <___vfprintf_internal_r+0x1b58>
 401af44:	d8802e17 	ldw	r2,184(sp)
 401af48:	14c0000f 	ldh	r19,0(r2)
 401af4c:	10800104 	addi	r2,r2,4
 401af50:	d8802e15 	stw	r2,184(sp)
 401af54:	982dd7fa 	srai	r22,r19,31
 401af58:	b005883a 	mov	r2,r22
 401af5c:	003af706 	br	4019b3c <__alt_data_end+0xfc019b3c>
 401af60:	9080100c 	andi	r2,r18,64
 401af64:	d8002785 	stb	zero,158(sp)
 401af68:	10008a1e 	bne	r2,zero,401b194 <___vfprintf_internal_r+0x1ba8>
 401af6c:	d9002e17 	ldw	r4,184(sp)
 401af70:	d9402a17 	ldw	r5,168(sp)
 401af74:	002d883a 	mov	r22,zero
 401af78:	20800104 	addi	r2,r4,4
 401af7c:	24c00017 	ldw	r19,0(r4)
 401af80:	283e4b0e 	bge	r5,zero,401a8b0 <__alt_data_end+0xfc01a8b0>
 401af84:	9d86b03a 	or	r3,r19,r22
 401af88:	d8802e15 	stw	r2,184(sp)
 401af8c:	183e4c1e 	bne	r3,zero,401a8c0 <__alt_data_end+0xfc01a8c0>
 401af90:	0039883a 	mov	fp,zero
 401af94:	0005883a 	mov	r2,zero
 401af98:	003d4006 	br	401a49c <__alt_data_end+0xfc01a49c>
 401af9c:	014100f4 	movhi	r5,1027
 401afa0:	29706f84 	addi	r5,r5,-15938
 401afa4:	d9402c15 	stw	r5,176(sp)
 401afa8:	d9402c17 	ldw	r5,176(sp)
 401afac:	1c47883a 	add	r3,r3,r17
 401afb0:	10800044 	addi	r2,r2,1
 401afb4:	41400015 	stw	r5,0(r8)
 401afb8:	44400115 	stw	r17,4(r8)
 401afbc:	d8c02015 	stw	r3,128(sp)
 401afc0:	d8801f15 	stw	r2,124(sp)
 401afc4:	010001c4 	movi	r4,7
 401afc8:	20bec816 	blt	r4,r2,401aaec <__alt_data_end+0xfc01aaec>
 401afcc:	42000204 	addi	r8,r8,8
 401afd0:	003ecd06 	br	401ab08 <__alt_data_end+0xfc01ab08>
 401afd4:	d9002a17 	ldw	r4,168(sp)
 401afd8:	d8002785 	stb	zero,158(sp)
 401afdc:	203d2d16 	blt	r4,zero,401a494 <__alt_data_end+0xfc01a494>
 401afe0:	00bfdfc4 	movi	r2,-129
 401afe4:	90a4703a 	and	r18,r18,r2
 401afe8:	003a6106 	br	4019970 <__alt_data_end+0xfc019970>
 401afec:	010100f4 	movhi	r4,1027
 401aff0:	21306f84 	addi	r4,r4,-15938
 401aff4:	d9002c15 	stw	r4,176(sp)
 401aff8:	003bea06 	br	4019fa4 <__alt_data_end+0xfc019fa4>
 401affc:	d9002d17 	ldw	r4,180(sp)
 401b000:	d9801e04 	addi	r6,sp,120
 401b004:	b80b883a 	mov	r5,r23
 401b008:	4020b5c0 	call	4020b5c <__sprint_r>
 401b00c:	103a7b1e 	bne	r2,zero,40199fc <__alt_data_end+0xfc0199fc>
 401b010:	d8c02017 	ldw	r3,128(sp)
 401b014:	da000404 	addi	r8,sp,16
 401b018:	003d4106 	br	401a520 <__alt_data_end+0xfc01a520>
 401b01c:	d8801f17 	ldw	r2,124(sp)
 401b020:	014100f4 	movhi	r5,1027
 401b024:	01000044 	movi	r4,1
 401b028:	18c00044 	addi	r3,r3,1
 401b02c:	10800044 	addi	r2,r2,1
 401b030:	29706f04 	addi	r5,r5,-15940
 401b034:	41000115 	stw	r4,4(r8)
 401b038:	41400015 	stw	r5,0(r8)
 401b03c:	d8c02015 	stw	r3,128(sp)
 401b040:	d8801f15 	stw	r2,124(sp)
 401b044:	010001c4 	movi	r4,7
 401b048:	20805c16 	blt	r4,r2,401b1bc <___vfprintf_internal_r+0x1bd0>
 401b04c:	42000204 	addi	r8,r8,8
 401b050:	8800041e 	bne	r17,zero,401b064 <___vfprintf_internal_r+0x1a78>
 401b054:	d8803317 	ldw	r2,204(sp)
 401b058:	1000021e 	bne	r2,zero,401b064 <___vfprintf_internal_r+0x1a78>
 401b05c:	9080004c 	andi	r2,r18,1
 401b060:	103be726 	beq	r2,zero,401a000 <__alt_data_end+0xfc01a000>
 401b064:	d9003717 	ldw	r4,220(sp)
 401b068:	d8801f17 	ldw	r2,124(sp)
 401b06c:	d9403417 	ldw	r5,208(sp)
 401b070:	20c7883a 	add	r3,r4,r3
 401b074:	10800044 	addi	r2,r2,1
 401b078:	41000115 	stw	r4,4(r8)
 401b07c:	41400015 	stw	r5,0(r8)
 401b080:	d8c02015 	stw	r3,128(sp)
 401b084:	d8801f15 	stw	r2,124(sp)
 401b088:	010001c4 	movi	r4,7
 401b08c:	20812116 	blt	r4,r2,401b514 <___vfprintf_internal_r+0x1f28>
 401b090:	42000204 	addi	r8,r8,8
 401b094:	0463c83a 	sub	r17,zero,r17
 401b098:	0440730e 	bge	zero,r17,401b268 <___vfprintf_internal_r+0x1c7c>
 401b09c:	05800404 	movi	r22,16
 401b0a0:	b440860e 	bge	r22,r17,401b2bc <___vfprintf_internal_r+0x1cd0>
 401b0a4:	014100f4 	movhi	r5,1027
 401b0a8:	29706f84 	addi	r5,r5,-15938
 401b0ac:	d9402c15 	stw	r5,176(sp)
 401b0b0:	070001c4 	movi	fp,7
 401b0b4:	dcc02d17 	ldw	r19,180(sp)
 401b0b8:	00000306 	br	401b0c8 <___vfprintf_internal_r+0x1adc>
 401b0bc:	42000204 	addi	r8,r8,8
 401b0c0:	8c7ffc04 	addi	r17,r17,-16
 401b0c4:	b440800e 	bge	r22,r17,401b2c8 <___vfprintf_internal_r+0x1cdc>
 401b0c8:	18c00404 	addi	r3,r3,16
 401b0cc:	10800044 	addi	r2,r2,1
 401b0d0:	45000015 	stw	r20,0(r8)
 401b0d4:	45800115 	stw	r22,4(r8)
 401b0d8:	d8c02015 	stw	r3,128(sp)
 401b0dc:	d8801f15 	stw	r2,124(sp)
 401b0e0:	e0bff60e 	bge	fp,r2,401b0bc <__alt_data_end+0xfc01b0bc>
 401b0e4:	d9801e04 	addi	r6,sp,120
 401b0e8:	b80b883a 	mov	r5,r23
 401b0ec:	9809883a 	mov	r4,r19
 401b0f0:	4020b5c0 	call	4020b5c <__sprint_r>
 401b0f4:	103a411e 	bne	r2,zero,40199fc <__alt_data_end+0xfc0199fc>
 401b0f8:	d8c02017 	ldw	r3,128(sp)
 401b0fc:	d8801f17 	ldw	r2,124(sp)
 401b100:	da000404 	addi	r8,sp,16
 401b104:	003fee06 	br	401b0c0 <__alt_data_end+0xfc01b0c0>
 401b108:	00bfffc4 	movi	r2,-1
 401b10c:	003a3f06 	br	4019a0c <__alt_data_end+0xfc019a0c>
 401b110:	008011c4 	movi	r2,71
 401b114:	1440b816 	blt	r2,r17,401b3f8 <___vfprintf_internal_r+0x1e0c>
 401b118:	040100f4 	movhi	r16,1027
 401b11c:	84306104 	addi	r16,r16,-15996
 401b120:	00c000c4 	movi	r3,3
 401b124:	00bfdfc4 	movi	r2,-129
 401b128:	d8c02915 	stw	r3,164(sp)
 401b12c:	90a4703a 	and	r18,r18,r2
 401b130:	df002783 	ldbu	fp,158(sp)
 401b134:	d8c02b15 	stw	r3,172(sp)
 401b138:	d8002a15 	stw	zero,168(sp)
 401b13c:	d8003215 	stw	zero,200(sp)
 401b140:	003b0706 	br	4019d60 <__alt_data_end+0xfc019d60>
 401b144:	d8c02e17 	ldw	r3,184(sp)
 401b148:	1cc00017 	ldw	r19,0(r3)
 401b14c:	18c00104 	addi	r3,r3,4
 401b150:	d8c02e15 	stw	r3,184(sp)
 401b154:	982dd7fa 	srai	r22,r19,31
 401b158:	b005883a 	mov	r2,r22
 401b15c:	003a7706 	br	4019b3c <__alt_data_end+0xfc019b3c>
 401b160:	d8c02e17 	ldw	r3,184(sp)
 401b164:	d9002f17 	ldw	r4,188(sp)
 401b168:	18800017 	ldw	r2,0(r3)
 401b16c:	18c00104 	addi	r3,r3,4
 401b170:	d8c02e15 	stw	r3,184(sp)
 401b174:	11000015 	stw	r4,0(r2)
 401b178:	00395406 	br	40196cc <__alt_data_end+0xfc0196cc>
 401b17c:	d9002e17 	ldw	r4,184(sp)
 401b180:	002d883a 	mov	r22,zero
 401b184:	24c00017 	ldw	r19,0(r4)
 401b188:	21000104 	addi	r4,r4,4
 401b18c:	d9002e15 	stw	r4,184(sp)
 401b190:	003c0706 	br	401a1b0 <__alt_data_end+0xfc01a1b0>
 401b194:	d9402e17 	ldw	r5,184(sp)
 401b198:	d8c02a17 	ldw	r3,168(sp)
 401b19c:	002d883a 	mov	r22,zero
 401b1a0:	28800104 	addi	r2,r5,4
 401b1a4:	2cc0000b 	ldhu	r19,0(r5)
 401b1a8:	183dc10e 	bge	r3,zero,401a8b0 <__alt_data_end+0xfc01a8b0>
 401b1ac:	003f7506 	br	401af84 <__alt_data_end+0xfc01af84>
 401b1b0:	040100f4 	movhi	r16,1027
 401b1b4:	84305f04 	addi	r16,r16,-16004
 401b1b8:	003aa706 	br	4019c58 <__alt_data_end+0xfc019c58>
 401b1bc:	d9002d17 	ldw	r4,180(sp)
 401b1c0:	d9801e04 	addi	r6,sp,120
 401b1c4:	b80b883a 	mov	r5,r23
 401b1c8:	4020b5c0 	call	4020b5c <__sprint_r>
 401b1cc:	103a0b1e 	bne	r2,zero,40199fc <__alt_data_end+0xfc0199fc>
 401b1d0:	dc402617 	ldw	r17,152(sp)
 401b1d4:	d8c02017 	ldw	r3,128(sp)
 401b1d8:	da000404 	addi	r8,sp,16
 401b1dc:	003f9c06 	br	401b050 <__alt_data_end+0xfc01b050>
 401b1e0:	ac400043 	ldbu	r17,1(r21)
 401b1e4:	84000814 	ori	r16,r16,32
 401b1e8:	ad400044 	addi	r21,r21,1
 401b1ec:	8c403fcc 	andi	r17,r17,255
 401b1f0:	8c40201c 	xori	r17,r17,128
 401b1f4:	8c7fe004 	addi	r17,r17,-128
 401b1f8:	00395e06 	br	4019774 <__alt_data_end+0xfc019774>
 401b1fc:	d8c02e15 	stw	r3,184(sp)
 401b200:	0039883a 	mov	fp,zero
 401b204:	003e3506 	br	401aadc <__alt_data_end+0xfc01aadc>
 401b208:	d9002d17 	ldw	r4,180(sp)
 401b20c:	d9801e04 	addi	r6,sp,120
 401b210:	b80b883a 	mov	r5,r23
 401b214:	4020b5c0 	call	4020b5c <__sprint_r>
 401b218:	1039f81e 	bne	r2,zero,40199fc <__alt_data_end+0xfc0199fc>
 401b21c:	d8c02017 	ldw	r3,128(sp)
 401b220:	da000404 	addi	r8,sp,16
 401b224:	003cd006 	br	401a568 <__alt_data_end+0xfc01a568>
 401b228:	8009883a 	mov	r4,r16
 401b22c:	df003d15 	stw	fp,244(sp)
 401b230:	40195540 	call	4019554 <strlen>
 401b234:	d8802b15 	stw	r2,172(sp)
 401b238:	da003d17 	ldw	r8,244(sp)
 401b23c:	103c200e 	bge	r2,zero,401a2c0 <__alt_data_end+0xfc01a2c0>
 401b240:	0005883a 	mov	r2,zero
 401b244:	003c1e06 	br	401a2c0 <__alt_data_end+0xfc01a2c0>
 401b248:	d9002d17 	ldw	r4,180(sp)
 401b24c:	d9801e04 	addi	r6,sp,120
 401b250:	b80b883a 	mov	r5,r23
 401b254:	4020b5c0 	call	4020b5c <__sprint_r>
 401b258:	1039e81e 	bne	r2,zero,40199fc <__alt_data_end+0xfc0199fc>
 401b25c:	d8c02017 	ldw	r3,128(sp)
 401b260:	d8801f17 	ldw	r2,124(sp)
 401b264:	da000404 	addi	r8,sp,16
 401b268:	d9403317 	ldw	r5,204(sp)
 401b26c:	10800044 	addi	r2,r2,1
 401b270:	44000015 	stw	r16,0(r8)
 401b274:	28c7883a 	add	r3,r5,r3
 401b278:	003b5b06 	br	4019fe8 <__alt_data_end+0xfc019fe8>
 401b27c:	010100f4 	movhi	r4,1027
 401b280:	21307384 	addi	r4,r4,-15922
 401b284:	d9003515 	stw	r4,212(sp)
 401b288:	003af206 	br	4019e54 <__alt_data_end+0xfc019e54>
 401b28c:	013fffc4 	movi	r4,-1
 401b290:	003a0806 	br	4019ab4 <__alt_data_end+0xfc019ab4>
 401b294:	0023883a 	mov	r17,zero
 401b298:	003d9d06 	br	401a910 <__alt_data_end+0xfc01a910>
 401b29c:	d9002d17 	ldw	r4,180(sp)
 401b2a0:	d9801e04 	addi	r6,sp,120
 401b2a4:	b80b883a 	mov	r5,r23
 401b2a8:	4020b5c0 	call	4020b5c <__sprint_r>
 401b2ac:	1039d31e 	bne	r2,zero,40199fc <__alt_data_end+0xfc0199fc>
 401b2b0:	d8c02017 	ldw	r3,128(sp)
 401b2b4:	da000404 	addi	r8,sp,16
 401b2b8:	003d9406 	br	401a90c <__alt_data_end+0xfc01a90c>
 401b2bc:	010100f4 	movhi	r4,1027
 401b2c0:	21306f84 	addi	r4,r4,-15938
 401b2c4:	d9002c15 	stw	r4,176(sp)
 401b2c8:	d9002c17 	ldw	r4,176(sp)
 401b2cc:	1c47883a 	add	r3,r3,r17
 401b2d0:	10800044 	addi	r2,r2,1
 401b2d4:	41000015 	stw	r4,0(r8)
 401b2d8:	44400115 	stw	r17,4(r8)
 401b2dc:	d8c02015 	stw	r3,128(sp)
 401b2e0:	d8801f15 	stw	r2,124(sp)
 401b2e4:	010001c4 	movi	r4,7
 401b2e8:	20bfd716 	blt	r4,r2,401b248 <__alt_data_end+0xfc01b248>
 401b2ec:	42000204 	addi	r8,r8,8
 401b2f0:	003fdd06 	br	401b268 <__alt_data_end+0xfc01b268>
 401b2f4:	d9002d17 	ldw	r4,180(sp)
 401b2f8:	d9801e04 	addi	r6,sp,120
 401b2fc:	b80b883a 	mov	r5,r23
 401b300:	4020b5c0 	call	4020b5c <__sprint_r>
 401b304:	1039bd1e 	bne	r2,zero,40199fc <__alt_data_end+0xfc0199fc>
 401b308:	d8802617 	ldw	r2,152(sp)
 401b30c:	d8c02017 	ldw	r3,128(sp)
 401b310:	da000404 	addi	r8,sp,16
 401b314:	003e1006 	br	401ab58 <__alt_data_end+0xfc01ab58>
 401b318:	00800044 	movi	r2,1
 401b31c:	10803fcc 	andi	r2,r2,255
 401b320:	00c00044 	movi	r3,1
 401b324:	10fa0d26 	beq	r2,r3,4019b5c <__alt_data_end+0xfc019b5c>
 401b328:	00c00084 	movi	r3,2
 401b32c:	10fbaf26 	beq	r2,r3,401a1ec <__alt_data_end+0xfc01a1ec>
 401b330:	003a6d06 	br	4019ce8 <__alt_data_end+0xfc019ce8>
 401b334:	010100f4 	movhi	r4,1027
 401b338:	21307384 	addi	r4,r4,-15922
 401b33c:	d9003515 	stw	r4,212(sp)
 401b340:	003b5406 	br	401a094 <__alt_data_end+0xfc01a094>
 401b344:	d8802a17 	ldw	r2,168(sp)
 401b348:	00c00184 	movi	r3,6
 401b34c:	1880012e 	bgeu	r3,r2,401b354 <___vfprintf_internal_r+0x1d68>
 401b350:	1805883a 	mov	r2,r3
 401b354:	d8802b15 	stw	r2,172(sp)
 401b358:	1000ef16 	blt	r2,zero,401b718 <___vfprintf_internal_r+0x212c>
 401b35c:	040100f4 	movhi	r16,1027
 401b360:	d8802915 	stw	r2,164(sp)
 401b364:	dcc02e15 	stw	r19,184(sp)
 401b368:	d8002a15 	stw	zero,168(sp)
 401b36c:	d8003215 	stw	zero,200(sp)
 401b370:	84306d04 	addi	r16,r16,-15948
 401b374:	0039883a 	mov	fp,zero
 401b378:	003a8006 	br	4019d7c <__alt_data_end+0xfc019d7c>
 401b37c:	0021883a 	mov	r16,zero
 401b380:	003e0706 	br	401aba0 <__alt_data_end+0xfc01aba0>
 401b384:	d9002d17 	ldw	r4,180(sp)
 401b388:	d9801e04 	addi	r6,sp,120
 401b38c:	b80b883a 	mov	r5,r23
 401b390:	4020b5c0 	call	4020b5c <__sprint_r>
 401b394:	1039991e 	bne	r2,zero,40199fc <__alt_data_end+0xfc0199fc>
 401b398:	d8802617 	ldw	r2,152(sp)
 401b39c:	d9403317 	ldw	r5,204(sp)
 401b3a0:	d8c02017 	ldw	r3,128(sp)
 401b3a4:	da000404 	addi	r8,sp,16
 401b3a8:	2885c83a 	sub	r2,r5,r2
 401b3ac:	003dfb06 	br	401ab9c <__alt_data_end+0xfc01ab9c>
 401b3b0:	9080004c 	andi	r2,r18,1
 401b3b4:	103e8f1e 	bne	r2,zero,401adf4 <__alt_data_end+0xfc01adf4>
 401b3b8:	d8802117 	ldw	r2,132(sp)
 401b3bc:	003e9e06 	br	401ae38 <__alt_data_end+0xfc01ae38>
 401b3c0:	1025883a 	mov	r18,r2
 401b3c4:	0039883a 	mov	fp,zero
 401b3c8:	00800084 	movi	r2,2
 401b3cc:	003fd306 	br	401b31c <__alt_data_end+0xfc01b31c>
 401b3d0:	07000b44 	movi	fp,45
 401b3d4:	df002785 	stb	fp,158(sp)
 401b3d8:	003a1b06 	br	4019c48 <__alt_data_end+0xfc019c48>
 401b3dc:	00c00b44 	movi	r3,45
 401b3e0:	d8c02785 	stb	r3,158(sp)
 401b3e4:	d8802915 	stw	r2,164(sp)
 401b3e8:	dc802c17 	ldw	r18,176(sp)
 401b3ec:	d8002a15 	stw	zero,168(sp)
 401b3f0:	07000b44 	movi	fp,45
 401b3f4:	003a5e06 	br	4019d70 <__alt_data_end+0xfc019d70>
 401b3f8:	040100f4 	movhi	r16,1027
 401b3fc:	84306204 	addi	r16,r16,-15992
 401b400:	003f4706 	br	401b120 <__alt_data_end+0xfc01b120>
 401b404:	d9002e17 	ldw	r4,184(sp)
 401b408:	d9402f17 	ldw	r5,188(sp)
 401b40c:	20800017 	ldw	r2,0(r4)
 401b410:	21000104 	addi	r4,r4,4
 401b414:	d9002e15 	stw	r4,184(sp)
 401b418:	11400015 	stw	r5,0(r2)
 401b41c:	0038ab06 	br	40196cc <__alt_data_end+0xfc0196cc>
 401b420:	dd802617 	ldw	r22,152(sp)
 401b424:	00bfff44 	movi	r2,-3
 401b428:	b0801c16 	blt	r22,r2,401b49c <___vfprintf_internal_r+0x1eb0>
 401b42c:	d9402a17 	ldw	r5,168(sp)
 401b430:	2d801a16 	blt	r5,r22,401b49c <___vfprintf_internal_r+0x1eb0>
 401b434:	dd803215 	stw	r22,200(sp)
 401b438:	003e8906 	br	401ae60 <__alt_data_end+0xfc01ae60>
 401b43c:	010100f4 	movhi	r4,1027
 401b440:	21306f84 	addi	r4,r4,-15938
 401b444:	d9002c15 	stw	r4,176(sp)
 401b448:	003c9106 	br	401a690 <__alt_data_end+0xfc01a690>
 401b44c:	e005883a 	mov	r2,fp
 401b450:	003e7906 	br	401ae38 <__alt_data_end+0xfc01ae38>
 401b454:	d9002a17 	ldw	r4,168(sp)
 401b458:	df002783 	ldbu	fp,158(sp)
 401b45c:	dcc02e15 	stw	r19,184(sp)
 401b460:	d9002915 	stw	r4,164(sp)
 401b464:	d9002b15 	stw	r4,172(sp)
 401b468:	d8002a15 	stw	zero,168(sp)
 401b46c:	d8003215 	stw	zero,200(sp)
 401b470:	003a3b06 	br	4019d60 <__alt_data_end+0xfc019d60>
 401b474:	9080004c 	andi	r2,r18,1
 401b478:	0039883a 	mov	fp,zero
 401b47c:	10000426 	beq	r2,zero,401b490 <___vfprintf_internal_r+0x1ea4>
 401b480:	00800c04 	movi	r2,48
 401b484:	dc001dc4 	addi	r16,sp,119
 401b488:	d8801dc5 	stb	r2,119(sp)
 401b48c:	003b6406 	br	401a220 <__alt_data_end+0xfc01a220>
 401b490:	d8002b15 	stw	zero,172(sp)
 401b494:	dc001e04 	addi	r16,sp,120
 401b498:	003a2b06 	br	4019d48 <__alt_data_end+0xfc019d48>
 401b49c:	8c7fff84 	addi	r17,r17,-2
 401b4a0:	b5bfffc4 	addi	r22,r22,-1
 401b4a4:	dd802615 	stw	r22,152(sp)
 401b4a8:	dc4022c5 	stb	r17,139(sp)
 401b4ac:	b000bf16 	blt	r22,zero,401b7ac <___vfprintf_internal_r+0x21c0>
 401b4b0:	00800ac4 	movi	r2,43
 401b4b4:	d8802305 	stb	r2,140(sp)
 401b4b8:	00800244 	movi	r2,9
 401b4bc:	15807016 	blt	r2,r22,401b680 <___vfprintf_internal_r+0x2094>
 401b4c0:	00800c04 	movi	r2,48
 401b4c4:	b5800c04 	addi	r22,r22,48
 401b4c8:	d8802345 	stb	r2,141(sp)
 401b4cc:	dd802385 	stb	r22,142(sp)
 401b4d0:	d88023c4 	addi	r2,sp,143
 401b4d4:	df0022c4 	addi	fp,sp,139
 401b4d8:	d8c03317 	ldw	r3,204(sp)
 401b4dc:	1739c83a 	sub	fp,r2,fp
 401b4e0:	d9003317 	ldw	r4,204(sp)
 401b4e4:	e0c7883a 	add	r3,fp,r3
 401b4e8:	df003a15 	stw	fp,232(sp)
 401b4ec:	d8c02b15 	stw	r3,172(sp)
 401b4f0:	00800044 	movi	r2,1
 401b4f4:	1100b30e 	bge	r2,r4,401b7c4 <___vfprintf_internal_r+0x21d8>
 401b4f8:	d8c02b17 	ldw	r3,172(sp)
 401b4fc:	18c00044 	addi	r3,r3,1
 401b500:	d8c02b15 	stw	r3,172(sp)
 401b504:	1805883a 	mov	r2,r3
 401b508:	1800ac16 	blt	r3,zero,401b7bc <___vfprintf_internal_r+0x21d0>
 401b50c:	d8003215 	stw	zero,200(sp)
 401b510:	003e5d06 	br	401ae88 <__alt_data_end+0xfc01ae88>
 401b514:	d9002d17 	ldw	r4,180(sp)
 401b518:	d9801e04 	addi	r6,sp,120
 401b51c:	b80b883a 	mov	r5,r23
 401b520:	4020b5c0 	call	4020b5c <__sprint_r>
 401b524:	1039351e 	bne	r2,zero,40199fc <__alt_data_end+0xfc0199fc>
 401b528:	dc402617 	ldw	r17,152(sp)
 401b52c:	d8c02017 	ldw	r3,128(sp)
 401b530:	d8801f17 	ldw	r2,124(sp)
 401b534:	da000404 	addi	r8,sp,16
 401b538:	003ed606 	br	401b094 <__alt_data_end+0xfc01b094>
 401b53c:	182b883a 	mov	r21,r3
 401b540:	d8002a15 	stw	zero,168(sp)
 401b544:	00388c06 	br	4019778 <__alt_data_end+0xfc019778>
 401b548:	d8802a17 	ldw	r2,168(sp)
 401b54c:	103e071e 	bne	r2,zero,401ad6c <__alt_data_end+0xfc01ad6c>
 401b550:	dc002a15 	stw	r16,168(sp)
 401b554:	003e0506 	br	401ad6c <__alt_data_end+0xfc01ad6c>
 401b558:	d9002a17 	ldw	r4,168(sp)
 401b55c:	20c00044 	addi	r3,r4,1
 401b560:	003e0f06 	br	401ada0 <__alt_data_end+0xfc01ada0>
 401b564:	01400184 	movi	r5,6
 401b568:	d9402a15 	stw	r5,168(sp)
 401b56c:	003dff06 	br	401ad6c <__alt_data_end+0xfc01ad6c>
 401b570:	d8802104 	addi	r2,sp,132
 401b574:	d8800315 	stw	r2,12(sp)
 401b578:	d8802504 	addi	r2,sp,148
 401b57c:	d8800215 	stw	r2,8(sp)
 401b580:	d8802604 	addi	r2,sp,152
 401b584:	d8800115 	stw	r2,4(sp)
 401b588:	d8802a17 	ldw	r2,168(sp)
 401b58c:	d9403617 	ldw	r5,216(sp)
 401b590:	d9002d17 	ldw	r4,180(sp)
 401b594:	d8800015 	stw	r2,0(sp)
 401b598:	01c000c4 	movi	r7,3
 401b59c:	980d883a 	mov	r6,r19
 401b5a0:	da003d15 	stw	r8,244(sp)
 401b5a4:	401bd1c0 	call	401bd1c <_dtoa_r>
 401b5a8:	d8c02a17 	ldw	r3,168(sp)
 401b5ac:	da003d17 	ldw	r8,244(sp)
 401b5b0:	1021883a 	mov	r16,r2
 401b5b4:	10f9883a 	add	fp,r2,r3
 401b5b8:	81000007 	ldb	r4,0(r16)
 401b5bc:	00800c04 	movi	r2,48
 401b5c0:	20805e26 	beq	r4,r2,401b73c <___vfprintf_internal_r+0x2150>
 401b5c4:	d8c02617 	ldw	r3,152(sp)
 401b5c8:	e0f9883a 	add	fp,fp,r3
 401b5cc:	003e0a06 	br	401adf8 <__alt_data_end+0xfc01adf8>
 401b5d0:	00c00b44 	movi	r3,45
 401b5d4:	24e0003c 	xorhi	r19,r4,32768
 401b5d8:	d8c02905 	stb	r3,164(sp)
 401b5dc:	003de906 	br	401ad84 <__alt_data_end+0xfc01ad84>
 401b5e0:	d8c03217 	ldw	r3,200(sp)
 401b5e4:	00c07a0e 	bge	zero,r3,401b7d0 <___vfprintf_internal_r+0x21e4>
 401b5e8:	00800044 	movi	r2,1
 401b5ec:	d9003317 	ldw	r4,204(sp)
 401b5f0:	1105883a 	add	r2,r2,r4
 401b5f4:	d8802b15 	stw	r2,172(sp)
 401b5f8:	10004e16 	blt	r2,zero,401b734 <___vfprintf_internal_r+0x2148>
 401b5fc:	044019c4 	movi	r17,103
 401b600:	003e2106 	br	401ae88 <__alt_data_end+0xfc01ae88>
 401b604:	d9002a17 	ldw	r4,168(sp)
 401b608:	d8802104 	addi	r2,sp,132
 401b60c:	d8800315 	stw	r2,12(sp)
 401b610:	d9000015 	stw	r4,0(sp)
 401b614:	d8802504 	addi	r2,sp,148
 401b618:	d9403617 	ldw	r5,216(sp)
 401b61c:	d9002d17 	ldw	r4,180(sp)
 401b620:	d8800215 	stw	r2,8(sp)
 401b624:	d8802604 	addi	r2,sp,152
 401b628:	d8800115 	stw	r2,4(sp)
 401b62c:	01c000c4 	movi	r7,3
 401b630:	980d883a 	mov	r6,r19
 401b634:	da003d15 	stw	r8,244(sp)
 401b638:	401bd1c0 	call	401bd1c <_dtoa_r>
 401b63c:	d8c02a17 	ldw	r3,168(sp)
 401b640:	da003d17 	ldw	r8,244(sp)
 401b644:	1021883a 	mov	r16,r2
 401b648:	00801184 	movi	r2,70
 401b64c:	80f9883a 	add	fp,r16,r3
 401b650:	88bfd926 	beq	r17,r2,401b5b8 <__alt_data_end+0xfc01b5b8>
 401b654:	003de806 	br	401adf8 <__alt_data_end+0xfc01adf8>
 401b658:	d9002a17 	ldw	r4,168(sp)
 401b65c:	00c04d0e 	bge	zero,r3,401b794 <___vfprintf_internal_r+0x21a8>
 401b660:	2000441e 	bne	r4,zero,401b774 <___vfprintf_internal_r+0x2188>
 401b664:	9480004c 	andi	r18,r18,1
 401b668:	9000421e 	bne	r18,zero,401b774 <___vfprintf_internal_r+0x2188>
 401b66c:	1805883a 	mov	r2,r3
 401b670:	18006f16 	blt	r3,zero,401b830 <___vfprintf_internal_r+0x2244>
 401b674:	d8c03217 	ldw	r3,200(sp)
 401b678:	d8c02b15 	stw	r3,172(sp)
 401b67c:	003e0206 	br	401ae88 <__alt_data_end+0xfc01ae88>
 401b680:	df0022c4 	addi	fp,sp,139
 401b684:	dc002a15 	stw	r16,168(sp)
 401b688:	4027883a 	mov	r19,r8
 401b68c:	e021883a 	mov	r16,fp
 401b690:	b009883a 	mov	r4,r22
 401b694:	01400284 	movi	r5,10
 401b698:	4018fd00 	call	4018fd0 <__modsi3>
 401b69c:	10800c04 	addi	r2,r2,48
 401b6a0:	843fffc4 	addi	r16,r16,-1
 401b6a4:	b009883a 	mov	r4,r22
 401b6a8:	01400284 	movi	r5,10
 401b6ac:	80800005 	stb	r2,0(r16)
 401b6b0:	4018f4c0 	call	4018f4c <__divsi3>
 401b6b4:	102d883a 	mov	r22,r2
 401b6b8:	00800244 	movi	r2,9
 401b6bc:	15bff416 	blt	r2,r22,401b690 <__alt_data_end+0xfc01b690>
 401b6c0:	9811883a 	mov	r8,r19
 401b6c4:	b0800c04 	addi	r2,r22,48
 401b6c8:	8027883a 	mov	r19,r16
 401b6cc:	997fffc4 	addi	r5,r19,-1
 401b6d0:	98bfffc5 	stb	r2,-1(r19)
 401b6d4:	dc002a17 	ldw	r16,168(sp)
 401b6d8:	2f006d2e 	bgeu	r5,fp,401b890 <___vfprintf_internal_r+0x22a4>
 401b6dc:	d9c02384 	addi	r7,sp,142
 401b6e0:	3ccfc83a 	sub	r7,r7,r19
 401b6e4:	d9002344 	addi	r4,sp,141
 401b6e8:	e1cf883a 	add	r7,fp,r7
 401b6ec:	00000106 	br	401b6f4 <___vfprintf_internal_r+0x2108>
 401b6f0:	28800003 	ldbu	r2,0(r5)
 401b6f4:	20800005 	stb	r2,0(r4)
 401b6f8:	21000044 	addi	r4,r4,1
 401b6fc:	29400044 	addi	r5,r5,1
 401b700:	393ffb1e 	bne	r7,r4,401b6f0 <__alt_data_end+0xfc01b6f0>
 401b704:	d8802304 	addi	r2,sp,140
 401b708:	14c5c83a 	sub	r2,r2,r19
 401b70c:	d8c02344 	addi	r3,sp,141
 401b710:	1885883a 	add	r2,r3,r2
 401b714:	003f7006 	br	401b4d8 <__alt_data_end+0xfc01b4d8>
 401b718:	0005883a 	mov	r2,zero
 401b71c:	003f0f06 	br	401b35c <__alt_data_end+0xfc01b35c>
 401b720:	d8c03217 	ldw	r3,200(sp)
 401b724:	18c00044 	addi	r3,r3,1
 401b728:	d8c02b15 	stw	r3,172(sp)
 401b72c:	1805883a 	mov	r2,r3
 401b730:	183fb20e 	bge	r3,zero,401b5fc <__alt_data_end+0xfc01b5fc>
 401b734:	0005883a 	mov	r2,zero
 401b738:	003fb006 	br	401b5fc <__alt_data_end+0xfc01b5fc>
 401b73c:	d9003617 	ldw	r4,216(sp)
 401b740:	000d883a 	mov	r6,zero
 401b744:	000f883a 	mov	r7,zero
 401b748:	980b883a 	mov	r5,r19
 401b74c:	d8c03c15 	stw	r3,240(sp)
 401b750:	da003d15 	stw	r8,244(sp)
 401b754:	40249ec0 	call	40249ec <__eqdf2>
 401b758:	d8c03c17 	ldw	r3,240(sp)
 401b75c:	da003d17 	ldw	r8,244(sp)
 401b760:	103f9826 	beq	r2,zero,401b5c4 <__alt_data_end+0xfc01b5c4>
 401b764:	00800044 	movi	r2,1
 401b768:	10c7c83a 	sub	r3,r2,r3
 401b76c:	d8c02615 	stw	r3,152(sp)
 401b770:	003f9506 	br	401b5c8 <__alt_data_end+0xfc01b5c8>
 401b774:	d9002a17 	ldw	r4,168(sp)
 401b778:	d8c03217 	ldw	r3,200(sp)
 401b77c:	20800044 	addi	r2,r4,1
 401b780:	1885883a 	add	r2,r3,r2
 401b784:	d8802b15 	stw	r2,172(sp)
 401b788:	103dbf0e 	bge	r2,zero,401ae88 <__alt_data_end+0xfc01ae88>
 401b78c:	0005883a 	mov	r2,zero
 401b790:	003dbd06 	br	401ae88 <__alt_data_end+0xfc01ae88>
 401b794:	2000201e 	bne	r4,zero,401b818 <___vfprintf_internal_r+0x222c>
 401b798:	9480004c 	andi	r18,r18,1
 401b79c:	90001e1e 	bne	r18,zero,401b818 <___vfprintf_internal_r+0x222c>
 401b7a0:	00800044 	movi	r2,1
 401b7a4:	d8802b15 	stw	r2,172(sp)
 401b7a8:	003db706 	br	401ae88 <__alt_data_end+0xfc01ae88>
 401b7ac:	00800b44 	movi	r2,45
 401b7b0:	05adc83a 	sub	r22,zero,r22
 401b7b4:	d8802305 	stb	r2,140(sp)
 401b7b8:	003f3f06 	br	401b4b8 <__alt_data_end+0xfc01b4b8>
 401b7bc:	0005883a 	mov	r2,zero
 401b7c0:	003f5206 	br	401b50c <__alt_data_end+0xfc01b50c>
 401b7c4:	90a4703a 	and	r18,r18,r2
 401b7c8:	903f4e26 	beq	r18,zero,401b504 <__alt_data_end+0xfc01b504>
 401b7cc:	003f4a06 	br	401b4f8 <__alt_data_end+0xfc01b4f8>
 401b7d0:	00800084 	movi	r2,2
 401b7d4:	10c5c83a 	sub	r2,r2,r3
 401b7d8:	003f8406 	br	401b5ec <__alt_data_end+0xfc01b5ec>
 401b7dc:	d9402e17 	ldw	r5,184(sp)
 401b7e0:	d9002e17 	ldw	r4,184(sp)
 401b7e4:	ac400043 	ldbu	r17,1(r21)
 401b7e8:	29400017 	ldw	r5,0(r5)
 401b7ec:	20800104 	addi	r2,r4,4
 401b7f0:	d8802e15 	stw	r2,184(sp)
 401b7f4:	d9402a15 	stw	r5,168(sp)
 401b7f8:	182b883a 	mov	r21,r3
 401b7fc:	283e7b0e 	bge	r5,zero,401b1ec <__alt_data_end+0xfc01b1ec>
 401b800:	8c403fcc 	andi	r17,r17,255
 401b804:	017fffc4 	movi	r5,-1
 401b808:	8c40201c 	xori	r17,r17,128
 401b80c:	d9402a15 	stw	r5,168(sp)
 401b810:	8c7fe004 	addi	r17,r17,-128
 401b814:	0037d706 	br	4019774 <__alt_data_end+0xfc019774>
 401b818:	d8c02a17 	ldw	r3,168(sp)
 401b81c:	18c00084 	addi	r3,r3,2
 401b820:	d8c02b15 	stw	r3,172(sp)
 401b824:	1805883a 	mov	r2,r3
 401b828:	183d970e 	bge	r3,zero,401ae88 <__alt_data_end+0xfc01ae88>
 401b82c:	003fd706 	br	401b78c <__alt_data_end+0xfc01b78c>
 401b830:	0005883a 	mov	r2,zero
 401b834:	003f8f06 	br	401b674 <__alt_data_end+0xfc01b674>
 401b838:	9080004c 	andi	r2,r18,1
 401b83c:	103f821e 	bne	r2,zero,401b648 <__alt_data_end+0xfc01b648>
 401b840:	d8802117 	ldw	r2,132(sp)
 401b844:	1405c83a 	sub	r2,r2,r16
 401b848:	d8803315 	stw	r2,204(sp)
 401b84c:	b47ef426 	beq	r22,r17,401b420 <__alt_data_end+0xfc01b420>
 401b850:	dd802617 	ldw	r22,152(sp)
 401b854:	003f1206 	br	401b4a0 <__alt_data_end+0xfc01b4a0>
 401b858:	d8c02b03 	ldbu	r3,172(sp)
 401b85c:	d8c02785 	stb	r3,158(sp)
 401b860:	0038df06 	br	4019be0 <__alt_data_end+0xfc019be0>
 401b864:	d8c02b03 	ldbu	r3,172(sp)
 401b868:	d8c02785 	stb	r3,158(sp)
 401b86c:	0038aa06 	br	4019b18 <__alt_data_end+0xfc019b18>
 401b870:	d8c02b03 	ldbu	r3,172(sp)
 401b874:	d8c02785 	stb	r3,158(sp)
 401b878:	003a4306 	br	401a188 <__alt_data_end+0xfc01a188>
 401b87c:	d8c02b03 	ldbu	r3,172(sp)
 401b880:	d8c02785 	stb	r3,158(sp)
 401b884:	003af506 	br	401a45c <__alt_data_end+0xfc01a45c>
 401b888:	0005883a 	mov	r2,zero
 401b88c:	003d7b06 	br	401ae7c <__alt_data_end+0xfc01ae7c>
 401b890:	d8802344 	addi	r2,sp,141
 401b894:	003f1006 	br	401b4d8 <__alt_data_end+0xfc01b4d8>
 401b898:	d8c02b03 	ldbu	r3,172(sp)
 401b89c:	d8c02785 	stb	r3,158(sp)
 401b8a0:	0038fd06 	br	4019c98 <__alt_data_end+0xfc019c98>
 401b8a4:	d8c02b03 	ldbu	r3,172(sp)
 401b8a8:	d8c02785 	stb	r3,158(sp)
 401b8ac:	003a9706 	br	401a30c <__alt_data_end+0xfc01a30c>
 401b8b0:	d8c02b03 	ldbu	r3,172(sp)
 401b8b4:	d8c02785 	stb	r3,158(sp)
 401b8b8:	003a1806 	br	401a11c <__alt_data_end+0xfc01a11c>
 401b8bc:	d8c02b03 	ldbu	r3,172(sp)
 401b8c0:	d8c02785 	stb	r3,158(sp)
 401b8c4:	003abe06 	br	401a3c0 <__alt_data_end+0xfc01a3c0>

0401b8c8 <__vfprintf_internal>:
 401b8c8:	00810134 	movhi	r2,1028
 401b8cc:	10af8104 	addi	r2,r2,-16892
 401b8d0:	300f883a 	mov	r7,r6
 401b8d4:	280d883a 	mov	r6,r5
 401b8d8:	200b883a 	mov	r5,r4
 401b8dc:	11000017 	ldw	r4,0(r2)
 401b8e0:	40195ec1 	jmpi	40195ec <___vfprintf_internal_r>

0401b8e4 <__sbprintf>:
 401b8e4:	2880030b 	ldhu	r2,12(r5)
 401b8e8:	2ac01917 	ldw	r11,100(r5)
 401b8ec:	2a80038b 	ldhu	r10,14(r5)
 401b8f0:	2a400717 	ldw	r9,28(r5)
 401b8f4:	2a000917 	ldw	r8,36(r5)
 401b8f8:	defee204 	addi	sp,sp,-1144
 401b8fc:	00c10004 	movi	r3,1024
 401b900:	dc011a15 	stw	r16,1128(sp)
 401b904:	10bfff4c 	andi	r2,r2,65533
 401b908:	2821883a 	mov	r16,r5
 401b90c:	d8cb883a 	add	r5,sp,r3
 401b910:	dc811c15 	stw	r18,1136(sp)
 401b914:	dc411b15 	stw	r17,1132(sp)
 401b918:	dfc11d15 	stw	ra,1140(sp)
 401b91c:	2025883a 	mov	r18,r4
 401b920:	d881030d 	sth	r2,1036(sp)
 401b924:	dac11915 	stw	r11,1124(sp)
 401b928:	da81038d 	sth	r10,1038(sp)
 401b92c:	da410715 	stw	r9,1052(sp)
 401b930:	da010915 	stw	r8,1060(sp)
 401b934:	dec10015 	stw	sp,1024(sp)
 401b938:	dec10415 	stw	sp,1040(sp)
 401b93c:	d8c10215 	stw	r3,1032(sp)
 401b940:	d8c10515 	stw	r3,1044(sp)
 401b944:	d8010615 	stw	zero,1048(sp)
 401b948:	40195ec0 	call	40195ec <___vfprintf_internal_r>
 401b94c:	1023883a 	mov	r17,r2
 401b950:	10000416 	blt	r2,zero,401b964 <__sbprintf+0x80>
 401b954:	d9410004 	addi	r5,sp,1024
 401b958:	9009883a 	mov	r4,r18
 401b95c:	401d5c00 	call	401d5c0 <_fflush_r>
 401b960:	10000d1e 	bne	r2,zero,401b998 <__sbprintf+0xb4>
 401b964:	d881030b 	ldhu	r2,1036(sp)
 401b968:	1080100c 	andi	r2,r2,64
 401b96c:	10000326 	beq	r2,zero,401b97c <__sbprintf+0x98>
 401b970:	8080030b 	ldhu	r2,12(r16)
 401b974:	10801014 	ori	r2,r2,64
 401b978:	8080030d 	sth	r2,12(r16)
 401b97c:	8805883a 	mov	r2,r17
 401b980:	dfc11d17 	ldw	ra,1140(sp)
 401b984:	dc811c17 	ldw	r18,1136(sp)
 401b988:	dc411b17 	ldw	r17,1132(sp)
 401b98c:	dc011a17 	ldw	r16,1128(sp)
 401b990:	dec11e04 	addi	sp,sp,1144
 401b994:	f800283a 	ret
 401b998:	047fffc4 	movi	r17,-1
 401b99c:	003ff106 	br	401b964 <__alt_data_end+0xfc01b964>

0401b9a0 <__swsetup_r>:
 401b9a0:	00810134 	movhi	r2,1028
 401b9a4:	defffd04 	addi	sp,sp,-12
 401b9a8:	10af8104 	addi	r2,r2,-16892
 401b9ac:	dc400115 	stw	r17,4(sp)
 401b9b0:	2023883a 	mov	r17,r4
 401b9b4:	11000017 	ldw	r4,0(r2)
 401b9b8:	dc000015 	stw	r16,0(sp)
 401b9bc:	dfc00215 	stw	ra,8(sp)
 401b9c0:	2821883a 	mov	r16,r5
 401b9c4:	20000226 	beq	r4,zero,401b9d0 <__swsetup_r+0x30>
 401b9c8:	20800e17 	ldw	r2,56(r4)
 401b9cc:	10003126 	beq	r2,zero,401ba94 <__swsetup_r+0xf4>
 401b9d0:	8080030b 	ldhu	r2,12(r16)
 401b9d4:	10c0020c 	andi	r3,r2,8
 401b9d8:	1009883a 	mov	r4,r2
 401b9dc:	18000f26 	beq	r3,zero,401ba1c <__swsetup_r+0x7c>
 401b9e0:	80c00417 	ldw	r3,16(r16)
 401b9e4:	18001526 	beq	r3,zero,401ba3c <__swsetup_r+0x9c>
 401b9e8:	1100004c 	andi	r4,r2,1
 401b9ec:	20001c1e 	bne	r4,zero,401ba60 <__swsetup_r+0xc0>
 401b9f0:	1080008c 	andi	r2,r2,2
 401b9f4:	1000291e 	bne	r2,zero,401ba9c <__swsetup_r+0xfc>
 401b9f8:	80800517 	ldw	r2,20(r16)
 401b9fc:	80800215 	stw	r2,8(r16)
 401ba00:	18001c26 	beq	r3,zero,401ba74 <__swsetup_r+0xd4>
 401ba04:	0005883a 	mov	r2,zero
 401ba08:	dfc00217 	ldw	ra,8(sp)
 401ba0c:	dc400117 	ldw	r17,4(sp)
 401ba10:	dc000017 	ldw	r16,0(sp)
 401ba14:	dec00304 	addi	sp,sp,12
 401ba18:	f800283a 	ret
 401ba1c:	2080040c 	andi	r2,r4,16
 401ba20:	10002e26 	beq	r2,zero,401badc <__swsetup_r+0x13c>
 401ba24:	2080010c 	andi	r2,r4,4
 401ba28:	10001e1e 	bne	r2,zero,401baa4 <__swsetup_r+0x104>
 401ba2c:	80c00417 	ldw	r3,16(r16)
 401ba30:	20800214 	ori	r2,r4,8
 401ba34:	8080030d 	sth	r2,12(r16)
 401ba38:	183feb1e 	bne	r3,zero,401b9e8 <__alt_data_end+0xfc01b9e8>
 401ba3c:	1100a00c 	andi	r4,r2,640
 401ba40:	01408004 	movi	r5,512
 401ba44:	217fe826 	beq	r4,r5,401b9e8 <__alt_data_end+0xfc01b9e8>
 401ba48:	800b883a 	mov	r5,r16
 401ba4c:	8809883a 	mov	r4,r17
 401ba50:	401e55c0 	call	401e55c <__smakebuf_r>
 401ba54:	8080030b 	ldhu	r2,12(r16)
 401ba58:	80c00417 	ldw	r3,16(r16)
 401ba5c:	003fe206 	br	401b9e8 <__alt_data_end+0xfc01b9e8>
 401ba60:	80800517 	ldw	r2,20(r16)
 401ba64:	80000215 	stw	zero,8(r16)
 401ba68:	0085c83a 	sub	r2,zero,r2
 401ba6c:	80800615 	stw	r2,24(r16)
 401ba70:	183fe41e 	bne	r3,zero,401ba04 <__alt_data_end+0xfc01ba04>
 401ba74:	80c0030b 	ldhu	r3,12(r16)
 401ba78:	0005883a 	mov	r2,zero
 401ba7c:	1900200c 	andi	r4,r3,128
 401ba80:	203fe126 	beq	r4,zero,401ba08 <__alt_data_end+0xfc01ba08>
 401ba84:	18c01014 	ori	r3,r3,64
 401ba88:	80c0030d 	sth	r3,12(r16)
 401ba8c:	00bfffc4 	movi	r2,-1
 401ba90:	003fdd06 	br	401ba08 <__alt_data_end+0xfc01ba08>
 401ba94:	401d9ac0 	call	401d9ac <__sinit>
 401ba98:	003fcd06 	br	401b9d0 <__alt_data_end+0xfc01b9d0>
 401ba9c:	0005883a 	mov	r2,zero
 401baa0:	003fd606 	br	401b9fc <__alt_data_end+0xfc01b9fc>
 401baa4:	81400c17 	ldw	r5,48(r16)
 401baa8:	28000626 	beq	r5,zero,401bac4 <__swsetup_r+0x124>
 401baac:	80801004 	addi	r2,r16,64
 401bab0:	28800326 	beq	r5,r2,401bac0 <__swsetup_r+0x120>
 401bab4:	8809883a 	mov	r4,r17
 401bab8:	401db200 	call	401db20 <_free_r>
 401babc:	8100030b 	ldhu	r4,12(r16)
 401bac0:	80000c15 	stw	zero,48(r16)
 401bac4:	80c00417 	ldw	r3,16(r16)
 401bac8:	00bff6c4 	movi	r2,-37
 401bacc:	1108703a 	and	r4,r2,r4
 401bad0:	80000115 	stw	zero,4(r16)
 401bad4:	80c00015 	stw	r3,0(r16)
 401bad8:	003fd506 	br	401ba30 <__alt_data_end+0xfc01ba30>
 401badc:	00800244 	movi	r2,9
 401bae0:	88800015 	stw	r2,0(r17)
 401bae4:	20801014 	ori	r2,r4,64
 401bae8:	8080030d 	sth	r2,12(r16)
 401baec:	00bfffc4 	movi	r2,-1
 401baf0:	003fc506 	br	401ba08 <__alt_data_end+0xfc01ba08>

0401baf4 <quorem>:
 401baf4:	defff204 	addi	sp,sp,-56
 401baf8:	ddc00b15 	stw	r23,44(sp)
 401bafc:	20800417 	ldw	r2,16(r4)
 401bb00:	2dc00417 	ldw	r23,16(r5)
 401bb04:	dfc00d15 	stw	ra,52(sp)
 401bb08:	df000c15 	stw	fp,48(sp)
 401bb0c:	dd800a15 	stw	r22,40(sp)
 401bb10:	dd400915 	stw	r21,36(sp)
 401bb14:	dd000815 	stw	r20,32(sp)
 401bb18:	dcc00715 	stw	r19,28(sp)
 401bb1c:	dc800615 	stw	r18,24(sp)
 401bb20:	dc400515 	stw	r17,20(sp)
 401bb24:	dc000415 	stw	r16,16(sp)
 401bb28:	15c07a16 	blt	r2,r23,401bd14 <quorem+0x220>
 401bb2c:	bdffffc4 	addi	r23,r23,-1
 401bb30:	bde9883a 	add	r20,r23,r23
 401bb34:	28c00504 	addi	r3,r5,20
 401bb38:	a529883a 	add	r20,r20,r20
 401bb3c:	1d39883a 	add	fp,r3,r20
 401bb40:	24c00504 	addi	r19,r4,20
 401bb44:	d9400215 	stw	r5,8(sp)
 401bb48:	9d29883a 	add	r20,r19,r20
 401bb4c:	e1400017 	ldw	r5,0(fp)
 401bb50:	d9000015 	stw	r4,0(sp)
 401bb54:	a1000017 	ldw	r4,0(r20)
 401bb58:	29400044 	addi	r5,r5,1
 401bb5c:	d8c00115 	stw	r3,4(sp)
 401bb60:	dd000315 	stw	r20,12(sp)
 401bb64:	40190440 	call	4019044 <__udivsi3>
 401bb68:	1025883a 	mov	r18,r2
 401bb6c:	10003026 	beq	r2,zero,401bc30 <quorem+0x13c>
 401bb70:	dc400117 	ldw	r17,4(sp)
 401bb74:	9829883a 	mov	r20,r19
 401bb78:	002d883a 	mov	r22,zero
 401bb7c:	0021883a 	mov	r16,zero
 401bb80:	8d400017 	ldw	r21,0(r17)
 401bb84:	900b883a 	mov	r5,r18
 401bb88:	8c400104 	addi	r17,r17,4
 401bb8c:	a93fffcc 	andi	r4,r21,65535
 401bb90:	40191000 	call	4019100 <__mulsi3>
 401bb94:	a808d43a 	srli	r4,r21,16
 401bb98:	900b883a 	mov	r5,r18
 401bb9c:	15ad883a 	add	r22,r2,r22
 401bba0:	40191000 	call	4019100 <__mulsi3>
 401bba4:	a1000017 	ldw	r4,0(r20)
 401bba8:	b00cd43a 	srli	r6,r22,16
 401bbac:	b0ffffcc 	andi	r3,r22,65535
 401bbb0:	217fffcc 	andi	r5,r4,65535
 401bbb4:	2c21883a 	add	r16,r5,r16
 401bbb8:	80c7c83a 	sub	r3,r16,r3
 401bbbc:	2008d43a 	srli	r4,r4,16
 401bbc0:	1185883a 	add	r2,r2,r6
 401bbc4:	1821d43a 	srai	r16,r3,16
 401bbc8:	117fffcc 	andi	r5,r2,65535
 401bbcc:	2149c83a 	sub	r4,r4,r5
 401bbd0:	2421883a 	add	r16,r4,r16
 401bbd4:	8008943a 	slli	r4,r16,16
 401bbd8:	18ffffcc 	andi	r3,r3,65535
 401bbdc:	102cd43a 	srli	r22,r2,16
 401bbe0:	20c8b03a 	or	r4,r4,r3
 401bbe4:	a1000015 	stw	r4,0(r20)
 401bbe8:	8021d43a 	srai	r16,r16,16
 401bbec:	a5000104 	addi	r20,r20,4
 401bbf0:	e47fe32e 	bgeu	fp,r17,401bb80 <__alt_data_end+0xfc01bb80>
 401bbf4:	d8c00317 	ldw	r3,12(sp)
 401bbf8:	18800017 	ldw	r2,0(r3)
 401bbfc:	10000c1e 	bne	r2,zero,401bc30 <quorem+0x13c>
 401bc00:	18bfff04 	addi	r2,r3,-4
 401bc04:	9880082e 	bgeu	r19,r2,401bc28 <quorem+0x134>
 401bc08:	18ffff17 	ldw	r3,-4(r3)
 401bc0c:	18000326 	beq	r3,zero,401bc1c <quorem+0x128>
 401bc10:	00000506 	br	401bc28 <quorem+0x134>
 401bc14:	10c00017 	ldw	r3,0(r2)
 401bc18:	1800031e 	bne	r3,zero,401bc28 <quorem+0x134>
 401bc1c:	10bfff04 	addi	r2,r2,-4
 401bc20:	bdffffc4 	addi	r23,r23,-1
 401bc24:	98bffb36 	bltu	r19,r2,401bc14 <__alt_data_end+0xfc01bc14>
 401bc28:	d8c00017 	ldw	r3,0(sp)
 401bc2c:	1dc00415 	stw	r23,16(r3)
 401bc30:	d9400217 	ldw	r5,8(sp)
 401bc34:	d9000017 	ldw	r4,0(sp)
 401bc38:	401fae80 	call	401fae8 <__mcmp>
 401bc3c:	10002816 	blt	r2,zero,401bce0 <quorem+0x1ec>
 401bc40:	dc400117 	ldw	r17,4(sp)
 401bc44:	94800044 	addi	r18,r18,1
 401bc48:	980d883a 	mov	r6,r19
 401bc4c:	0007883a 	mov	r3,zero
 401bc50:	31000017 	ldw	r4,0(r6)
 401bc54:	89400017 	ldw	r5,0(r17)
 401bc58:	31800104 	addi	r6,r6,4
 401bc5c:	20bfffcc 	andi	r2,r4,65535
 401bc60:	10c7883a 	add	r3,r2,r3
 401bc64:	28bfffcc 	andi	r2,r5,65535
 401bc68:	1885c83a 	sub	r2,r3,r2
 401bc6c:	280ad43a 	srli	r5,r5,16
 401bc70:	2008d43a 	srli	r4,r4,16
 401bc74:	1007d43a 	srai	r3,r2,16
 401bc78:	10bfffcc 	andi	r2,r2,65535
 401bc7c:	2149c83a 	sub	r4,r4,r5
 401bc80:	20c9883a 	add	r4,r4,r3
 401bc84:	200a943a 	slli	r5,r4,16
 401bc88:	8c400104 	addi	r17,r17,4
 401bc8c:	2007d43a 	srai	r3,r4,16
 401bc90:	2884b03a 	or	r2,r5,r2
 401bc94:	30bfff15 	stw	r2,-4(r6)
 401bc98:	e47fed2e 	bgeu	fp,r17,401bc50 <__alt_data_end+0xfc01bc50>
 401bc9c:	bdc5883a 	add	r2,r23,r23
 401bca0:	1085883a 	add	r2,r2,r2
 401bca4:	9887883a 	add	r3,r19,r2
 401bca8:	18800017 	ldw	r2,0(r3)
 401bcac:	10000c1e 	bne	r2,zero,401bce0 <quorem+0x1ec>
 401bcb0:	18bfff04 	addi	r2,r3,-4
 401bcb4:	9880082e 	bgeu	r19,r2,401bcd8 <quorem+0x1e4>
 401bcb8:	18ffff17 	ldw	r3,-4(r3)
 401bcbc:	18000326 	beq	r3,zero,401bccc <quorem+0x1d8>
 401bcc0:	00000506 	br	401bcd8 <quorem+0x1e4>
 401bcc4:	10c00017 	ldw	r3,0(r2)
 401bcc8:	1800031e 	bne	r3,zero,401bcd8 <quorem+0x1e4>
 401bccc:	10bfff04 	addi	r2,r2,-4
 401bcd0:	bdffffc4 	addi	r23,r23,-1
 401bcd4:	98bffb36 	bltu	r19,r2,401bcc4 <__alt_data_end+0xfc01bcc4>
 401bcd8:	d8c00017 	ldw	r3,0(sp)
 401bcdc:	1dc00415 	stw	r23,16(r3)
 401bce0:	9005883a 	mov	r2,r18
 401bce4:	dfc00d17 	ldw	ra,52(sp)
 401bce8:	df000c17 	ldw	fp,48(sp)
 401bcec:	ddc00b17 	ldw	r23,44(sp)
 401bcf0:	dd800a17 	ldw	r22,40(sp)
 401bcf4:	dd400917 	ldw	r21,36(sp)
 401bcf8:	dd000817 	ldw	r20,32(sp)
 401bcfc:	dcc00717 	ldw	r19,28(sp)
 401bd00:	dc800617 	ldw	r18,24(sp)
 401bd04:	dc400517 	ldw	r17,20(sp)
 401bd08:	dc000417 	ldw	r16,16(sp)
 401bd0c:	dec00e04 	addi	sp,sp,56
 401bd10:	f800283a 	ret
 401bd14:	0005883a 	mov	r2,zero
 401bd18:	003ff206 	br	401bce4 <__alt_data_end+0xfc01bce4>

0401bd1c <_dtoa_r>:
 401bd1c:	20801017 	ldw	r2,64(r4)
 401bd20:	deffde04 	addi	sp,sp,-136
 401bd24:	df002015 	stw	fp,128(sp)
 401bd28:	dcc01b15 	stw	r19,108(sp)
 401bd2c:	dc801a15 	stw	r18,104(sp)
 401bd30:	dc401915 	stw	r17,100(sp)
 401bd34:	dc001815 	stw	r16,96(sp)
 401bd38:	dfc02115 	stw	ra,132(sp)
 401bd3c:	ddc01f15 	stw	r23,124(sp)
 401bd40:	dd801e15 	stw	r22,120(sp)
 401bd44:	dd401d15 	stw	r21,116(sp)
 401bd48:	dd001c15 	stw	r20,112(sp)
 401bd4c:	d9c00315 	stw	r7,12(sp)
 401bd50:	2039883a 	mov	fp,r4
 401bd54:	3023883a 	mov	r17,r6
 401bd58:	2825883a 	mov	r18,r5
 401bd5c:	dc002417 	ldw	r16,144(sp)
 401bd60:	3027883a 	mov	r19,r6
 401bd64:	10000826 	beq	r2,zero,401bd88 <_dtoa_r+0x6c>
 401bd68:	21801117 	ldw	r6,68(r4)
 401bd6c:	00c00044 	movi	r3,1
 401bd70:	100b883a 	mov	r5,r2
 401bd74:	1986983a 	sll	r3,r3,r6
 401bd78:	11800115 	stw	r6,4(r2)
 401bd7c:	10c00215 	stw	r3,8(r2)
 401bd80:	401f20c0 	call	401f20c <_Bfree>
 401bd84:	e0001015 	stw	zero,64(fp)
 401bd88:	88002e16 	blt	r17,zero,401be44 <_dtoa_r+0x128>
 401bd8c:	80000015 	stw	zero,0(r16)
 401bd90:	889ffc2c 	andhi	r2,r17,32752
 401bd94:	00dffc34 	movhi	r3,32752
 401bd98:	10c01c26 	beq	r2,r3,401be0c <_dtoa_r+0xf0>
 401bd9c:	000d883a 	mov	r6,zero
 401bda0:	000f883a 	mov	r7,zero
 401bda4:	9009883a 	mov	r4,r18
 401bda8:	980b883a 	mov	r5,r19
 401bdac:	40249ec0 	call	40249ec <__eqdf2>
 401bdb0:	10002b1e 	bne	r2,zero,401be60 <_dtoa_r+0x144>
 401bdb4:	d9c02317 	ldw	r7,140(sp)
 401bdb8:	00800044 	movi	r2,1
 401bdbc:	38800015 	stw	r2,0(r7)
 401bdc0:	d8802517 	ldw	r2,148(sp)
 401bdc4:	10019e26 	beq	r2,zero,401c440 <_dtoa_r+0x724>
 401bdc8:	d8c02517 	ldw	r3,148(sp)
 401bdcc:	008100f4 	movhi	r2,1027
 401bdd0:	10b06f44 	addi	r2,r2,-15939
 401bdd4:	18800015 	stw	r2,0(r3)
 401bdd8:	10bfffc4 	addi	r2,r2,-1
 401bddc:	dfc02117 	ldw	ra,132(sp)
 401bde0:	df002017 	ldw	fp,128(sp)
 401bde4:	ddc01f17 	ldw	r23,124(sp)
 401bde8:	dd801e17 	ldw	r22,120(sp)
 401bdec:	dd401d17 	ldw	r21,116(sp)
 401bdf0:	dd001c17 	ldw	r20,112(sp)
 401bdf4:	dcc01b17 	ldw	r19,108(sp)
 401bdf8:	dc801a17 	ldw	r18,104(sp)
 401bdfc:	dc401917 	ldw	r17,100(sp)
 401be00:	dc001817 	ldw	r16,96(sp)
 401be04:	dec02204 	addi	sp,sp,136
 401be08:	f800283a 	ret
 401be0c:	d8c02317 	ldw	r3,140(sp)
 401be10:	0089c3c4 	movi	r2,9999
 401be14:	18800015 	stw	r2,0(r3)
 401be18:	90017726 	beq	r18,zero,401c3f8 <_dtoa_r+0x6dc>
 401be1c:	008100f4 	movhi	r2,1027
 401be20:	10b07b04 	addi	r2,r2,-15892
 401be24:	d9002517 	ldw	r4,148(sp)
 401be28:	203fec26 	beq	r4,zero,401bddc <__alt_data_end+0xfc01bddc>
 401be2c:	10c000c7 	ldb	r3,3(r2)
 401be30:	1801781e 	bne	r3,zero,401c414 <_dtoa_r+0x6f8>
 401be34:	10c000c4 	addi	r3,r2,3
 401be38:	d9802517 	ldw	r6,148(sp)
 401be3c:	30c00015 	stw	r3,0(r6)
 401be40:	003fe606 	br	401bddc <__alt_data_end+0xfc01bddc>
 401be44:	04e00034 	movhi	r19,32768
 401be48:	9cffffc4 	addi	r19,r19,-1
 401be4c:	00800044 	movi	r2,1
 401be50:	8ce6703a 	and	r19,r17,r19
 401be54:	80800015 	stw	r2,0(r16)
 401be58:	9823883a 	mov	r17,r19
 401be5c:	003fcc06 	br	401bd90 <__alt_data_end+0xfc01bd90>
 401be60:	d8800204 	addi	r2,sp,8
 401be64:	d8800015 	stw	r2,0(sp)
 401be68:	d9c00104 	addi	r7,sp,4
 401be6c:	900b883a 	mov	r5,r18
 401be70:	980d883a 	mov	r6,r19
 401be74:	e009883a 	mov	r4,fp
 401be78:	8820d53a 	srli	r16,r17,20
 401be7c:	401feb40 	call	401feb4 <__d2b>
 401be80:	d8800915 	stw	r2,36(sp)
 401be84:	8001651e 	bne	r16,zero,401c41c <_dtoa_r+0x700>
 401be88:	dd800217 	ldw	r22,8(sp)
 401be8c:	dc000117 	ldw	r16,4(sp)
 401be90:	00800804 	movi	r2,32
 401be94:	b421883a 	add	r16,r22,r16
 401be98:	80c10c84 	addi	r3,r16,1074
 401be9c:	10c2d10e 	bge	r2,r3,401c9e4 <_dtoa_r+0xcc8>
 401bea0:	00801004 	movi	r2,64
 401bea4:	81010484 	addi	r4,r16,1042
 401bea8:	10c7c83a 	sub	r3,r2,r3
 401beac:	9108d83a 	srl	r4,r18,r4
 401beb0:	88e2983a 	sll	r17,r17,r3
 401beb4:	2448b03a 	or	r4,r4,r17
 401beb8:	4025f080 	call	4025f08 <__floatunsidf>
 401bebc:	017f8434 	movhi	r5,65040
 401bec0:	01800044 	movi	r6,1
 401bec4:	1009883a 	mov	r4,r2
 401bec8:	194b883a 	add	r5,r3,r5
 401becc:	843fffc4 	addi	r16,r16,-1
 401bed0:	d9801115 	stw	r6,68(sp)
 401bed4:	000d883a 	mov	r6,zero
 401bed8:	01cffe34 	movhi	r7,16376
 401bedc:	40254b00 	call	40254b0 <__subdf3>
 401bee0:	0198dbf4 	movhi	r6,25455
 401bee4:	01cff4f4 	movhi	r7,16339
 401bee8:	3190d844 	addi	r6,r6,17249
 401beec:	39e1e9c4 	addi	r7,r7,-30809
 401bef0:	1009883a 	mov	r4,r2
 401bef4:	180b883a 	mov	r5,r3
 401bef8:	4024c440 	call	4024c44 <__muldf3>
 401befc:	01a2d874 	movhi	r6,35681
 401bf00:	01cff1f4 	movhi	r7,16327
 401bf04:	31b22cc4 	addi	r6,r6,-14157
 401bf08:	39e28a04 	addi	r7,r7,-30168
 401bf0c:	180b883a 	mov	r5,r3
 401bf10:	1009883a 	mov	r4,r2
 401bf14:	40237700 	call	4023770 <__adddf3>
 401bf18:	8009883a 	mov	r4,r16
 401bf1c:	1029883a 	mov	r20,r2
 401bf20:	1823883a 	mov	r17,r3
 401bf24:	4025e2c0 	call	4025e2c <__floatsidf>
 401bf28:	019427f4 	movhi	r6,20639
 401bf2c:	01cff4f4 	movhi	r7,16339
 401bf30:	319e7ec4 	addi	r6,r6,31227
 401bf34:	39d104c4 	addi	r7,r7,17427
 401bf38:	1009883a 	mov	r4,r2
 401bf3c:	180b883a 	mov	r5,r3
 401bf40:	4024c440 	call	4024c44 <__muldf3>
 401bf44:	100d883a 	mov	r6,r2
 401bf48:	180f883a 	mov	r7,r3
 401bf4c:	a009883a 	mov	r4,r20
 401bf50:	880b883a 	mov	r5,r17
 401bf54:	40237700 	call	4023770 <__adddf3>
 401bf58:	1009883a 	mov	r4,r2
 401bf5c:	180b883a 	mov	r5,r3
 401bf60:	1029883a 	mov	r20,r2
 401bf64:	1823883a 	mov	r17,r3
 401bf68:	4025dac0 	call	4025dac <__fixdfsi>
 401bf6c:	000d883a 	mov	r6,zero
 401bf70:	000f883a 	mov	r7,zero
 401bf74:	a009883a 	mov	r4,r20
 401bf78:	880b883a 	mov	r5,r17
 401bf7c:	d8800515 	stw	r2,20(sp)
 401bf80:	4024b500 	call	4024b50 <__ledf2>
 401bf84:	10028716 	blt	r2,zero,401c9a4 <_dtoa_r+0xc88>
 401bf88:	d8c00517 	ldw	r3,20(sp)
 401bf8c:	00800584 	movi	r2,22
 401bf90:	10c27536 	bltu	r2,r3,401c968 <_dtoa_r+0xc4c>
 401bf94:	180490fa 	slli	r2,r3,3
 401bf98:	00c100f4 	movhi	r3,1027
 401bf9c:	18f09704 	addi	r3,r3,-15780
 401bfa0:	1885883a 	add	r2,r3,r2
 401bfa4:	11000017 	ldw	r4,0(r2)
 401bfa8:	11400117 	ldw	r5,4(r2)
 401bfac:	900d883a 	mov	r6,r18
 401bfb0:	980f883a 	mov	r7,r19
 401bfb4:	4024a740 	call	4024a74 <__gedf2>
 401bfb8:	00828d0e 	bge	zero,r2,401c9f0 <_dtoa_r+0xcd4>
 401bfbc:	d9000517 	ldw	r4,20(sp)
 401bfc0:	d8000e15 	stw	zero,56(sp)
 401bfc4:	213fffc4 	addi	r4,r4,-1
 401bfc8:	d9000515 	stw	r4,20(sp)
 401bfcc:	b42dc83a 	sub	r22,r22,r16
 401bfd0:	b5bfffc4 	addi	r22,r22,-1
 401bfd4:	b0026f16 	blt	r22,zero,401c994 <_dtoa_r+0xc78>
 401bfd8:	d8000815 	stw	zero,32(sp)
 401bfdc:	d9c00517 	ldw	r7,20(sp)
 401bfe0:	38026416 	blt	r7,zero,401c974 <_dtoa_r+0xc58>
 401bfe4:	b1ed883a 	add	r22,r22,r7
 401bfe8:	d9c00d15 	stw	r7,52(sp)
 401bfec:	d8000a15 	stw	zero,40(sp)
 401bff0:	d9800317 	ldw	r6,12(sp)
 401bff4:	00800244 	movi	r2,9
 401bff8:	11811436 	bltu	r2,r6,401c44c <_dtoa_r+0x730>
 401bffc:	00800144 	movi	r2,5
 401c000:	1184e10e 	bge	r2,r6,401d388 <_dtoa_r+0x166c>
 401c004:	31bfff04 	addi	r6,r6,-4
 401c008:	d9800315 	stw	r6,12(sp)
 401c00c:	0023883a 	mov	r17,zero
 401c010:	d9800317 	ldw	r6,12(sp)
 401c014:	008000c4 	movi	r2,3
 401c018:	30836726 	beq	r6,r2,401cdb8 <_dtoa_r+0x109c>
 401c01c:	1183410e 	bge	r2,r6,401cd24 <_dtoa_r+0x1008>
 401c020:	d9c00317 	ldw	r7,12(sp)
 401c024:	00800104 	movi	r2,4
 401c028:	38827c26 	beq	r7,r2,401ca1c <_dtoa_r+0xd00>
 401c02c:	00800144 	movi	r2,5
 401c030:	3884c41e 	bne	r7,r2,401d344 <_dtoa_r+0x1628>
 401c034:	00800044 	movi	r2,1
 401c038:	d8800b15 	stw	r2,44(sp)
 401c03c:	d8c00517 	ldw	r3,20(sp)
 401c040:	d9002217 	ldw	r4,136(sp)
 401c044:	1907883a 	add	r3,r3,r4
 401c048:	19800044 	addi	r6,r3,1
 401c04c:	d8c00c15 	stw	r3,48(sp)
 401c050:	d9800615 	stw	r6,24(sp)
 401c054:	0183a40e 	bge	zero,r6,401cee8 <_dtoa_r+0x11cc>
 401c058:	d9800617 	ldw	r6,24(sp)
 401c05c:	3021883a 	mov	r16,r6
 401c060:	e0001115 	stw	zero,68(fp)
 401c064:	008005c4 	movi	r2,23
 401c068:	1184c92e 	bgeu	r2,r6,401d390 <_dtoa_r+0x1674>
 401c06c:	00c00044 	movi	r3,1
 401c070:	00800104 	movi	r2,4
 401c074:	1085883a 	add	r2,r2,r2
 401c078:	11000504 	addi	r4,r2,20
 401c07c:	180b883a 	mov	r5,r3
 401c080:	18c00044 	addi	r3,r3,1
 401c084:	313ffb2e 	bgeu	r6,r4,401c074 <__alt_data_end+0xfc01c074>
 401c088:	e1401115 	stw	r5,68(fp)
 401c08c:	e009883a 	mov	r4,fp
 401c090:	401f1640 	call	401f164 <_Balloc>
 401c094:	d8800715 	stw	r2,28(sp)
 401c098:	e0801015 	stw	r2,64(fp)
 401c09c:	00800384 	movi	r2,14
 401c0a0:	1400f736 	bltu	r2,r16,401c480 <_dtoa_r+0x764>
 401c0a4:	8800f626 	beq	r17,zero,401c480 <_dtoa_r+0x764>
 401c0a8:	d9c00517 	ldw	r7,20(sp)
 401c0ac:	01c39a0e 	bge	zero,r7,401cf18 <_dtoa_r+0x11fc>
 401c0b0:	388003cc 	andi	r2,r7,15
 401c0b4:	100490fa 	slli	r2,r2,3
 401c0b8:	382bd13a 	srai	r21,r7,4
 401c0bc:	00c100f4 	movhi	r3,1027
 401c0c0:	18f09704 	addi	r3,r3,-15780
 401c0c4:	1885883a 	add	r2,r3,r2
 401c0c8:	a8c0040c 	andi	r3,r21,16
 401c0cc:	12400017 	ldw	r9,0(r2)
 401c0d0:	12000117 	ldw	r8,4(r2)
 401c0d4:	18037926 	beq	r3,zero,401cebc <_dtoa_r+0x11a0>
 401c0d8:	008100f4 	movhi	r2,1027
 401c0dc:	10b08d04 	addi	r2,r2,-15820
 401c0e0:	11800817 	ldw	r6,32(r2)
 401c0e4:	11c00917 	ldw	r7,36(r2)
 401c0e8:	9009883a 	mov	r4,r18
 401c0ec:	980b883a 	mov	r5,r19
 401c0f0:	da001715 	stw	r8,92(sp)
 401c0f4:	da401615 	stw	r9,88(sp)
 401c0f8:	402401c0 	call	402401c <__divdf3>
 401c0fc:	da001717 	ldw	r8,92(sp)
 401c100:	da401617 	ldw	r9,88(sp)
 401c104:	ad4003cc 	andi	r21,r21,15
 401c108:	040000c4 	movi	r16,3
 401c10c:	1023883a 	mov	r17,r2
 401c110:	1829883a 	mov	r20,r3
 401c114:	a8001126 	beq	r21,zero,401c15c <_dtoa_r+0x440>
 401c118:	05c100f4 	movhi	r23,1027
 401c11c:	bdf08d04 	addi	r23,r23,-15820
 401c120:	4805883a 	mov	r2,r9
 401c124:	4007883a 	mov	r3,r8
 401c128:	a980004c 	andi	r6,r21,1
 401c12c:	1009883a 	mov	r4,r2
 401c130:	a82bd07a 	srai	r21,r21,1
 401c134:	180b883a 	mov	r5,r3
 401c138:	30000426 	beq	r6,zero,401c14c <_dtoa_r+0x430>
 401c13c:	b9800017 	ldw	r6,0(r23)
 401c140:	b9c00117 	ldw	r7,4(r23)
 401c144:	84000044 	addi	r16,r16,1
 401c148:	4024c440 	call	4024c44 <__muldf3>
 401c14c:	bdc00204 	addi	r23,r23,8
 401c150:	a83ff51e 	bne	r21,zero,401c128 <__alt_data_end+0xfc01c128>
 401c154:	1013883a 	mov	r9,r2
 401c158:	1811883a 	mov	r8,r3
 401c15c:	480d883a 	mov	r6,r9
 401c160:	400f883a 	mov	r7,r8
 401c164:	8809883a 	mov	r4,r17
 401c168:	a00b883a 	mov	r5,r20
 401c16c:	402401c0 	call	402401c <__divdf3>
 401c170:	d8800f15 	stw	r2,60(sp)
 401c174:	d8c01015 	stw	r3,64(sp)
 401c178:	d8c00e17 	ldw	r3,56(sp)
 401c17c:	18000626 	beq	r3,zero,401c198 <_dtoa_r+0x47c>
 401c180:	d9000f17 	ldw	r4,60(sp)
 401c184:	d9401017 	ldw	r5,64(sp)
 401c188:	000d883a 	mov	r6,zero
 401c18c:	01cffc34 	movhi	r7,16368
 401c190:	4024b500 	call	4024b50 <__ledf2>
 401c194:	10040b16 	blt	r2,zero,401d1c4 <_dtoa_r+0x14a8>
 401c198:	8009883a 	mov	r4,r16
 401c19c:	4025e2c0 	call	4025e2c <__floatsidf>
 401c1a0:	d9800f17 	ldw	r6,60(sp)
 401c1a4:	d9c01017 	ldw	r7,64(sp)
 401c1a8:	1009883a 	mov	r4,r2
 401c1ac:	180b883a 	mov	r5,r3
 401c1b0:	4024c440 	call	4024c44 <__muldf3>
 401c1b4:	000d883a 	mov	r6,zero
 401c1b8:	01d00734 	movhi	r7,16412
 401c1bc:	1009883a 	mov	r4,r2
 401c1c0:	180b883a 	mov	r5,r3
 401c1c4:	40237700 	call	4023770 <__adddf3>
 401c1c8:	1021883a 	mov	r16,r2
 401c1cc:	d8800617 	ldw	r2,24(sp)
 401c1d0:	047f3034 	movhi	r17,64704
 401c1d4:	1c63883a 	add	r17,r3,r17
 401c1d8:	10031826 	beq	r2,zero,401ce3c <_dtoa_r+0x1120>
 401c1dc:	d8c00517 	ldw	r3,20(sp)
 401c1e0:	db000617 	ldw	r12,24(sp)
 401c1e4:	d8c01315 	stw	r3,76(sp)
 401c1e8:	d9000b17 	ldw	r4,44(sp)
 401c1ec:	20038f26 	beq	r4,zero,401d02c <_dtoa_r+0x1310>
 401c1f0:	60bfffc4 	addi	r2,r12,-1
 401c1f4:	100490fa 	slli	r2,r2,3
 401c1f8:	00c100f4 	movhi	r3,1027
 401c1fc:	18f09704 	addi	r3,r3,-15780
 401c200:	1885883a 	add	r2,r3,r2
 401c204:	11800017 	ldw	r6,0(r2)
 401c208:	11c00117 	ldw	r7,4(r2)
 401c20c:	d8800717 	ldw	r2,28(sp)
 401c210:	0009883a 	mov	r4,zero
 401c214:	014ff834 	movhi	r5,16352
 401c218:	db001615 	stw	r12,88(sp)
 401c21c:	15c00044 	addi	r23,r2,1
 401c220:	402401c0 	call	402401c <__divdf3>
 401c224:	800d883a 	mov	r6,r16
 401c228:	880f883a 	mov	r7,r17
 401c22c:	1009883a 	mov	r4,r2
 401c230:	180b883a 	mov	r5,r3
 401c234:	40254b00 	call	40254b0 <__subdf3>
 401c238:	d9401017 	ldw	r5,64(sp)
 401c23c:	d9000f17 	ldw	r4,60(sp)
 401c240:	102b883a 	mov	r21,r2
 401c244:	d8c01215 	stw	r3,72(sp)
 401c248:	4025dac0 	call	4025dac <__fixdfsi>
 401c24c:	1009883a 	mov	r4,r2
 401c250:	1029883a 	mov	r20,r2
 401c254:	4025e2c0 	call	4025e2c <__floatsidf>
 401c258:	d9000f17 	ldw	r4,60(sp)
 401c25c:	d9401017 	ldw	r5,64(sp)
 401c260:	100d883a 	mov	r6,r2
 401c264:	180f883a 	mov	r7,r3
 401c268:	40254b00 	call	40254b0 <__subdf3>
 401c26c:	1823883a 	mov	r17,r3
 401c270:	d8c00717 	ldw	r3,28(sp)
 401c274:	d9401217 	ldw	r5,72(sp)
 401c278:	a2000c04 	addi	r8,r20,48
 401c27c:	1021883a 	mov	r16,r2
 401c280:	1a000005 	stb	r8,0(r3)
 401c284:	800d883a 	mov	r6,r16
 401c288:	880f883a 	mov	r7,r17
 401c28c:	a809883a 	mov	r4,r21
 401c290:	4029883a 	mov	r20,r8
 401c294:	4024a740 	call	4024a74 <__gedf2>
 401c298:	00841d16 	blt	zero,r2,401d310 <_dtoa_r+0x15f4>
 401c29c:	800d883a 	mov	r6,r16
 401c2a0:	880f883a 	mov	r7,r17
 401c2a4:	0009883a 	mov	r4,zero
 401c2a8:	014ffc34 	movhi	r5,16368
 401c2ac:	40254b00 	call	40254b0 <__subdf3>
 401c2b0:	d9401217 	ldw	r5,72(sp)
 401c2b4:	100d883a 	mov	r6,r2
 401c2b8:	180f883a 	mov	r7,r3
 401c2bc:	a809883a 	mov	r4,r21
 401c2c0:	4024a740 	call	4024a74 <__gedf2>
 401c2c4:	db001617 	ldw	r12,88(sp)
 401c2c8:	00840e16 	blt	zero,r2,401d304 <_dtoa_r+0x15e8>
 401c2cc:	00800044 	movi	r2,1
 401c2d0:	13006b0e 	bge	r2,r12,401c480 <_dtoa_r+0x764>
 401c2d4:	d9000717 	ldw	r4,28(sp)
 401c2d8:	dd800f15 	stw	r22,60(sp)
 401c2dc:	dcc01015 	stw	r19,64(sp)
 401c2e0:	2319883a 	add	r12,r4,r12
 401c2e4:	dcc01217 	ldw	r19,72(sp)
 401c2e8:	602d883a 	mov	r22,r12
 401c2ec:	dc801215 	stw	r18,72(sp)
 401c2f0:	b825883a 	mov	r18,r23
 401c2f4:	00000906 	br	401c31c <_dtoa_r+0x600>
 401c2f8:	40254b00 	call	40254b0 <__subdf3>
 401c2fc:	a80d883a 	mov	r6,r21
 401c300:	980f883a 	mov	r7,r19
 401c304:	1009883a 	mov	r4,r2
 401c308:	180b883a 	mov	r5,r3
 401c30c:	4024b500 	call	4024b50 <__ledf2>
 401c310:	1003e816 	blt	r2,zero,401d2b4 <_dtoa_r+0x1598>
 401c314:	b825883a 	mov	r18,r23
 401c318:	bd83e926 	beq	r23,r22,401d2c0 <_dtoa_r+0x15a4>
 401c31c:	a809883a 	mov	r4,r21
 401c320:	980b883a 	mov	r5,r19
 401c324:	000d883a 	mov	r6,zero
 401c328:	01d00934 	movhi	r7,16420
 401c32c:	4024c440 	call	4024c44 <__muldf3>
 401c330:	000d883a 	mov	r6,zero
 401c334:	01d00934 	movhi	r7,16420
 401c338:	8009883a 	mov	r4,r16
 401c33c:	880b883a 	mov	r5,r17
 401c340:	102b883a 	mov	r21,r2
 401c344:	1827883a 	mov	r19,r3
 401c348:	4024c440 	call	4024c44 <__muldf3>
 401c34c:	180b883a 	mov	r5,r3
 401c350:	1009883a 	mov	r4,r2
 401c354:	1821883a 	mov	r16,r3
 401c358:	1023883a 	mov	r17,r2
 401c35c:	4025dac0 	call	4025dac <__fixdfsi>
 401c360:	1009883a 	mov	r4,r2
 401c364:	1029883a 	mov	r20,r2
 401c368:	4025e2c0 	call	4025e2c <__floatsidf>
 401c36c:	8809883a 	mov	r4,r17
 401c370:	800b883a 	mov	r5,r16
 401c374:	100d883a 	mov	r6,r2
 401c378:	180f883a 	mov	r7,r3
 401c37c:	40254b00 	call	40254b0 <__subdf3>
 401c380:	a5000c04 	addi	r20,r20,48
 401c384:	a80d883a 	mov	r6,r21
 401c388:	980f883a 	mov	r7,r19
 401c38c:	1009883a 	mov	r4,r2
 401c390:	180b883a 	mov	r5,r3
 401c394:	95000005 	stb	r20,0(r18)
 401c398:	1021883a 	mov	r16,r2
 401c39c:	1823883a 	mov	r17,r3
 401c3a0:	4024b500 	call	4024b50 <__ledf2>
 401c3a4:	bdc00044 	addi	r23,r23,1
 401c3a8:	800d883a 	mov	r6,r16
 401c3ac:	880f883a 	mov	r7,r17
 401c3b0:	0009883a 	mov	r4,zero
 401c3b4:	014ffc34 	movhi	r5,16368
 401c3b8:	103fcf0e 	bge	r2,zero,401c2f8 <__alt_data_end+0xfc01c2f8>
 401c3bc:	d8c01317 	ldw	r3,76(sp)
 401c3c0:	d8c00515 	stw	r3,20(sp)
 401c3c4:	d9400917 	ldw	r5,36(sp)
 401c3c8:	e009883a 	mov	r4,fp
 401c3cc:	401f20c0 	call	401f20c <_Bfree>
 401c3d0:	d9000517 	ldw	r4,20(sp)
 401c3d4:	d9802317 	ldw	r6,140(sp)
 401c3d8:	d9c02517 	ldw	r7,148(sp)
 401c3dc:	b8000005 	stb	zero,0(r23)
 401c3e0:	20800044 	addi	r2,r4,1
 401c3e4:	30800015 	stw	r2,0(r6)
 401c3e8:	3802aa26 	beq	r7,zero,401ce94 <_dtoa_r+0x1178>
 401c3ec:	3dc00015 	stw	r23,0(r7)
 401c3f0:	d8800717 	ldw	r2,28(sp)
 401c3f4:	003e7906 	br	401bddc <__alt_data_end+0xfc01bddc>
 401c3f8:	00800434 	movhi	r2,16
 401c3fc:	10bfffc4 	addi	r2,r2,-1
 401c400:	88a2703a 	and	r17,r17,r2
 401c404:	883e851e 	bne	r17,zero,401be1c <__alt_data_end+0xfc01be1c>
 401c408:	008100f4 	movhi	r2,1027
 401c40c:	10b07804 	addi	r2,r2,-15904
 401c410:	003e8406 	br	401be24 <__alt_data_end+0xfc01be24>
 401c414:	10c00204 	addi	r3,r2,8
 401c418:	003e8706 	br	401be38 <__alt_data_end+0xfc01be38>
 401c41c:	01400434 	movhi	r5,16
 401c420:	297fffc4 	addi	r5,r5,-1
 401c424:	994a703a 	and	r5,r19,r5
 401c428:	9009883a 	mov	r4,r18
 401c42c:	843f0044 	addi	r16,r16,-1023
 401c430:	294ffc34 	orhi	r5,r5,16368
 401c434:	dd800217 	ldw	r22,8(sp)
 401c438:	d8001115 	stw	zero,68(sp)
 401c43c:	003ea506 	br	401bed4 <__alt_data_end+0xfc01bed4>
 401c440:	008100f4 	movhi	r2,1027
 401c444:	10b06f04 	addi	r2,r2,-15940
 401c448:	003e6406 	br	401bddc <__alt_data_end+0xfc01bddc>
 401c44c:	e0001115 	stw	zero,68(fp)
 401c450:	000b883a 	mov	r5,zero
 401c454:	e009883a 	mov	r4,fp
 401c458:	401f1640 	call	401f164 <_Balloc>
 401c45c:	01bfffc4 	movi	r6,-1
 401c460:	01c00044 	movi	r7,1
 401c464:	d8800715 	stw	r2,28(sp)
 401c468:	d9800c15 	stw	r6,48(sp)
 401c46c:	e0801015 	stw	r2,64(fp)
 401c470:	d8000315 	stw	zero,12(sp)
 401c474:	d9c00b15 	stw	r7,44(sp)
 401c478:	d9800615 	stw	r6,24(sp)
 401c47c:	d8002215 	stw	zero,136(sp)
 401c480:	d8800117 	ldw	r2,4(sp)
 401c484:	10008916 	blt	r2,zero,401c6ac <_dtoa_r+0x990>
 401c488:	d9000517 	ldw	r4,20(sp)
 401c48c:	00c00384 	movi	r3,14
 401c490:	19008616 	blt	r3,r4,401c6ac <_dtoa_r+0x990>
 401c494:	200490fa 	slli	r2,r4,3
 401c498:	00c100f4 	movhi	r3,1027
 401c49c:	d9802217 	ldw	r6,136(sp)
 401c4a0:	18f09704 	addi	r3,r3,-15780
 401c4a4:	1885883a 	add	r2,r3,r2
 401c4a8:	14000017 	ldw	r16,0(r2)
 401c4ac:	14400117 	ldw	r17,4(r2)
 401c4b0:	30016316 	blt	r6,zero,401ca40 <_dtoa_r+0xd24>
 401c4b4:	800d883a 	mov	r6,r16
 401c4b8:	880f883a 	mov	r7,r17
 401c4bc:	9009883a 	mov	r4,r18
 401c4c0:	980b883a 	mov	r5,r19
 401c4c4:	402401c0 	call	402401c <__divdf3>
 401c4c8:	180b883a 	mov	r5,r3
 401c4cc:	1009883a 	mov	r4,r2
 401c4d0:	4025dac0 	call	4025dac <__fixdfsi>
 401c4d4:	1009883a 	mov	r4,r2
 401c4d8:	102b883a 	mov	r21,r2
 401c4dc:	4025e2c0 	call	4025e2c <__floatsidf>
 401c4e0:	800d883a 	mov	r6,r16
 401c4e4:	880f883a 	mov	r7,r17
 401c4e8:	1009883a 	mov	r4,r2
 401c4ec:	180b883a 	mov	r5,r3
 401c4f0:	4024c440 	call	4024c44 <__muldf3>
 401c4f4:	100d883a 	mov	r6,r2
 401c4f8:	180f883a 	mov	r7,r3
 401c4fc:	9009883a 	mov	r4,r18
 401c500:	980b883a 	mov	r5,r19
 401c504:	40254b00 	call	40254b0 <__subdf3>
 401c508:	d9c00717 	ldw	r7,28(sp)
 401c50c:	1009883a 	mov	r4,r2
 401c510:	a8800c04 	addi	r2,r21,48
 401c514:	38800005 	stb	r2,0(r7)
 401c518:	3dc00044 	addi	r23,r7,1
 401c51c:	d9c00617 	ldw	r7,24(sp)
 401c520:	01800044 	movi	r6,1
 401c524:	180b883a 	mov	r5,r3
 401c528:	2005883a 	mov	r2,r4
 401c52c:	39803826 	beq	r7,r6,401c610 <_dtoa_r+0x8f4>
 401c530:	000d883a 	mov	r6,zero
 401c534:	01d00934 	movhi	r7,16420
 401c538:	4024c440 	call	4024c44 <__muldf3>
 401c53c:	000d883a 	mov	r6,zero
 401c540:	000f883a 	mov	r7,zero
 401c544:	1009883a 	mov	r4,r2
 401c548:	180b883a 	mov	r5,r3
 401c54c:	1025883a 	mov	r18,r2
 401c550:	1827883a 	mov	r19,r3
 401c554:	40249ec0 	call	40249ec <__eqdf2>
 401c558:	103f9a26 	beq	r2,zero,401c3c4 <__alt_data_end+0xfc01c3c4>
 401c55c:	d9c00617 	ldw	r7,24(sp)
 401c560:	d8c00717 	ldw	r3,28(sp)
 401c564:	b829883a 	mov	r20,r23
 401c568:	38bfffc4 	addi	r2,r7,-1
 401c56c:	18ad883a 	add	r22,r3,r2
 401c570:	00000a06 	br	401c59c <_dtoa_r+0x880>
 401c574:	4024c440 	call	4024c44 <__muldf3>
 401c578:	000d883a 	mov	r6,zero
 401c57c:	000f883a 	mov	r7,zero
 401c580:	1009883a 	mov	r4,r2
 401c584:	180b883a 	mov	r5,r3
 401c588:	1025883a 	mov	r18,r2
 401c58c:	1827883a 	mov	r19,r3
 401c590:	b829883a 	mov	r20,r23
 401c594:	40249ec0 	call	40249ec <__eqdf2>
 401c598:	103f8a26 	beq	r2,zero,401c3c4 <__alt_data_end+0xfc01c3c4>
 401c59c:	800d883a 	mov	r6,r16
 401c5a0:	880f883a 	mov	r7,r17
 401c5a4:	9009883a 	mov	r4,r18
 401c5a8:	980b883a 	mov	r5,r19
 401c5ac:	402401c0 	call	402401c <__divdf3>
 401c5b0:	180b883a 	mov	r5,r3
 401c5b4:	1009883a 	mov	r4,r2
 401c5b8:	4025dac0 	call	4025dac <__fixdfsi>
 401c5bc:	1009883a 	mov	r4,r2
 401c5c0:	102b883a 	mov	r21,r2
 401c5c4:	4025e2c0 	call	4025e2c <__floatsidf>
 401c5c8:	800d883a 	mov	r6,r16
 401c5cc:	880f883a 	mov	r7,r17
 401c5d0:	1009883a 	mov	r4,r2
 401c5d4:	180b883a 	mov	r5,r3
 401c5d8:	4024c440 	call	4024c44 <__muldf3>
 401c5dc:	100d883a 	mov	r6,r2
 401c5e0:	180f883a 	mov	r7,r3
 401c5e4:	9009883a 	mov	r4,r18
 401c5e8:	980b883a 	mov	r5,r19
 401c5ec:	40254b00 	call	40254b0 <__subdf3>
 401c5f0:	aa000c04 	addi	r8,r21,48
 401c5f4:	a2000005 	stb	r8,0(r20)
 401c5f8:	000d883a 	mov	r6,zero
 401c5fc:	01d00934 	movhi	r7,16420
 401c600:	1009883a 	mov	r4,r2
 401c604:	180b883a 	mov	r5,r3
 401c608:	a5c00044 	addi	r23,r20,1
 401c60c:	b53fd91e 	bne	r22,r20,401c574 <__alt_data_end+0xfc01c574>
 401c610:	100d883a 	mov	r6,r2
 401c614:	180f883a 	mov	r7,r3
 401c618:	1009883a 	mov	r4,r2
 401c61c:	180b883a 	mov	r5,r3
 401c620:	40237700 	call	4023770 <__adddf3>
 401c624:	100d883a 	mov	r6,r2
 401c628:	180f883a 	mov	r7,r3
 401c62c:	8009883a 	mov	r4,r16
 401c630:	880b883a 	mov	r5,r17
 401c634:	1027883a 	mov	r19,r2
 401c638:	1825883a 	mov	r18,r3
 401c63c:	4024b500 	call	4024b50 <__ledf2>
 401c640:	10000816 	blt	r2,zero,401c664 <_dtoa_r+0x948>
 401c644:	980d883a 	mov	r6,r19
 401c648:	900f883a 	mov	r7,r18
 401c64c:	8009883a 	mov	r4,r16
 401c650:	880b883a 	mov	r5,r17
 401c654:	40249ec0 	call	40249ec <__eqdf2>
 401c658:	103f5a1e 	bne	r2,zero,401c3c4 <__alt_data_end+0xfc01c3c4>
 401c65c:	ad40004c 	andi	r21,r21,1
 401c660:	a83f5826 	beq	r21,zero,401c3c4 <__alt_data_end+0xfc01c3c4>
 401c664:	bd3fffc3 	ldbu	r20,-1(r23)
 401c668:	b8bfffc4 	addi	r2,r23,-1
 401c66c:	1007883a 	mov	r3,r2
 401c670:	01400e44 	movi	r5,57
 401c674:	d9800717 	ldw	r6,28(sp)
 401c678:	00000506 	br	401c690 <_dtoa_r+0x974>
 401c67c:	18ffffc4 	addi	r3,r3,-1
 401c680:	11824726 	beq	r2,r6,401cfa0 <_dtoa_r+0x1284>
 401c684:	1d000003 	ldbu	r20,0(r3)
 401c688:	102f883a 	mov	r23,r2
 401c68c:	10bfffc4 	addi	r2,r2,-1
 401c690:	a1003fcc 	andi	r4,r20,255
 401c694:	2100201c 	xori	r4,r4,128
 401c698:	213fe004 	addi	r4,r4,-128
 401c69c:	217ff726 	beq	r4,r5,401c67c <__alt_data_end+0xfc01c67c>
 401c6a0:	a2000044 	addi	r8,r20,1
 401c6a4:	12000005 	stb	r8,0(r2)
 401c6a8:	003f4606 	br	401c3c4 <__alt_data_end+0xfc01c3c4>
 401c6ac:	d9000b17 	ldw	r4,44(sp)
 401c6b0:	2000c826 	beq	r4,zero,401c9d4 <_dtoa_r+0xcb8>
 401c6b4:	d9800317 	ldw	r6,12(sp)
 401c6b8:	00c00044 	movi	r3,1
 401c6bc:	1980f90e 	bge	r3,r6,401caa4 <_dtoa_r+0xd88>
 401c6c0:	d8800617 	ldw	r2,24(sp)
 401c6c4:	d8c00a17 	ldw	r3,40(sp)
 401c6c8:	157fffc4 	addi	r21,r2,-1
 401c6cc:	1d41f316 	blt	r3,r21,401ce9c <_dtoa_r+0x1180>
 401c6d0:	1d6bc83a 	sub	r21,r3,r21
 401c6d4:	d9c00617 	ldw	r7,24(sp)
 401c6d8:	3802aa16 	blt	r7,zero,401d184 <_dtoa_r+0x1468>
 401c6dc:	dd000817 	ldw	r20,32(sp)
 401c6e0:	d8800617 	ldw	r2,24(sp)
 401c6e4:	d8c00817 	ldw	r3,32(sp)
 401c6e8:	01400044 	movi	r5,1
 401c6ec:	e009883a 	mov	r4,fp
 401c6f0:	1887883a 	add	r3,r3,r2
 401c6f4:	d8c00815 	stw	r3,32(sp)
 401c6f8:	b0ad883a 	add	r22,r22,r2
 401c6fc:	401f5980 	call	401f598 <__i2b>
 401c700:	1023883a 	mov	r17,r2
 401c704:	a0000826 	beq	r20,zero,401c728 <_dtoa_r+0xa0c>
 401c708:	0580070e 	bge	zero,r22,401c728 <_dtoa_r+0xa0c>
 401c70c:	a005883a 	mov	r2,r20
 401c710:	b500b916 	blt	r22,r20,401c9f8 <_dtoa_r+0xcdc>
 401c714:	d9000817 	ldw	r4,32(sp)
 401c718:	a0a9c83a 	sub	r20,r20,r2
 401c71c:	b0adc83a 	sub	r22,r22,r2
 401c720:	2089c83a 	sub	r4,r4,r2
 401c724:	d9000815 	stw	r4,32(sp)
 401c728:	d9800a17 	ldw	r6,40(sp)
 401c72c:	0181810e 	bge	zero,r6,401cd34 <_dtoa_r+0x1018>
 401c730:	d9c00b17 	ldw	r7,44(sp)
 401c734:	3800b326 	beq	r7,zero,401ca04 <_dtoa_r+0xce8>
 401c738:	a800b226 	beq	r21,zero,401ca04 <_dtoa_r+0xce8>
 401c73c:	880b883a 	mov	r5,r17
 401c740:	a80d883a 	mov	r6,r21
 401c744:	e009883a 	mov	r4,fp
 401c748:	401f8600 	call	401f860 <__pow5mult>
 401c74c:	d9800917 	ldw	r6,36(sp)
 401c750:	100b883a 	mov	r5,r2
 401c754:	e009883a 	mov	r4,fp
 401c758:	1023883a 	mov	r17,r2
 401c75c:	401f5d40 	call	401f5d4 <__multiply>
 401c760:	1021883a 	mov	r16,r2
 401c764:	d8800a17 	ldw	r2,40(sp)
 401c768:	d9400917 	ldw	r5,36(sp)
 401c76c:	e009883a 	mov	r4,fp
 401c770:	1545c83a 	sub	r2,r2,r21
 401c774:	d8800a15 	stw	r2,40(sp)
 401c778:	401f20c0 	call	401f20c <_Bfree>
 401c77c:	d8c00a17 	ldw	r3,40(sp)
 401c780:	18009f1e 	bne	r3,zero,401ca00 <_dtoa_r+0xce4>
 401c784:	05c00044 	movi	r23,1
 401c788:	e009883a 	mov	r4,fp
 401c78c:	b80b883a 	mov	r5,r23
 401c790:	401f5980 	call	401f598 <__i2b>
 401c794:	d9000d17 	ldw	r4,52(sp)
 401c798:	102b883a 	mov	r21,r2
 401c79c:	2000ce26 	beq	r4,zero,401cad8 <_dtoa_r+0xdbc>
 401c7a0:	200d883a 	mov	r6,r4
 401c7a4:	100b883a 	mov	r5,r2
 401c7a8:	e009883a 	mov	r4,fp
 401c7ac:	401f8600 	call	401f860 <__pow5mult>
 401c7b0:	d9800317 	ldw	r6,12(sp)
 401c7b4:	102b883a 	mov	r21,r2
 401c7b8:	b981810e 	bge	r23,r6,401cdc0 <_dtoa_r+0x10a4>
 401c7bc:	0027883a 	mov	r19,zero
 401c7c0:	a8800417 	ldw	r2,16(r21)
 401c7c4:	05c00804 	movi	r23,32
 401c7c8:	10800104 	addi	r2,r2,4
 401c7cc:	1085883a 	add	r2,r2,r2
 401c7d0:	1085883a 	add	r2,r2,r2
 401c7d4:	a885883a 	add	r2,r21,r2
 401c7d8:	11000017 	ldw	r4,0(r2)
 401c7dc:	401f4800 	call	401f480 <__hi0bits>
 401c7e0:	b885c83a 	sub	r2,r23,r2
 401c7e4:	1585883a 	add	r2,r2,r22
 401c7e8:	108007cc 	andi	r2,r2,31
 401c7ec:	1000b326 	beq	r2,zero,401cabc <_dtoa_r+0xda0>
 401c7f0:	00c00804 	movi	r3,32
 401c7f4:	1887c83a 	sub	r3,r3,r2
 401c7f8:	01000104 	movi	r4,4
 401c7fc:	20c2cd0e 	bge	r4,r3,401d334 <_dtoa_r+0x1618>
 401c800:	00c00704 	movi	r3,28
 401c804:	1885c83a 	sub	r2,r3,r2
 401c808:	d8c00817 	ldw	r3,32(sp)
 401c80c:	a0a9883a 	add	r20,r20,r2
 401c810:	b0ad883a 	add	r22,r22,r2
 401c814:	1887883a 	add	r3,r3,r2
 401c818:	d8c00815 	stw	r3,32(sp)
 401c81c:	d9800817 	ldw	r6,32(sp)
 401c820:	0180040e 	bge	zero,r6,401c834 <_dtoa_r+0xb18>
 401c824:	800b883a 	mov	r5,r16
 401c828:	e009883a 	mov	r4,fp
 401c82c:	401f9a00 	call	401f9a0 <__lshift>
 401c830:	1021883a 	mov	r16,r2
 401c834:	0580050e 	bge	zero,r22,401c84c <_dtoa_r+0xb30>
 401c838:	a80b883a 	mov	r5,r21
 401c83c:	b00d883a 	mov	r6,r22
 401c840:	e009883a 	mov	r4,fp
 401c844:	401f9a00 	call	401f9a0 <__lshift>
 401c848:	102b883a 	mov	r21,r2
 401c84c:	d9c00e17 	ldw	r7,56(sp)
 401c850:	3801211e 	bne	r7,zero,401ccd8 <_dtoa_r+0xfbc>
 401c854:	d9800617 	ldw	r6,24(sp)
 401c858:	0181380e 	bge	zero,r6,401cd3c <_dtoa_r+0x1020>
 401c85c:	d8c00b17 	ldw	r3,44(sp)
 401c860:	1800ab1e 	bne	r3,zero,401cb10 <_dtoa_r+0xdf4>
 401c864:	dc800717 	ldw	r18,28(sp)
 401c868:	dcc00617 	ldw	r19,24(sp)
 401c86c:	9029883a 	mov	r20,r18
 401c870:	00000206 	br	401c87c <_dtoa_r+0xb60>
 401c874:	401f2340 	call	401f234 <__multadd>
 401c878:	1021883a 	mov	r16,r2
 401c87c:	a80b883a 	mov	r5,r21
 401c880:	8009883a 	mov	r4,r16
 401c884:	401baf40 	call	401baf4 <quorem>
 401c888:	10800c04 	addi	r2,r2,48
 401c88c:	90800005 	stb	r2,0(r18)
 401c890:	94800044 	addi	r18,r18,1
 401c894:	9507c83a 	sub	r3,r18,r20
 401c898:	000f883a 	mov	r7,zero
 401c89c:	01800284 	movi	r6,10
 401c8a0:	800b883a 	mov	r5,r16
 401c8a4:	e009883a 	mov	r4,fp
 401c8a8:	1cfff216 	blt	r3,r19,401c874 <__alt_data_end+0xfc01c874>
 401c8ac:	1011883a 	mov	r8,r2
 401c8b0:	d8800617 	ldw	r2,24(sp)
 401c8b4:	0082370e 	bge	zero,r2,401d194 <_dtoa_r+0x1478>
 401c8b8:	d9000717 	ldw	r4,28(sp)
 401c8bc:	0025883a 	mov	r18,zero
 401c8c0:	20af883a 	add	r23,r4,r2
 401c8c4:	01800044 	movi	r6,1
 401c8c8:	800b883a 	mov	r5,r16
 401c8cc:	e009883a 	mov	r4,fp
 401c8d0:	da001715 	stw	r8,92(sp)
 401c8d4:	401f9a00 	call	401f9a0 <__lshift>
 401c8d8:	a80b883a 	mov	r5,r21
 401c8dc:	1009883a 	mov	r4,r2
 401c8e0:	d8800915 	stw	r2,36(sp)
 401c8e4:	401fae80 	call	401fae8 <__mcmp>
 401c8e8:	da001717 	ldw	r8,92(sp)
 401c8ec:	0081800e 	bge	zero,r2,401cef0 <_dtoa_r+0x11d4>
 401c8f0:	b93fffc3 	ldbu	r4,-1(r23)
 401c8f4:	b8bfffc4 	addi	r2,r23,-1
 401c8f8:	1007883a 	mov	r3,r2
 401c8fc:	01800e44 	movi	r6,57
 401c900:	d9c00717 	ldw	r7,28(sp)
 401c904:	00000506 	br	401c91c <_dtoa_r+0xc00>
 401c908:	18ffffc4 	addi	r3,r3,-1
 401c90c:	11c12326 	beq	r2,r7,401cd9c <_dtoa_r+0x1080>
 401c910:	19000003 	ldbu	r4,0(r3)
 401c914:	102f883a 	mov	r23,r2
 401c918:	10bfffc4 	addi	r2,r2,-1
 401c91c:	21403fcc 	andi	r5,r4,255
 401c920:	2940201c 	xori	r5,r5,128
 401c924:	297fe004 	addi	r5,r5,-128
 401c928:	29bff726 	beq	r5,r6,401c908 <__alt_data_end+0xfc01c908>
 401c92c:	21000044 	addi	r4,r4,1
 401c930:	11000005 	stb	r4,0(r2)
 401c934:	a80b883a 	mov	r5,r21
 401c938:	e009883a 	mov	r4,fp
 401c93c:	401f20c0 	call	401f20c <_Bfree>
 401c940:	883ea026 	beq	r17,zero,401c3c4 <__alt_data_end+0xfc01c3c4>
 401c944:	90000426 	beq	r18,zero,401c958 <_dtoa_r+0xc3c>
 401c948:	94400326 	beq	r18,r17,401c958 <_dtoa_r+0xc3c>
 401c94c:	900b883a 	mov	r5,r18
 401c950:	e009883a 	mov	r4,fp
 401c954:	401f20c0 	call	401f20c <_Bfree>
 401c958:	880b883a 	mov	r5,r17
 401c95c:	e009883a 	mov	r4,fp
 401c960:	401f20c0 	call	401f20c <_Bfree>
 401c964:	003e9706 	br	401c3c4 <__alt_data_end+0xfc01c3c4>
 401c968:	01800044 	movi	r6,1
 401c96c:	d9800e15 	stw	r6,56(sp)
 401c970:	003d9606 	br	401bfcc <__alt_data_end+0xfc01bfcc>
 401c974:	d8800817 	ldw	r2,32(sp)
 401c978:	d8c00517 	ldw	r3,20(sp)
 401c97c:	d8000d15 	stw	zero,52(sp)
 401c980:	10c5c83a 	sub	r2,r2,r3
 401c984:	00c9c83a 	sub	r4,zero,r3
 401c988:	d8800815 	stw	r2,32(sp)
 401c98c:	d9000a15 	stw	r4,40(sp)
 401c990:	003d9706 	br	401bff0 <__alt_data_end+0xfc01bff0>
 401c994:	05adc83a 	sub	r22,zero,r22
 401c998:	dd800815 	stw	r22,32(sp)
 401c99c:	002d883a 	mov	r22,zero
 401c9a0:	003d8e06 	br	401bfdc <__alt_data_end+0xfc01bfdc>
 401c9a4:	d9000517 	ldw	r4,20(sp)
 401c9a8:	4025e2c0 	call	4025e2c <__floatsidf>
 401c9ac:	100d883a 	mov	r6,r2
 401c9b0:	180f883a 	mov	r7,r3
 401c9b4:	a009883a 	mov	r4,r20
 401c9b8:	880b883a 	mov	r5,r17
 401c9bc:	40249ec0 	call	40249ec <__eqdf2>
 401c9c0:	103d7126 	beq	r2,zero,401bf88 <__alt_data_end+0xfc01bf88>
 401c9c4:	d9c00517 	ldw	r7,20(sp)
 401c9c8:	39ffffc4 	addi	r7,r7,-1
 401c9cc:	d9c00515 	stw	r7,20(sp)
 401c9d0:	003d6d06 	br	401bf88 <__alt_data_end+0xfc01bf88>
 401c9d4:	dd400a17 	ldw	r21,40(sp)
 401c9d8:	dd000817 	ldw	r20,32(sp)
 401c9dc:	0023883a 	mov	r17,zero
 401c9e0:	003f4806 	br	401c704 <__alt_data_end+0xfc01c704>
 401c9e4:	10e3c83a 	sub	r17,r2,r3
 401c9e8:	9448983a 	sll	r4,r18,r17
 401c9ec:	003d3206 	br	401beb8 <__alt_data_end+0xfc01beb8>
 401c9f0:	d8000e15 	stw	zero,56(sp)
 401c9f4:	003d7506 	br	401bfcc <__alt_data_end+0xfc01bfcc>
 401c9f8:	b005883a 	mov	r2,r22
 401c9fc:	003f4506 	br	401c714 <__alt_data_end+0xfc01c714>
 401ca00:	dc000915 	stw	r16,36(sp)
 401ca04:	d9800a17 	ldw	r6,40(sp)
 401ca08:	d9400917 	ldw	r5,36(sp)
 401ca0c:	e009883a 	mov	r4,fp
 401ca10:	401f8600 	call	401f860 <__pow5mult>
 401ca14:	1021883a 	mov	r16,r2
 401ca18:	003f5a06 	br	401c784 <__alt_data_end+0xfc01c784>
 401ca1c:	01c00044 	movi	r7,1
 401ca20:	d9c00b15 	stw	r7,44(sp)
 401ca24:	d8802217 	ldw	r2,136(sp)
 401ca28:	0081280e 	bge	zero,r2,401cecc <_dtoa_r+0x11b0>
 401ca2c:	100d883a 	mov	r6,r2
 401ca30:	1021883a 	mov	r16,r2
 401ca34:	d8800c15 	stw	r2,48(sp)
 401ca38:	d8800615 	stw	r2,24(sp)
 401ca3c:	003d8806 	br	401c060 <__alt_data_end+0xfc01c060>
 401ca40:	d8800617 	ldw	r2,24(sp)
 401ca44:	00be9b16 	blt	zero,r2,401c4b4 <__alt_data_end+0xfc01c4b4>
 401ca48:	10010f1e 	bne	r2,zero,401ce88 <_dtoa_r+0x116c>
 401ca4c:	880b883a 	mov	r5,r17
 401ca50:	000d883a 	mov	r6,zero
 401ca54:	01d00534 	movhi	r7,16404
 401ca58:	8009883a 	mov	r4,r16
 401ca5c:	4024c440 	call	4024c44 <__muldf3>
 401ca60:	900d883a 	mov	r6,r18
 401ca64:	980f883a 	mov	r7,r19
 401ca68:	1009883a 	mov	r4,r2
 401ca6c:	180b883a 	mov	r5,r3
 401ca70:	4024a740 	call	4024a74 <__gedf2>
 401ca74:	002b883a 	mov	r21,zero
 401ca78:	0023883a 	mov	r17,zero
 401ca7c:	1000bf16 	blt	r2,zero,401cd7c <_dtoa_r+0x1060>
 401ca80:	d9802217 	ldw	r6,136(sp)
 401ca84:	ddc00717 	ldw	r23,28(sp)
 401ca88:	018c303a 	nor	r6,zero,r6
 401ca8c:	d9800515 	stw	r6,20(sp)
 401ca90:	a80b883a 	mov	r5,r21
 401ca94:	e009883a 	mov	r4,fp
 401ca98:	401f20c0 	call	401f20c <_Bfree>
 401ca9c:	883e4926 	beq	r17,zero,401c3c4 <__alt_data_end+0xfc01c3c4>
 401caa0:	003fad06 	br	401c958 <__alt_data_end+0xfc01c958>
 401caa4:	d9c01117 	ldw	r7,68(sp)
 401caa8:	3801bc26 	beq	r7,zero,401d19c <_dtoa_r+0x1480>
 401caac:	10810cc4 	addi	r2,r2,1075
 401cab0:	dd400a17 	ldw	r21,40(sp)
 401cab4:	dd000817 	ldw	r20,32(sp)
 401cab8:	003f0a06 	br	401c6e4 <__alt_data_end+0xfc01c6e4>
 401cabc:	00800704 	movi	r2,28
 401cac0:	d9000817 	ldw	r4,32(sp)
 401cac4:	a0a9883a 	add	r20,r20,r2
 401cac8:	b0ad883a 	add	r22,r22,r2
 401cacc:	2089883a 	add	r4,r4,r2
 401cad0:	d9000815 	stw	r4,32(sp)
 401cad4:	003f5106 	br	401c81c <__alt_data_end+0xfc01c81c>
 401cad8:	d8c00317 	ldw	r3,12(sp)
 401cadc:	b8c1fc0e 	bge	r23,r3,401d2d0 <_dtoa_r+0x15b4>
 401cae0:	0027883a 	mov	r19,zero
 401cae4:	b805883a 	mov	r2,r23
 401cae8:	003f3e06 	br	401c7e4 <__alt_data_end+0xfc01c7e4>
 401caec:	880b883a 	mov	r5,r17
 401caf0:	e009883a 	mov	r4,fp
 401caf4:	000f883a 	mov	r7,zero
 401caf8:	01800284 	movi	r6,10
 401cafc:	401f2340 	call	401f234 <__multadd>
 401cb00:	d9000c17 	ldw	r4,48(sp)
 401cb04:	1023883a 	mov	r17,r2
 401cb08:	0102040e 	bge	zero,r4,401d31c <_dtoa_r+0x1600>
 401cb0c:	d9000615 	stw	r4,24(sp)
 401cb10:	0500050e 	bge	zero,r20,401cb28 <_dtoa_r+0xe0c>
 401cb14:	880b883a 	mov	r5,r17
 401cb18:	a00d883a 	mov	r6,r20
 401cb1c:	e009883a 	mov	r4,fp
 401cb20:	401f9a00 	call	401f9a0 <__lshift>
 401cb24:	1023883a 	mov	r17,r2
 401cb28:	9801241e 	bne	r19,zero,401cfbc <_dtoa_r+0x12a0>
 401cb2c:	8829883a 	mov	r20,r17
 401cb30:	d9000617 	ldw	r4,24(sp)
 401cb34:	dcc00717 	ldw	r19,28(sp)
 401cb38:	9480004c 	andi	r18,r18,1
 401cb3c:	20bfffc4 	addi	r2,r4,-1
 401cb40:	9885883a 	add	r2,r19,r2
 401cb44:	d8800415 	stw	r2,16(sp)
 401cb48:	dc800615 	stw	r18,24(sp)
 401cb4c:	a80b883a 	mov	r5,r21
 401cb50:	8009883a 	mov	r4,r16
 401cb54:	401baf40 	call	401baf4 <quorem>
 401cb58:	880b883a 	mov	r5,r17
 401cb5c:	8009883a 	mov	r4,r16
 401cb60:	102f883a 	mov	r23,r2
 401cb64:	401fae80 	call	401fae8 <__mcmp>
 401cb68:	a80b883a 	mov	r5,r21
 401cb6c:	a00d883a 	mov	r6,r20
 401cb70:	e009883a 	mov	r4,fp
 401cb74:	102d883a 	mov	r22,r2
 401cb78:	401fb480 	call	401fb48 <__mdiff>
 401cb7c:	1007883a 	mov	r3,r2
 401cb80:	10800317 	ldw	r2,12(r2)
 401cb84:	bc800c04 	addi	r18,r23,48
 401cb88:	180b883a 	mov	r5,r3
 401cb8c:	10004e1e 	bne	r2,zero,401ccc8 <_dtoa_r+0xfac>
 401cb90:	8009883a 	mov	r4,r16
 401cb94:	d8c01615 	stw	r3,88(sp)
 401cb98:	401fae80 	call	401fae8 <__mcmp>
 401cb9c:	d8c01617 	ldw	r3,88(sp)
 401cba0:	e009883a 	mov	r4,fp
 401cba4:	d8801615 	stw	r2,88(sp)
 401cba8:	180b883a 	mov	r5,r3
 401cbac:	401f20c0 	call	401f20c <_Bfree>
 401cbb0:	d8801617 	ldw	r2,88(sp)
 401cbb4:	1000041e 	bne	r2,zero,401cbc8 <_dtoa_r+0xeac>
 401cbb8:	d9800317 	ldw	r6,12(sp)
 401cbbc:	3000021e 	bne	r6,zero,401cbc8 <_dtoa_r+0xeac>
 401cbc0:	d8c00617 	ldw	r3,24(sp)
 401cbc4:	18003726 	beq	r3,zero,401cca4 <_dtoa_r+0xf88>
 401cbc8:	b0002016 	blt	r22,zero,401cc4c <_dtoa_r+0xf30>
 401cbcc:	b000041e 	bne	r22,zero,401cbe0 <_dtoa_r+0xec4>
 401cbd0:	d9000317 	ldw	r4,12(sp)
 401cbd4:	2000021e 	bne	r4,zero,401cbe0 <_dtoa_r+0xec4>
 401cbd8:	d8c00617 	ldw	r3,24(sp)
 401cbdc:	18001b26 	beq	r3,zero,401cc4c <_dtoa_r+0xf30>
 401cbe0:	00810716 	blt	zero,r2,401d000 <_dtoa_r+0x12e4>
 401cbe4:	d8c00417 	ldw	r3,16(sp)
 401cbe8:	9d800044 	addi	r22,r19,1
 401cbec:	9c800005 	stb	r18,0(r19)
 401cbf0:	b02f883a 	mov	r23,r22
 401cbf4:	98c10626 	beq	r19,r3,401d010 <_dtoa_r+0x12f4>
 401cbf8:	800b883a 	mov	r5,r16
 401cbfc:	000f883a 	mov	r7,zero
 401cc00:	01800284 	movi	r6,10
 401cc04:	e009883a 	mov	r4,fp
 401cc08:	401f2340 	call	401f234 <__multadd>
 401cc0c:	1021883a 	mov	r16,r2
 401cc10:	000f883a 	mov	r7,zero
 401cc14:	01800284 	movi	r6,10
 401cc18:	880b883a 	mov	r5,r17
 401cc1c:	e009883a 	mov	r4,fp
 401cc20:	8d002526 	beq	r17,r20,401ccb8 <_dtoa_r+0xf9c>
 401cc24:	401f2340 	call	401f234 <__multadd>
 401cc28:	a00b883a 	mov	r5,r20
 401cc2c:	000f883a 	mov	r7,zero
 401cc30:	01800284 	movi	r6,10
 401cc34:	e009883a 	mov	r4,fp
 401cc38:	1023883a 	mov	r17,r2
 401cc3c:	401f2340 	call	401f234 <__multadd>
 401cc40:	1029883a 	mov	r20,r2
 401cc44:	b027883a 	mov	r19,r22
 401cc48:	003fc006 	br	401cb4c <__alt_data_end+0xfc01cb4c>
 401cc4c:	9011883a 	mov	r8,r18
 401cc50:	00800e0e 	bge	zero,r2,401cc8c <_dtoa_r+0xf70>
 401cc54:	800b883a 	mov	r5,r16
 401cc58:	01800044 	movi	r6,1
 401cc5c:	e009883a 	mov	r4,fp
 401cc60:	da001715 	stw	r8,92(sp)
 401cc64:	401f9a00 	call	401f9a0 <__lshift>
 401cc68:	a80b883a 	mov	r5,r21
 401cc6c:	1009883a 	mov	r4,r2
 401cc70:	1021883a 	mov	r16,r2
 401cc74:	401fae80 	call	401fae8 <__mcmp>
 401cc78:	da001717 	ldw	r8,92(sp)
 401cc7c:	0081960e 	bge	zero,r2,401d2d8 <_dtoa_r+0x15bc>
 401cc80:	00800e44 	movi	r2,57
 401cc84:	40817026 	beq	r8,r2,401d248 <_dtoa_r+0x152c>
 401cc88:	ba000c44 	addi	r8,r23,49
 401cc8c:	8825883a 	mov	r18,r17
 401cc90:	9dc00044 	addi	r23,r19,1
 401cc94:	9a000005 	stb	r8,0(r19)
 401cc98:	a023883a 	mov	r17,r20
 401cc9c:	dc000915 	stw	r16,36(sp)
 401cca0:	003f2406 	br	401c934 <__alt_data_end+0xfc01c934>
 401cca4:	00800e44 	movi	r2,57
 401cca8:	9011883a 	mov	r8,r18
 401ccac:	90816626 	beq	r18,r2,401d248 <_dtoa_r+0x152c>
 401ccb0:	05bff516 	blt	zero,r22,401cc88 <__alt_data_end+0xfc01cc88>
 401ccb4:	003ff506 	br	401cc8c <__alt_data_end+0xfc01cc8c>
 401ccb8:	401f2340 	call	401f234 <__multadd>
 401ccbc:	1023883a 	mov	r17,r2
 401ccc0:	1029883a 	mov	r20,r2
 401ccc4:	003fdf06 	br	401cc44 <__alt_data_end+0xfc01cc44>
 401ccc8:	e009883a 	mov	r4,fp
 401cccc:	401f20c0 	call	401f20c <_Bfree>
 401ccd0:	00800044 	movi	r2,1
 401ccd4:	003fbc06 	br	401cbc8 <__alt_data_end+0xfc01cbc8>
 401ccd8:	a80b883a 	mov	r5,r21
 401ccdc:	8009883a 	mov	r4,r16
 401cce0:	401fae80 	call	401fae8 <__mcmp>
 401cce4:	103edb0e 	bge	r2,zero,401c854 <__alt_data_end+0xfc01c854>
 401cce8:	800b883a 	mov	r5,r16
 401ccec:	000f883a 	mov	r7,zero
 401ccf0:	01800284 	movi	r6,10
 401ccf4:	e009883a 	mov	r4,fp
 401ccf8:	401f2340 	call	401f234 <__multadd>
 401ccfc:	1021883a 	mov	r16,r2
 401cd00:	d8800517 	ldw	r2,20(sp)
 401cd04:	d8c00b17 	ldw	r3,44(sp)
 401cd08:	10bfffc4 	addi	r2,r2,-1
 401cd0c:	d8800515 	stw	r2,20(sp)
 401cd10:	183f761e 	bne	r3,zero,401caec <__alt_data_end+0xfc01caec>
 401cd14:	d9000c17 	ldw	r4,48(sp)
 401cd18:	0101730e 	bge	zero,r4,401d2e8 <_dtoa_r+0x15cc>
 401cd1c:	d9000615 	stw	r4,24(sp)
 401cd20:	003ed006 	br	401c864 <__alt_data_end+0xfc01c864>
 401cd24:	00800084 	movi	r2,2
 401cd28:	3081861e 	bne	r6,r2,401d344 <_dtoa_r+0x1628>
 401cd2c:	d8000b15 	stw	zero,44(sp)
 401cd30:	003f3c06 	br	401ca24 <__alt_data_end+0xfc01ca24>
 401cd34:	dc000917 	ldw	r16,36(sp)
 401cd38:	003e9206 	br	401c784 <__alt_data_end+0xfc01c784>
 401cd3c:	d9c00317 	ldw	r7,12(sp)
 401cd40:	00800084 	movi	r2,2
 401cd44:	11fec50e 	bge	r2,r7,401c85c <__alt_data_end+0xfc01c85c>
 401cd48:	d9000617 	ldw	r4,24(sp)
 401cd4c:	20013c1e 	bne	r4,zero,401d240 <_dtoa_r+0x1524>
 401cd50:	a80b883a 	mov	r5,r21
 401cd54:	000f883a 	mov	r7,zero
 401cd58:	01800144 	movi	r6,5
 401cd5c:	e009883a 	mov	r4,fp
 401cd60:	401f2340 	call	401f234 <__multadd>
 401cd64:	100b883a 	mov	r5,r2
 401cd68:	8009883a 	mov	r4,r16
 401cd6c:	102b883a 	mov	r21,r2
 401cd70:	401fae80 	call	401fae8 <__mcmp>
 401cd74:	dc000915 	stw	r16,36(sp)
 401cd78:	00bf410e 	bge	zero,r2,401ca80 <__alt_data_end+0xfc01ca80>
 401cd7c:	d9c00717 	ldw	r7,28(sp)
 401cd80:	00800c44 	movi	r2,49
 401cd84:	38800005 	stb	r2,0(r7)
 401cd88:	d8800517 	ldw	r2,20(sp)
 401cd8c:	3dc00044 	addi	r23,r7,1
 401cd90:	10800044 	addi	r2,r2,1
 401cd94:	d8800515 	stw	r2,20(sp)
 401cd98:	003f3d06 	br	401ca90 <__alt_data_end+0xfc01ca90>
 401cd9c:	d9800517 	ldw	r6,20(sp)
 401cda0:	d9c00717 	ldw	r7,28(sp)
 401cda4:	00800c44 	movi	r2,49
 401cda8:	31800044 	addi	r6,r6,1
 401cdac:	d9800515 	stw	r6,20(sp)
 401cdb0:	38800005 	stb	r2,0(r7)
 401cdb4:	003edf06 	br	401c934 <__alt_data_end+0xfc01c934>
 401cdb8:	d8000b15 	stw	zero,44(sp)
 401cdbc:	003c9f06 	br	401c03c <__alt_data_end+0xfc01c03c>
 401cdc0:	903e7e1e 	bne	r18,zero,401c7bc <__alt_data_end+0xfc01c7bc>
 401cdc4:	00800434 	movhi	r2,16
 401cdc8:	10bfffc4 	addi	r2,r2,-1
 401cdcc:	9884703a 	and	r2,r19,r2
 401cdd0:	1000ea1e 	bne	r2,zero,401d17c <_dtoa_r+0x1460>
 401cdd4:	9cdffc2c 	andhi	r19,r19,32752
 401cdd8:	9800e826 	beq	r19,zero,401d17c <_dtoa_r+0x1460>
 401cddc:	d9c00817 	ldw	r7,32(sp)
 401cde0:	b5800044 	addi	r22,r22,1
 401cde4:	04c00044 	movi	r19,1
 401cde8:	39c00044 	addi	r7,r7,1
 401cdec:	d9c00815 	stw	r7,32(sp)
 401cdf0:	d8800d17 	ldw	r2,52(sp)
 401cdf4:	103e721e 	bne	r2,zero,401c7c0 <__alt_data_end+0xfc01c7c0>
 401cdf8:	00800044 	movi	r2,1
 401cdfc:	003e7906 	br	401c7e4 <__alt_data_end+0xfc01c7e4>
 401ce00:	8009883a 	mov	r4,r16
 401ce04:	4025e2c0 	call	4025e2c <__floatsidf>
 401ce08:	d9800f17 	ldw	r6,60(sp)
 401ce0c:	d9c01017 	ldw	r7,64(sp)
 401ce10:	1009883a 	mov	r4,r2
 401ce14:	180b883a 	mov	r5,r3
 401ce18:	4024c440 	call	4024c44 <__muldf3>
 401ce1c:	000d883a 	mov	r6,zero
 401ce20:	01d00734 	movhi	r7,16412
 401ce24:	1009883a 	mov	r4,r2
 401ce28:	180b883a 	mov	r5,r3
 401ce2c:	40237700 	call	4023770 <__adddf3>
 401ce30:	047f3034 	movhi	r17,64704
 401ce34:	1021883a 	mov	r16,r2
 401ce38:	1c63883a 	add	r17,r3,r17
 401ce3c:	d9000f17 	ldw	r4,60(sp)
 401ce40:	d9401017 	ldw	r5,64(sp)
 401ce44:	000d883a 	mov	r6,zero
 401ce48:	01d00534 	movhi	r7,16404
 401ce4c:	40254b00 	call	40254b0 <__subdf3>
 401ce50:	800d883a 	mov	r6,r16
 401ce54:	880f883a 	mov	r7,r17
 401ce58:	1009883a 	mov	r4,r2
 401ce5c:	180b883a 	mov	r5,r3
 401ce60:	102b883a 	mov	r21,r2
 401ce64:	1829883a 	mov	r20,r3
 401ce68:	4024a740 	call	4024a74 <__gedf2>
 401ce6c:	00806c16 	blt	zero,r2,401d020 <_dtoa_r+0x1304>
 401ce70:	89e0003c 	xorhi	r7,r17,32768
 401ce74:	800d883a 	mov	r6,r16
 401ce78:	a809883a 	mov	r4,r21
 401ce7c:	a00b883a 	mov	r5,r20
 401ce80:	4024b500 	call	4024b50 <__ledf2>
 401ce84:	103d7e0e 	bge	r2,zero,401c480 <__alt_data_end+0xfc01c480>
 401ce88:	002b883a 	mov	r21,zero
 401ce8c:	0023883a 	mov	r17,zero
 401ce90:	003efb06 	br	401ca80 <__alt_data_end+0xfc01ca80>
 401ce94:	d8800717 	ldw	r2,28(sp)
 401ce98:	003bd006 	br	401bddc <__alt_data_end+0xfc01bddc>
 401ce9c:	d9000a17 	ldw	r4,40(sp)
 401cea0:	d9800d17 	ldw	r6,52(sp)
 401cea4:	dd400a15 	stw	r21,40(sp)
 401cea8:	a905c83a 	sub	r2,r21,r4
 401ceac:	308d883a 	add	r6,r6,r2
 401ceb0:	d9800d15 	stw	r6,52(sp)
 401ceb4:	002b883a 	mov	r21,zero
 401ceb8:	003e0606 	br	401c6d4 <__alt_data_end+0xfc01c6d4>
 401cebc:	9023883a 	mov	r17,r18
 401cec0:	9829883a 	mov	r20,r19
 401cec4:	04000084 	movi	r16,2
 401cec8:	003c9206 	br	401c114 <__alt_data_end+0xfc01c114>
 401cecc:	04000044 	movi	r16,1
 401ced0:	dc000c15 	stw	r16,48(sp)
 401ced4:	dc000615 	stw	r16,24(sp)
 401ced8:	dc002215 	stw	r16,136(sp)
 401cedc:	e0001115 	stw	zero,68(fp)
 401cee0:	000b883a 	mov	r5,zero
 401cee4:	003c6906 	br	401c08c <__alt_data_end+0xfc01c08c>
 401cee8:	3021883a 	mov	r16,r6
 401ceec:	003ffb06 	br	401cedc <__alt_data_end+0xfc01cedc>
 401cef0:	1000021e 	bne	r2,zero,401cefc <_dtoa_r+0x11e0>
 401cef4:	4200004c 	andi	r8,r8,1
 401cef8:	403e7d1e 	bne	r8,zero,401c8f0 <__alt_data_end+0xfc01c8f0>
 401cefc:	01000c04 	movi	r4,48
 401cf00:	00000106 	br	401cf08 <_dtoa_r+0x11ec>
 401cf04:	102f883a 	mov	r23,r2
 401cf08:	b8bfffc4 	addi	r2,r23,-1
 401cf0c:	10c00007 	ldb	r3,0(r2)
 401cf10:	193ffc26 	beq	r3,r4,401cf04 <__alt_data_end+0xfc01cf04>
 401cf14:	003e8706 	br	401c934 <__alt_data_end+0xfc01c934>
 401cf18:	d8800517 	ldw	r2,20(sp)
 401cf1c:	00a3c83a 	sub	r17,zero,r2
 401cf20:	8800a426 	beq	r17,zero,401d1b4 <_dtoa_r+0x1498>
 401cf24:	888003cc 	andi	r2,r17,15
 401cf28:	100490fa 	slli	r2,r2,3
 401cf2c:	00c100f4 	movhi	r3,1027
 401cf30:	18f09704 	addi	r3,r3,-15780
 401cf34:	1885883a 	add	r2,r3,r2
 401cf38:	11800017 	ldw	r6,0(r2)
 401cf3c:	11c00117 	ldw	r7,4(r2)
 401cf40:	9009883a 	mov	r4,r18
 401cf44:	980b883a 	mov	r5,r19
 401cf48:	8823d13a 	srai	r17,r17,4
 401cf4c:	4024c440 	call	4024c44 <__muldf3>
 401cf50:	d8800f15 	stw	r2,60(sp)
 401cf54:	d8c01015 	stw	r3,64(sp)
 401cf58:	8800e826 	beq	r17,zero,401d2fc <_dtoa_r+0x15e0>
 401cf5c:	050100f4 	movhi	r20,1027
 401cf60:	a5308d04 	addi	r20,r20,-15820
 401cf64:	04000084 	movi	r16,2
 401cf68:	8980004c 	andi	r6,r17,1
 401cf6c:	1009883a 	mov	r4,r2
 401cf70:	8823d07a 	srai	r17,r17,1
 401cf74:	180b883a 	mov	r5,r3
 401cf78:	30000426 	beq	r6,zero,401cf8c <_dtoa_r+0x1270>
 401cf7c:	a1800017 	ldw	r6,0(r20)
 401cf80:	a1c00117 	ldw	r7,4(r20)
 401cf84:	84000044 	addi	r16,r16,1
 401cf88:	4024c440 	call	4024c44 <__muldf3>
 401cf8c:	a5000204 	addi	r20,r20,8
 401cf90:	883ff51e 	bne	r17,zero,401cf68 <__alt_data_end+0xfc01cf68>
 401cf94:	d8800f15 	stw	r2,60(sp)
 401cf98:	d8c01015 	stw	r3,64(sp)
 401cf9c:	003c7606 	br	401c178 <__alt_data_end+0xfc01c178>
 401cfa0:	00c00c04 	movi	r3,48
 401cfa4:	10c00005 	stb	r3,0(r2)
 401cfa8:	d8c00517 	ldw	r3,20(sp)
 401cfac:	bd3fffc3 	ldbu	r20,-1(r23)
 401cfb0:	18c00044 	addi	r3,r3,1
 401cfb4:	d8c00515 	stw	r3,20(sp)
 401cfb8:	003db906 	br	401c6a0 <__alt_data_end+0xfc01c6a0>
 401cfbc:	89400117 	ldw	r5,4(r17)
 401cfc0:	e009883a 	mov	r4,fp
 401cfc4:	401f1640 	call	401f164 <_Balloc>
 401cfc8:	89800417 	ldw	r6,16(r17)
 401cfcc:	89400304 	addi	r5,r17,12
 401cfd0:	11000304 	addi	r4,r2,12
 401cfd4:	31800084 	addi	r6,r6,2
 401cfd8:	318d883a 	add	r6,r6,r6
 401cfdc:	318d883a 	add	r6,r6,r6
 401cfe0:	1027883a 	mov	r19,r2
 401cfe4:	40191280 	call	4019128 <memcpy>
 401cfe8:	01800044 	movi	r6,1
 401cfec:	980b883a 	mov	r5,r19
 401cff0:	e009883a 	mov	r4,fp
 401cff4:	401f9a00 	call	401f9a0 <__lshift>
 401cff8:	1029883a 	mov	r20,r2
 401cffc:	003ecc06 	br	401cb30 <__alt_data_end+0xfc01cb30>
 401d000:	00800e44 	movi	r2,57
 401d004:	90809026 	beq	r18,r2,401d248 <_dtoa_r+0x152c>
 401d008:	92000044 	addi	r8,r18,1
 401d00c:	003f1f06 	br	401cc8c <__alt_data_end+0xfc01cc8c>
 401d010:	9011883a 	mov	r8,r18
 401d014:	8825883a 	mov	r18,r17
 401d018:	a023883a 	mov	r17,r20
 401d01c:	003e2906 	br	401c8c4 <__alt_data_end+0xfc01c8c4>
 401d020:	002b883a 	mov	r21,zero
 401d024:	0023883a 	mov	r17,zero
 401d028:	003f5406 	br	401cd7c <__alt_data_end+0xfc01cd7c>
 401d02c:	61bfffc4 	addi	r6,r12,-1
 401d030:	300490fa 	slli	r2,r6,3
 401d034:	00c100f4 	movhi	r3,1027
 401d038:	18f09704 	addi	r3,r3,-15780
 401d03c:	1885883a 	add	r2,r3,r2
 401d040:	11000017 	ldw	r4,0(r2)
 401d044:	11400117 	ldw	r5,4(r2)
 401d048:	d8800717 	ldw	r2,28(sp)
 401d04c:	880f883a 	mov	r7,r17
 401d050:	d9801215 	stw	r6,72(sp)
 401d054:	800d883a 	mov	r6,r16
 401d058:	db001615 	stw	r12,88(sp)
 401d05c:	15c00044 	addi	r23,r2,1
 401d060:	4024c440 	call	4024c44 <__muldf3>
 401d064:	d9401017 	ldw	r5,64(sp)
 401d068:	d9000f17 	ldw	r4,60(sp)
 401d06c:	d8c01515 	stw	r3,84(sp)
 401d070:	d8801415 	stw	r2,80(sp)
 401d074:	4025dac0 	call	4025dac <__fixdfsi>
 401d078:	1009883a 	mov	r4,r2
 401d07c:	1021883a 	mov	r16,r2
 401d080:	4025e2c0 	call	4025e2c <__floatsidf>
 401d084:	d9000f17 	ldw	r4,60(sp)
 401d088:	d9401017 	ldw	r5,64(sp)
 401d08c:	100d883a 	mov	r6,r2
 401d090:	180f883a 	mov	r7,r3
 401d094:	40254b00 	call	40254b0 <__subdf3>
 401d098:	1829883a 	mov	r20,r3
 401d09c:	d8c00717 	ldw	r3,28(sp)
 401d0a0:	84000c04 	addi	r16,r16,48
 401d0a4:	1023883a 	mov	r17,r2
 401d0a8:	1c000005 	stb	r16,0(r3)
 401d0ac:	db001617 	ldw	r12,88(sp)
 401d0b0:	00800044 	movi	r2,1
 401d0b4:	60802226 	beq	r12,r2,401d140 <_dtoa_r+0x1424>
 401d0b8:	d9c00717 	ldw	r7,28(sp)
 401d0bc:	8805883a 	mov	r2,r17
 401d0c0:	b82b883a 	mov	r21,r23
 401d0c4:	3b19883a 	add	r12,r7,r12
 401d0c8:	6023883a 	mov	r17,r12
 401d0cc:	a007883a 	mov	r3,r20
 401d0d0:	dc800f15 	stw	r18,60(sp)
 401d0d4:	000d883a 	mov	r6,zero
 401d0d8:	01d00934 	movhi	r7,16420
 401d0dc:	1009883a 	mov	r4,r2
 401d0e0:	180b883a 	mov	r5,r3
 401d0e4:	4024c440 	call	4024c44 <__muldf3>
 401d0e8:	180b883a 	mov	r5,r3
 401d0ec:	1009883a 	mov	r4,r2
 401d0f0:	1829883a 	mov	r20,r3
 401d0f4:	1025883a 	mov	r18,r2
 401d0f8:	4025dac0 	call	4025dac <__fixdfsi>
 401d0fc:	1009883a 	mov	r4,r2
 401d100:	1021883a 	mov	r16,r2
 401d104:	4025e2c0 	call	4025e2c <__floatsidf>
 401d108:	100d883a 	mov	r6,r2
 401d10c:	180f883a 	mov	r7,r3
 401d110:	9009883a 	mov	r4,r18
 401d114:	a00b883a 	mov	r5,r20
 401d118:	84000c04 	addi	r16,r16,48
 401d11c:	40254b00 	call	40254b0 <__subdf3>
 401d120:	ad400044 	addi	r21,r21,1
 401d124:	ac3fffc5 	stb	r16,-1(r21)
 401d128:	ac7fea1e 	bne	r21,r17,401d0d4 <__alt_data_end+0xfc01d0d4>
 401d12c:	1023883a 	mov	r17,r2
 401d130:	d8801217 	ldw	r2,72(sp)
 401d134:	dc800f17 	ldw	r18,60(sp)
 401d138:	1829883a 	mov	r20,r3
 401d13c:	b8af883a 	add	r23,r23,r2
 401d140:	d9001417 	ldw	r4,80(sp)
 401d144:	d9401517 	ldw	r5,84(sp)
 401d148:	000d883a 	mov	r6,zero
 401d14c:	01cff834 	movhi	r7,16352
 401d150:	40237700 	call	4023770 <__adddf3>
 401d154:	880d883a 	mov	r6,r17
 401d158:	a00f883a 	mov	r7,r20
 401d15c:	1009883a 	mov	r4,r2
 401d160:	180b883a 	mov	r5,r3
 401d164:	4024b500 	call	4024b50 <__ledf2>
 401d168:	10003e0e 	bge	r2,zero,401d264 <_dtoa_r+0x1548>
 401d16c:	d9001317 	ldw	r4,76(sp)
 401d170:	bd3fffc3 	ldbu	r20,-1(r23)
 401d174:	d9000515 	stw	r4,20(sp)
 401d178:	003d3b06 	br	401c668 <__alt_data_end+0xfc01c668>
 401d17c:	0027883a 	mov	r19,zero
 401d180:	003f1b06 	br	401cdf0 <__alt_data_end+0xfc01cdf0>
 401d184:	d8800817 	ldw	r2,32(sp)
 401d188:	11e9c83a 	sub	r20,r2,r7
 401d18c:	0005883a 	mov	r2,zero
 401d190:	003d5406 	br	401c6e4 <__alt_data_end+0xfc01c6e4>
 401d194:	00800044 	movi	r2,1
 401d198:	003dc706 	br	401c8b8 <__alt_data_end+0xfc01c8b8>
 401d19c:	d8c00217 	ldw	r3,8(sp)
 401d1a0:	00800d84 	movi	r2,54
 401d1a4:	dd400a17 	ldw	r21,40(sp)
 401d1a8:	10c5c83a 	sub	r2,r2,r3
 401d1ac:	dd000817 	ldw	r20,32(sp)
 401d1b0:	003d4c06 	br	401c6e4 <__alt_data_end+0xfc01c6e4>
 401d1b4:	dc800f15 	stw	r18,60(sp)
 401d1b8:	dcc01015 	stw	r19,64(sp)
 401d1bc:	04000084 	movi	r16,2
 401d1c0:	003bed06 	br	401c178 <__alt_data_end+0xfc01c178>
 401d1c4:	d9000617 	ldw	r4,24(sp)
 401d1c8:	203f0d26 	beq	r4,zero,401ce00 <__alt_data_end+0xfc01ce00>
 401d1cc:	d9800c17 	ldw	r6,48(sp)
 401d1d0:	01bcab0e 	bge	zero,r6,401c480 <__alt_data_end+0xfc01c480>
 401d1d4:	d9401017 	ldw	r5,64(sp)
 401d1d8:	d9000f17 	ldw	r4,60(sp)
 401d1dc:	000d883a 	mov	r6,zero
 401d1e0:	01d00934 	movhi	r7,16420
 401d1e4:	4024c440 	call	4024c44 <__muldf3>
 401d1e8:	81000044 	addi	r4,r16,1
 401d1ec:	d8800f15 	stw	r2,60(sp)
 401d1f0:	d8c01015 	stw	r3,64(sp)
 401d1f4:	4025e2c0 	call	4025e2c <__floatsidf>
 401d1f8:	d9800f17 	ldw	r6,60(sp)
 401d1fc:	d9c01017 	ldw	r7,64(sp)
 401d200:	1009883a 	mov	r4,r2
 401d204:	180b883a 	mov	r5,r3
 401d208:	4024c440 	call	4024c44 <__muldf3>
 401d20c:	01d00734 	movhi	r7,16412
 401d210:	000d883a 	mov	r6,zero
 401d214:	1009883a 	mov	r4,r2
 401d218:	180b883a 	mov	r5,r3
 401d21c:	40237700 	call	4023770 <__adddf3>
 401d220:	d9c00517 	ldw	r7,20(sp)
 401d224:	047f3034 	movhi	r17,64704
 401d228:	1021883a 	mov	r16,r2
 401d22c:	39ffffc4 	addi	r7,r7,-1
 401d230:	d9c01315 	stw	r7,76(sp)
 401d234:	1c63883a 	add	r17,r3,r17
 401d238:	db000c17 	ldw	r12,48(sp)
 401d23c:	003bea06 	br	401c1e8 <__alt_data_end+0xfc01c1e8>
 401d240:	dc000915 	stw	r16,36(sp)
 401d244:	003e0e06 	br	401ca80 <__alt_data_end+0xfc01ca80>
 401d248:	01000e44 	movi	r4,57
 401d24c:	8825883a 	mov	r18,r17
 401d250:	9dc00044 	addi	r23,r19,1
 401d254:	99000005 	stb	r4,0(r19)
 401d258:	a023883a 	mov	r17,r20
 401d25c:	dc000915 	stw	r16,36(sp)
 401d260:	003da406 	br	401c8f4 <__alt_data_end+0xfc01c8f4>
 401d264:	d9801417 	ldw	r6,80(sp)
 401d268:	d9c01517 	ldw	r7,84(sp)
 401d26c:	0009883a 	mov	r4,zero
 401d270:	014ff834 	movhi	r5,16352
 401d274:	40254b00 	call	40254b0 <__subdf3>
 401d278:	880d883a 	mov	r6,r17
 401d27c:	a00f883a 	mov	r7,r20
 401d280:	1009883a 	mov	r4,r2
 401d284:	180b883a 	mov	r5,r3
 401d288:	4024a740 	call	4024a74 <__gedf2>
 401d28c:	00bc7c0e 	bge	zero,r2,401c480 <__alt_data_end+0xfc01c480>
 401d290:	01000c04 	movi	r4,48
 401d294:	00000106 	br	401d29c <_dtoa_r+0x1580>
 401d298:	102f883a 	mov	r23,r2
 401d29c:	b8bfffc4 	addi	r2,r23,-1
 401d2a0:	10c00007 	ldb	r3,0(r2)
 401d2a4:	193ffc26 	beq	r3,r4,401d298 <__alt_data_end+0xfc01d298>
 401d2a8:	d9801317 	ldw	r6,76(sp)
 401d2ac:	d9800515 	stw	r6,20(sp)
 401d2b0:	003c4406 	br	401c3c4 <__alt_data_end+0xfc01c3c4>
 401d2b4:	d9801317 	ldw	r6,76(sp)
 401d2b8:	d9800515 	stw	r6,20(sp)
 401d2bc:	003cea06 	br	401c668 <__alt_data_end+0xfc01c668>
 401d2c0:	dd800f17 	ldw	r22,60(sp)
 401d2c4:	dcc01017 	ldw	r19,64(sp)
 401d2c8:	dc801217 	ldw	r18,72(sp)
 401d2cc:	003c6c06 	br	401c480 <__alt_data_end+0xfc01c480>
 401d2d0:	903e031e 	bne	r18,zero,401cae0 <__alt_data_end+0xfc01cae0>
 401d2d4:	003ebb06 	br	401cdc4 <__alt_data_end+0xfc01cdc4>
 401d2d8:	103e6c1e 	bne	r2,zero,401cc8c <__alt_data_end+0xfc01cc8c>
 401d2dc:	4080004c 	andi	r2,r8,1
 401d2e0:	103e6a26 	beq	r2,zero,401cc8c <__alt_data_end+0xfc01cc8c>
 401d2e4:	003e6606 	br	401cc80 <__alt_data_end+0xfc01cc80>
 401d2e8:	d8c00317 	ldw	r3,12(sp)
 401d2ec:	00800084 	movi	r2,2
 401d2f0:	10c02916 	blt	r2,r3,401d398 <_dtoa_r+0x167c>
 401d2f4:	d9000c17 	ldw	r4,48(sp)
 401d2f8:	003e8806 	br	401cd1c <__alt_data_end+0xfc01cd1c>
 401d2fc:	04000084 	movi	r16,2
 401d300:	003b9d06 	br	401c178 <__alt_data_end+0xfc01c178>
 401d304:	d9001317 	ldw	r4,76(sp)
 401d308:	d9000515 	stw	r4,20(sp)
 401d30c:	003cd606 	br	401c668 <__alt_data_end+0xfc01c668>
 401d310:	d8801317 	ldw	r2,76(sp)
 401d314:	d8800515 	stw	r2,20(sp)
 401d318:	003c2a06 	br	401c3c4 <__alt_data_end+0xfc01c3c4>
 401d31c:	d9800317 	ldw	r6,12(sp)
 401d320:	00800084 	movi	r2,2
 401d324:	11801516 	blt	r2,r6,401d37c <_dtoa_r+0x1660>
 401d328:	d9c00c17 	ldw	r7,48(sp)
 401d32c:	d9c00615 	stw	r7,24(sp)
 401d330:	003df706 	br	401cb10 <__alt_data_end+0xfc01cb10>
 401d334:	193d3926 	beq	r3,r4,401c81c <__alt_data_end+0xfc01c81c>
 401d338:	00c00f04 	movi	r3,60
 401d33c:	1885c83a 	sub	r2,r3,r2
 401d340:	003ddf06 	br	401cac0 <__alt_data_end+0xfc01cac0>
 401d344:	e009883a 	mov	r4,fp
 401d348:	e0001115 	stw	zero,68(fp)
 401d34c:	000b883a 	mov	r5,zero
 401d350:	401f1640 	call	401f164 <_Balloc>
 401d354:	d8800715 	stw	r2,28(sp)
 401d358:	d8c00717 	ldw	r3,28(sp)
 401d35c:	00bfffc4 	movi	r2,-1
 401d360:	01000044 	movi	r4,1
 401d364:	d8800c15 	stw	r2,48(sp)
 401d368:	e0c01015 	stw	r3,64(fp)
 401d36c:	d9000b15 	stw	r4,44(sp)
 401d370:	d8800615 	stw	r2,24(sp)
 401d374:	d8002215 	stw	zero,136(sp)
 401d378:	003c4106 	br	401c480 <__alt_data_end+0xfc01c480>
 401d37c:	d8c00c17 	ldw	r3,48(sp)
 401d380:	d8c00615 	stw	r3,24(sp)
 401d384:	003e7006 	br	401cd48 <__alt_data_end+0xfc01cd48>
 401d388:	04400044 	movi	r17,1
 401d38c:	003b2006 	br	401c010 <__alt_data_end+0xfc01c010>
 401d390:	000b883a 	mov	r5,zero
 401d394:	003b3d06 	br	401c08c <__alt_data_end+0xfc01c08c>
 401d398:	d8800c17 	ldw	r2,48(sp)
 401d39c:	d8800615 	stw	r2,24(sp)
 401d3a0:	003e6906 	br	401cd48 <__alt_data_end+0xfc01cd48>

0401d3a4 <__sflush_r>:
 401d3a4:	2880030b 	ldhu	r2,12(r5)
 401d3a8:	defffb04 	addi	sp,sp,-20
 401d3ac:	dcc00315 	stw	r19,12(sp)
 401d3b0:	dc400115 	stw	r17,4(sp)
 401d3b4:	dfc00415 	stw	ra,16(sp)
 401d3b8:	dc800215 	stw	r18,8(sp)
 401d3bc:	dc000015 	stw	r16,0(sp)
 401d3c0:	10c0020c 	andi	r3,r2,8
 401d3c4:	2823883a 	mov	r17,r5
 401d3c8:	2027883a 	mov	r19,r4
 401d3cc:	1800311e 	bne	r3,zero,401d494 <__sflush_r+0xf0>
 401d3d0:	28c00117 	ldw	r3,4(r5)
 401d3d4:	10820014 	ori	r2,r2,2048
 401d3d8:	2880030d 	sth	r2,12(r5)
 401d3dc:	00c04b0e 	bge	zero,r3,401d50c <__sflush_r+0x168>
 401d3e0:	8a000a17 	ldw	r8,40(r17)
 401d3e4:	40002326 	beq	r8,zero,401d474 <__sflush_r+0xd0>
 401d3e8:	9c000017 	ldw	r16,0(r19)
 401d3ec:	10c4000c 	andi	r3,r2,4096
 401d3f0:	98000015 	stw	zero,0(r19)
 401d3f4:	18004826 	beq	r3,zero,401d518 <__sflush_r+0x174>
 401d3f8:	89801417 	ldw	r6,80(r17)
 401d3fc:	10c0010c 	andi	r3,r2,4
 401d400:	18000626 	beq	r3,zero,401d41c <__sflush_r+0x78>
 401d404:	88c00117 	ldw	r3,4(r17)
 401d408:	88800c17 	ldw	r2,48(r17)
 401d40c:	30cdc83a 	sub	r6,r6,r3
 401d410:	10000226 	beq	r2,zero,401d41c <__sflush_r+0x78>
 401d414:	88800f17 	ldw	r2,60(r17)
 401d418:	308dc83a 	sub	r6,r6,r2
 401d41c:	89400717 	ldw	r5,28(r17)
 401d420:	000f883a 	mov	r7,zero
 401d424:	9809883a 	mov	r4,r19
 401d428:	403ee83a 	callr	r8
 401d42c:	00ffffc4 	movi	r3,-1
 401d430:	10c04426 	beq	r2,r3,401d544 <__sflush_r+0x1a0>
 401d434:	88c0030b 	ldhu	r3,12(r17)
 401d438:	89000417 	ldw	r4,16(r17)
 401d43c:	88000115 	stw	zero,4(r17)
 401d440:	197dffcc 	andi	r5,r3,63487
 401d444:	8940030d 	sth	r5,12(r17)
 401d448:	89000015 	stw	r4,0(r17)
 401d44c:	18c4000c 	andi	r3,r3,4096
 401d450:	18002c1e 	bne	r3,zero,401d504 <__sflush_r+0x160>
 401d454:	89400c17 	ldw	r5,48(r17)
 401d458:	9c000015 	stw	r16,0(r19)
 401d45c:	28000526 	beq	r5,zero,401d474 <__sflush_r+0xd0>
 401d460:	88801004 	addi	r2,r17,64
 401d464:	28800226 	beq	r5,r2,401d470 <__sflush_r+0xcc>
 401d468:	9809883a 	mov	r4,r19
 401d46c:	401db200 	call	401db20 <_free_r>
 401d470:	88000c15 	stw	zero,48(r17)
 401d474:	0005883a 	mov	r2,zero
 401d478:	dfc00417 	ldw	ra,16(sp)
 401d47c:	dcc00317 	ldw	r19,12(sp)
 401d480:	dc800217 	ldw	r18,8(sp)
 401d484:	dc400117 	ldw	r17,4(sp)
 401d488:	dc000017 	ldw	r16,0(sp)
 401d48c:	dec00504 	addi	sp,sp,20
 401d490:	f800283a 	ret
 401d494:	2c800417 	ldw	r18,16(r5)
 401d498:	903ff626 	beq	r18,zero,401d474 <__alt_data_end+0xfc01d474>
 401d49c:	2c000017 	ldw	r16,0(r5)
 401d4a0:	108000cc 	andi	r2,r2,3
 401d4a4:	2c800015 	stw	r18,0(r5)
 401d4a8:	84a1c83a 	sub	r16,r16,r18
 401d4ac:	1000131e 	bne	r2,zero,401d4fc <__sflush_r+0x158>
 401d4b0:	28800517 	ldw	r2,20(r5)
 401d4b4:	88800215 	stw	r2,8(r17)
 401d4b8:	04000316 	blt	zero,r16,401d4c8 <__sflush_r+0x124>
 401d4bc:	003fed06 	br	401d474 <__alt_data_end+0xfc01d474>
 401d4c0:	90a5883a 	add	r18,r18,r2
 401d4c4:	043feb0e 	bge	zero,r16,401d474 <__alt_data_end+0xfc01d474>
 401d4c8:	88800917 	ldw	r2,36(r17)
 401d4cc:	89400717 	ldw	r5,28(r17)
 401d4d0:	800f883a 	mov	r7,r16
 401d4d4:	900d883a 	mov	r6,r18
 401d4d8:	9809883a 	mov	r4,r19
 401d4dc:	103ee83a 	callr	r2
 401d4e0:	80a1c83a 	sub	r16,r16,r2
 401d4e4:	00bff616 	blt	zero,r2,401d4c0 <__alt_data_end+0xfc01d4c0>
 401d4e8:	88c0030b 	ldhu	r3,12(r17)
 401d4ec:	00bfffc4 	movi	r2,-1
 401d4f0:	18c01014 	ori	r3,r3,64
 401d4f4:	88c0030d 	sth	r3,12(r17)
 401d4f8:	003fdf06 	br	401d478 <__alt_data_end+0xfc01d478>
 401d4fc:	0005883a 	mov	r2,zero
 401d500:	003fec06 	br	401d4b4 <__alt_data_end+0xfc01d4b4>
 401d504:	88801415 	stw	r2,80(r17)
 401d508:	003fd206 	br	401d454 <__alt_data_end+0xfc01d454>
 401d50c:	28c00f17 	ldw	r3,60(r5)
 401d510:	00ffb316 	blt	zero,r3,401d3e0 <__alt_data_end+0xfc01d3e0>
 401d514:	003fd706 	br	401d474 <__alt_data_end+0xfc01d474>
 401d518:	89400717 	ldw	r5,28(r17)
 401d51c:	000d883a 	mov	r6,zero
 401d520:	01c00044 	movi	r7,1
 401d524:	9809883a 	mov	r4,r19
 401d528:	403ee83a 	callr	r8
 401d52c:	100d883a 	mov	r6,r2
 401d530:	00bfffc4 	movi	r2,-1
 401d534:	30801426 	beq	r6,r2,401d588 <__sflush_r+0x1e4>
 401d538:	8880030b 	ldhu	r2,12(r17)
 401d53c:	8a000a17 	ldw	r8,40(r17)
 401d540:	003fae06 	br	401d3fc <__alt_data_end+0xfc01d3fc>
 401d544:	98c00017 	ldw	r3,0(r19)
 401d548:	183fba26 	beq	r3,zero,401d434 <__alt_data_end+0xfc01d434>
 401d54c:	01000744 	movi	r4,29
 401d550:	19000626 	beq	r3,r4,401d56c <__sflush_r+0x1c8>
 401d554:	01000584 	movi	r4,22
 401d558:	19000426 	beq	r3,r4,401d56c <__sflush_r+0x1c8>
 401d55c:	88c0030b 	ldhu	r3,12(r17)
 401d560:	18c01014 	ori	r3,r3,64
 401d564:	88c0030d 	sth	r3,12(r17)
 401d568:	003fc306 	br	401d478 <__alt_data_end+0xfc01d478>
 401d56c:	8880030b 	ldhu	r2,12(r17)
 401d570:	88c00417 	ldw	r3,16(r17)
 401d574:	88000115 	stw	zero,4(r17)
 401d578:	10bdffcc 	andi	r2,r2,63487
 401d57c:	8880030d 	sth	r2,12(r17)
 401d580:	88c00015 	stw	r3,0(r17)
 401d584:	003fb306 	br	401d454 <__alt_data_end+0xfc01d454>
 401d588:	98800017 	ldw	r2,0(r19)
 401d58c:	103fea26 	beq	r2,zero,401d538 <__alt_data_end+0xfc01d538>
 401d590:	00c00744 	movi	r3,29
 401d594:	10c00226 	beq	r2,r3,401d5a0 <__sflush_r+0x1fc>
 401d598:	00c00584 	movi	r3,22
 401d59c:	10c0031e 	bne	r2,r3,401d5ac <__sflush_r+0x208>
 401d5a0:	9c000015 	stw	r16,0(r19)
 401d5a4:	0005883a 	mov	r2,zero
 401d5a8:	003fb306 	br	401d478 <__alt_data_end+0xfc01d478>
 401d5ac:	88c0030b 	ldhu	r3,12(r17)
 401d5b0:	3005883a 	mov	r2,r6
 401d5b4:	18c01014 	ori	r3,r3,64
 401d5b8:	88c0030d 	sth	r3,12(r17)
 401d5bc:	003fae06 	br	401d478 <__alt_data_end+0xfc01d478>

0401d5c0 <_fflush_r>:
 401d5c0:	defffd04 	addi	sp,sp,-12
 401d5c4:	dc000115 	stw	r16,4(sp)
 401d5c8:	dfc00215 	stw	ra,8(sp)
 401d5cc:	2021883a 	mov	r16,r4
 401d5d0:	20000226 	beq	r4,zero,401d5dc <_fflush_r+0x1c>
 401d5d4:	20800e17 	ldw	r2,56(r4)
 401d5d8:	10000c26 	beq	r2,zero,401d60c <_fflush_r+0x4c>
 401d5dc:	2880030f 	ldh	r2,12(r5)
 401d5e0:	1000051e 	bne	r2,zero,401d5f8 <_fflush_r+0x38>
 401d5e4:	0005883a 	mov	r2,zero
 401d5e8:	dfc00217 	ldw	ra,8(sp)
 401d5ec:	dc000117 	ldw	r16,4(sp)
 401d5f0:	dec00304 	addi	sp,sp,12
 401d5f4:	f800283a 	ret
 401d5f8:	8009883a 	mov	r4,r16
 401d5fc:	dfc00217 	ldw	ra,8(sp)
 401d600:	dc000117 	ldw	r16,4(sp)
 401d604:	dec00304 	addi	sp,sp,12
 401d608:	401d3a41 	jmpi	401d3a4 <__sflush_r>
 401d60c:	d9400015 	stw	r5,0(sp)
 401d610:	401d9ac0 	call	401d9ac <__sinit>
 401d614:	d9400017 	ldw	r5,0(sp)
 401d618:	003ff006 	br	401d5dc <__alt_data_end+0xfc01d5dc>

0401d61c <fflush>:
 401d61c:	20000526 	beq	r4,zero,401d634 <fflush+0x18>
 401d620:	00810134 	movhi	r2,1028
 401d624:	10af8104 	addi	r2,r2,-16892
 401d628:	200b883a 	mov	r5,r4
 401d62c:	11000017 	ldw	r4,0(r2)
 401d630:	401d5c01 	jmpi	401d5c0 <_fflush_r>
 401d634:	00810134 	movhi	r2,1028
 401d638:	10af8004 	addi	r2,r2,-16896
 401d63c:	11000017 	ldw	r4,0(r2)
 401d640:	014100b4 	movhi	r5,1026
 401d644:	29757004 	addi	r5,r5,-10816
 401d648:	401e3bc1 	jmpi	401e3bc <_fwalk_reent>

0401d64c <__fp_unlock>:
 401d64c:	0005883a 	mov	r2,zero
 401d650:	f800283a 	ret

0401d654 <_cleanup_r>:
 401d654:	014100b4 	movhi	r5,1026
 401d658:	2948ba04 	addi	r5,r5,8936
 401d65c:	401e3bc1 	jmpi	401e3bc <_fwalk_reent>

0401d660 <__sinit.part.1>:
 401d660:	defff704 	addi	sp,sp,-36
 401d664:	00c100b4 	movhi	r3,1026
 401d668:	dfc00815 	stw	ra,32(sp)
 401d66c:	ddc00715 	stw	r23,28(sp)
 401d670:	dd800615 	stw	r22,24(sp)
 401d674:	dd400515 	stw	r21,20(sp)
 401d678:	dd000415 	stw	r20,16(sp)
 401d67c:	dcc00315 	stw	r19,12(sp)
 401d680:	dc800215 	stw	r18,8(sp)
 401d684:	dc400115 	stw	r17,4(sp)
 401d688:	dc000015 	stw	r16,0(sp)
 401d68c:	18f59504 	addi	r3,r3,-10668
 401d690:	24000117 	ldw	r16,4(r4)
 401d694:	20c00f15 	stw	r3,60(r4)
 401d698:	2080bb04 	addi	r2,r4,748
 401d69c:	00c000c4 	movi	r3,3
 401d6a0:	20c0b915 	stw	r3,740(r4)
 401d6a4:	2080ba15 	stw	r2,744(r4)
 401d6a8:	2000b815 	stw	zero,736(r4)
 401d6ac:	05c00204 	movi	r23,8
 401d6b0:	00800104 	movi	r2,4
 401d6b4:	2025883a 	mov	r18,r4
 401d6b8:	b80d883a 	mov	r6,r23
 401d6bc:	81001704 	addi	r4,r16,92
 401d6c0:	000b883a 	mov	r5,zero
 401d6c4:	80000015 	stw	zero,0(r16)
 401d6c8:	80000115 	stw	zero,4(r16)
 401d6cc:	80000215 	stw	zero,8(r16)
 401d6d0:	8080030d 	sth	r2,12(r16)
 401d6d4:	80001915 	stw	zero,100(r16)
 401d6d8:	8000038d 	sth	zero,14(r16)
 401d6dc:	80000415 	stw	zero,16(r16)
 401d6e0:	80000515 	stw	zero,20(r16)
 401d6e4:	80000615 	stw	zero,24(r16)
 401d6e8:	40192700 	call	4019270 <memset>
 401d6ec:	058100b4 	movhi	r22,1026
 401d6f0:	94400217 	ldw	r17,8(r18)
 401d6f4:	054100b4 	movhi	r21,1026
 401d6f8:	050100b4 	movhi	r20,1026
 401d6fc:	04c100b4 	movhi	r19,1026
 401d700:	b5821204 	addi	r22,r22,2120
 401d704:	ad422904 	addi	r21,r21,2212
 401d708:	a5024804 	addi	r20,r20,2336
 401d70c:	9cc25f04 	addi	r19,r19,2428
 401d710:	85800815 	stw	r22,32(r16)
 401d714:	85400915 	stw	r21,36(r16)
 401d718:	85000a15 	stw	r20,40(r16)
 401d71c:	84c00b15 	stw	r19,44(r16)
 401d720:	84000715 	stw	r16,28(r16)
 401d724:	00800284 	movi	r2,10
 401d728:	8880030d 	sth	r2,12(r17)
 401d72c:	00800044 	movi	r2,1
 401d730:	b80d883a 	mov	r6,r23
 401d734:	89001704 	addi	r4,r17,92
 401d738:	000b883a 	mov	r5,zero
 401d73c:	88000015 	stw	zero,0(r17)
 401d740:	88000115 	stw	zero,4(r17)
 401d744:	88000215 	stw	zero,8(r17)
 401d748:	88001915 	stw	zero,100(r17)
 401d74c:	8880038d 	sth	r2,14(r17)
 401d750:	88000415 	stw	zero,16(r17)
 401d754:	88000515 	stw	zero,20(r17)
 401d758:	88000615 	stw	zero,24(r17)
 401d75c:	40192700 	call	4019270 <memset>
 401d760:	94000317 	ldw	r16,12(r18)
 401d764:	00800484 	movi	r2,18
 401d768:	8c400715 	stw	r17,28(r17)
 401d76c:	8d800815 	stw	r22,32(r17)
 401d770:	8d400915 	stw	r21,36(r17)
 401d774:	8d000a15 	stw	r20,40(r17)
 401d778:	8cc00b15 	stw	r19,44(r17)
 401d77c:	8080030d 	sth	r2,12(r16)
 401d780:	00800084 	movi	r2,2
 401d784:	80000015 	stw	zero,0(r16)
 401d788:	80000115 	stw	zero,4(r16)
 401d78c:	80000215 	stw	zero,8(r16)
 401d790:	80001915 	stw	zero,100(r16)
 401d794:	8080038d 	sth	r2,14(r16)
 401d798:	80000415 	stw	zero,16(r16)
 401d79c:	80000515 	stw	zero,20(r16)
 401d7a0:	80000615 	stw	zero,24(r16)
 401d7a4:	b80d883a 	mov	r6,r23
 401d7a8:	000b883a 	mov	r5,zero
 401d7ac:	81001704 	addi	r4,r16,92
 401d7b0:	40192700 	call	4019270 <memset>
 401d7b4:	00800044 	movi	r2,1
 401d7b8:	84000715 	stw	r16,28(r16)
 401d7bc:	85800815 	stw	r22,32(r16)
 401d7c0:	85400915 	stw	r21,36(r16)
 401d7c4:	85000a15 	stw	r20,40(r16)
 401d7c8:	84c00b15 	stw	r19,44(r16)
 401d7cc:	90800e15 	stw	r2,56(r18)
 401d7d0:	dfc00817 	ldw	ra,32(sp)
 401d7d4:	ddc00717 	ldw	r23,28(sp)
 401d7d8:	dd800617 	ldw	r22,24(sp)
 401d7dc:	dd400517 	ldw	r21,20(sp)
 401d7e0:	dd000417 	ldw	r20,16(sp)
 401d7e4:	dcc00317 	ldw	r19,12(sp)
 401d7e8:	dc800217 	ldw	r18,8(sp)
 401d7ec:	dc400117 	ldw	r17,4(sp)
 401d7f0:	dc000017 	ldw	r16,0(sp)
 401d7f4:	dec00904 	addi	sp,sp,36
 401d7f8:	f800283a 	ret

0401d7fc <__fp_lock>:
 401d7fc:	0005883a 	mov	r2,zero
 401d800:	f800283a 	ret

0401d804 <__sfmoreglue>:
 401d804:	defffc04 	addi	sp,sp,-16
 401d808:	dc800215 	stw	r18,8(sp)
 401d80c:	2825883a 	mov	r18,r5
 401d810:	dc000015 	stw	r16,0(sp)
 401d814:	01401a04 	movi	r5,104
 401d818:	2021883a 	mov	r16,r4
 401d81c:	913fffc4 	addi	r4,r18,-1
 401d820:	dfc00315 	stw	ra,12(sp)
 401d824:	dc400115 	stw	r17,4(sp)
 401d828:	40191000 	call	4019100 <__mulsi3>
 401d82c:	8009883a 	mov	r4,r16
 401d830:	11401d04 	addi	r5,r2,116
 401d834:	1023883a 	mov	r17,r2
 401d838:	401e7180 	call	401e718 <_malloc_r>
 401d83c:	1021883a 	mov	r16,r2
 401d840:	10000726 	beq	r2,zero,401d860 <__sfmoreglue+0x5c>
 401d844:	11000304 	addi	r4,r2,12
 401d848:	10000015 	stw	zero,0(r2)
 401d84c:	14800115 	stw	r18,4(r2)
 401d850:	11000215 	stw	r4,8(r2)
 401d854:	89801a04 	addi	r6,r17,104
 401d858:	000b883a 	mov	r5,zero
 401d85c:	40192700 	call	4019270 <memset>
 401d860:	8005883a 	mov	r2,r16
 401d864:	dfc00317 	ldw	ra,12(sp)
 401d868:	dc800217 	ldw	r18,8(sp)
 401d86c:	dc400117 	ldw	r17,4(sp)
 401d870:	dc000017 	ldw	r16,0(sp)
 401d874:	dec00404 	addi	sp,sp,16
 401d878:	f800283a 	ret

0401d87c <__sfp>:
 401d87c:	defffb04 	addi	sp,sp,-20
 401d880:	dc000015 	stw	r16,0(sp)
 401d884:	04010134 	movhi	r16,1028
 401d888:	842f8004 	addi	r16,r16,-16896
 401d88c:	dcc00315 	stw	r19,12(sp)
 401d890:	2027883a 	mov	r19,r4
 401d894:	81000017 	ldw	r4,0(r16)
 401d898:	dfc00415 	stw	ra,16(sp)
 401d89c:	dc800215 	stw	r18,8(sp)
 401d8a0:	20800e17 	ldw	r2,56(r4)
 401d8a4:	dc400115 	stw	r17,4(sp)
 401d8a8:	1000021e 	bne	r2,zero,401d8b4 <__sfp+0x38>
 401d8ac:	401d6600 	call	401d660 <__sinit.part.1>
 401d8b0:	81000017 	ldw	r4,0(r16)
 401d8b4:	2480b804 	addi	r18,r4,736
 401d8b8:	047fffc4 	movi	r17,-1
 401d8bc:	91000117 	ldw	r4,4(r18)
 401d8c0:	94000217 	ldw	r16,8(r18)
 401d8c4:	213fffc4 	addi	r4,r4,-1
 401d8c8:	20000a16 	blt	r4,zero,401d8f4 <__sfp+0x78>
 401d8cc:	8080030f 	ldh	r2,12(r16)
 401d8d0:	10000c26 	beq	r2,zero,401d904 <__sfp+0x88>
 401d8d4:	80c01d04 	addi	r3,r16,116
 401d8d8:	00000206 	br	401d8e4 <__sfp+0x68>
 401d8dc:	18bfe60f 	ldh	r2,-104(r3)
 401d8e0:	10000826 	beq	r2,zero,401d904 <__sfp+0x88>
 401d8e4:	213fffc4 	addi	r4,r4,-1
 401d8e8:	1c3ffd04 	addi	r16,r3,-12
 401d8ec:	18c01a04 	addi	r3,r3,104
 401d8f0:	247ffa1e 	bne	r4,r17,401d8dc <__alt_data_end+0xfc01d8dc>
 401d8f4:	90800017 	ldw	r2,0(r18)
 401d8f8:	10001d26 	beq	r2,zero,401d970 <__sfp+0xf4>
 401d8fc:	1025883a 	mov	r18,r2
 401d900:	003fee06 	br	401d8bc <__alt_data_end+0xfc01d8bc>
 401d904:	00bfffc4 	movi	r2,-1
 401d908:	8080038d 	sth	r2,14(r16)
 401d90c:	00800044 	movi	r2,1
 401d910:	8080030d 	sth	r2,12(r16)
 401d914:	80001915 	stw	zero,100(r16)
 401d918:	80000015 	stw	zero,0(r16)
 401d91c:	80000215 	stw	zero,8(r16)
 401d920:	80000115 	stw	zero,4(r16)
 401d924:	80000415 	stw	zero,16(r16)
 401d928:	80000515 	stw	zero,20(r16)
 401d92c:	80000615 	stw	zero,24(r16)
 401d930:	01800204 	movi	r6,8
 401d934:	000b883a 	mov	r5,zero
 401d938:	81001704 	addi	r4,r16,92
 401d93c:	40192700 	call	4019270 <memset>
 401d940:	8005883a 	mov	r2,r16
 401d944:	80000c15 	stw	zero,48(r16)
 401d948:	80000d15 	stw	zero,52(r16)
 401d94c:	80001115 	stw	zero,68(r16)
 401d950:	80001215 	stw	zero,72(r16)
 401d954:	dfc00417 	ldw	ra,16(sp)
 401d958:	dcc00317 	ldw	r19,12(sp)
 401d95c:	dc800217 	ldw	r18,8(sp)
 401d960:	dc400117 	ldw	r17,4(sp)
 401d964:	dc000017 	ldw	r16,0(sp)
 401d968:	dec00504 	addi	sp,sp,20
 401d96c:	f800283a 	ret
 401d970:	01400104 	movi	r5,4
 401d974:	9809883a 	mov	r4,r19
 401d978:	401d8040 	call	401d804 <__sfmoreglue>
 401d97c:	90800015 	stw	r2,0(r18)
 401d980:	103fde1e 	bne	r2,zero,401d8fc <__alt_data_end+0xfc01d8fc>
 401d984:	00800304 	movi	r2,12
 401d988:	98800015 	stw	r2,0(r19)
 401d98c:	0005883a 	mov	r2,zero
 401d990:	003ff006 	br	401d954 <__alt_data_end+0xfc01d954>

0401d994 <_cleanup>:
 401d994:	00810134 	movhi	r2,1028
 401d998:	10af8004 	addi	r2,r2,-16896
 401d99c:	11000017 	ldw	r4,0(r2)
 401d9a0:	014100b4 	movhi	r5,1026
 401d9a4:	2948ba04 	addi	r5,r5,8936
 401d9a8:	401e3bc1 	jmpi	401e3bc <_fwalk_reent>

0401d9ac <__sinit>:
 401d9ac:	20800e17 	ldw	r2,56(r4)
 401d9b0:	10000126 	beq	r2,zero,401d9b8 <__sinit+0xc>
 401d9b4:	f800283a 	ret
 401d9b8:	401d6601 	jmpi	401d660 <__sinit.part.1>

0401d9bc <__sfp_lock_acquire>:
 401d9bc:	f800283a 	ret

0401d9c0 <__sfp_lock_release>:
 401d9c0:	f800283a 	ret

0401d9c4 <__sinit_lock_acquire>:
 401d9c4:	f800283a 	ret

0401d9c8 <__sinit_lock_release>:
 401d9c8:	f800283a 	ret

0401d9cc <__fp_lock_all>:
 401d9cc:	00810134 	movhi	r2,1028
 401d9d0:	10af8104 	addi	r2,r2,-16892
 401d9d4:	11000017 	ldw	r4,0(r2)
 401d9d8:	014100b4 	movhi	r5,1026
 401d9dc:	2975ff04 	addi	r5,r5,-10244
 401d9e0:	401e2f81 	jmpi	401e2f8 <_fwalk>

0401d9e4 <__fp_unlock_all>:
 401d9e4:	00810134 	movhi	r2,1028
 401d9e8:	10af8104 	addi	r2,r2,-16892
 401d9ec:	11000017 	ldw	r4,0(r2)
 401d9f0:	014100b4 	movhi	r5,1026
 401d9f4:	29759304 	addi	r5,r5,-10676
 401d9f8:	401e2f81 	jmpi	401e2f8 <_fwalk>

0401d9fc <_malloc_trim_r>:
 401d9fc:	defffb04 	addi	sp,sp,-20
 401da00:	dcc00315 	stw	r19,12(sp)
 401da04:	04c10134 	movhi	r19,1028
 401da08:	dc800215 	stw	r18,8(sp)
 401da0c:	dc400115 	stw	r17,4(sp)
 401da10:	dc000015 	stw	r16,0(sp)
 401da14:	dfc00415 	stw	ra,16(sp)
 401da18:	2821883a 	mov	r16,r5
 401da1c:	9ce9d104 	addi	r19,r19,-22716
 401da20:	2025883a 	mov	r18,r4
 401da24:	40265b00 	call	40265b0 <__malloc_lock>
 401da28:	98800217 	ldw	r2,8(r19)
 401da2c:	14400117 	ldw	r17,4(r2)
 401da30:	00bfff04 	movi	r2,-4
 401da34:	88a2703a 	and	r17,r17,r2
 401da38:	8c21c83a 	sub	r16,r17,r16
 401da3c:	8403fbc4 	addi	r16,r16,4079
 401da40:	8020d33a 	srli	r16,r16,12
 401da44:	0083ffc4 	movi	r2,4095
 401da48:	843fffc4 	addi	r16,r16,-1
 401da4c:	8020933a 	slli	r16,r16,12
 401da50:	1400060e 	bge	r2,r16,401da6c <_malloc_trim_r+0x70>
 401da54:	000b883a 	mov	r5,zero
 401da58:	9009883a 	mov	r4,r18
 401da5c:	40207f40 	call	40207f4 <_sbrk_r>
 401da60:	98c00217 	ldw	r3,8(r19)
 401da64:	1c47883a 	add	r3,r3,r17
 401da68:	10c00a26 	beq	r2,r3,401da94 <_malloc_trim_r+0x98>
 401da6c:	9009883a 	mov	r4,r18
 401da70:	40265d40 	call	40265d4 <__malloc_unlock>
 401da74:	0005883a 	mov	r2,zero
 401da78:	dfc00417 	ldw	ra,16(sp)
 401da7c:	dcc00317 	ldw	r19,12(sp)
 401da80:	dc800217 	ldw	r18,8(sp)
 401da84:	dc400117 	ldw	r17,4(sp)
 401da88:	dc000017 	ldw	r16,0(sp)
 401da8c:	dec00504 	addi	sp,sp,20
 401da90:	f800283a 	ret
 401da94:	040bc83a 	sub	r5,zero,r16
 401da98:	9009883a 	mov	r4,r18
 401da9c:	40207f40 	call	40207f4 <_sbrk_r>
 401daa0:	00ffffc4 	movi	r3,-1
 401daa4:	10c00d26 	beq	r2,r3,401dadc <_malloc_trim_r+0xe0>
 401daa8:	00c10174 	movhi	r3,1029
 401daac:	18ee2804 	addi	r3,r3,-18272
 401dab0:	18800017 	ldw	r2,0(r3)
 401dab4:	99000217 	ldw	r4,8(r19)
 401dab8:	8c23c83a 	sub	r17,r17,r16
 401dabc:	8c400054 	ori	r17,r17,1
 401dac0:	1421c83a 	sub	r16,r2,r16
 401dac4:	24400115 	stw	r17,4(r4)
 401dac8:	9009883a 	mov	r4,r18
 401dacc:	1c000015 	stw	r16,0(r3)
 401dad0:	40265d40 	call	40265d4 <__malloc_unlock>
 401dad4:	00800044 	movi	r2,1
 401dad8:	003fe706 	br	401da78 <__alt_data_end+0xfc01da78>
 401dadc:	000b883a 	mov	r5,zero
 401dae0:	9009883a 	mov	r4,r18
 401dae4:	40207f40 	call	40207f4 <_sbrk_r>
 401dae8:	99000217 	ldw	r4,8(r19)
 401daec:	014003c4 	movi	r5,15
 401daf0:	1107c83a 	sub	r3,r2,r4
 401daf4:	28ffdd0e 	bge	r5,r3,401da6c <__alt_data_end+0xfc01da6c>
 401daf8:	01410134 	movhi	r5,1028
 401dafc:	296f8304 	addi	r5,r5,-16884
 401db00:	29400017 	ldw	r5,0(r5)
 401db04:	18c00054 	ori	r3,r3,1
 401db08:	20c00115 	stw	r3,4(r4)
 401db0c:	00c10174 	movhi	r3,1029
 401db10:	1145c83a 	sub	r2,r2,r5
 401db14:	18ee2804 	addi	r3,r3,-18272
 401db18:	18800015 	stw	r2,0(r3)
 401db1c:	003fd306 	br	401da6c <__alt_data_end+0xfc01da6c>

0401db20 <_free_r>:
 401db20:	28004126 	beq	r5,zero,401dc28 <_free_r+0x108>
 401db24:	defffd04 	addi	sp,sp,-12
 401db28:	dc400115 	stw	r17,4(sp)
 401db2c:	dc000015 	stw	r16,0(sp)
 401db30:	2023883a 	mov	r17,r4
 401db34:	2821883a 	mov	r16,r5
 401db38:	dfc00215 	stw	ra,8(sp)
 401db3c:	40265b00 	call	40265b0 <__malloc_lock>
 401db40:	81ffff17 	ldw	r7,-4(r16)
 401db44:	00bfff84 	movi	r2,-2
 401db48:	01010134 	movhi	r4,1028
 401db4c:	81bffe04 	addi	r6,r16,-8
 401db50:	3884703a 	and	r2,r7,r2
 401db54:	2129d104 	addi	r4,r4,-22716
 401db58:	308b883a 	add	r5,r6,r2
 401db5c:	2a400117 	ldw	r9,4(r5)
 401db60:	22000217 	ldw	r8,8(r4)
 401db64:	00ffff04 	movi	r3,-4
 401db68:	48c6703a 	and	r3,r9,r3
 401db6c:	2a005726 	beq	r5,r8,401dccc <_free_r+0x1ac>
 401db70:	28c00115 	stw	r3,4(r5)
 401db74:	39c0004c 	andi	r7,r7,1
 401db78:	3800091e 	bne	r7,zero,401dba0 <_free_r+0x80>
 401db7c:	823ffe17 	ldw	r8,-8(r16)
 401db80:	22400204 	addi	r9,r4,8
 401db84:	320dc83a 	sub	r6,r6,r8
 401db88:	31c00217 	ldw	r7,8(r6)
 401db8c:	1205883a 	add	r2,r2,r8
 401db90:	3a406526 	beq	r7,r9,401dd28 <_free_r+0x208>
 401db94:	32000317 	ldw	r8,12(r6)
 401db98:	3a000315 	stw	r8,12(r7)
 401db9c:	41c00215 	stw	r7,8(r8)
 401dba0:	28cf883a 	add	r7,r5,r3
 401dba4:	39c00117 	ldw	r7,4(r7)
 401dba8:	39c0004c 	andi	r7,r7,1
 401dbac:	38003a26 	beq	r7,zero,401dc98 <_free_r+0x178>
 401dbb0:	10c00054 	ori	r3,r2,1
 401dbb4:	30c00115 	stw	r3,4(r6)
 401dbb8:	3087883a 	add	r3,r6,r2
 401dbbc:	18800015 	stw	r2,0(r3)
 401dbc0:	00c07fc4 	movi	r3,511
 401dbc4:	18801936 	bltu	r3,r2,401dc2c <_free_r+0x10c>
 401dbc8:	1004d0fa 	srli	r2,r2,3
 401dbcc:	01c00044 	movi	r7,1
 401dbd0:	21400117 	ldw	r5,4(r4)
 401dbd4:	10c00044 	addi	r3,r2,1
 401dbd8:	18c7883a 	add	r3,r3,r3
 401dbdc:	1005d0ba 	srai	r2,r2,2
 401dbe0:	18c7883a 	add	r3,r3,r3
 401dbe4:	18c7883a 	add	r3,r3,r3
 401dbe8:	1907883a 	add	r3,r3,r4
 401dbec:	3884983a 	sll	r2,r7,r2
 401dbf0:	19c00017 	ldw	r7,0(r3)
 401dbf4:	1a3ffe04 	addi	r8,r3,-8
 401dbf8:	1144b03a 	or	r2,r2,r5
 401dbfc:	32000315 	stw	r8,12(r6)
 401dc00:	31c00215 	stw	r7,8(r6)
 401dc04:	20800115 	stw	r2,4(r4)
 401dc08:	19800015 	stw	r6,0(r3)
 401dc0c:	39800315 	stw	r6,12(r7)
 401dc10:	8809883a 	mov	r4,r17
 401dc14:	dfc00217 	ldw	ra,8(sp)
 401dc18:	dc400117 	ldw	r17,4(sp)
 401dc1c:	dc000017 	ldw	r16,0(sp)
 401dc20:	dec00304 	addi	sp,sp,12
 401dc24:	40265d41 	jmpi	40265d4 <__malloc_unlock>
 401dc28:	f800283a 	ret
 401dc2c:	100ad27a 	srli	r5,r2,9
 401dc30:	00c00104 	movi	r3,4
 401dc34:	19404a36 	bltu	r3,r5,401dd60 <_free_r+0x240>
 401dc38:	100ad1ba 	srli	r5,r2,6
 401dc3c:	28c00e44 	addi	r3,r5,57
 401dc40:	18c7883a 	add	r3,r3,r3
 401dc44:	29400e04 	addi	r5,r5,56
 401dc48:	18c7883a 	add	r3,r3,r3
 401dc4c:	18c7883a 	add	r3,r3,r3
 401dc50:	1909883a 	add	r4,r3,r4
 401dc54:	20c00017 	ldw	r3,0(r4)
 401dc58:	01c10134 	movhi	r7,1028
 401dc5c:	213ffe04 	addi	r4,r4,-8
 401dc60:	39e9d104 	addi	r7,r7,-22716
 401dc64:	20c04426 	beq	r4,r3,401dd78 <_free_r+0x258>
 401dc68:	01ffff04 	movi	r7,-4
 401dc6c:	19400117 	ldw	r5,4(r3)
 401dc70:	29ca703a 	and	r5,r5,r7
 401dc74:	1140022e 	bgeu	r2,r5,401dc80 <_free_r+0x160>
 401dc78:	18c00217 	ldw	r3,8(r3)
 401dc7c:	20fffb1e 	bne	r4,r3,401dc6c <__alt_data_end+0xfc01dc6c>
 401dc80:	19000317 	ldw	r4,12(r3)
 401dc84:	31000315 	stw	r4,12(r6)
 401dc88:	30c00215 	stw	r3,8(r6)
 401dc8c:	21800215 	stw	r6,8(r4)
 401dc90:	19800315 	stw	r6,12(r3)
 401dc94:	003fde06 	br	401dc10 <__alt_data_end+0xfc01dc10>
 401dc98:	29c00217 	ldw	r7,8(r5)
 401dc9c:	10c5883a 	add	r2,r2,r3
 401dca0:	00c10134 	movhi	r3,1028
 401dca4:	18e9d304 	addi	r3,r3,-22708
 401dca8:	38c03b26 	beq	r7,r3,401dd98 <_free_r+0x278>
 401dcac:	2a000317 	ldw	r8,12(r5)
 401dcb0:	11400054 	ori	r5,r2,1
 401dcb4:	3087883a 	add	r3,r6,r2
 401dcb8:	3a000315 	stw	r8,12(r7)
 401dcbc:	41c00215 	stw	r7,8(r8)
 401dcc0:	31400115 	stw	r5,4(r6)
 401dcc4:	18800015 	stw	r2,0(r3)
 401dcc8:	003fbd06 	br	401dbc0 <__alt_data_end+0xfc01dbc0>
 401dccc:	39c0004c 	andi	r7,r7,1
 401dcd0:	10c5883a 	add	r2,r2,r3
 401dcd4:	3800071e 	bne	r7,zero,401dcf4 <_free_r+0x1d4>
 401dcd8:	81fffe17 	ldw	r7,-8(r16)
 401dcdc:	31cdc83a 	sub	r6,r6,r7
 401dce0:	30c00317 	ldw	r3,12(r6)
 401dce4:	31400217 	ldw	r5,8(r6)
 401dce8:	11c5883a 	add	r2,r2,r7
 401dcec:	28c00315 	stw	r3,12(r5)
 401dcf0:	19400215 	stw	r5,8(r3)
 401dcf4:	10c00054 	ori	r3,r2,1
 401dcf8:	30c00115 	stw	r3,4(r6)
 401dcfc:	00c10134 	movhi	r3,1028
 401dd00:	18ef8404 	addi	r3,r3,-16880
 401dd04:	18c00017 	ldw	r3,0(r3)
 401dd08:	21800215 	stw	r6,8(r4)
 401dd0c:	10ffc036 	bltu	r2,r3,401dc10 <__alt_data_end+0xfc01dc10>
 401dd10:	00810174 	movhi	r2,1029
 401dd14:	10ae1f04 	addi	r2,r2,-18308
 401dd18:	11400017 	ldw	r5,0(r2)
 401dd1c:	8809883a 	mov	r4,r17
 401dd20:	401d9fc0 	call	401d9fc <_malloc_trim_r>
 401dd24:	003fba06 	br	401dc10 <__alt_data_end+0xfc01dc10>
 401dd28:	28c9883a 	add	r4,r5,r3
 401dd2c:	21000117 	ldw	r4,4(r4)
 401dd30:	2100004c 	andi	r4,r4,1
 401dd34:	2000391e 	bne	r4,zero,401de1c <_free_r+0x2fc>
 401dd38:	29c00217 	ldw	r7,8(r5)
 401dd3c:	29000317 	ldw	r4,12(r5)
 401dd40:	1885883a 	add	r2,r3,r2
 401dd44:	10c00054 	ori	r3,r2,1
 401dd48:	39000315 	stw	r4,12(r7)
 401dd4c:	21c00215 	stw	r7,8(r4)
 401dd50:	30c00115 	stw	r3,4(r6)
 401dd54:	308d883a 	add	r6,r6,r2
 401dd58:	30800015 	stw	r2,0(r6)
 401dd5c:	003fac06 	br	401dc10 <__alt_data_end+0xfc01dc10>
 401dd60:	00c00504 	movi	r3,20
 401dd64:	19401536 	bltu	r3,r5,401ddbc <_free_r+0x29c>
 401dd68:	28c01704 	addi	r3,r5,92
 401dd6c:	18c7883a 	add	r3,r3,r3
 401dd70:	294016c4 	addi	r5,r5,91
 401dd74:	003fb406 	br	401dc48 <__alt_data_end+0xfc01dc48>
 401dd78:	280bd0ba 	srai	r5,r5,2
 401dd7c:	00c00044 	movi	r3,1
 401dd80:	38800117 	ldw	r2,4(r7)
 401dd84:	194a983a 	sll	r5,r3,r5
 401dd88:	2007883a 	mov	r3,r4
 401dd8c:	2884b03a 	or	r2,r5,r2
 401dd90:	38800115 	stw	r2,4(r7)
 401dd94:	003fbb06 	br	401dc84 <__alt_data_end+0xfc01dc84>
 401dd98:	21800515 	stw	r6,20(r4)
 401dd9c:	21800415 	stw	r6,16(r4)
 401dda0:	10c00054 	ori	r3,r2,1
 401dda4:	31c00315 	stw	r7,12(r6)
 401dda8:	31c00215 	stw	r7,8(r6)
 401ddac:	30c00115 	stw	r3,4(r6)
 401ddb0:	308d883a 	add	r6,r6,r2
 401ddb4:	30800015 	stw	r2,0(r6)
 401ddb8:	003f9506 	br	401dc10 <__alt_data_end+0xfc01dc10>
 401ddbc:	00c01504 	movi	r3,84
 401ddc0:	19400536 	bltu	r3,r5,401ddd8 <_free_r+0x2b8>
 401ddc4:	100ad33a 	srli	r5,r2,12
 401ddc8:	28c01bc4 	addi	r3,r5,111
 401ddcc:	18c7883a 	add	r3,r3,r3
 401ddd0:	29401b84 	addi	r5,r5,110
 401ddd4:	003f9c06 	br	401dc48 <__alt_data_end+0xfc01dc48>
 401ddd8:	00c05504 	movi	r3,340
 401dddc:	19400536 	bltu	r3,r5,401ddf4 <_free_r+0x2d4>
 401dde0:	100ad3fa 	srli	r5,r2,15
 401dde4:	28c01e04 	addi	r3,r5,120
 401dde8:	18c7883a 	add	r3,r3,r3
 401ddec:	29401dc4 	addi	r5,r5,119
 401ddf0:	003f9506 	br	401dc48 <__alt_data_end+0xfc01dc48>
 401ddf4:	00c15504 	movi	r3,1364
 401ddf8:	19400536 	bltu	r3,r5,401de10 <_free_r+0x2f0>
 401ddfc:	100ad4ba 	srli	r5,r2,18
 401de00:	28c01f44 	addi	r3,r5,125
 401de04:	18c7883a 	add	r3,r3,r3
 401de08:	29401f04 	addi	r5,r5,124
 401de0c:	003f8e06 	br	401dc48 <__alt_data_end+0xfc01dc48>
 401de10:	00c03f84 	movi	r3,254
 401de14:	01401f84 	movi	r5,126
 401de18:	003f8b06 	br	401dc48 <__alt_data_end+0xfc01dc48>
 401de1c:	10c00054 	ori	r3,r2,1
 401de20:	30c00115 	stw	r3,4(r6)
 401de24:	308d883a 	add	r6,r6,r2
 401de28:	30800015 	stw	r2,0(r6)
 401de2c:	003f7806 	br	401dc10 <__alt_data_end+0xfc01dc10>

0401de30 <__sfvwrite_r>:
 401de30:	30800217 	ldw	r2,8(r6)
 401de34:	10006726 	beq	r2,zero,401dfd4 <__sfvwrite_r+0x1a4>
 401de38:	28c0030b 	ldhu	r3,12(r5)
 401de3c:	defff404 	addi	sp,sp,-48
 401de40:	dd400715 	stw	r21,28(sp)
 401de44:	dd000615 	stw	r20,24(sp)
 401de48:	dc000215 	stw	r16,8(sp)
 401de4c:	dfc00b15 	stw	ra,44(sp)
 401de50:	df000a15 	stw	fp,40(sp)
 401de54:	ddc00915 	stw	r23,36(sp)
 401de58:	dd800815 	stw	r22,32(sp)
 401de5c:	dcc00515 	stw	r19,20(sp)
 401de60:	dc800415 	stw	r18,16(sp)
 401de64:	dc400315 	stw	r17,12(sp)
 401de68:	1880020c 	andi	r2,r3,8
 401de6c:	2821883a 	mov	r16,r5
 401de70:	202b883a 	mov	r21,r4
 401de74:	3029883a 	mov	r20,r6
 401de78:	10002726 	beq	r2,zero,401df18 <__sfvwrite_r+0xe8>
 401de7c:	28800417 	ldw	r2,16(r5)
 401de80:	10002526 	beq	r2,zero,401df18 <__sfvwrite_r+0xe8>
 401de84:	1880008c 	andi	r2,r3,2
 401de88:	a4400017 	ldw	r17,0(r20)
 401de8c:	10002a26 	beq	r2,zero,401df38 <__sfvwrite_r+0x108>
 401de90:	05a00034 	movhi	r22,32768
 401de94:	0027883a 	mov	r19,zero
 401de98:	0025883a 	mov	r18,zero
 401de9c:	b5bf0004 	addi	r22,r22,-1024
 401dea0:	980d883a 	mov	r6,r19
 401dea4:	a809883a 	mov	r4,r21
 401dea8:	90004626 	beq	r18,zero,401dfc4 <__sfvwrite_r+0x194>
 401deac:	900f883a 	mov	r7,r18
 401deb0:	b480022e 	bgeu	r22,r18,401debc <__sfvwrite_r+0x8c>
 401deb4:	01e00034 	movhi	r7,32768
 401deb8:	39ff0004 	addi	r7,r7,-1024
 401debc:	80800917 	ldw	r2,36(r16)
 401dec0:	81400717 	ldw	r5,28(r16)
 401dec4:	103ee83a 	callr	r2
 401dec8:	00805a0e 	bge	zero,r2,401e034 <__sfvwrite_r+0x204>
 401decc:	a0c00217 	ldw	r3,8(r20)
 401ded0:	98a7883a 	add	r19,r19,r2
 401ded4:	90a5c83a 	sub	r18,r18,r2
 401ded8:	1885c83a 	sub	r2,r3,r2
 401dedc:	a0800215 	stw	r2,8(r20)
 401dee0:	103fef1e 	bne	r2,zero,401dea0 <__alt_data_end+0xfc01dea0>
 401dee4:	0005883a 	mov	r2,zero
 401dee8:	dfc00b17 	ldw	ra,44(sp)
 401deec:	df000a17 	ldw	fp,40(sp)
 401def0:	ddc00917 	ldw	r23,36(sp)
 401def4:	dd800817 	ldw	r22,32(sp)
 401def8:	dd400717 	ldw	r21,28(sp)
 401defc:	dd000617 	ldw	r20,24(sp)
 401df00:	dcc00517 	ldw	r19,20(sp)
 401df04:	dc800417 	ldw	r18,16(sp)
 401df08:	dc400317 	ldw	r17,12(sp)
 401df0c:	dc000217 	ldw	r16,8(sp)
 401df10:	dec00c04 	addi	sp,sp,48
 401df14:	f800283a 	ret
 401df18:	800b883a 	mov	r5,r16
 401df1c:	a809883a 	mov	r4,r21
 401df20:	401b9a00 	call	401b9a0 <__swsetup_r>
 401df24:	1000ee1e 	bne	r2,zero,401e2e0 <__sfvwrite_r+0x4b0>
 401df28:	80c0030b 	ldhu	r3,12(r16)
 401df2c:	a4400017 	ldw	r17,0(r20)
 401df30:	1880008c 	andi	r2,r3,2
 401df34:	103fd61e 	bne	r2,zero,401de90 <__alt_data_end+0xfc01de90>
 401df38:	1880004c 	andi	r2,r3,1
 401df3c:	1000421e 	bne	r2,zero,401e048 <__sfvwrite_r+0x218>
 401df40:	0039883a 	mov	fp,zero
 401df44:	0025883a 	mov	r18,zero
 401df48:	90001a26 	beq	r18,zero,401dfb4 <__sfvwrite_r+0x184>
 401df4c:	1880800c 	andi	r2,r3,512
 401df50:	84c00217 	ldw	r19,8(r16)
 401df54:	10002126 	beq	r2,zero,401dfdc <__sfvwrite_r+0x1ac>
 401df58:	982f883a 	mov	r23,r19
 401df5c:	94c09636 	bltu	r18,r19,401e1b8 <__sfvwrite_r+0x388>
 401df60:	1881200c 	andi	r2,r3,1152
 401df64:	1000a11e 	bne	r2,zero,401e1ec <__sfvwrite_r+0x3bc>
 401df68:	81000017 	ldw	r4,0(r16)
 401df6c:	b80d883a 	mov	r6,r23
 401df70:	e00b883a 	mov	r5,fp
 401df74:	401f0080 	call	401f008 <memmove>
 401df78:	80c00217 	ldw	r3,8(r16)
 401df7c:	81000017 	ldw	r4,0(r16)
 401df80:	9005883a 	mov	r2,r18
 401df84:	1ce7c83a 	sub	r19,r3,r19
 401df88:	25cf883a 	add	r7,r4,r23
 401df8c:	84c00215 	stw	r19,8(r16)
 401df90:	81c00015 	stw	r7,0(r16)
 401df94:	a0c00217 	ldw	r3,8(r20)
 401df98:	e0b9883a 	add	fp,fp,r2
 401df9c:	90a5c83a 	sub	r18,r18,r2
 401dfa0:	18a7c83a 	sub	r19,r3,r2
 401dfa4:	a4c00215 	stw	r19,8(r20)
 401dfa8:	983fce26 	beq	r19,zero,401dee4 <__alt_data_end+0xfc01dee4>
 401dfac:	80c0030b 	ldhu	r3,12(r16)
 401dfb0:	903fe61e 	bne	r18,zero,401df4c <__alt_data_end+0xfc01df4c>
 401dfb4:	8f000017 	ldw	fp,0(r17)
 401dfb8:	8c800117 	ldw	r18,4(r17)
 401dfbc:	8c400204 	addi	r17,r17,8
 401dfc0:	003fe106 	br	401df48 <__alt_data_end+0xfc01df48>
 401dfc4:	8cc00017 	ldw	r19,0(r17)
 401dfc8:	8c800117 	ldw	r18,4(r17)
 401dfcc:	8c400204 	addi	r17,r17,8
 401dfd0:	003fb306 	br	401dea0 <__alt_data_end+0xfc01dea0>
 401dfd4:	0005883a 	mov	r2,zero
 401dfd8:	f800283a 	ret
 401dfdc:	81000017 	ldw	r4,0(r16)
 401dfe0:	80800417 	ldw	r2,16(r16)
 401dfe4:	11005a36 	bltu	r2,r4,401e150 <__sfvwrite_r+0x320>
 401dfe8:	85c00517 	ldw	r23,20(r16)
 401dfec:	95c05836 	bltu	r18,r23,401e150 <__sfvwrite_r+0x320>
 401dff0:	00a00034 	movhi	r2,32768
 401dff4:	10bfffc4 	addi	r2,r2,-1
 401dff8:	9009883a 	mov	r4,r18
 401dffc:	1480012e 	bgeu	r2,r18,401e004 <__sfvwrite_r+0x1d4>
 401e000:	1009883a 	mov	r4,r2
 401e004:	b80b883a 	mov	r5,r23
 401e008:	4018f4c0 	call	4018f4c <__divsi3>
 401e00c:	b80b883a 	mov	r5,r23
 401e010:	1009883a 	mov	r4,r2
 401e014:	40191000 	call	4019100 <__mulsi3>
 401e018:	81400717 	ldw	r5,28(r16)
 401e01c:	80c00917 	ldw	r3,36(r16)
 401e020:	100f883a 	mov	r7,r2
 401e024:	e00d883a 	mov	r6,fp
 401e028:	a809883a 	mov	r4,r21
 401e02c:	183ee83a 	callr	r3
 401e030:	00bfd816 	blt	zero,r2,401df94 <__alt_data_end+0xfc01df94>
 401e034:	8080030b 	ldhu	r2,12(r16)
 401e038:	10801014 	ori	r2,r2,64
 401e03c:	8080030d 	sth	r2,12(r16)
 401e040:	00bfffc4 	movi	r2,-1
 401e044:	003fa806 	br	401dee8 <__alt_data_end+0xfc01dee8>
 401e048:	0027883a 	mov	r19,zero
 401e04c:	0011883a 	mov	r8,zero
 401e050:	0039883a 	mov	fp,zero
 401e054:	0025883a 	mov	r18,zero
 401e058:	90001f26 	beq	r18,zero,401e0d8 <__sfvwrite_r+0x2a8>
 401e05c:	40005a26 	beq	r8,zero,401e1c8 <__sfvwrite_r+0x398>
 401e060:	982d883a 	mov	r22,r19
 401e064:	94c0012e 	bgeu	r18,r19,401e06c <__sfvwrite_r+0x23c>
 401e068:	902d883a 	mov	r22,r18
 401e06c:	81000017 	ldw	r4,0(r16)
 401e070:	80800417 	ldw	r2,16(r16)
 401e074:	b02f883a 	mov	r23,r22
 401e078:	81c00517 	ldw	r7,20(r16)
 401e07c:	1100032e 	bgeu	r2,r4,401e08c <__sfvwrite_r+0x25c>
 401e080:	80c00217 	ldw	r3,8(r16)
 401e084:	38c7883a 	add	r3,r7,r3
 401e088:	1d801816 	blt	r3,r22,401e0ec <__sfvwrite_r+0x2bc>
 401e08c:	b1c03e16 	blt	r22,r7,401e188 <__sfvwrite_r+0x358>
 401e090:	80800917 	ldw	r2,36(r16)
 401e094:	81400717 	ldw	r5,28(r16)
 401e098:	e00d883a 	mov	r6,fp
 401e09c:	da000115 	stw	r8,4(sp)
 401e0a0:	a809883a 	mov	r4,r21
 401e0a4:	103ee83a 	callr	r2
 401e0a8:	102f883a 	mov	r23,r2
 401e0ac:	da000117 	ldw	r8,4(sp)
 401e0b0:	00bfe00e 	bge	zero,r2,401e034 <__alt_data_end+0xfc01e034>
 401e0b4:	9de7c83a 	sub	r19,r19,r23
 401e0b8:	98001f26 	beq	r19,zero,401e138 <__sfvwrite_r+0x308>
 401e0bc:	a0800217 	ldw	r2,8(r20)
 401e0c0:	e5f9883a 	add	fp,fp,r23
 401e0c4:	95e5c83a 	sub	r18,r18,r23
 401e0c8:	15efc83a 	sub	r23,r2,r23
 401e0cc:	a5c00215 	stw	r23,8(r20)
 401e0d0:	b83f8426 	beq	r23,zero,401dee4 <__alt_data_end+0xfc01dee4>
 401e0d4:	903fe11e 	bne	r18,zero,401e05c <__alt_data_end+0xfc01e05c>
 401e0d8:	8f000017 	ldw	fp,0(r17)
 401e0dc:	8c800117 	ldw	r18,4(r17)
 401e0e0:	0011883a 	mov	r8,zero
 401e0e4:	8c400204 	addi	r17,r17,8
 401e0e8:	003fdb06 	br	401e058 <__alt_data_end+0xfc01e058>
 401e0ec:	180d883a 	mov	r6,r3
 401e0f0:	e00b883a 	mov	r5,fp
 401e0f4:	da000115 	stw	r8,4(sp)
 401e0f8:	d8c00015 	stw	r3,0(sp)
 401e0fc:	401f0080 	call	401f008 <memmove>
 401e100:	d8c00017 	ldw	r3,0(sp)
 401e104:	80800017 	ldw	r2,0(r16)
 401e108:	800b883a 	mov	r5,r16
 401e10c:	a809883a 	mov	r4,r21
 401e110:	10c5883a 	add	r2,r2,r3
 401e114:	80800015 	stw	r2,0(r16)
 401e118:	d8c00015 	stw	r3,0(sp)
 401e11c:	401d5c00 	call	401d5c0 <_fflush_r>
 401e120:	d8c00017 	ldw	r3,0(sp)
 401e124:	da000117 	ldw	r8,4(sp)
 401e128:	103fc21e 	bne	r2,zero,401e034 <__alt_data_end+0xfc01e034>
 401e12c:	182f883a 	mov	r23,r3
 401e130:	9de7c83a 	sub	r19,r19,r23
 401e134:	983fe11e 	bne	r19,zero,401e0bc <__alt_data_end+0xfc01e0bc>
 401e138:	800b883a 	mov	r5,r16
 401e13c:	a809883a 	mov	r4,r21
 401e140:	401d5c00 	call	401d5c0 <_fflush_r>
 401e144:	103fbb1e 	bne	r2,zero,401e034 <__alt_data_end+0xfc01e034>
 401e148:	0011883a 	mov	r8,zero
 401e14c:	003fdb06 	br	401e0bc <__alt_data_end+0xfc01e0bc>
 401e150:	94c0012e 	bgeu	r18,r19,401e158 <__sfvwrite_r+0x328>
 401e154:	9027883a 	mov	r19,r18
 401e158:	980d883a 	mov	r6,r19
 401e15c:	e00b883a 	mov	r5,fp
 401e160:	401f0080 	call	401f008 <memmove>
 401e164:	80800217 	ldw	r2,8(r16)
 401e168:	80c00017 	ldw	r3,0(r16)
 401e16c:	14c5c83a 	sub	r2,r2,r19
 401e170:	1cc7883a 	add	r3,r3,r19
 401e174:	80800215 	stw	r2,8(r16)
 401e178:	80c00015 	stw	r3,0(r16)
 401e17c:	10004326 	beq	r2,zero,401e28c <__sfvwrite_r+0x45c>
 401e180:	9805883a 	mov	r2,r19
 401e184:	003f8306 	br	401df94 <__alt_data_end+0xfc01df94>
 401e188:	b00d883a 	mov	r6,r22
 401e18c:	e00b883a 	mov	r5,fp
 401e190:	da000115 	stw	r8,4(sp)
 401e194:	401f0080 	call	401f008 <memmove>
 401e198:	80800217 	ldw	r2,8(r16)
 401e19c:	80c00017 	ldw	r3,0(r16)
 401e1a0:	da000117 	ldw	r8,4(sp)
 401e1a4:	1585c83a 	sub	r2,r2,r22
 401e1a8:	1dad883a 	add	r22,r3,r22
 401e1ac:	80800215 	stw	r2,8(r16)
 401e1b0:	85800015 	stw	r22,0(r16)
 401e1b4:	003fbf06 	br	401e0b4 <__alt_data_end+0xfc01e0b4>
 401e1b8:	81000017 	ldw	r4,0(r16)
 401e1bc:	9027883a 	mov	r19,r18
 401e1c0:	902f883a 	mov	r23,r18
 401e1c4:	003f6906 	br	401df6c <__alt_data_end+0xfc01df6c>
 401e1c8:	900d883a 	mov	r6,r18
 401e1cc:	01400284 	movi	r5,10
 401e1d0:	e009883a 	mov	r4,fp
 401e1d4:	401ef240 	call	401ef24 <memchr>
 401e1d8:	10003e26 	beq	r2,zero,401e2d4 <__sfvwrite_r+0x4a4>
 401e1dc:	10800044 	addi	r2,r2,1
 401e1e0:	1727c83a 	sub	r19,r2,fp
 401e1e4:	02000044 	movi	r8,1
 401e1e8:	003f9d06 	br	401e060 <__alt_data_end+0xfc01e060>
 401e1ec:	80800517 	ldw	r2,20(r16)
 401e1f0:	81400417 	ldw	r5,16(r16)
 401e1f4:	81c00017 	ldw	r7,0(r16)
 401e1f8:	10a7883a 	add	r19,r2,r2
 401e1fc:	9885883a 	add	r2,r19,r2
 401e200:	1026d7fa 	srli	r19,r2,31
 401e204:	396dc83a 	sub	r22,r7,r5
 401e208:	b1000044 	addi	r4,r22,1
 401e20c:	9885883a 	add	r2,r19,r2
 401e210:	1027d07a 	srai	r19,r2,1
 401e214:	2485883a 	add	r2,r4,r18
 401e218:	980d883a 	mov	r6,r19
 401e21c:	9880022e 	bgeu	r19,r2,401e228 <__sfvwrite_r+0x3f8>
 401e220:	1027883a 	mov	r19,r2
 401e224:	100d883a 	mov	r6,r2
 401e228:	18c1000c 	andi	r3,r3,1024
 401e22c:	18001c26 	beq	r3,zero,401e2a0 <__sfvwrite_r+0x470>
 401e230:	300b883a 	mov	r5,r6
 401e234:	a809883a 	mov	r4,r21
 401e238:	401e7180 	call	401e718 <_malloc_r>
 401e23c:	102f883a 	mov	r23,r2
 401e240:	10002926 	beq	r2,zero,401e2e8 <__sfvwrite_r+0x4b8>
 401e244:	81400417 	ldw	r5,16(r16)
 401e248:	b00d883a 	mov	r6,r22
 401e24c:	1009883a 	mov	r4,r2
 401e250:	40191280 	call	4019128 <memcpy>
 401e254:	8080030b 	ldhu	r2,12(r16)
 401e258:	00fedfc4 	movi	r3,-1153
 401e25c:	10c4703a 	and	r2,r2,r3
 401e260:	10802014 	ori	r2,r2,128
 401e264:	8080030d 	sth	r2,12(r16)
 401e268:	bd89883a 	add	r4,r23,r22
 401e26c:	9d8fc83a 	sub	r7,r19,r22
 401e270:	85c00415 	stw	r23,16(r16)
 401e274:	84c00515 	stw	r19,20(r16)
 401e278:	81000015 	stw	r4,0(r16)
 401e27c:	9027883a 	mov	r19,r18
 401e280:	81c00215 	stw	r7,8(r16)
 401e284:	902f883a 	mov	r23,r18
 401e288:	003f3806 	br	401df6c <__alt_data_end+0xfc01df6c>
 401e28c:	800b883a 	mov	r5,r16
 401e290:	a809883a 	mov	r4,r21
 401e294:	401d5c00 	call	401d5c0 <_fflush_r>
 401e298:	103fb926 	beq	r2,zero,401e180 <__alt_data_end+0xfc01e180>
 401e29c:	003f6506 	br	401e034 <__alt_data_end+0xfc01e034>
 401e2a0:	a809883a 	mov	r4,r21
 401e2a4:	402021c0 	call	402021c <_realloc_r>
 401e2a8:	102f883a 	mov	r23,r2
 401e2ac:	103fee1e 	bne	r2,zero,401e268 <__alt_data_end+0xfc01e268>
 401e2b0:	81400417 	ldw	r5,16(r16)
 401e2b4:	a809883a 	mov	r4,r21
 401e2b8:	401db200 	call	401db20 <_free_r>
 401e2bc:	8080030b 	ldhu	r2,12(r16)
 401e2c0:	00ffdfc4 	movi	r3,-129
 401e2c4:	1884703a 	and	r2,r3,r2
 401e2c8:	00c00304 	movi	r3,12
 401e2cc:	a8c00015 	stw	r3,0(r21)
 401e2d0:	003f5906 	br	401e038 <__alt_data_end+0xfc01e038>
 401e2d4:	94c00044 	addi	r19,r18,1
 401e2d8:	02000044 	movi	r8,1
 401e2dc:	003f6006 	br	401e060 <__alt_data_end+0xfc01e060>
 401e2e0:	00bfffc4 	movi	r2,-1
 401e2e4:	003f0006 	br	401dee8 <__alt_data_end+0xfc01dee8>
 401e2e8:	00800304 	movi	r2,12
 401e2ec:	a8800015 	stw	r2,0(r21)
 401e2f0:	8080030b 	ldhu	r2,12(r16)
 401e2f4:	003f5006 	br	401e038 <__alt_data_end+0xfc01e038>

0401e2f8 <_fwalk>:
 401e2f8:	defff704 	addi	sp,sp,-36
 401e2fc:	dd000415 	stw	r20,16(sp)
 401e300:	dfc00815 	stw	ra,32(sp)
 401e304:	ddc00715 	stw	r23,28(sp)
 401e308:	dd800615 	stw	r22,24(sp)
 401e30c:	dd400515 	stw	r21,20(sp)
 401e310:	dcc00315 	stw	r19,12(sp)
 401e314:	dc800215 	stw	r18,8(sp)
 401e318:	dc400115 	stw	r17,4(sp)
 401e31c:	dc000015 	stw	r16,0(sp)
 401e320:	2500b804 	addi	r20,r4,736
 401e324:	a0002326 	beq	r20,zero,401e3b4 <_fwalk+0xbc>
 401e328:	282b883a 	mov	r21,r5
 401e32c:	002f883a 	mov	r23,zero
 401e330:	05800044 	movi	r22,1
 401e334:	04ffffc4 	movi	r19,-1
 401e338:	a4400117 	ldw	r17,4(r20)
 401e33c:	a4800217 	ldw	r18,8(r20)
 401e340:	8c7fffc4 	addi	r17,r17,-1
 401e344:	88000d16 	blt	r17,zero,401e37c <_fwalk+0x84>
 401e348:	94000304 	addi	r16,r18,12
 401e34c:	94800384 	addi	r18,r18,14
 401e350:	8080000b 	ldhu	r2,0(r16)
 401e354:	8c7fffc4 	addi	r17,r17,-1
 401e358:	813ffd04 	addi	r4,r16,-12
 401e35c:	b080042e 	bgeu	r22,r2,401e370 <_fwalk+0x78>
 401e360:	9080000f 	ldh	r2,0(r18)
 401e364:	14c00226 	beq	r2,r19,401e370 <_fwalk+0x78>
 401e368:	a83ee83a 	callr	r21
 401e36c:	b8aeb03a 	or	r23,r23,r2
 401e370:	84001a04 	addi	r16,r16,104
 401e374:	94801a04 	addi	r18,r18,104
 401e378:	8cfff51e 	bne	r17,r19,401e350 <__alt_data_end+0xfc01e350>
 401e37c:	a5000017 	ldw	r20,0(r20)
 401e380:	a03fed1e 	bne	r20,zero,401e338 <__alt_data_end+0xfc01e338>
 401e384:	b805883a 	mov	r2,r23
 401e388:	dfc00817 	ldw	ra,32(sp)
 401e38c:	ddc00717 	ldw	r23,28(sp)
 401e390:	dd800617 	ldw	r22,24(sp)
 401e394:	dd400517 	ldw	r21,20(sp)
 401e398:	dd000417 	ldw	r20,16(sp)
 401e39c:	dcc00317 	ldw	r19,12(sp)
 401e3a0:	dc800217 	ldw	r18,8(sp)
 401e3a4:	dc400117 	ldw	r17,4(sp)
 401e3a8:	dc000017 	ldw	r16,0(sp)
 401e3ac:	dec00904 	addi	sp,sp,36
 401e3b0:	f800283a 	ret
 401e3b4:	002f883a 	mov	r23,zero
 401e3b8:	003ff206 	br	401e384 <__alt_data_end+0xfc01e384>

0401e3bc <_fwalk_reent>:
 401e3bc:	defff704 	addi	sp,sp,-36
 401e3c0:	dd000415 	stw	r20,16(sp)
 401e3c4:	dfc00815 	stw	ra,32(sp)
 401e3c8:	ddc00715 	stw	r23,28(sp)
 401e3cc:	dd800615 	stw	r22,24(sp)
 401e3d0:	dd400515 	stw	r21,20(sp)
 401e3d4:	dcc00315 	stw	r19,12(sp)
 401e3d8:	dc800215 	stw	r18,8(sp)
 401e3dc:	dc400115 	stw	r17,4(sp)
 401e3e0:	dc000015 	stw	r16,0(sp)
 401e3e4:	2500b804 	addi	r20,r4,736
 401e3e8:	a0002326 	beq	r20,zero,401e478 <_fwalk_reent+0xbc>
 401e3ec:	282b883a 	mov	r21,r5
 401e3f0:	2027883a 	mov	r19,r4
 401e3f4:	002f883a 	mov	r23,zero
 401e3f8:	05800044 	movi	r22,1
 401e3fc:	04bfffc4 	movi	r18,-1
 401e400:	a4400117 	ldw	r17,4(r20)
 401e404:	a4000217 	ldw	r16,8(r20)
 401e408:	8c7fffc4 	addi	r17,r17,-1
 401e40c:	88000c16 	blt	r17,zero,401e440 <_fwalk_reent+0x84>
 401e410:	84000304 	addi	r16,r16,12
 401e414:	8080000b 	ldhu	r2,0(r16)
 401e418:	8c7fffc4 	addi	r17,r17,-1
 401e41c:	817ffd04 	addi	r5,r16,-12
 401e420:	b080052e 	bgeu	r22,r2,401e438 <_fwalk_reent+0x7c>
 401e424:	8080008f 	ldh	r2,2(r16)
 401e428:	9809883a 	mov	r4,r19
 401e42c:	14800226 	beq	r2,r18,401e438 <_fwalk_reent+0x7c>
 401e430:	a83ee83a 	callr	r21
 401e434:	b8aeb03a 	or	r23,r23,r2
 401e438:	84001a04 	addi	r16,r16,104
 401e43c:	8cbff51e 	bne	r17,r18,401e414 <__alt_data_end+0xfc01e414>
 401e440:	a5000017 	ldw	r20,0(r20)
 401e444:	a03fee1e 	bne	r20,zero,401e400 <__alt_data_end+0xfc01e400>
 401e448:	b805883a 	mov	r2,r23
 401e44c:	dfc00817 	ldw	ra,32(sp)
 401e450:	ddc00717 	ldw	r23,28(sp)
 401e454:	dd800617 	ldw	r22,24(sp)
 401e458:	dd400517 	ldw	r21,20(sp)
 401e45c:	dd000417 	ldw	r20,16(sp)
 401e460:	dcc00317 	ldw	r19,12(sp)
 401e464:	dc800217 	ldw	r18,8(sp)
 401e468:	dc400117 	ldw	r17,4(sp)
 401e46c:	dc000017 	ldw	r16,0(sp)
 401e470:	dec00904 	addi	sp,sp,36
 401e474:	f800283a 	ret
 401e478:	002f883a 	mov	r23,zero
 401e47c:	003ff206 	br	401e448 <__alt_data_end+0xfc01e448>

0401e480 <_setlocale_r>:
 401e480:	30001b26 	beq	r6,zero,401e4f0 <_setlocale_r+0x70>
 401e484:	014100f4 	movhi	r5,1027
 401e488:	defffe04 	addi	sp,sp,-8
 401e48c:	29707d04 	addi	r5,r5,-15884
 401e490:	3009883a 	mov	r4,r6
 401e494:	dc000015 	stw	r16,0(sp)
 401e498:	dfc00115 	stw	ra,4(sp)
 401e49c:	3021883a 	mov	r16,r6
 401e4a0:	40209840 	call	4020984 <strcmp>
 401e4a4:	1000061e 	bne	r2,zero,401e4c0 <_setlocale_r+0x40>
 401e4a8:	008100f4 	movhi	r2,1027
 401e4ac:	10b07c04 	addi	r2,r2,-15888
 401e4b0:	dfc00117 	ldw	ra,4(sp)
 401e4b4:	dc000017 	ldw	r16,0(sp)
 401e4b8:	dec00204 	addi	sp,sp,8
 401e4bc:	f800283a 	ret
 401e4c0:	014100f4 	movhi	r5,1027
 401e4c4:	29707c04 	addi	r5,r5,-15888
 401e4c8:	8009883a 	mov	r4,r16
 401e4cc:	40209840 	call	4020984 <strcmp>
 401e4d0:	103ff526 	beq	r2,zero,401e4a8 <__alt_data_end+0xfc01e4a8>
 401e4d4:	014100f4 	movhi	r5,1027
 401e4d8:	29706704 	addi	r5,r5,-15972
 401e4dc:	8009883a 	mov	r4,r16
 401e4e0:	40209840 	call	4020984 <strcmp>
 401e4e4:	103ff026 	beq	r2,zero,401e4a8 <__alt_data_end+0xfc01e4a8>
 401e4e8:	0005883a 	mov	r2,zero
 401e4ec:	003ff006 	br	401e4b0 <__alt_data_end+0xfc01e4b0>
 401e4f0:	008100f4 	movhi	r2,1027
 401e4f4:	10b07c04 	addi	r2,r2,-15888
 401e4f8:	f800283a 	ret

0401e4fc <__locale_charset>:
 401e4fc:	00810134 	movhi	r2,1028
 401e500:	10a9bb04 	addi	r2,r2,-22804
 401e504:	f800283a 	ret

0401e508 <__locale_mb_cur_max>:
 401e508:	00810134 	movhi	r2,1028
 401e50c:	10af8204 	addi	r2,r2,-16888
 401e510:	10800017 	ldw	r2,0(r2)
 401e514:	f800283a 	ret

0401e518 <__locale_msgcharset>:
 401e518:	00810134 	movhi	r2,1028
 401e51c:	10a9b304 	addi	r2,r2,-22836
 401e520:	f800283a 	ret

0401e524 <__locale_cjk_lang>:
 401e524:	0005883a 	mov	r2,zero
 401e528:	f800283a 	ret

0401e52c <_localeconv_r>:
 401e52c:	00810134 	movhi	r2,1028
 401e530:	10a9c304 	addi	r2,r2,-22772
 401e534:	f800283a 	ret

0401e538 <setlocale>:
 401e538:	00810134 	movhi	r2,1028
 401e53c:	10af8104 	addi	r2,r2,-16892
 401e540:	280d883a 	mov	r6,r5
 401e544:	200b883a 	mov	r5,r4
 401e548:	11000017 	ldw	r4,0(r2)
 401e54c:	401e4801 	jmpi	401e480 <_setlocale_r>

0401e550 <localeconv>:
 401e550:	00810134 	movhi	r2,1028
 401e554:	10a9c304 	addi	r2,r2,-22772
 401e558:	f800283a 	ret

0401e55c <__smakebuf_r>:
 401e55c:	2880030b 	ldhu	r2,12(r5)
 401e560:	10c0008c 	andi	r3,r2,2
 401e564:	1800411e 	bne	r3,zero,401e66c <__smakebuf_r+0x110>
 401e568:	deffec04 	addi	sp,sp,-80
 401e56c:	dc000f15 	stw	r16,60(sp)
 401e570:	2821883a 	mov	r16,r5
 401e574:	2940038f 	ldh	r5,14(r5)
 401e578:	dc401015 	stw	r17,64(sp)
 401e57c:	dfc01315 	stw	ra,76(sp)
 401e580:	dcc01215 	stw	r19,72(sp)
 401e584:	dc801115 	stw	r18,68(sp)
 401e588:	2023883a 	mov	r17,r4
 401e58c:	28001c16 	blt	r5,zero,401e600 <__smakebuf_r+0xa4>
 401e590:	d80d883a 	mov	r6,sp
 401e594:	40225f40 	call	40225f4 <_fstat_r>
 401e598:	10001816 	blt	r2,zero,401e5fc <__smakebuf_r+0xa0>
 401e59c:	d8800117 	ldw	r2,4(sp)
 401e5a0:	00e00014 	movui	r3,32768
 401e5a4:	10bc000c 	andi	r2,r2,61440
 401e5a8:	14c80020 	cmpeqi	r19,r2,8192
 401e5ac:	10c03726 	beq	r2,r3,401e68c <__smakebuf_r+0x130>
 401e5b0:	80c0030b 	ldhu	r3,12(r16)
 401e5b4:	18c20014 	ori	r3,r3,2048
 401e5b8:	80c0030d 	sth	r3,12(r16)
 401e5bc:	00c80004 	movi	r3,8192
 401e5c0:	10c0521e 	bne	r2,r3,401e70c <__smakebuf_r+0x1b0>
 401e5c4:	8140038f 	ldh	r5,14(r16)
 401e5c8:	8809883a 	mov	r4,r17
 401e5cc:	40226500 	call	4022650 <_isatty_r>
 401e5d0:	10004c26 	beq	r2,zero,401e704 <__smakebuf_r+0x1a8>
 401e5d4:	8080030b 	ldhu	r2,12(r16)
 401e5d8:	80c010c4 	addi	r3,r16,67
 401e5dc:	80c00015 	stw	r3,0(r16)
 401e5e0:	10800054 	ori	r2,r2,1
 401e5e4:	8080030d 	sth	r2,12(r16)
 401e5e8:	00800044 	movi	r2,1
 401e5ec:	80c00415 	stw	r3,16(r16)
 401e5f0:	80800515 	stw	r2,20(r16)
 401e5f4:	04810004 	movi	r18,1024
 401e5f8:	00000706 	br	401e618 <__smakebuf_r+0xbc>
 401e5fc:	8080030b 	ldhu	r2,12(r16)
 401e600:	10c0200c 	andi	r3,r2,128
 401e604:	18001f1e 	bne	r3,zero,401e684 <__smakebuf_r+0x128>
 401e608:	04810004 	movi	r18,1024
 401e60c:	10820014 	ori	r2,r2,2048
 401e610:	8080030d 	sth	r2,12(r16)
 401e614:	0027883a 	mov	r19,zero
 401e618:	900b883a 	mov	r5,r18
 401e61c:	8809883a 	mov	r4,r17
 401e620:	401e7180 	call	401e718 <_malloc_r>
 401e624:	10002c26 	beq	r2,zero,401e6d8 <__smakebuf_r+0x17c>
 401e628:	80c0030b 	ldhu	r3,12(r16)
 401e62c:	010100b4 	movhi	r4,1026
 401e630:	21359504 	addi	r4,r4,-10668
 401e634:	89000f15 	stw	r4,60(r17)
 401e638:	18c02014 	ori	r3,r3,128
 401e63c:	80c0030d 	sth	r3,12(r16)
 401e640:	80800015 	stw	r2,0(r16)
 401e644:	80800415 	stw	r2,16(r16)
 401e648:	84800515 	stw	r18,20(r16)
 401e64c:	98001a1e 	bne	r19,zero,401e6b8 <__smakebuf_r+0x15c>
 401e650:	dfc01317 	ldw	ra,76(sp)
 401e654:	dcc01217 	ldw	r19,72(sp)
 401e658:	dc801117 	ldw	r18,68(sp)
 401e65c:	dc401017 	ldw	r17,64(sp)
 401e660:	dc000f17 	ldw	r16,60(sp)
 401e664:	dec01404 	addi	sp,sp,80
 401e668:	f800283a 	ret
 401e66c:	288010c4 	addi	r2,r5,67
 401e670:	28800015 	stw	r2,0(r5)
 401e674:	28800415 	stw	r2,16(r5)
 401e678:	00800044 	movi	r2,1
 401e67c:	28800515 	stw	r2,20(r5)
 401e680:	f800283a 	ret
 401e684:	04801004 	movi	r18,64
 401e688:	003fe006 	br	401e60c <__alt_data_end+0xfc01e60c>
 401e68c:	81000a17 	ldw	r4,40(r16)
 401e690:	00c100b4 	movhi	r3,1026
 401e694:	18c24804 	addi	r3,r3,2336
 401e698:	20ffc51e 	bne	r4,r3,401e5b0 <__alt_data_end+0xfc01e5b0>
 401e69c:	8080030b 	ldhu	r2,12(r16)
 401e6a0:	04810004 	movi	r18,1024
 401e6a4:	84801315 	stw	r18,76(r16)
 401e6a8:	1484b03a 	or	r2,r2,r18
 401e6ac:	8080030d 	sth	r2,12(r16)
 401e6b0:	0027883a 	mov	r19,zero
 401e6b4:	003fd806 	br	401e618 <__alt_data_end+0xfc01e618>
 401e6b8:	8140038f 	ldh	r5,14(r16)
 401e6bc:	8809883a 	mov	r4,r17
 401e6c0:	40226500 	call	4022650 <_isatty_r>
 401e6c4:	103fe226 	beq	r2,zero,401e650 <__alt_data_end+0xfc01e650>
 401e6c8:	8080030b 	ldhu	r2,12(r16)
 401e6cc:	10800054 	ori	r2,r2,1
 401e6d0:	8080030d 	sth	r2,12(r16)
 401e6d4:	003fde06 	br	401e650 <__alt_data_end+0xfc01e650>
 401e6d8:	8080030b 	ldhu	r2,12(r16)
 401e6dc:	10c0800c 	andi	r3,r2,512
 401e6e0:	183fdb1e 	bne	r3,zero,401e650 <__alt_data_end+0xfc01e650>
 401e6e4:	10800094 	ori	r2,r2,2
 401e6e8:	80c010c4 	addi	r3,r16,67
 401e6ec:	8080030d 	sth	r2,12(r16)
 401e6f0:	00800044 	movi	r2,1
 401e6f4:	80c00015 	stw	r3,0(r16)
 401e6f8:	80c00415 	stw	r3,16(r16)
 401e6fc:	80800515 	stw	r2,20(r16)
 401e700:	003fd306 	br	401e650 <__alt_data_end+0xfc01e650>
 401e704:	04810004 	movi	r18,1024
 401e708:	003fc306 	br	401e618 <__alt_data_end+0xfc01e618>
 401e70c:	0027883a 	mov	r19,zero
 401e710:	04810004 	movi	r18,1024
 401e714:	003fc006 	br	401e618 <__alt_data_end+0xfc01e618>

0401e718 <_malloc_r>:
 401e718:	defff504 	addi	sp,sp,-44
 401e71c:	dc800315 	stw	r18,12(sp)
 401e720:	dfc00a15 	stw	ra,40(sp)
 401e724:	df000915 	stw	fp,36(sp)
 401e728:	ddc00815 	stw	r23,32(sp)
 401e72c:	dd800715 	stw	r22,28(sp)
 401e730:	dd400615 	stw	r21,24(sp)
 401e734:	dd000515 	stw	r20,20(sp)
 401e738:	dcc00415 	stw	r19,16(sp)
 401e73c:	dc400215 	stw	r17,8(sp)
 401e740:	dc000115 	stw	r16,4(sp)
 401e744:	288002c4 	addi	r2,r5,11
 401e748:	00c00584 	movi	r3,22
 401e74c:	2025883a 	mov	r18,r4
 401e750:	18807f2e 	bgeu	r3,r2,401e950 <_malloc_r+0x238>
 401e754:	047ffe04 	movi	r17,-8
 401e758:	1462703a 	and	r17,r2,r17
 401e75c:	8800a316 	blt	r17,zero,401e9ec <_malloc_r+0x2d4>
 401e760:	8940a236 	bltu	r17,r5,401e9ec <_malloc_r+0x2d4>
 401e764:	40265b00 	call	40265b0 <__malloc_lock>
 401e768:	00807dc4 	movi	r2,503
 401e76c:	1441e92e 	bgeu	r2,r17,401ef14 <_malloc_r+0x7fc>
 401e770:	8804d27a 	srli	r2,r17,9
 401e774:	1000a126 	beq	r2,zero,401e9fc <_malloc_r+0x2e4>
 401e778:	00c00104 	movi	r3,4
 401e77c:	18811e36 	bltu	r3,r2,401ebf8 <_malloc_r+0x4e0>
 401e780:	8804d1ba 	srli	r2,r17,6
 401e784:	12000e44 	addi	r8,r2,57
 401e788:	11c00e04 	addi	r7,r2,56
 401e78c:	4209883a 	add	r4,r8,r8
 401e790:	04c10134 	movhi	r19,1028
 401e794:	2109883a 	add	r4,r4,r4
 401e798:	9ce9d104 	addi	r19,r19,-22716
 401e79c:	2109883a 	add	r4,r4,r4
 401e7a0:	9909883a 	add	r4,r19,r4
 401e7a4:	24000117 	ldw	r16,4(r4)
 401e7a8:	213ffe04 	addi	r4,r4,-8
 401e7ac:	24009726 	beq	r4,r16,401ea0c <_malloc_r+0x2f4>
 401e7b0:	80800117 	ldw	r2,4(r16)
 401e7b4:	01bfff04 	movi	r6,-4
 401e7b8:	014003c4 	movi	r5,15
 401e7bc:	1184703a 	and	r2,r2,r6
 401e7c0:	1447c83a 	sub	r3,r2,r17
 401e7c4:	28c00716 	blt	r5,r3,401e7e4 <_malloc_r+0xcc>
 401e7c8:	1800920e 	bge	r3,zero,401ea14 <_malloc_r+0x2fc>
 401e7cc:	84000317 	ldw	r16,12(r16)
 401e7d0:	24008e26 	beq	r4,r16,401ea0c <_malloc_r+0x2f4>
 401e7d4:	80800117 	ldw	r2,4(r16)
 401e7d8:	1184703a 	and	r2,r2,r6
 401e7dc:	1447c83a 	sub	r3,r2,r17
 401e7e0:	28fff90e 	bge	r5,r3,401e7c8 <__alt_data_end+0xfc01e7c8>
 401e7e4:	3809883a 	mov	r4,r7
 401e7e8:	01810134 	movhi	r6,1028
 401e7ec:	9c000417 	ldw	r16,16(r19)
 401e7f0:	31a9d104 	addi	r6,r6,-22716
 401e7f4:	32000204 	addi	r8,r6,8
 401e7f8:	82013426 	beq	r16,r8,401eccc <_malloc_r+0x5b4>
 401e7fc:	80c00117 	ldw	r3,4(r16)
 401e800:	00bfff04 	movi	r2,-4
 401e804:	188e703a 	and	r7,r3,r2
 401e808:	3c45c83a 	sub	r2,r7,r17
 401e80c:	00c003c4 	movi	r3,15
 401e810:	18811f16 	blt	r3,r2,401ec90 <_malloc_r+0x578>
 401e814:	32000515 	stw	r8,20(r6)
 401e818:	32000415 	stw	r8,16(r6)
 401e81c:	10007f0e 	bge	r2,zero,401ea1c <_malloc_r+0x304>
 401e820:	00807fc4 	movi	r2,511
 401e824:	11c0fd36 	bltu	r2,r7,401ec1c <_malloc_r+0x504>
 401e828:	3806d0fa 	srli	r3,r7,3
 401e82c:	01c00044 	movi	r7,1
 401e830:	30800117 	ldw	r2,4(r6)
 401e834:	19400044 	addi	r5,r3,1
 401e838:	294b883a 	add	r5,r5,r5
 401e83c:	1807d0ba 	srai	r3,r3,2
 401e840:	294b883a 	add	r5,r5,r5
 401e844:	294b883a 	add	r5,r5,r5
 401e848:	298b883a 	add	r5,r5,r6
 401e84c:	38c6983a 	sll	r3,r7,r3
 401e850:	29c00017 	ldw	r7,0(r5)
 401e854:	2a7ffe04 	addi	r9,r5,-8
 401e858:	1886b03a 	or	r3,r3,r2
 401e85c:	82400315 	stw	r9,12(r16)
 401e860:	81c00215 	stw	r7,8(r16)
 401e864:	30c00115 	stw	r3,4(r6)
 401e868:	2c000015 	stw	r16,0(r5)
 401e86c:	3c000315 	stw	r16,12(r7)
 401e870:	2005d0ba 	srai	r2,r4,2
 401e874:	01400044 	movi	r5,1
 401e878:	288a983a 	sll	r5,r5,r2
 401e87c:	19406f36 	bltu	r3,r5,401ea3c <_malloc_r+0x324>
 401e880:	28c4703a 	and	r2,r5,r3
 401e884:	10000a1e 	bne	r2,zero,401e8b0 <_malloc_r+0x198>
 401e888:	00bfff04 	movi	r2,-4
 401e88c:	294b883a 	add	r5,r5,r5
 401e890:	2088703a 	and	r4,r4,r2
 401e894:	28c4703a 	and	r2,r5,r3
 401e898:	21000104 	addi	r4,r4,4
 401e89c:	1000041e 	bne	r2,zero,401e8b0 <_malloc_r+0x198>
 401e8a0:	294b883a 	add	r5,r5,r5
 401e8a4:	28c4703a 	and	r2,r5,r3
 401e8a8:	21000104 	addi	r4,r4,4
 401e8ac:	103ffc26 	beq	r2,zero,401e8a0 <__alt_data_end+0xfc01e8a0>
 401e8b0:	02bfff04 	movi	r10,-4
 401e8b4:	024003c4 	movi	r9,15
 401e8b8:	21800044 	addi	r6,r4,1
 401e8bc:	318d883a 	add	r6,r6,r6
 401e8c0:	318d883a 	add	r6,r6,r6
 401e8c4:	318d883a 	add	r6,r6,r6
 401e8c8:	998d883a 	add	r6,r19,r6
 401e8cc:	333ffe04 	addi	r12,r6,-8
 401e8d0:	2017883a 	mov	r11,r4
 401e8d4:	31800104 	addi	r6,r6,4
 401e8d8:	34000017 	ldw	r16,0(r6)
 401e8dc:	31fffd04 	addi	r7,r6,-12
 401e8e0:	81c0041e 	bne	r16,r7,401e8f4 <_malloc_r+0x1dc>
 401e8e4:	0000fb06 	br	401ecd4 <_malloc_r+0x5bc>
 401e8e8:	1801030e 	bge	r3,zero,401ecf8 <_malloc_r+0x5e0>
 401e8ec:	84000317 	ldw	r16,12(r16)
 401e8f0:	81c0f826 	beq	r16,r7,401ecd4 <_malloc_r+0x5bc>
 401e8f4:	80800117 	ldw	r2,4(r16)
 401e8f8:	1284703a 	and	r2,r2,r10
 401e8fc:	1447c83a 	sub	r3,r2,r17
 401e900:	48fff90e 	bge	r9,r3,401e8e8 <__alt_data_end+0xfc01e8e8>
 401e904:	80800317 	ldw	r2,12(r16)
 401e908:	81000217 	ldw	r4,8(r16)
 401e90c:	89400054 	ori	r5,r17,1
 401e910:	81400115 	stw	r5,4(r16)
 401e914:	20800315 	stw	r2,12(r4)
 401e918:	11000215 	stw	r4,8(r2)
 401e91c:	8463883a 	add	r17,r16,r17
 401e920:	9c400515 	stw	r17,20(r19)
 401e924:	9c400415 	stw	r17,16(r19)
 401e928:	18800054 	ori	r2,r3,1
 401e92c:	88800115 	stw	r2,4(r17)
 401e930:	8a000315 	stw	r8,12(r17)
 401e934:	8a000215 	stw	r8,8(r17)
 401e938:	88e3883a 	add	r17,r17,r3
 401e93c:	88c00015 	stw	r3,0(r17)
 401e940:	9009883a 	mov	r4,r18
 401e944:	40265d40 	call	40265d4 <__malloc_unlock>
 401e948:	80800204 	addi	r2,r16,8
 401e94c:	00001b06 	br	401e9bc <_malloc_r+0x2a4>
 401e950:	04400404 	movi	r17,16
 401e954:	89402536 	bltu	r17,r5,401e9ec <_malloc_r+0x2d4>
 401e958:	40265b00 	call	40265b0 <__malloc_lock>
 401e95c:	00800184 	movi	r2,6
 401e960:	01000084 	movi	r4,2
 401e964:	04c10134 	movhi	r19,1028
 401e968:	1085883a 	add	r2,r2,r2
 401e96c:	9ce9d104 	addi	r19,r19,-22716
 401e970:	1085883a 	add	r2,r2,r2
 401e974:	9885883a 	add	r2,r19,r2
 401e978:	14000117 	ldw	r16,4(r2)
 401e97c:	10fffe04 	addi	r3,r2,-8
 401e980:	80c0d926 	beq	r16,r3,401ece8 <_malloc_r+0x5d0>
 401e984:	80c00117 	ldw	r3,4(r16)
 401e988:	81000317 	ldw	r4,12(r16)
 401e98c:	00bfff04 	movi	r2,-4
 401e990:	1884703a 	and	r2,r3,r2
 401e994:	81400217 	ldw	r5,8(r16)
 401e998:	8085883a 	add	r2,r16,r2
 401e99c:	10c00117 	ldw	r3,4(r2)
 401e9a0:	29000315 	stw	r4,12(r5)
 401e9a4:	21400215 	stw	r5,8(r4)
 401e9a8:	18c00054 	ori	r3,r3,1
 401e9ac:	10c00115 	stw	r3,4(r2)
 401e9b0:	9009883a 	mov	r4,r18
 401e9b4:	40265d40 	call	40265d4 <__malloc_unlock>
 401e9b8:	80800204 	addi	r2,r16,8
 401e9bc:	dfc00a17 	ldw	ra,40(sp)
 401e9c0:	df000917 	ldw	fp,36(sp)
 401e9c4:	ddc00817 	ldw	r23,32(sp)
 401e9c8:	dd800717 	ldw	r22,28(sp)
 401e9cc:	dd400617 	ldw	r21,24(sp)
 401e9d0:	dd000517 	ldw	r20,20(sp)
 401e9d4:	dcc00417 	ldw	r19,16(sp)
 401e9d8:	dc800317 	ldw	r18,12(sp)
 401e9dc:	dc400217 	ldw	r17,8(sp)
 401e9e0:	dc000117 	ldw	r16,4(sp)
 401e9e4:	dec00b04 	addi	sp,sp,44
 401e9e8:	f800283a 	ret
 401e9ec:	00800304 	movi	r2,12
 401e9f0:	90800015 	stw	r2,0(r18)
 401e9f4:	0005883a 	mov	r2,zero
 401e9f8:	003ff006 	br	401e9bc <__alt_data_end+0xfc01e9bc>
 401e9fc:	01002004 	movi	r4,128
 401ea00:	02001004 	movi	r8,64
 401ea04:	01c00fc4 	movi	r7,63
 401ea08:	003f6106 	br	401e790 <__alt_data_end+0xfc01e790>
 401ea0c:	4009883a 	mov	r4,r8
 401ea10:	003f7506 	br	401e7e8 <__alt_data_end+0xfc01e7e8>
 401ea14:	81000317 	ldw	r4,12(r16)
 401ea18:	003fde06 	br	401e994 <__alt_data_end+0xfc01e994>
 401ea1c:	81c5883a 	add	r2,r16,r7
 401ea20:	11400117 	ldw	r5,4(r2)
 401ea24:	9009883a 	mov	r4,r18
 401ea28:	29400054 	ori	r5,r5,1
 401ea2c:	11400115 	stw	r5,4(r2)
 401ea30:	40265d40 	call	40265d4 <__malloc_unlock>
 401ea34:	80800204 	addi	r2,r16,8
 401ea38:	003fe006 	br	401e9bc <__alt_data_end+0xfc01e9bc>
 401ea3c:	9c000217 	ldw	r16,8(r19)
 401ea40:	00bfff04 	movi	r2,-4
 401ea44:	85800117 	ldw	r22,4(r16)
 401ea48:	b0ac703a 	and	r22,r22,r2
 401ea4c:	b4400336 	bltu	r22,r17,401ea5c <_malloc_r+0x344>
 401ea50:	b445c83a 	sub	r2,r22,r17
 401ea54:	00c003c4 	movi	r3,15
 401ea58:	18805d16 	blt	r3,r2,401ebd0 <_malloc_r+0x4b8>
 401ea5c:	05c10134 	movhi	r23,1028
 401ea60:	00810174 	movhi	r2,1029
 401ea64:	10ae1f04 	addi	r2,r2,-18308
 401ea68:	bdef8304 	addi	r23,r23,-16884
 401ea6c:	15400017 	ldw	r21,0(r2)
 401ea70:	b8c00017 	ldw	r3,0(r23)
 401ea74:	00bfffc4 	movi	r2,-1
 401ea78:	858d883a 	add	r6,r16,r22
 401ea7c:	8d6b883a 	add	r21,r17,r21
 401ea80:	1880ea26 	beq	r3,r2,401ee2c <_malloc_r+0x714>
 401ea84:	ad4403c4 	addi	r21,r21,4111
 401ea88:	00bc0004 	movi	r2,-4096
 401ea8c:	a8aa703a 	and	r21,r21,r2
 401ea90:	a80b883a 	mov	r5,r21
 401ea94:	9009883a 	mov	r4,r18
 401ea98:	d9800015 	stw	r6,0(sp)
 401ea9c:	40207f40 	call	40207f4 <_sbrk_r>
 401eaa0:	1029883a 	mov	r20,r2
 401eaa4:	00bfffc4 	movi	r2,-1
 401eaa8:	d9800017 	ldw	r6,0(sp)
 401eaac:	a080e826 	beq	r20,r2,401ee50 <_malloc_r+0x738>
 401eab0:	a180a636 	bltu	r20,r6,401ed4c <_malloc_r+0x634>
 401eab4:	07010174 	movhi	fp,1029
 401eab8:	e72e2804 	addi	fp,fp,-18272
 401eabc:	e0800017 	ldw	r2,0(fp)
 401eac0:	a887883a 	add	r3,r21,r2
 401eac4:	e0c00015 	stw	r3,0(fp)
 401eac8:	3500e626 	beq	r6,r20,401ee64 <_malloc_r+0x74c>
 401eacc:	b9000017 	ldw	r4,0(r23)
 401ead0:	00bfffc4 	movi	r2,-1
 401ead4:	2080ee26 	beq	r4,r2,401ee90 <_malloc_r+0x778>
 401ead8:	a185c83a 	sub	r2,r20,r6
 401eadc:	10c5883a 	add	r2,r2,r3
 401eae0:	e0800015 	stw	r2,0(fp)
 401eae4:	a0c001cc 	andi	r3,r20,7
 401eae8:	1800bc26 	beq	r3,zero,401eddc <_malloc_r+0x6c4>
 401eaec:	a0e9c83a 	sub	r20,r20,r3
 401eaf0:	00840204 	movi	r2,4104
 401eaf4:	a5000204 	addi	r20,r20,8
 401eaf8:	10c7c83a 	sub	r3,r2,r3
 401eafc:	a545883a 	add	r2,r20,r21
 401eb00:	1083ffcc 	andi	r2,r2,4095
 401eb04:	18abc83a 	sub	r21,r3,r2
 401eb08:	a80b883a 	mov	r5,r21
 401eb0c:	9009883a 	mov	r4,r18
 401eb10:	40207f40 	call	40207f4 <_sbrk_r>
 401eb14:	00ffffc4 	movi	r3,-1
 401eb18:	10c0e126 	beq	r2,r3,401eea0 <_malloc_r+0x788>
 401eb1c:	1505c83a 	sub	r2,r2,r20
 401eb20:	1545883a 	add	r2,r2,r21
 401eb24:	10800054 	ori	r2,r2,1
 401eb28:	e0c00017 	ldw	r3,0(fp)
 401eb2c:	9d000215 	stw	r20,8(r19)
 401eb30:	a0800115 	stw	r2,4(r20)
 401eb34:	a8c7883a 	add	r3,r21,r3
 401eb38:	e0c00015 	stw	r3,0(fp)
 401eb3c:	84c00e26 	beq	r16,r19,401eb78 <_malloc_r+0x460>
 401eb40:	018003c4 	movi	r6,15
 401eb44:	3580a72e 	bgeu	r6,r22,401ede4 <_malloc_r+0x6cc>
 401eb48:	81400117 	ldw	r5,4(r16)
 401eb4c:	013ffe04 	movi	r4,-8
 401eb50:	b0bffd04 	addi	r2,r22,-12
 401eb54:	1104703a 	and	r2,r2,r4
 401eb58:	2900004c 	andi	r4,r5,1
 401eb5c:	2088b03a 	or	r4,r4,r2
 401eb60:	81000115 	stw	r4,4(r16)
 401eb64:	01400144 	movi	r5,5
 401eb68:	8089883a 	add	r4,r16,r2
 401eb6c:	21400115 	stw	r5,4(r4)
 401eb70:	21400215 	stw	r5,8(r4)
 401eb74:	3080cd36 	bltu	r6,r2,401eeac <_malloc_r+0x794>
 401eb78:	00810174 	movhi	r2,1029
 401eb7c:	10ae1e04 	addi	r2,r2,-18312
 401eb80:	11000017 	ldw	r4,0(r2)
 401eb84:	20c0012e 	bgeu	r4,r3,401eb8c <_malloc_r+0x474>
 401eb88:	10c00015 	stw	r3,0(r2)
 401eb8c:	00810174 	movhi	r2,1029
 401eb90:	10ae1d04 	addi	r2,r2,-18316
 401eb94:	11000017 	ldw	r4,0(r2)
 401eb98:	9c000217 	ldw	r16,8(r19)
 401eb9c:	20c0012e 	bgeu	r4,r3,401eba4 <_malloc_r+0x48c>
 401eba0:	10c00015 	stw	r3,0(r2)
 401eba4:	80c00117 	ldw	r3,4(r16)
 401eba8:	00bfff04 	movi	r2,-4
 401ebac:	1886703a 	and	r3,r3,r2
 401ebb0:	1c45c83a 	sub	r2,r3,r17
 401ebb4:	1c400236 	bltu	r3,r17,401ebc0 <_malloc_r+0x4a8>
 401ebb8:	00c003c4 	movi	r3,15
 401ebbc:	18800416 	blt	r3,r2,401ebd0 <_malloc_r+0x4b8>
 401ebc0:	9009883a 	mov	r4,r18
 401ebc4:	40265d40 	call	40265d4 <__malloc_unlock>
 401ebc8:	0005883a 	mov	r2,zero
 401ebcc:	003f7b06 	br	401e9bc <__alt_data_end+0xfc01e9bc>
 401ebd0:	88c00054 	ori	r3,r17,1
 401ebd4:	80c00115 	stw	r3,4(r16)
 401ebd8:	8463883a 	add	r17,r16,r17
 401ebdc:	10800054 	ori	r2,r2,1
 401ebe0:	9c400215 	stw	r17,8(r19)
 401ebe4:	88800115 	stw	r2,4(r17)
 401ebe8:	9009883a 	mov	r4,r18
 401ebec:	40265d40 	call	40265d4 <__malloc_unlock>
 401ebf0:	80800204 	addi	r2,r16,8
 401ebf4:	003f7106 	br	401e9bc <__alt_data_end+0xfc01e9bc>
 401ebf8:	00c00504 	movi	r3,20
 401ebfc:	18804a2e 	bgeu	r3,r2,401ed28 <_malloc_r+0x610>
 401ec00:	00c01504 	movi	r3,84
 401ec04:	18806e36 	bltu	r3,r2,401edc0 <_malloc_r+0x6a8>
 401ec08:	8804d33a 	srli	r2,r17,12
 401ec0c:	12001bc4 	addi	r8,r2,111
 401ec10:	11c01b84 	addi	r7,r2,110
 401ec14:	4209883a 	add	r4,r8,r8
 401ec18:	003edd06 	br	401e790 <__alt_data_end+0xfc01e790>
 401ec1c:	3804d27a 	srli	r2,r7,9
 401ec20:	00c00104 	movi	r3,4
 401ec24:	1880442e 	bgeu	r3,r2,401ed38 <_malloc_r+0x620>
 401ec28:	00c00504 	movi	r3,20
 401ec2c:	18808136 	bltu	r3,r2,401ee34 <_malloc_r+0x71c>
 401ec30:	11401704 	addi	r5,r2,92
 401ec34:	10c016c4 	addi	r3,r2,91
 401ec38:	294b883a 	add	r5,r5,r5
 401ec3c:	294b883a 	add	r5,r5,r5
 401ec40:	294b883a 	add	r5,r5,r5
 401ec44:	994b883a 	add	r5,r19,r5
 401ec48:	28800017 	ldw	r2,0(r5)
 401ec4c:	01810134 	movhi	r6,1028
 401ec50:	297ffe04 	addi	r5,r5,-8
 401ec54:	31a9d104 	addi	r6,r6,-22716
 401ec58:	28806526 	beq	r5,r2,401edf0 <_malloc_r+0x6d8>
 401ec5c:	01bfff04 	movi	r6,-4
 401ec60:	10c00117 	ldw	r3,4(r2)
 401ec64:	1986703a 	and	r3,r3,r6
 401ec68:	38c0022e 	bgeu	r7,r3,401ec74 <_malloc_r+0x55c>
 401ec6c:	10800217 	ldw	r2,8(r2)
 401ec70:	28bffb1e 	bne	r5,r2,401ec60 <__alt_data_end+0xfc01ec60>
 401ec74:	11400317 	ldw	r5,12(r2)
 401ec78:	98c00117 	ldw	r3,4(r19)
 401ec7c:	81400315 	stw	r5,12(r16)
 401ec80:	80800215 	stw	r2,8(r16)
 401ec84:	2c000215 	stw	r16,8(r5)
 401ec88:	14000315 	stw	r16,12(r2)
 401ec8c:	003ef806 	br	401e870 <__alt_data_end+0xfc01e870>
 401ec90:	88c00054 	ori	r3,r17,1
 401ec94:	80c00115 	stw	r3,4(r16)
 401ec98:	8463883a 	add	r17,r16,r17
 401ec9c:	34400515 	stw	r17,20(r6)
 401eca0:	34400415 	stw	r17,16(r6)
 401eca4:	10c00054 	ori	r3,r2,1
 401eca8:	8a000315 	stw	r8,12(r17)
 401ecac:	8a000215 	stw	r8,8(r17)
 401ecb0:	88c00115 	stw	r3,4(r17)
 401ecb4:	88a3883a 	add	r17,r17,r2
 401ecb8:	88800015 	stw	r2,0(r17)
 401ecbc:	9009883a 	mov	r4,r18
 401ecc0:	40265d40 	call	40265d4 <__malloc_unlock>
 401ecc4:	80800204 	addi	r2,r16,8
 401ecc8:	003f3c06 	br	401e9bc <__alt_data_end+0xfc01e9bc>
 401eccc:	30c00117 	ldw	r3,4(r6)
 401ecd0:	003ee706 	br	401e870 <__alt_data_end+0xfc01e870>
 401ecd4:	5ac00044 	addi	r11,r11,1
 401ecd8:	588000cc 	andi	r2,r11,3
 401ecdc:	31800204 	addi	r6,r6,8
 401ece0:	103efd1e 	bne	r2,zero,401e8d8 <__alt_data_end+0xfc01e8d8>
 401ece4:	00002406 	br	401ed78 <_malloc_r+0x660>
 401ece8:	14000317 	ldw	r16,12(r2)
 401ecec:	143f251e 	bne	r2,r16,401e984 <__alt_data_end+0xfc01e984>
 401ecf0:	21000084 	addi	r4,r4,2
 401ecf4:	003ebc06 	br	401e7e8 <__alt_data_end+0xfc01e7e8>
 401ecf8:	8085883a 	add	r2,r16,r2
 401ecfc:	10c00117 	ldw	r3,4(r2)
 401ed00:	81000317 	ldw	r4,12(r16)
 401ed04:	81400217 	ldw	r5,8(r16)
 401ed08:	18c00054 	ori	r3,r3,1
 401ed0c:	10c00115 	stw	r3,4(r2)
 401ed10:	29000315 	stw	r4,12(r5)
 401ed14:	21400215 	stw	r5,8(r4)
 401ed18:	9009883a 	mov	r4,r18
 401ed1c:	40265d40 	call	40265d4 <__malloc_unlock>
 401ed20:	80800204 	addi	r2,r16,8
 401ed24:	003f2506 	br	401e9bc <__alt_data_end+0xfc01e9bc>
 401ed28:	12001704 	addi	r8,r2,92
 401ed2c:	11c016c4 	addi	r7,r2,91
 401ed30:	4209883a 	add	r4,r8,r8
 401ed34:	003e9606 	br	401e790 <__alt_data_end+0xfc01e790>
 401ed38:	3804d1ba 	srli	r2,r7,6
 401ed3c:	11400e44 	addi	r5,r2,57
 401ed40:	10c00e04 	addi	r3,r2,56
 401ed44:	294b883a 	add	r5,r5,r5
 401ed48:	003fbc06 	br	401ec3c <__alt_data_end+0xfc01ec3c>
 401ed4c:	84ff5926 	beq	r16,r19,401eab4 <__alt_data_end+0xfc01eab4>
 401ed50:	00810134 	movhi	r2,1028
 401ed54:	10a9d104 	addi	r2,r2,-22716
 401ed58:	14000217 	ldw	r16,8(r2)
 401ed5c:	00bfff04 	movi	r2,-4
 401ed60:	80c00117 	ldw	r3,4(r16)
 401ed64:	1886703a 	and	r3,r3,r2
 401ed68:	003f9106 	br	401ebb0 <__alt_data_end+0xfc01ebb0>
 401ed6c:	60800217 	ldw	r2,8(r12)
 401ed70:	213fffc4 	addi	r4,r4,-1
 401ed74:	1300651e 	bne	r2,r12,401ef0c <_malloc_r+0x7f4>
 401ed78:	208000cc 	andi	r2,r4,3
 401ed7c:	633ffe04 	addi	r12,r12,-8
 401ed80:	103ffa1e 	bne	r2,zero,401ed6c <__alt_data_end+0xfc01ed6c>
 401ed84:	98800117 	ldw	r2,4(r19)
 401ed88:	0146303a 	nor	r3,zero,r5
 401ed8c:	1884703a 	and	r2,r3,r2
 401ed90:	98800115 	stw	r2,4(r19)
 401ed94:	294b883a 	add	r5,r5,r5
 401ed98:	117f2836 	bltu	r2,r5,401ea3c <__alt_data_end+0xfc01ea3c>
 401ed9c:	283f2726 	beq	r5,zero,401ea3c <__alt_data_end+0xfc01ea3c>
 401eda0:	2886703a 	and	r3,r5,r2
 401eda4:	5809883a 	mov	r4,r11
 401eda8:	183ec31e 	bne	r3,zero,401e8b8 <__alt_data_end+0xfc01e8b8>
 401edac:	294b883a 	add	r5,r5,r5
 401edb0:	2886703a 	and	r3,r5,r2
 401edb4:	21000104 	addi	r4,r4,4
 401edb8:	183ffc26 	beq	r3,zero,401edac <__alt_data_end+0xfc01edac>
 401edbc:	003ebe06 	br	401e8b8 <__alt_data_end+0xfc01e8b8>
 401edc0:	00c05504 	movi	r3,340
 401edc4:	18801236 	bltu	r3,r2,401ee10 <_malloc_r+0x6f8>
 401edc8:	8804d3fa 	srli	r2,r17,15
 401edcc:	12001e04 	addi	r8,r2,120
 401edd0:	11c01dc4 	addi	r7,r2,119
 401edd4:	4209883a 	add	r4,r8,r8
 401edd8:	003e6d06 	br	401e790 <__alt_data_end+0xfc01e790>
 401eddc:	00c40004 	movi	r3,4096
 401ede0:	003f4606 	br	401eafc <__alt_data_end+0xfc01eafc>
 401ede4:	00800044 	movi	r2,1
 401ede8:	a0800115 	stw	r2,4(r20)
 401edec:	003f7406 	br	401ebc0 <__alt_data_end+0xfc01ebc0>
 401edf0:	1805d0ba 	srai	r2,r3,2
 401edf4:	01c00044 	movi	r7,1
 401edf8:	30c00117 	ldw	r3,4(r6)
 401edfc:	388e983a 	sll	r7,r7,r2
 401ee00:	2805883a 	mov	r2,r5
 401ee04:	38c6b03a 	or	r3,r7,r3
 401ee08:	30c00115 	stw	r3,4(r6)
 401ee0c:	003f9b06 	br	401ec7c <__alt_data_end+0xfc01ec7c>
 401ee10:	00c15504 	movi	r3,1364
 401ee14:	18801a36 	bltu	r3,r2,401ee80 <_malloc_r+0x768>
 401ee18:	8804d4ba 	srli	r2,r17,18
 401ee1c:	12001f44 	addi	r8,r2,125
 401ee20:	11c01f04 	addi	r7,r2,124
 401ee24:	4209883a 	add	r4,r8,r8
 401ee28:	003e5906 	br	401e790 <__alt_data_end+0xfc01e790>
 401ee2c:	ad400404 	addi	r21,r21,16
 401ee30:	003f1706 	br	401ea90 <__alt_data_end+0xfc01ea90>
 401ee34:	00c01504 	movi	r3,84
 401ee38:	18802336 	bltu	r3,r2,401eec8 <_malloc_r+0x7b0>
 401ee3c:	3804d33a 	srli	r2,r7,12
 401ee40:	11401bc4 	addi	r5,r2,111
 401ee44:	10c01b84 	addi	r3,r2,110
 401ee48:	294b883a 	add	r5,r5,r5
 401ee4c:	003f7b06 	br	401ec3c <__alt_data_end+0xfc01ec3c>
 401ee50:	9c000217 	ldw	r16,8(r19)
 401ee54:	00bfff04 	movi	r2,-4
 401ee58:	80c00117 	ldw	r3,4(r16)
 401ee5c:	1886703a 	and	r3,r3,r2
 401ee60:	003f5306 	br	401ebb0 <__alt_data_end+0xfc01ebb0>
 401ee64:	3083ffcc 	andi	r2,r6,4095
 401ee68:	103f181e 	bne	r2,zero,401eacc <__alt_data_end+0xfc01eacc>
 401ee6c:	99000217 	ldw	r4,8(r19)
 401ee70:	b545883a 	add	r2,r22,r21
 401ee74:	10800054 	ori	r2,r2,1
 401ee78:	20800115 	stw	r2,4(r4)
 401ee7c:	003f3e06 	br	401eb78 <__alt_data_end+0xfc01eb78>
 401ee80:	01003f84 	movi	r4,254
 401ee84:	02001fc4 	movi	r8,127
 401ee88:	01c01f84 	movi	r7,126
 401ee8c:	003e4006 	br	401e790 <__alt_data_end+0xfc01e790>
 401ee90:	00810134 	movhi	r2,1028
 401ee94:	10af8304 	addi	r2,r2,-16884
 401ee98:	15000015 	stw	r20,0(r2)
 401ee9c:	003f1106 	br	401eae4 <__alt_data_end+0xfc01eae4>
 401eea0:	00800044 	movi	r2,1
 401eea4:	002b883a 	mov	r21,zero
 401eea8:	003f1f06 	br	401eb28 <__alt_data_end+0xfc01eb28>
 401eeac:	81400204 	addi	r5,r16,8
 401eeb0:	9009883a 	mov	r4,r18
 401eeb4:	401db200 	call	401db20 <_free_r>
 401eeb8:	00810174 	movhi	r2,1029
 401eebc:	10ae2804 	addi	r2,r2,-18272
 401eec0:	10c00017 	ldw	r3,0(r2)
 401eec4:	003f2c06 	br	401eb78 <__alt_data_end+0xfc01eb78>
 401eec8:	00c05504 	movi	r3,340
 401eecc:	18800536 	bltu	r3,r2,401eee4 <_malloc_r+0x7cc>
 401eed0:	3804d3fa 	srli	r2,r7,15
 401eed4:	11401e04 	addi	r5,r2,120
 401eed8:	10c01dc4 	addi	r3,r2,119
 401eedc:	294b883a 	add	r5,r5,r5
 401eee0:	003f5606 	br	401ec3c <__alt_data_end+0xfc01ec3c>
 401eee4:	00c15504 	movi	r3,1364
 401eee8:	18800536 	bltu	r3,r2,401ef00 <_malloc_r+0x7e8>
 401eeec:	3804d4ba 	srli	r2,r7,18
 401eef0:	11401f44 	addi	r5,r2,125
 401eef4:	10c01f04 	addi	r3,r2,124
 401eef8:	294b883a 	add	r5,r5,r5
 401eefc:	003f4f06 	br	401ec3c <__alt_data_end+0xfc01ec3c>
 401ef00:	01403f84 	movi	r5,254
 401ef04:	00c01f84 	movi	r3,126
 401ef08:	003f4c06 	br	401ec3c <__alt_data_end+0xfc01ec3c>
 401ef0c:	98800117 	ldw	r2,4(r19)
 401ef10:	003fa006 	br	401ed94 <__alt_data_end+0xfc01ed94>
 401ef14:	8808d0fa 	srli	r4,r17,3
 401ef18:	20800044 	addi	r2,r4,1
 401ef1c:	1085883a 	add	r2,r2,r2
 401ef20:	003e9006 	br	401e964 <__alt_data_end+0xfc01e964>

0401ef24 <memchr>:
 401ef24:	208000cc 	andi	r2,r4,3
 401ef28:	280f883a 	mov	r7,r5
 401ef2c:	10003426 	beq	r2,zero,401f000 <memchr+0xdc>
 401ef30:	30bfffc4 	addi	r2,r6,-1
 401ef34:	30001a26 	beq	r6,zero,401efa0 <memchr+0x7c>
 401ef38:	20c00003 	ldbu	r3,0(r4)
 401ef3c:	29803fcc 	andi	r6,r5,255
 401ef40:	30c0051e 	bne	r6,r3,401ef58 <memchr+0x34>
 401ef44:	00001806 	br	401efa8 <memchr+0x84>
 401ef48:	10001526 	beq	r2,zero,401efa0 <memchr+0x7c>
 401ef4c:	20c00003 	ldbu	r3,0(r4)
 401ef50:	10bfffc4 	addi	r2,r2,-1
 401ef54:	30c01426 	beq	r6,r3,401efa8 <memchr+0x84>
 401ef58:	21000044 	addi	r4,r4,1
 401ef5c:	20c000cc 	andi	r3,r4,3
 401ef60:	183ff91e 	bne	r3,zero,401ef48 <__alt_data_end+0xfc01ef48>
 401ef64:	020000c4 	movi	r8,3
 401ef68:	40801136 	bltu	r8,r2,401efb0 <memchr+0x8c>
 401ef6c:	10000c26 	beq	r2,zero,401efa0 <memchr+0x7c>
 401ef70:	20c00003 	ldbu	r3,0(r4)
 401ef74:	29403fcc 	andi	r5,r5,255
 401ef78:	28c00b26 	beq	r5,r3,401efa8 <memchr+0x84>
 401ef7c:	20c00044 	addi	r3,r4,1
 401ef80:	39803fcc 	andi	r6,r7,255
 401ef84:	2089883a 	add	r4,r4,r2
 401ef88:	00000306 	br	401ef98 <memchr+0x74>
 401ef8c:	18c00044 	addi	r3,r3,1
 401ef90:	197fffc3 	ldbu	r5,-1(r3)
 401ef94:	31400526 	beq	r6,r5,401efac <memchr+0x88>
 401ef98:	1805883a 	mov	r2,r3
 401ef9c:	20fffb1e 	bne	r4,r3,401ef8c <__alt_data_end+0xfc01ef8c>
 401efa0:	0005883a 	mov	r2,zero
 401efa4:	f800283a 	ret
 401efa8:	2005883a 	mov	r2,r4
 401efac:	f800283a 	ret
 401efb0:	28c03fcc 	andi	r3,r5,255
 401efb4:	1812923a 	slli	r9,r3,8
 401efb8:	02ffbff4 	movhi	r11,65279
 401efbc:	02a02074 	movhi	r10,32897
 401efc0:	48d2b03a 	or	r9,r9,r3
 401efc4:	4806943a 	slli	r3,r9,16
 401efc8:	5affbfc4 	addi	r11,r11,-257
 401efcc:	52a02004 	addi	r10,r10,-32640
 401efd0:	48d2b03a 	or	r9,r9,r3
 401efd4:	20c00017 	ldw	r3,0(r4)
 401efd8:	48c6f03a 	xor	r3,r9,r3
 401efdc:	1acd883a 	add	r6,r3,r11
 401efe0:	00c6303a 	nor	r3,zero,r3
 401efe4:	30c6703a 	and	r3,r6,r3
 401efe8:	1a86703a 	and	r3,r3,r10
 401efec:	183fe01e 	bne	r3,zero,401ef70 <__alt_data_end+0xfc01ef70>
 401eff0:	10bfff04 	addi	r2,r2,-4
 401eff4:	21000104 	addi	r4,r4,4
 401eff8:	40bff636 	bltu	r8,r2,401efd4 <__alt_data_end+0xfc01efd4>
 401effc:	003fdb06 	br	401ef6c <__alt_data_end+0xfc01ef6c>
 401f000:	3005883a 	mov	r2,r6
 401f004:	003fd706 	br	401ef64 <__alt_data_end+0xfc01ef64>

0401f008 <memmove>:
 401f008:	2005883a 	mov	r2,r4
 401f00c:	29000b2e 	bgeu	r5,r4,401f03c <memmove+0x34>
 401f010:	298f883a 	add	r7,r5,r6
 401f014:	21c0092e 	bgeu	r4,r7,401f03c <memmove+0x34>
 401f018:	2187883a 	add	r3,r4,r6
 401f01c:	198bc83a 	sub	r5,r3,r6
 401f020:	30004826 	beq	r6,zero,401f144 <memmove+0x13c>
 401f024:	39ffffc4 	addi	r7,r7,-1
 401f028:	39000003 	ldbu	r4,0(r7)
 401f02c:	18ffffc4 	addi	r3,r3,-1
 401f030:	19000005 	stb	r4,0(r3)
 401f034:	28fffb1e 	bne	r5,r3,401f024 <__alt_data_end+0xfc01f024>
 401f038:	f800283a 	ret
 401f03c:	00c003c4 	movi	r3,15
 401f040:	1980412e 	bgeu	r3,r6,401f148 <memmove+0x140>
 401f044:	2886b03a 	or	r3,r5,r2
 401f048:	18c000cc 	andi	r3,r3,3
 401f04c:	1800401e 	bne	r3,zero,401f150 <memmove+0x148>
 401f050:	33fffc04 	addi	r15,r6,-16
 401f054:	781ed13a 	srli	r15,r15,4
 401f058:	28c00104 	addi	r3,r5,4
 401f05c:	13400104 	addi	r13,r2,4
 401f060:	781c913a 	slli	r14,r15,4
 401f064:	2b000204 	addi	r12,r5,8
 401f068:	12c00204 	addi	r11,r2,8
 401f06c:	73800504 	addi	r14,r14,20
 401f070:	2a800304 	addi	r10,r5,12
 401f074:	12400304 	addi	r9,r2,12
 401f078:	2b9d883a 	add	r14,r5,r14
 401f07c:	2811883a 	mov	r8,r5
 401f080:	100f883a 	mov	r7,r2
 401f084:	41000017 	ldw	r4,0(r8)
 401f088:	39c00404 	addi	r7,r7,16
 401f08c:	18c00404 	addi	r3,r3,16
 401f090:	393ffc15 	stw	r4,-16(r7)
 401f094:	193ffc17 	ldw	r4,-16(r3)
 401f098:	6b400404 	addi	r13,r13,16
 401f09c:	5ac00404 	addi	r11,r11,16
 401f0a0:	693ffc15 	stw	r4,-16(r13)
 401f0a4:	61000017 	ldw	r4,0(r12)
 401f0a8:	4a400404 	addi	r9,r9,16
 401f0ac:	42000404 	addi	r8,r8,16
 401f0b0:	593ffc15 	stw	r4,-16(r11)
 401f0b4:	51000017 	ldw	r4,0(r10)
 401f0b8:	63000404 	addi	r12,r12,16
 401f0bc:	52800404 	addi	r10,r10,16
 401f0c0:	493ffc15 	stw	r4,-16(r9)
 401f0c4:	1bbfef1e 	bne	r3,r14,401f084 <__alt_data_end+0xfc01f084>
 401f0c8:	79000044 	addi	r4,r15,1
 401f0cc:	2008913a 	slli	r4,r4,4
 401f0d0:	328003cc 	andi	r10,r6,15
 401f0d4:	02c000c4 	movi	r11,3
 401f0d8:	1107883a 	add	r3,r2,r4
 401f0dc:	290b883a 	add	r5,r5,r4
 401f0e0:	5a801e2e 	bgeu	r11,r10,401f15c <memmove+0x154>
 401f0e4:	1813883a 	mov	r9,r3
 401f0e8:	2811883a 	mov	r8,r5
 401f0ec:	500f883a 	mov	r7,r10
 401f0f0:	41000017 	ldw	r4,0(r8)
 401f0f4:	4a400104 	addi	r9,r9,4
 401f0f8:	39ffff04 	addi	r7,r7,-4
 401f0fc:	493fff15 	stw	r4,-4(r9)
 401f100:	42000104 	addi	r8,r8,4
 401f104:	59fffa36 	bltu	r11,r7,401f0f0 <__alt_data_end+0xfc01f0f0>
 401f108:	513fff04 	addi	r4,r10,-4
 401f10c:	2008d0ba 	srli	r4,r4,2
 401f110:	318000cc 	andi	r6,r6,3
 401f114:	21000044 	addi	r4,r4,1
 401f118:	2109883a 	add	r4,r4,r4
 401f11c:	2109883a 	add	r4,r4,r4
 401f120:	1907883a 	add	r3,r3,r4
 401f124:	290b883a 	add	r5,r5,r4
 401f128:	30000b26 	beq	r6,zero,401f158 <memmove+0x150>
 401f12c:	198d883a 	add	r6,r3,r6
 401f130:	29c00003 	ldbu	r7,0(r5)
 401f134:	18c00044 	addi	r3,r3,1
 401f138:	29400044 	addi	r5,r5,1
 401f13c:	19ffffc5 	stb	r7,-1(r3)
 401f140:	19bffb1e 	bne	r3,r6,401f130 <__alt_data_end+0xfc01f130>
 401f144:	f800283a 	ret
 401f148:	1007883a 	mov	r3,r2
 401f14c:	003ff606 	br	401f128 <__alt_data_end+0xfc01f128>
 401f150:	1007883a 	mov	r3,r2
 401f154:	003ff506 	br	401f12c <__alt_data_end+0xfc01f12c>
 401f158:	f800283a 	ret
 401f15c:	500d883a 	mov	r6,r10
 401f160:	003ff106 	br	401f128 <__alt_data_end+0xfc01f128>

0401f164 <_Balloc>:
 401f164:	20801317 	ldw	r2,76(r4)
 401f168:	defffc04 	addi	sp,sp,-16
 401f16c:	dc400115 	stw	r17,4(sp)
 401f170:	dc000015 	stw	r16,0(sp)
 401f174:	dfc00315 	stw	ra,12(sp)
 401f178:	dc800215 	stw	r18,8(sp)
 401f17c:	2023883a 	mov	r17,r4
 401f180:	2821883a 	mov	r16,r5
 401f184:	10000f26 	beq	r2,zero,401f1c4 <_Balloc+0x60>
 401f188:	8407883a 	add	r3,r16,r16
 401f18c:	18c7883a 	add	r3,r3,r3
 401f190:	10c7883a 	add	r3,r2,r3
 401f194:	18800017 	ldw	r2,0(r3)
 401f198:	10001126 	beq	r2,zero,401f1e0 <_Balloc+0x7c>
 401f19c:	11000017 	ldw	r4,0(r2)
 401f1a0:	19000015 	stw	r4,0(r3)
 401f1a4:	10000415 	stw	zero,16(r2)
 401f1a8:	10000315 	stw	zero,12(r2)
 401f1ac:	dfc00317 	ldw	ra,12(sp)
 401f1b0:	dc800217 	ldw	r18,8(sp)
 401f1b4:	dc400117 	ldw	r17,4(sp)
 401f1b8:	dc000017 	ldw	r16,0(sp)
 401f1bc:	dec00404 	addi	sp,sp,16
 401f1c0:	f800283a 	ret
 401f1c4:	01800844 	movi	r6,33
 401f1c8:	01400104 	movi	r5,4
 401f1cc:	402220c0 	call	402220c <_calloc_r>
 401f1d0:	88801315 	stw	r2,76(r17)
 401f1d4:	103fec1e 	bne	r2,zero,401f188 <__alt_data_end+0xfc01f188>
 401f1d8:	0005883a 	mov	r2,zero
 401f1dc:	003ff306 	br	401f1ac <__alt_data_end+0xfc01f1ac>
 401f1e0:	01400044 	movi	r5,1
 401f1e4:	2c24983a 	sll	r18,r5,r16
 401f1e8:	8809883a 	mov	r4,r17
 401f1ec:	91800144 	addi	r6,r18,5
 401f1f0:	318d883a 	add	r6,r6,r6
 401f1f4:	318d883a 	add	r6,r6,r6
 401f1f8:	402220c0 	call	402220c <_calloc_r>
 401f1fc:	103ff626 	beq	r2,zero,401f1d8 <__alt_data_end+0xfc01f1d8>
 401f200:	14000115 	stw	r16,4(r2)
 401f204:	14800215 	stw	r18,8(r2)
 401f208:	003fe606 	br	401f1a4 <__alt_data_end+0xfc01f1a4>

0401f20c <_Bfree>:
 401f20c:	28000826 	beq	r5,zero,401f230 <_Bfree+0x24>
 401f210:	28c00117 	ldw	r3,4(r5)
 401f214:	20801317 	ldw	r2,76(r4)
 401f218:	18c7883a 	add	r3,r3,r3
 401f21c:	18c7883a 	add	r3,r3,r3
 401f220:	10c5883a 	add	r2,r2,r3
 401f224:	10c00017 	ldw	r3,0(r2)
 401f228:	28c00015 	stw	r3,0(r5)
 401f22c:	11400015 	stw	r5,0(r2)
 401f230:	f800283a 	ret

0401f234 <__multadd>:
 401f234:	defff704 	addi	sp,sp,-36
 401f238:	dc800215 	stw	r18,8(sp)
 401f23c:	2c800417 	ldw	r18,16(r5)
 401f240:	dd800615 	stw	r22,24(sp)
 401f244:	dd400515 	stw	r21,20(sp)
 401f248:	dd000415 	stw	r20,16(sp)
 401f24c:	dcc00315 	stw	r19,12(sp)
 401f250:	dc400115 	stw	r17,4(sp)
 401f254:	dc000015 	stw	r16,0(sp)
 401f258:	dfc00815 	stw	ra,32(sp)
 401f25c:	ddc00715 	stw	r23,28(sp)
 401f260:	2827883a 	mov	r19,r5
 401f264:	2029883a 	mov	r20,r4
 401f268:	3023883a 	mov	r17,r6
 401f26c:	3821883a 	mov	r16,r7
 401f270:	2d400504 	addi	r21,r5,20
 401f274:	002d883a 	mov	r22,zero
 401f278:	adc00017 	ldw	r23,0(r21)
 401f27c:	880b883a 	mov	r5,r17
 401f280:	ad400104 	addi	r21,r21,4
 401f284:	b93fffcc 	andi	r4,r23,65535
 401f288:	40191000 	call	4019100 <__mulsi3>
 401f28c:	b808d43a 	srli	r4,r23,16
 401f290:	880b883a 	mov	r5,r17
 401f294:	1421883a 	add	r16,r2,r16
 401f298:	40191000 	call	4019100 <__mulsi3>
 401f29c:	800ed43a 	srli	r7,r16,16
 401f2a0:	80ffffcc 	andi	r3,r16,65535
 401f2a4:	b5800044 	addi	r22,r22,1
 401f2a8:	11c5883a 	add	r2,r2,r7
 401f2ac:	100e943a 	slli	r7,r2,16
 401f2b0:	1020d43a 	srli	r16,r2,16
 401f2b4:	38c7883a 	add	r3,r7,r3
 401f2b8:	a8ffff15 	stw	r3,-4(r21)
 401f2bc:	b4bfee16 	blt	r22,r18,401f278 <__alt_data_end+0xfc01f278>
 401f2c0:	80000926 	beq	r16,zero,401f2e8 <__multadd+0xb4>
 401f2c4:	98800217 	ldw	r2,8(r19)
 401f2c8:	9080130e 	bge	r18,r2,401f318 <__multadd+0xe4>
 401f2cc:	90800144 	addi	r2,r18,5
 401f2d0:	1085883a 	add	r2,r2,r2
 401f2d4:	1085883a 	add	r2,r2,r2
 401f2d8:	9885883a 	add	r2,r19,r2
 401f2dc:	14000015 	stw	r16,0(r2)
 401f2e0:	94800044 	addi	r18,r18,1
 401f2e4:	9c800415 	stw	r18,16(r19)
 401f2e8:	9805883a 	mov	r2,r19
 401f2ec:	dfc00817 	ldw	ra,32(sp)
 401f2f0:	ddc00717 	ldw	r23,28(sp)
 401f2f4:	dd800617 	ldw	r22,24(sp)
 401f2f8:	dd400517 	ldw	r21,20(sp)
 401f2fc:	dd000417 	ldw	r20,16(sp)
 401f300:	dcc00317 	ldw	r19,12(sp)
 401f304:	dc800217 	ldw	r18,8(sp)
 401f308:	dc400117 	ldw	r17,4(sp)
 401f30c:	dc000017 	ldw	r16,0(sp)
 401f310:	dec00904 	addi	sp,sp,36
 401f314:	f800283a 	ret
 401f318:	99400117 	ldw	r5,4(r19)
 401f31c:	a009883a 	mov	r4,r20
 401f320:	29400044 	addi	r5,r5,1
 401f324:	401f1640 	call	401f164 <_Balloc>
 401f328:	99800417 	ldw	r6,16(r19)
 401f32c:	99400304 	addi	r5,r19,12
 401f330:	11000304 	addi	r4,r2,12
 401f334:	31800084 	addi	r6,r6,2
 401f338:	318d883a 	add	r6,r6,r6
 401f33c:	318d883a 	add	r6,r6,r6
 401f340:	1023883a 	mov	r17,r2
 401f344:	40191280 	call	4019128 <memcpy>
 401f348:	98000a26 	beq	r19,zero,401f374 <__multadd+0x140>
 401f34c:	98c00117 	ldw	r3,4(r19)
 401f350:	a0801317 	ldw	r2,76(r20)
 401f354:	18c7883a 	add	r3,r3,r3
 401f358:	18c7883a 	add	r3,r3,r3
 401f35c:	10c5883a 	add	r2,r2,r3
 401f360:	10c00017 	ldw	r3,0(r2)
 401f364:	98c00015 	stw	r3,0(r19)
 401f368:	14c00015 	stw	r19,0(r2)
 401f36c:	8827883a 	mov	r19,r17
 401f370:	003fd606 	br	401f2cc <__alt_data_end+0xfc01f2cc>
 401f374:	8827883a 	mov	r19,r17
 401f378:	003fd406 	br	401f2cc <__alt_data_end+0xfc01f2cc>

0401f37c <__s2b>:
 401f37c:	defff904 	addi	sp,sp,-28
 401f380:	dc400115 	stw	r17,4(sp)
 401f384:	dc000015 	stw	r16,0(sp)
 401f388:	2023883a 	mov	r17,r4
 401f38c:	2821883a 	mov	r16,r5
 401f390:	39000204 	addi	r4,r7,8
 401f394:	01400244 	movi	r5,9
 401f398:	dcc00315 	stw	r19,12(sp)
 401f39c:	dc800215 	stw	r18,8(sp)
 401f3a0:	dfc00615 	stw	ra,24(sp)
 401f3a4:	dd400515 	stw	r21,20(sp)
 401f3a8:	dd000415 	stw	r20,16(sp)
 401f3ac:	3825883a 	mov	r18,r7
 401f3b0:	3027883a 	mov	r19,r6
 401f3b4:	4018f4c0 	call	4018f4c <__divsi3>
 401f3b8:	00c00044 	movi	r3,1
 401f3bc:	000b883a 	mov	r5,zero
 401f3c0:	1880030e 	bge	r3,r2,401f3d0 <__s2b+0x54>
 401f3c4:	18c7883a 	add	r3,r3,r3
 401f3c8:	29400044 	addi	r5,r5,1
 401f3cc:	18bffd16 	blt	r3,r2,401f3c4 <__alt_data_end+0xfc01f3c4>
 401f3d0:	8809883a 	mov	r4,r17
 401f3d4:	401f1640 	call	401f164 <_Balloc>
 401f3d8:	d8c00717 	ldw	r3,28(sp)
 401f3dc:	10c00515 	stw	r3,20(r2)
 401f3e0:	00c00044 	movi	r3,1
 401f3e4:	10c00415 	stw	r3,16(r2)
 401f3e8:	00c00244 	movi	r3,9
 401f3ec:	1cc0210e 	bge	r3,r19,401f474 <__s2b+0xf8>
 401f3f0:	80eb883a 	add	r21,r16,r3
 401f3f4:	a829883a 	mov	r20,r21
 401f3f8:	84e1883a 	add	r16,r16,r19
 401f3fc:	a1c00007 	ldb	r7,0(r20)
 401f400:	01800284 	movi	r6,10
 401f404:	a5000044 	addi	r20,r20,1
 401f408:	100b883a 	mov	r5,r2
 401f40c:	39fff404 	addi	r7,r7,-48
 401f410:	8809883a 	mov	r4,r17
 401f414:	401f2340 	call	401f234 <__multadd>
 401f418:	a43ff81e 	bne	r20,r16,401f3fc <__alt_data_end+0xfc01f3fc>
 401f41c:	ace1883a 	add	r16,r21,r19
 401f420:	843ffe04 	addi	r16,r16,-8
 401f424:	9c800a0e 	bge	r19,r18,401f450 <__s2b+0xd4>
 401f428:	94e5c83a 	sub	r18,r18,r19
 401f42c:	84a5883a 	add	r18,r16,r18
 401f430:	81c00007 	ldb	r7,0(r16)
 401f434:	01800284 	movi	r6,10
 401f438:	84000044 	addi	r16,r16,1
 401f43c:	100b883a 	mov	r5,r2
 401f440:	39fff404 	addi	r7,r7,-48
 401f444:	8809883a 	mov	r4,r17
 401f448:	401f2340 	call	401f234 <__multadd>
 401f44c:	84bff81e 	bne	r16,r18,401f430 <__alt_data_end+0xfc01f430>
 401f450:	dfc00617 	ldw	ra,24(sp)
 401f454:	dd400517 	ldw	r21,20(sp)
 401f458:	dd000417 	ldw	r20,16(sp)
 401f45c:	dcc00317 	ldw	r19,12(sp)
 401f460:	dc800217 	ldw	r18,8(sp)
 401f464:	dc400117 	ldw	r17,4(sp)
 401f468:	dc000017 	ldw	r16,0(sp)
 401f46c:	dec00704 	addi	sp,sp,28
 401f470:	f800283a 	ret
 401f474:	84000284 	addi	r16,r16,10
 401f478:	1827883a 	mov	r19,r3
 401f47c:	003fe906 	br	401f424 <__alt_data_end+0xfc01f424>

0401f480 <__hi0bits>:
 401f480:	20bfffec 	andhi	r2,r4,65535
 401f484:	1000141e 	bne	r2,zero,401f4d8 <__hi0bits+0x58>
 401f488:	2008943a 	slli	r4,r4,16
 401f48c:	00800404 	movi	r2,16
 401f490:	20ffc02c 	andhi	r3,r4,65280
 401f494:	1800021e 	bne	r3,zero,401f4a0 <__hi0bits+0x20>
 401f498:	2008923a 	slli	r4,r4,8
 401f49c:	10800204 	addi	r2,r2,8
 401f4a0:	20fc002c 	andhi	r3,r4,61440
 401f4a4:	1800021e 	bne	r3,zero,401f4b0 <__hi0bits+0x30>
 401f4a8:	2008913a 	slli	r4,r4,4
 401f4ac:	10800104 	addi	r2,r2,4
 401f4b0:	20f0002c 	andhi	r3,r4,49152
 401f4b4:	1800031e 	bne	r3,zero,401f4c4 <__hi0bits+0x44>
 401f4b8:	2109883a 	add	r4,r4,r4
 401f4bc:	10800084 	addi	r2,r2,2
 401f4c0:	2109883a 	add	r4,r4,r4
 401f4c4:	20000316 	blt	r4,zero,401f4d4 <__hi0bits+0x54>
 401f4c8:	2110002c 	andhi	r4,r4,16384
 401f4cc:	2000041e 	bne	r4,zero,401f4e0 <__hi0bits+0x60>
 401f4d0:	00800804 	movi	r2,32
 401f4d4:	f800283a 	ret
 401f4d8:	0005883a 	mov	r2,zero
 401f4dc:	003fec06 	br	401f490 <__alt_data_end+0xfc01f490>
 401f4e0:	10800044 	addi	r2,r2,1
 401f4e4:	f800283a 	ret

0401f4e8 <__lo0bits>:
 401f4e8:	20c00017 	ldw	r3,0(r4)
 401f4ec:	188001cc 	andi	r2,r3,7
 401f4f0:	10000826 	beq	r2,zero,401f514 <__lo0bits+0x2c>
 401f4f4:	1880004c 	andi	r2,r3,1
 401f4f8:	1000211e 	bne	r2,zero,401f580 <__lo0bits+0x98>
 401f4fc:	1880008c 	andi	r2,r3,2
 401f500:	1000211e 	bne	r2,zero,401f588 <__lo0bits+0xa0>
 401f504:	1806d0ba 	srli	r3,r3,2
 401f508:	00800084 	movi	r2,2
 401f50c:	20c00015 	stw	r3,0(r4)
 401f510:	f800283a 	ret
 401f514:	18bfffcc 	andi	r2,r3,65535
 401f518:	10001326 	beq	r2,zero,401f568 <__lo0bits+0x80>
 401f51c:	0005883a 	mov	r2,zero
 401f520:	19403fcc 	andi	r5,r3,255
 401f524:	2800021e 	bne	r5,zero,401f530 <__lo0bits+0x48>
 401f528:	1806d23a 	srli	r3,r3,8
 401f52c:	10800204 	addi	r2,r2,8
 401f530:	194003cc 	andi	r5,r3,15
 401f534:	2800021e 	bne	r5,zero,401f540 <__lo0bits+0x58>
 401f538:	1806d13a 	srli	r3,r3,4
 401f53c:	10800104 	addi	r2,r2,4
 401f540:	194000cc 	andi	r5,r3,3
 401f544:	2800021e 	bne	r5,zero,401f550 <__lo0bits+0x68>
 401f548:	1806d0ba 	srli	r3,r3,2
 401f54c:	10800084 	addi	r2,r2,2
 401f550:	1940004c 	andi	r5,r3,1
 401f554:	2800081e 	bne	r5,zero,401f578 <__lo0bits+0x90>
 401f558:	1806d07a 	srli	r3,r3,1
 401f55c:	1800051e 	bne	r3,zero,401f574 <__lo0bits+0x8c>
 401f560:	00800804 	movi	r2,32
 401f564:	f800283a 	ret
 401f568:	1806d43a 	srli	r3,r3,16
 401f56c:	00800404 	movi	r2,16
 401f570:	003feb06 	br	401f520 <__alt_data_end+0xfc01f520>
 401f574:	10800044 	addi	r2,r2,1
 401f578:	20c00015 	stw	r3,0(r4)
 401f57c:	f800283a 	ret
 401f580:	0005883a 	mov	r2,zero
 401f584:	f800283a 	ret
 401f588:	1806d07a 	srli	r3,r3,1
 401f58c:	00800044 	movi	r2,1
 401f590:	20c00015 	stw	r3,0(r4)
 401f594:	f800283a 	ret

0401f598 <__i2b>:
 401f598:	defffd04 	addi	sp,sp,-12
 401f59c:	dc000015 	stw	r16,0(sp)
 401f5a0:	04000044 	movi	r16,1
 401f5a4:	dc400115 	stw	r17,4(sp)
 401f5a8:	2823883a 	mov	r17,r5
 401f5ac:	800b883a 	mov	r5,r16
 401f5b0:	dfc00215 	stw	ra,8(sp)
 401f5b4:	401f1640 	call	401f164 <_Balloc>
 401f5b8:	14400515 	stw	r17,20(r2)
 401f5bc:	14000415 	stw	r16,16(r2)
 401f5c0:	dfc00217 	ldw	ra,8(sp)
 401f5c4:	dc400117 	ldw	r17,4(sp)
 401f5c8:	dc000017 	ldw	r16,0(sp)
 401f5cc:	dec00304 	addi	sp,sp,12
 401f5d0:	f800283a 	ret

0401f5d4 <__multiply>:
 401f5d4:	deffef04 	addi	sp,sp,-68
 401f5d8:	dc400815 	stw	r17,32(sp)
 401f5dc:	dc000715 	stw	r16,28(sp)
 401f5e0:	34400417 	ldw	r17,16(r6)
 401f5e4:	2c000417 	ldw	r16,16(r5)
 401f5e8:	dd800d15 	stw	r22,52(sp)
 401f5ec:	dc800915 	stw	r18,36(sp)
 401f5f0:	dfc01015 	stw	ra,64(sp)
 401f5f4:	df000f15 	stw	fp,60(sp)
 401f5f8:	ddc00e15 	stw	r23,56(sp)
 401f5fc:	dd400c15 	stw	r21,48(sp)
 401f600:	dd000b15 	stw	r20,44(sp)
 401f604:	dcc00a15 	stw	r19,40(sp)
 401f608:	2825883a 	mov	r18,r5
 401f60c:	302d883a 	mov	r22,r6
 401f610:	8440050e 	bge	r16,r17,401f628 <__multiply+0x54>
 401f614:	8007883a 	mov	r3,r16
 401f618:	3025883a 	mov	r18,r6
 401f61c:	8821883a 	mov	r16,r17
 401f620:	282d883a 	mov	r22,r5
 401f624:	1823883a 	mov	r17,r3
 401f628:	90800217 	ldw	r2,8(r18)
 401f62c:	8447883a 	add	r3,r16,r17
 401f630:	d8c00215 	stw	r3,8(sp)
 401f634:	91400117 	ldw	r5,4(r18)
 401f638:	10c0010e 	bge	r2,r3,401f640 <__multiply+0x6c>
 401f63c:	29400044 	addi	r5,r5,1
 401f640:	401f1640 	call	401f164 <_Balloc>
 401f644:	d8c00217 	ldw	r3,8(sp)
 401f648:	d8800615 	stw	r2,24(sp)
 401f64c:	18eb883a 	add	r21,r3,r3
 401f650:	ad6b883a 	add	r21,r21,r21
 401f654:	10c00504 	addi	r3,r2,20
 401f658:	1d6b883a 	add	r21,r3,r21
 401f65c:	d8c00115 	stw	r3,4(sp)
 401f660:	dd400315 	stw	r21,12(sp)
 401f664:	1805883a 	mov	r2,r3
 401f668:	1d40042e 	bgeu	r3,r21,401f67c <__multiply+0xa8>
 401f66c:	d8c00317 	ldw	r3,12(sp)
 401f670:	10000015 	stw	zero,0(r2)
 401f674:	10800104 	addi	r2,r2,4
 401f678:	10fffc36 	bltu	r2,r3,401f66c <__alt_data_end+0xfc01f66c>
 401f67c:	8c63883a 	add	r17,r17,r17
 401f680:	b5800504 	addi	r22,r22,20
 401f684:	8c63883a 	add	r17,r17,r17
 401f688:	94800504 	addi	r18,r18,20
 401f68c:	8421883a 	add	r16,r16,r16
 401f690:	b463883a 	add	r17,r22,r17
 401f694:	8421883a 	add	r16,r16,r16
 401f698:	dd800015 	stw	r22,0(sp)
 401f69c:	dc800415 	stw	r18,16(sp)
 401f6a0:	dc400515 	stw	r17,20(sp)
 401f6a4:	9429883a 	add	r20,r18,r16
 401f6a8:	b4404f2e 	bgeu	r22,r17,401f7e8 <__multiply+0x214>
 401f6ac:	d8c00017 	ldw	r3,0(sp)
 401f6b0:	1c800017 	ldw	r18,0(r3)
 401f6b4:	947fffcc 	andi	r17,r18,65535
 401f6b8:	88001e26 	beq	r17,zero,401f734 <__multiply+0x160>
 401f6bc:	dd800117 	ldw	r22,4(sp)
 401f6c0:	dd400417 	ldw	r21,16(sp)
 401f6c4:	0027883a 	mov	r19,zero
 401f6c8:	ac800017 	ldw	r18,0(r21)
 401f6cc:	b4000017 	ldw	r16,0(r22)
 401f6d0:	880b883a 	mov	r5,r17
 401f6d4:	913fffcc 	andi	r4,r18,65535
 401f6d8:	40191000 	call	4019100 <__mulsi3>
 401f6dc:	9008d43a 	srli	r4,r18,16
 401f6e0:	84bfffcc 	andi	r18,r16,65535
 401f6e4:	1485883a 	add	r2,r2,r18
 401f6e8:	14e5883a 	add	r18,r2,r19
 401f6ec:	8020d43a 	srli	r16,r16,16
 401f6f0:	9026d43a 	srli	r19,r18,16
 401f6f4:	880b883a 	mov	r5,r17
 401f6f8:	40191000 	call	4019100 <__mulsi3>
 401f6fc:	1405883a 	add	r2,r2,r16
 401f700:	14e1883a 	add	r16,r2,r19
 401f704:	90ffffcc 	andi	r3,r18,65535
 401f708:	8024943a 	slli	r18,r16,16
 401f70c:	ad400104 	addi	r21,r21,4
 401f710:	b005883a 	mov	r2,r22
 401f714:	90c6b03a 	or	r3,r18,r3
 401f718:	b0c00015 	stw	r3,0(r22)
 401f71c:	8026d43a 	srli	r19,r16,16
 401f720:	b5800104 	addi	r22,r22,4
 401f724:	ad3fe836 	bltu	r21,r20,401f6c8 <__alt_data_end+0xfc01f6c8>
 401f728:	d8c00017 	ldw	r3,0(sp)
 401f72c:	14c00115 	stw	r19,4(r2)
 401f730:	1c800017 	ldw	r18,0(r3)
 401f734:	9024d43a 	srli	r18,r18,16
 401f738:	90002226 	beq	r18,zero,401f7c4 <__multiply+0x1f0>
 401f73c:	d8c00117 	ldw	r3,4(sp)
 401f740:	dd800417 	ldw	r22,16(sp)
 401f744:	002f883a 	mov	r23,zero
 401f748:	1f000017 	ldw	fp,0(r3)
 401f74c:	1823883a 	mov	r17,r3
 401f750:	182b883a 	mov	r21,r3
 401f754:	e021883a 	mov	r16,fp
 401f758:	00000106 	br	401f760 <__multiply+0x18c>
 401f75c:	982b883a 	mov	r21,r19
 401f760:	b100000b 	ldhu	r4,0(r22)
 401f764:	8020d43a 	srli	r16,r16,16
 401f768:	900b883a 	mov	r5,r18
 401f76c:	40191000 	call	4019100 <__mulsi3>
 401f770:	1405883a 	add	r2,r2,r16
 401f774:	15ef883a 	add	r23,r2,r23
 401f778:	b804943a 	slli	r2,r23,16
 401f77c:	e0ffffcc 	andi	r3,fp,65535
 401f780:	8c400104 	addi	r17,r17,4
 401f784:	10c6b03a 	or	r3,r2,r3
 401f788:	88ffff15 	stw	r3,-4(r17)
 401f78c:	b5800104 	addi	r22,r22,4
 401f790:	b13fff17 	ldw	r4,-4(r22)
 401f794:	acc00104 	addi	r19,r21,4
 401f798:	900b883a 	mov	r5,r18
 401f79c:	2008d43a 	srli	r4,r4,16
 401f7a0:	9c000017 	ldw	r16,0(r19)
 401f7a4:	40191000 	call	4019100 <__mulsi3>
 401f7a8:	b806d43a 	srli	r3,r23,16
 401f7ac:	813fffcc 	andi	r4,r16,65535
 401f7b0:	1105883a 	add	r2,r2,r4
 401f7b4:	10f9883a 	add	fp,r2,r3
 401f7b8:	e02ed43a 	srli	r23,fp,16
 401f7bc:	b53fe736 	bltu	r22,r20,401f75c <__alt_data_end+0xfc01f75c>
 401f7c0:	af000115 	stw	fp,4(r21)
 401f7c4:	d8c00017 	ldw	r3,0(sp)
 401f7c8:	d9000517 	ldw	r4,20(sp)
 401f7cc:	18c00104 	addi	r3,r3,4
 401f7d0:	d8c00015 	stw	r3,0(sp)
 401f7d4:	d8c00117 	ldw	r3,4(sp)
 401f7d8:	18c00104 	addi	r3,r3,4
 401f7dc:	d8c00115 	stw	r3,4(sp)
 401f7e0:	d8c00017 	ldw	r3,0(sp)
 401f7e4:	193fb136 	bltu	r3,r4,401f6ac <__alt_data_end+0xfc01f6ac>
 401f7e8:	d8c00217 	ldw	r3,8(sp)
 401f7ec:	00c00c0e 	bge	zero,r3,401f820 <__multiply+0x24c>
 401f7f0:	d8c00317 	ldw	r3,12(sp)
 401f7f4:	18bfff17 	ldw	r2,-4(r3)
 401f7f8:	1d7fff04 	addi	r21,r3,-4
 401f7fc:	10000326 	beq	r2,zero,401f80c <__multiply+0x238>
 401f800:	00000706 	br	401f820 <__multiply+0x24c>
 401f804:	a8800017 	ldw	r2,0(r21)
 401f808:	1000051e 	bne	r2,zero,401f820 <__multiply+0x24c>
 401f80c:	d8c00217 	ldw	r3,8(sp)
 401f810:	ad7fff04 	addi	r21,r21,-4
 401f814:	18ffffc4 	addi	r3,r3,-1
 401f818:	d8c00215 	stw	r3,8(sp)
 401f81c:	183ff91e 	bne	r3,zero,401f804 <__alt_data_end+0xfc01f804>
 401f820:	d8c00617 	ldw	r3,24(sp)
 401f824:	d9000217 	ldw	r4,8(sp)
 401f828:	1805883a 	mov	r2,r3
 401f82c:	19000415 	stw	r4,16(r3)
 401f830:	dfc01017 	ldw	ra,64(sp)
 401f834:	df000f17 	ldw	fp,60(sp)
 401f838:	ddc00e17 	ldw	r23,56(sp)
 401f83c:	dd800d17 	ldw	r22,52(sp)
 401f840:	dd400c17 	ldw	r21,48(sp)
 401f844:	dd000b17 	ldw	r20,44(sp)
 401f848:	dcc00a17 	ldw	r19,40(sp)
 401f84c:	dc800917 	ldw	r18,36(sp)
 401f850:	dc400817 	ldw	r17,32(sp)
 401f854:	dc000717 	ldw	r16,28(sp)
 401f858:	dec01104 	addi	sp,sp,68
 401f85c:	f800283a 	ret

0401f860 <__pow5mult>:
 401f860:	defffa04 	addi	sp,sp,-24
 401f864:	dcc00315 	stw	r19,12(sp)
 401f868:	dc000015 	stw	r16,0(sp)
 401f86c:	dfc00515 	stw	ra,20(sp)
 401f870:	dd000415 	stw	r20,16(sp)
 401f874:	dc800215 	stw	r18,8(sp)
 401f878:	dc400115 	stw	r17,4(sp)
 401f87c:	308000cc 	andi	r2,r6,3
 401f880:	3021883a 	mov	r16,r6
 401f884:	2027883a 	mov	r19,r4
 401f888:	10002f1e 	bne	r2,zero,401f948 <__pow5mult+0xe8>
 401f88c:	2825883a 	mov	r18,r5
 401f890:	8021d0ba 	srai	r16,r16,2
 401f894:	80001a26 	beq	r16,zero,401f900 <__pow5mult+0xa0>
 401f898:	9c401217 	ldw	r17,72(r19)
 401f89c:	8800061e 	bne	r17,zero,401f8b8 <__pow5mult+0x58>
 401f8a0:	00003406 	br	401f974 <__pow5mult+0x114>
 401f8a4:	8021d07a 	srai	r16,r16,1
 401f8a8:	80001526 	beq	r16,zero,401f900 <__pow5mult+0xa0>
 401f8ac:	88800017 	ldw	r2,0(r17)
 401f8b0:	10001c26 	beq	r2,zero,401f924 <__pow5mult+0xc4>
 401f8b4:	1023883a 	mov	r17,r2
 401f8b8:	8080004c 	andi	r2,r16,1
 401f8bc:	103ff926 	beq	r2,zero,401f8a4 <__alt_data_end+0xfc01f8a4>
 401f8c0:	880d883a 	mov	r6,r17
 401f8c4:	900b883a 	mov	r5,r18
 401f8c8:	9809883a 	mov	r4,r19
 401f8cc:	401f5d40 	call	401f5d4 <__multiply>
 401f8d0:	90001b26 	beq	r18,zero,401f940 <__pow5mult+0xe0>
 401f8d4:	91000117 	ldw	r4,4(r18)
 401f8d8:	98c01317 	ldw	r3,76(r19)
 401f8dc:	8021d07a 	srai	r16,r16,1
 401f8e0:	2109883a 	add	r4,r4,r4
 401f8e4:	2109883a 	add	r4,r4,r4
 401f8e8:	1907883a 	add	r3,r3,r4
 401f8ec:	19000017 	ldw	r4,0(r3)
 401f8f0:	91000015 	stw	r4,0(r18)
 401f8f4:	1c800015 	stw	r18,0(r3)
 401f8f8:	1025883a 	mov	r18,r2
 401f8fc:	803feb1e 	bne	r16,zero,401f8ac <__alt_data_end+0xfc01f8ac>
 401f900:	9005883a 	mov	r2,r18
 401f904:	dfc00517 	ldw	ra,20(sp)
 401f908:	dd000417 	ldw	r20,16(sp)
 401f90c:	dcc00317 	ldw	r19,12(sp)
 401f910:	dc800217 	ldw	r18,8(sp)
 401f914:	dc400117 	ldw	r17,4(sp)
 401f918:	dc000017 	ldw	r16,0(sp)
 401f91c:	dec00604 	addi	sp,sp,24
 401f920:	f800283a 	ret
 401f924:	880d883a 	mov	r6,r17
 401f928:	880b883a 	mov	r5,r17
 401f92c:	9809883a 	mov	r4,r19
 401f930:	401f5d40 	call	401f5d4 <__multiply>
 401f934:	88800015 	stw	r2,0(r17)
 401f938:	10000015 	stw	zero,0(r2)
 401f93c:	003fdd06 	br	401f8b4 <__alt_data_end+0xfc01f8b4>
 401f940:	1025883a 	mov	r18,r2
 401f944:	003fd706 	br	401f8a4 <__alt_data_end+0xfc01f8a4>
 401f948:	10bfffc4 	addi	r2,r2,-1
 401f94c:	1085883a 	add	r2,r2,r2
 401f950:	00c100f4 	movhi	r3,1027
 401f954:	18f08004 	addi	r3,r3,-15872
 401f958:	1085883a 	add	r2,r2,r2
 401f95c:	1885883a 	add	r2,r3,r2
 401f960:	11800017 	ldw	r6,0(r2)
 401f964:	000f883a 	mov	r7,zero
 401f968:	401f2340 	call	401f234 <__multadd>
 401f96c:	1025883a 	mov	r18,r2
 401f970:	003fc706 	br	401f890 <__alt_data_end+0xfc01f890>
 401f974:	05000044 	movi	r20,1
 401f978:	a00b883a 	mov	r5,r20
 401f97c:	9809883a 	mov	r4,r19
 401f980:	401f1640 	call	401f164 <_Balloc>
 401f984:	1023883a 	mov	r17,r2
 401f988:	00809c44 	movi	r2,625
 401f98c:	88800515 	stw	r2,20(r17)
 401f990:	8d000415 	stw	r20,16(r17)
 401f994:	9c401215 	stw	r17,72(r19)
 401f998:	88000015 	stw	zero,0(r17)
 401f99c:	003fc606 	br	401f8b8 <__alt_data_end+0xfc01f8b8>

0401f9a0 <__lshift>:
 401f9a0:	defff904 	addi	sp,sp,-28
 401f9a4:	dd400515 	stw	r21,20(sp)
 401f9a8:	dcc00315 	stw	r19,12(sp)
 401f9ac:	302bd17a 	srai	r21,r6,5
 401f9b0:	2cc00417 	ldw	r19,16(r5)
 401f9b4:	28800217 	ldw	r2,8(r5)
 401f9b8:	dd000415 	stw	r20,16(sp)
 401f9bc:	ace7883a 	add	r19,r21,r19
 401f9c0:	dc800215 	stw	r18,8(sp)
 401f9c4:	dc400115 	stw	r17,4(sp)
 401f9c8:	dc000015 	stw	r16,0(sp)
 401f9cc:	dfc00615 	stw	ra,24(sp)
 401f9d0:	9c000044 	addi	r16,r19,1
 401f9d4:	2823883a 	mov	r17,r5
 401f9d8:	3029883a 	mov	r20,r6
 401f9dc:	2025883a 	mov	r18,r4
 401f9e0:	29400117 	ldw	r5,4(r5)
 401f9e4:	1400030e 	bge	r2,r16,401f9f4 <__lshift+0x54>
 401f9e8:	1085883a 	add	r2,r2,r2
 401f9ec:	29400044 	addi	r5,r5,1
 401f9f0:	143ffd16 	blt	r2,r16,401f9e8 <__alt_data_end+0xfc01f9e8>
 401f9f4:	9009883a 	mov	r4,r18
 401f9f8:	401f1640 	call	401f164 <_Balloc>
 401f9fc:	10c00504 	addi	r3,r2,20
 401fa00:	0540070e 	bge	zero,r21,401fa20 <__lshift+0x80>
 401fa04:	ad6b883a 	add	r21,r21,r21
 401fa08:	ad6b883a 	add	r21,r21,r21
 401fa0c:	1809883a 	mov	r4,r3
 401fa10:	1d47883a 	add	r3,r3,r21
 401fa14:	20000015 	stw	zero,0(r4)
 401fa18:	21000104 	addi	r4,r4,4
 401fa1c:	193ffd1e 	bne	r3,r4,401fa14 <__alt_data_end+0xfc01fa14>
 401fa20:	8a000417 	ldw	r8,16(r17)
 401fa24:	89000504 	addi	r4,r17,20
 401fa28:	a18007cc 	andi	r6,r20,31
 401fa2c:	4211883a 	add	r8,r8,r8
 401fa30:	4211883a 	add	r8,r8,r8
 401fa34:	2211883a 	add	r8,r4,r8
 401fa38:	30002326 	beq	r6,zero,401fac8 <__lshift+0x128>
 401fa3c:	02400804 	movi	r9,32
 401fa40:	4993c83a 	sub	r9,r9,r6
 401fa44:	000b883a 	mov	r5,zero
 401fa48:	21c00017 	ldw	r7,0(r4)
 401fa4c:	1815883a 	mov	r10,r3
 401fa50:	18c00104 	addi	r3,r3,4
 401fa54:	398e983a 	sll	r7,r7,r6
 401fa58:	21000104 	addi	r4,r4,4
 401fa5c:	394ab03a 	or	r5,r7,r5
 401fa60:	197fff15 	stw	r5,-4(r3)
 401fa64:	217fff17 	ldw	r5,-4(r4)
 401fa68:	2a4ad83a 	srl	r5,r5,r9
 401fa6c:	223ff636 	bltu	r4,r8,401fa48 <__alt_data_end+0xfc01fa48>
 401fa70:	51400115 	stw	r5,4(r10)
 401fa74:	28001a1e 	bne	r5,zero,401fae0 <__lshift+0x140>
 401fa78:	843fffc4 	addi	r16,r16,-1
 401fa7c:	14000415 	stw	r16,16(r2)
 401fa80:	88000826 	beq	r17,zero,401faa4 <__lshift+0x104>
 401fa84:	89000117 	ldw	r4,4(r17)
 401fa88:	90c01317 	ldw	r3,76(r18)
 401fa8c:	2109883a 	add	r4,r4,r4
 401fa90:	2109883a 	add	r4,r4,r4
 401fa94:	1907883a 	add	r3,r3,r4
 401fa98:	19000017 	ldw	r4,0(r3)
 401fa9c:	89000015 	stw	r4,0(r17)
 401faa0:	1c400015 	stw	r17,0(r3)
 401faa4:	dfc00617 	ldw	ra,24(sp)
 401faa8:	dd400517 	ldw	r21,20(sp)
 401faac:	dd000417 	ldw	r20,16(sp)
 401fab0:	dcc00317 	ldw	r19,12(sp)
 401fab4:	dc800217 	ldw	r18,8(sp)
 401fab8:	dc400117 	ldw	r17,4(sp)
 401fabc:	dc000017 	ldw	r16,0(sp)
 401fac0:	dec00704 	addi	sp,sp,28
 401fac4:	f800283a 	ret
 401fac8:	21400017 	ldw	r5,0(r4)
 401facc:	18c00104 	addi	r3,r3,4
 401fad0:	21000104 	addi	r4,r4,4
 401fad4:	197fff15 	stw	r5,-4(r3)
 401fad8:	223ffb36 	bltu	r4,r8,401fac8 <__alt_data_end+0xfc01fac8>
 401fadc:	003fe606 	br	401fa78 <__alt_data_end+0xfc01fa78>
 401fae0:	9c000084 	addi	r16,r19,2
 401fae4:	003fe406 	br	401fa78 <__alt_data_end+0xfc01fa78>

0401fae8 <__mcmp>:
 401fae8:	20800417 	ldw	r2,16(r4)
 401faec:	28c00417 	ldw	r3,16(r5)
 401faf0:	10c5c83a 	sub	r2,r2,r3
 401faf4:	1000111e 	bne	r2,zero,401fb3c <__mcmp+0x54>
 401faf8:	18c7883a 	add	r3,r3,r3
 401fafc:	18c7883a 	add	r3,r3,r3
 401fb00:	21000504 	addi	r4,r4,20
 401fb04:	29400504 	addi	r5,r5,20
 401fb08:	20c5883a 	add	r2,r4,r3
 401fb0c:	28cb883a 	add	r5,r5,r3
 401fb10:	00000106 	br	401fb18 <__mcmp+0x30>
 401fb14:	20800a2e 	bgeu	r4,r2,401fb40 <__mcmp+0x58>
 401fb18:	10bfff04 	addi	r2,r2,-4
 401fb1c:	297fff04 	addi	r5,r5,-4
 401fb20:	11800017 	ldw	r6,0(r2)
 401fb24:	28c00017 	ldw	r3,0(r5)
 401fb28:	30fffa26 	beq	r6,r3,401fb14 <__alt_data_end+0xfc01fb14>
 401fb2c:	30c00236 	bltu	r6,r3,401fb38 <__mcmp+0x50>
 401fb30:	00800044 	movi	r2,1
 401fb34:	f800283a 	ret
 401fb38:	00bfffc4 	movi	r2,-1
 401fb3c:	f800283a 	ret
 401fb40:	0005883a 	mov	r2,zero
 401fb44:	f800283a 	ret

0401fb48 <__mdiff>:
 401fb48:	28c00417 	ldw	r3,16(r5)
 401fb4c:	30800417 	ldw	r2,16(r6)
 401fb50:	defffa04 	addi	sp,sp,-24
 401fb54:	dcc00315 	stw	r19,12(sp)
 401fb58:	dc800215 	stw	r18,8(sp)
 401fb5c:	dfc00515 	stw	ra,20(sp)
 401fb60:	dd000415 	stw	r20,16(sp)
 401fb64:	dc400115 	stw	r17,4(sp)
 401fb68:	dc000015 	stw	r16,0(sp)
 401fb6c:	1887c83a 	sub	r3,r3,r2
 401fb70:	2825883a 	mov	r18,r5
 401fb74:	3027883a 	mov	r19,r6
 401fb78:	1800141e 	bne	r3,zero,401fbcc <__mdiff+0x84>
 401fb7c:	1085883a 	add	r2,r2,r2
 401fb80:	1085883a 	add	r2,r2,r2
 401fb84:	2a000504 	addi	r8,r5,20
 401fb88:	34000504 	addi	r16,r6,20
 401fb8c:	4087883a 	add	r3,r8,r2
 401fb90:	8085883a 	add	r2,r16,r2
 401fb94:	00000106 	br	401fb9c <__mdiff+0x54>
 401fb98:	40c0592e 	bgeu	r8,r3,401fd00 <__mdiff+0x1b8>
 401fb9c:	18ffff04 	addi	r3,r3,-4
 401fba0:	10bfff04 	addi	r2,r2,-4
 401fba4:	19c00017 	ldw	r7,0(r3)
 401fba8:	11400017 	ldw	r5,0(r2)
 401fbac:	397ffa26 	beq	r7,r5,401fb98 <__alt_data_end+0xfc01fb98>
 401fbb0:	3940592e 	bgeu	r7,r5,401fd18 <__mdiff+0x1d0>
 401fbb4:	9005883a 	mov	r2,r18
 401fbb8:	4023883a 	mov	r17,r8
 401fbbc:	9825883a 	mov	r18,r19
 401fbc0:	05000044 	movi	r20,1
 401fbc4:	1027883a 	mov	r19,r2
 401fbc8:	00000406 	br	401fbdc <__mdiff+0x94>
 401fbcc:	18005616 	blt	r3,zero,401fd28 <__mdiff+0x1e0>
 401fbd0:	34400504 	addi	r17,r6,20
 401fbd4:	2c000504 	addi	r16,r5,20
 401fbd8:	0029883a 	mov	r20,zero
 401fbdc:	91400117 	ldw	r5,4(r18)
 401fbe0:	401f1640 	call	401f164 <_Balloc>
 401fbe4:	92400417 	ldw	r9,16(r18)
 401fbe8:	9b000417 	ldw	r12,16(r19)
 401fbec:	12c00504 	addi	r11,r2,20
 401fbf0:	4a51883a 	add	r8,r9,r9
 401fbf4:	6319883a 	add	r12,r12,r12
 401fbf8:	4211883a 	add	r8,r8,r8
 401fbfc:	6319883a 	add	r12,r12,r12
 401fc00:	15000315 	stw	r20,12(r2)
 401fc04:	8211883a 	add	r8,r16,r8
 401fc08:	8b19883a 	add	r12,r17,r12
 401fc0c:	0007883a 	mov	r3,zero
 401fc10:	81400017 	ldw	r5,0(r16)
 401fc14:	89c00017 	ldw	r7,0(r17)
 401fc18:	59800104 	addi	r6,r11,4
 401fc1c:	293fffcc 	andi	r4,r5,65535
 401fc20:	20c7883a 	add	r3,r4,r3
 401fc24:	393fffcc 	andi	r4,r7,65535
 401fc28:	1909c83a 	sub	r4,r3,r4
 401fc2c:	280ad43a 	srli	r5,r5,16
 401fc30:	380ed43a 	srli	r7,r7,16
 401fc34:	2007d43a 	srai	r3,r4,16
 401fc38:	213fffcc 	andi	r4,r4,65535
 401fc3c:	29cbc83a 	sub	r5,r5,r7
 401fc40:	28c7883a 	add	r3,r5,r3
 401fc44:	180a943a 	slli	r5,r3,16
 401fc48:	8c400104 	addi	r17,r17,4
 401fc4c:	84000104 	addi	r16,r16,4
 401fc50:	2908b03a 	or	r4,r5,r4
 401fc54:	59000015 	stw	r4,0(r11)
 401fc58:	1807d43a 	srai	r3,r3,16
 401fc5c:	3015883a 	mov	r10,r6
 401fc60:	3017883a 	mov	r11,r6
 401fc64:	8b3fea36 	bltu	r17,r12,401fc10 <__alt_data_end+0xfc01fc10>
 401fc68:	8200162e 	bgeu	r16,r8,401fcc4 <__mdiff+0x17c>
 401fc6c:	8017883a 	mov	r11,r16
 401fc70:	59400017 	ldw	r5,0(r11)
 401fc74:	31800104 	addi	r6,r6,4
 401fc78:	5ac00104 	addi	r11,r11,4
 401fc7c:	293fffcc 	andi	r4,r5,65535
 401fc80:	20c7883a 	add	r3,r4,r3
 401fc84:	280ed43a 	srli	r7,r5,16
 401fc88:	180bd43a 	srai	r5,r3,16
 401fc8c:	193fffcc 	andi	r4,r3,65535
 401fc90:	3947883a 	add	r3,r7,r5
 401fc94:	180a943a 	slli	r5,r3,16
 401fc98:	1807d43a 	srai	r3,r3,16
 401fc9c:	2908b03a 	or	r4,r5,r4
 401fca0:	313fff15 	stw	r4,-4(r6)
 401fca4:	5a3ff236 	bltu	r11,r8,401fc70 <__alt_data_end+0xfc01fc70>
 401fca8:	0406303a 	nor	r3,zero,r16
 401fcac:	1a07883a 	add	r3,r3,r8
 401fcb0:	1806d0ba 	srli	r3,r3,2
 401fcb4:	18c00044 	addi	r3,r3,1
 401fcb8:	18c7883a 	add	r3,r3,r3
 401fcbc:	18c7883a 	add	r3,r3,r3
 401fcc0:	50d5883a 	add	r10,r10,r3
 401fcc4:	50ffff04 	addi	r3,r10,-4
 401fcc8:	2000041e 	bne	r4,zero,401fcdc <__mdiff+0x194>
 401fccc:	18ffff04 	addi	r3,r3,-4
 401fcd0:	19000017 	ldw	r4,0(r3)
 401fcd4:	4a7fffc4 	addi	r9,r9,-1
 401fcd8:	203ffc26 	beq	r4,zero,401fccc <__alt_data_end+0xfc01fccc>
 401fcdc:	12400415 	stw	r9,16(r2)
 401fce0:	dfc00517 	ldw	ra,20(sp)
 401fce4:	dd000417 	ldw	r20,16(sp)
 401fce8:	dcc00317 	ldw	r19,12(sp)
 401fcec:	dc800217 	ldw	r18,8(sp)
 401fcf0:	dc400117 	ldw	r17,4(sp)
 401fcf4:	dc000017 	ldw	r16,0(sp)
 401fcf8:	dec00604 	addi	sp,sp,24
 401fcfc:	f800283a 	ret
 401fd00:	000b883a 	mov	r5,zero
 401fd04:	401f1640 	call	401f164 <_Balloc>
 401fd08:	00c00044 	movi	r3,1
 401fd0c:	10c00415 	stw	r3,16(r2)
 401fd10:	10000515 	stw	zero,20(r2)
 401fd14:	003ff206 	br	401fce0 <__alt_data_end+0xfc01fce0>
 401fd18:	8023883a 	mov	r17,r16
 401fd1c:	0029883a 	mov	r20,zero
 401fd20:	4021883a 	mov	r16,r8
 401fd24:	003fad06 	br	401fbdc <__alt_data_end+0xfc01fbdc>
 401fd28:	9005883a 	mov	r2,r18
 401fd2c:	94400504 	addi	r17,r18,20
 401fd30:	9c000504 	addi	r16,r19,20
 401fd34:	9825883a 	mov	r18,r19
 401fd38:	05000044 	movi	r20,1
 401fd3c:	1027883a 	mov	r19,r2
 401fd40:	003fa606 	br	401fbdc <__alt_data_end+0xfc01fbdc>

0401fd44 <__ulp>:
 401fd44:	295ffc2c 	andhi	r5,r5,32752
 401fd48:	00bf3034 	movhi	r2,64704
 401fd4c:	2887883a 	add	r3,r5,r2
 401fd50:	00c0020e 	bge	zero,r3,401fd5c <__ulp+0x18>
 401fd54:	0005883a 	mov	r2,zero
 401fd58:	f800283a 	ret
 401fd5c:	00c7c83a 	sub	r3,zero,r3
 401fd60:	1807d53a 	srai	r3,r3,20
 401fd64:	008004c4 	movi	r2,19
 401fd68:	10c00b0e 	bge	r2,r3,401fd98 <__ulp+0x54>
 401fd6c:	18bffb04 	addi	r2,r3,-20
 401fd70:	01000784 	movi	r4,30
 401fd74:	0007883a 	mov	r3,zero
 401fd78:	20800516 	blt	r4,r2,401fd90 <__ulp+0x4c>
 401fd7c:	010007c4 	movi	r4,31
 401fd80:	2089c83a 	sub	r4,r4,r2
 401fd84:	00800044 	movi	r2,1
 401fd88:	1104983a 	sll	r2,r2,r4
 401fd8c:	f800283a 	ret
 401fd90:	00800044 	movi	r2,1
 401fd94:	f800283a 	ret
 401fd98:	01400234 	movhi	r5,8
 401fd9c:	28c7d83a 	sra	r3,r5,r3
 401fda0:	0005883a 	mov	r2,zero
 401fda4:	f800283a 	ret

0401fda8 <__b2d>:
 401fda8:	defffa04 	addi	sp,sp,-24
 401fdac:	dc000015 	stw	r16,0(sp)
 401fdb0:	24000417 	ldw	r16,16(r4)
 401fdb4:	dc400115 	stw	r17,4(sp)
 401fdb8:	24400504 	addi	r17,r4,20
 401fdbc:	8421883a 	add	r16,r16,r16
 401fdc0:	8421883a 	add	r16,r16,r16
 401fdc4:	8c21883a 	add	r16,r17,r16
 401fdc8:	dc800215 	stw	r18,8(sp)
 401fdcc:	84bfff17 	ldw	r18,-4(r16)
 401fdd0:	dd000415 	stw	r20,16(sp)
 401fdd4:	dcc00315 	stw	r19,12(sp)
 401fdd8:	9009883a 	mov	r4,r18
 401fddc:	2829883a 	mov	r20,r5
 401fde0:	dfc00515 	stw	ra,20(sp)
 401fde4:	401f4800 	call	401f480 <__hi0bits>
 401fde8:	00c00804 	movi	r3,32
 401fdec:	1889c83a 	sub	r4,r3,r2
 401fdf0:	a1000015 	stw	r4,0(r20)
 401fdf4:	01000284 	movi	r4,10
 401fdf8:	84ffff04 	addi	r19,r16,-4
 401fdfc:	20801216 	blt	r4,r2,401fe48 <__b2d+0xa0>
 401fe00:	018002c4 	movi	r6,11
 401fe04:	308dc83a 	sub	r6,r6,r2
 401fe08:	9186d83a 	srl	r3,r18,r6
 401fe0c:	18cffc34 	orhi	r3,r3,16368
 401fe10:	8cc0212e 	bgeu	r17,r19,401fe98 <__b2d+0xf0>
 401fe14:	813ffe17 	ldw	r4,-8(r16)
 401fe18:	218cd83a 	srl	r6,r4,r6
 401fe1c:	10800544 	addi	r2,r2,21
 401fe20:	9084983a 	sll	r2,r18,r2
 401fe24:	1184b03a 	or	r2,r2,r6
 401fe28:	dfc00517 	ldw	ra,20(sp)
 401fe2c:	dd000417 	ldw	r20,16(sp)
 401fe30:	dcc00317 	ldw	r19,12(sp)
 401fe34:	dc800217 	ldw	r18,8(sp)
 401fe38:	dc400117 	ldw	r17,4(sp)
 401fe3c:	dc000017 	ldw	r16,0(sp)
 401fe40:	dec00604 	addi	sp,sp,24
 401fe44:	f800283a 	ret
 401fe48:	8cc00f2e 	bgeu	r17,r19,401fe88 <__b2d+0xe0>
 401fe4c:	117ffd44 	addi	r5,r2,-11
 401fe50:	80bffe17 	ldw	r2,-8(r16)
 401fe54:	28000e26 	beq	r5,zero,401fe90 <__b2d+0xe8>
 401fe58:	1949c83a 	sub	r4,r3,r5
 401fe5c:	9164983a 	sll	r18,r18,r5
 401fe60:	1106d83a 	srl	r3,r2,r4
 401fe64:	81bffe04 	addi	r6,r16,-8
 401fe68:	948ffc34 	orhi	r18,r18,16368
 401fe6c:	90c6b03a 	or	r3,r18,r3
 401fe70:	89800e2e 	bgeu	r17,r6,401feac <__b2d+0x104>
 401fe74:	81bffd17 	ldw	r6,-12(r16)
 401fe78:	1144983a 	sll	r2,r2,r5
 401fe7c:	310ad83a 	srl	r5,r6,r4
 401fe80:	2884b03a 	or	r2,r5,r2
 401fe84:	003fe806 	br	401fe28 <__alt_data_end+0xfc01fe28>
 401fe88:	10bffd44 	addi	r2,r2,-11
 401fe8c:	1000041e 	bne	r2,zero,401fea0 <__b2d+0xf8>
 401fe90:	90cffc34 	orhi	r3,r18,16368
 401fe94:	003fe406 	br	401fe28 <__alt_data_end+0xfc01fe28>
 401fe98:	000d883a 	mov	r6,zero
 401fe9c:	003fdf06 	br	401fe1c <__alt_data_end+0xfc01fe1c>
 401fea0:	90a4983a 	sll	r18,r18,r2
 401fea4:	0005883a 	mov	r2,zero
 401fea8:	003ff906 	br	401fe90 <__alt_data_end+0xfc01fe90>
 401feac:	1144983a 	sll	r2,r2,r5
 401feb0:	003fdd06 	br	401fe28 <__alt_data_end+0xfc01fe28>

0401feb4 <__d2b>:
 401feb4:	defff804 	addi	sp,sp,-32
 401feb8:	dc000215 	stw	r16,8(sp)
 401febc:	3021883a 	mov	r16,r6
 401fec0:	dc400315 	stw	r17,12(sp)
 401fec4:	8022907a 	slli	r17,r16,1
 401fec8:	dd000615 	stw	r20,24(sp)
 401fecc:	2829883a 	mov	r20,r5
 401fed0:	01400044 	movi	r5,1
 401fed4:	dcc00515 	stw	r19,20(sp)
 401fed8:	dc800415 	stw	r18,16(sp)
 401fedc:	dfc00715 	stw	ra,28(sp)
 401fee0:	3825883a 	mov	r18,r7
 401fee4:	8822d57a 	srli	r17,r17,21
 401fee8:	401f1640 	call	401f164 <_Balloc>
 401feec:	1027883a 	mov	r19,r2
 401fef0:	00800434 	movhi	r2,16
 401fef4:	10bfffc4 	addi	r2,r2,-1
 401fef8:	808c703a 	and	r6,r16,r2
 401fefc:	88000126 	beq	r17,zero,401ff04 <__d2b+0x50>
 401ff00:	31800434 	orhi	r6,r6,16
 401ff04:	d9800015 	stw	r6,0(sp)
 401ff08:	a0002426 	beq	r20,zero,401ff9c <__d2b+0xe8>
 401ff0c:	d9000104 	addi	r4,sp,4
 401ff10:	dd000115 	stw	r20,4(sp)
 401ff14:	401f4e80 	call	401f4e8 <__lo0bits>
 401ff18:	d8c00017 	ldw	r3,0(sp)
 401ff1c:	10002f1e 	bne	r2,zero,401ffdc <__d2b+0x128>
 401ff20:	d9000117 	ldw	r4,4(sp)
 401ff24:	99000515 	stw	r4,20(r19)
 401ff28:	1821003a 	cmpeq	r16,r3,zero
 401ff2c:	01000084 	movi	r4,2
 401ff30:	2421c83a 	sub	r16,r4,r16
 401ff34:	98c00615 	stw	r3,24(r19)
 401ff38:	9c000415 	stw	r16,16(r19)
 401ff3c:	88001f1e 	bne	r17,zero,401ffbc <__d2b+0x108>
 401ff40:	10bef384 	addi	r2,r2,-1074
 401ff44:	90800015 	stw	r2,0(r18)
 401ff48:	00900034 	movhi	r2,16384
 401ff4c:	10bfffc4 	addi	r2,r2,-1
 401ff50:	8085883a 	add	r2,r16,r2
 401ff54:	1085883a 	add	r2,r2,r2
 401ff58:	1085883a 	add	r2,r2,r2
 401ff5c:	9885883a 	add	r2,r19,r2
 401ff60:	11000517 	ldw	r4,20(r2)
 401ff64:	8020917a 	slli	r16,r16,5
 401ff68:	401f4800 	call	401f480 <__hi0bits>
 401ff6c:	d8c00817 	ldw	r3,32(sp)
 401ff70:	8085c83a 	sub	r2,r16,r2
 401ff74:	18800015 	stw	r2,0(r3)
 401ff78:	9805883a 	mov	r2,r19
 401ff7c:	dfc00717 	ldw	ra,28(sp)
 401ff80:	dd000617 	ldw	r20,24(sp)
 401ff84:	dcc00517 	ldw	r19,20(sp)
 401ff88:	dc800417 	ldw	r18,16(sp)
 401ff8c:	dc400317 	ldw	r17,12(sp)
 401ff90:	dc000217 	ldw	r16,8(sp)
 401ff94:	dec00804 	addi	sp,sp,32
 401ff98:	f800283a 	ret
 401ff9c:	d809883a 	mov	r4,sp
 401ffa0:	401f4e80 	call	401f4e8 <__lo0bits>
 401ffa4:	d8c00017 	ldw	r3,0(sp)
 401ffa8:	04000044 	movi	r16,1
 401ffac:	9c000415 	stw	r16,16(r19)
 401ffb0:	98c00515 	stw	r3,20(r19)
 401ffb4:	10800804 	addi	r2,r2,32
 401ffb8:	883fe126 	beq	r17,zero,401ff40 <__alt_data_end+0xfc01ff40>
 401ffbc:	00c00d44 	movi	r3,53
 401ffc0:	8c7ef344 	addi	r17,r17,-1075
 401ffc4:	88a3883a 	add	r17,r17,r2
 401ffc8:	1885c83a 	sub	r2,r3,r2
 401ffcc:	d8c00817 	ldw	r3,32(sp)
 401ffd0:	94400015 	stw	r17,0(r18)
 401ffd4:	18800015 	stw	r2,0(r3)
 401ffd8:	003fe706 	br	401ff78 <__alt_data_end+0xfc01ff78>
 401ffdc:	01000804 	movi	r4,32
 401ffe0:	2089c83a 	sub	r4,r4,r2
 401ffe4:	1908983a 	sll	r4,r3,r4
 401ffe8:	d9400117 	ldw	r5,4(sp)
 401ffec:	1886d83a 	srl	r3,r3,r2
 401fff0:	2148b03a 	or	r4,r4,r5
 401fff4:	99000515 	stw	r4,20(r19)
 401fff8:	d8c00015 	stw	r3,0(sp)
 401fffc:	003fca06 	br	401ff28 <__alt_data_end+0xfc01ff28>

04020000 <__ratio>:
 4020000:	defff904 	addi	sp,sp,-28
 4020004:	dc400315 	stw	r17,12(sp)
 4020008:	2823883a 	mov	r17,r5
 402000c:	d9400104 	addi	r5,sp,4
 4020010:	dfc00615 	stw	ra,24(sp)
 4020014:	dcc00515 	stw	r19,20(sp)
 4020018:	dc800415 	stw	r18,16(sp)
 402001c:	2027883a 	mov	r19,r4
 4020020:	dc000215 	stw	r16,8(sp)
 4020024:	401fda80 	call	401fda8 <__b2d>
 4020028:	d80b883a 	mov	r5,sp
 402002c:	8809883a 	mov	r4,r17
 4020030:	1025883a 	mov	r18,r2
 4020034:	1821883a 	mov	r16,r3
 4020038:	401fda80 	call	401fda8 <__b2d>
 402003c:	8a000417 	ldw	r8,16(r17)
 4020040:	99000417 	ldw	r4,16(r19)
 4020044:	d9400117 	ldw	r5,4(sp)
 4020048:	2209c83a 	sub	r4,r4,r8
 402004c:	2010917a 	slli	r8,r4,5
 4020050:	d9000017 	ldw	r4,0(sp)
 4020054:	2909c83a 	sub	r4,r5,r4
 4020058:	4109883a 	add	r4,r8,r4
 402005c:	01000e0e 	bge	zero,r4,4020098 <__ratio+0x98>
 4020060:	2008953a 	slli	r4,r4,20
 4020064:	2421883a 	add	r16,r4,r16
 4020068:	100d883a 	mov	r6,r2
 402006c:	180f883a 	mov	r7,r3
 4020070:	9009883a 	mov	r4,r18
 4020074:	800b883a 	mov	r5,r16
 4020078:	402401c0 	call	402401c <__divdf3>
 402007c:	dfc00617 	ldw	ra,24(sp)
 4020080:	dcc00517 	ldw	r19,20(sp)
 4020084:	dc800417 	ldw	r18,16(sp)
 4020088:	dc400317 	ldw	r17,12(sp)
 402008c:	dc000217 	ldw	r16,8(sp)
 4020090:	dec00704 	addi	sp,sp,28
 4020094:	f800283a 	ret
 4020098:	2008953a 	slli	r4,r4,20
 402009c:	1907c83a 	sub	r3,r3,r4
 40200a0:	003ff106 	br	4020068 <__alt_data_end+0xfc020068>

040200a4 <_mprec_log10>:
 40200a4:	defffe04 	addi	sp,sp,-8
 40200a8:	dc000015 	stw	r16,0(sp)
 40200ac:	dfc00115 	stw	ra,4(sp)
 40200b0:	008005c4 	movi	r2,23
 40200b4:	2021883a 	mov	r16,r4
 40200b8:	11000d0e 	bge	r2,r4,40200f0 <_mprec_log10+0x4c>
 40200bc:	0005883a 	mov	r2,zero
 40200c0:	00cffc34 	movhi	r3,16368
 40200c4:	843fffc4 	addi	r16,r16,-1
 40200c8:	000d883a 	mov	r6,zero
 40200cc:	01d00934 	movhi	r7,16420
 40200d0:	1009883a 	mov	r4,r2
 40200d4:	180b883a 	mov	r5,r3
 40200d8:	4024c440 	call	4024c44 <__muldf3>
 40200dc:	803ff91e 	bne	r16,zero,40200c4 <__alt_data_end+0xfc0200c4>
 40200e0:	dfc00117 	ldw	ra,4(sp)
 40200e4:	dc000017 	ldw	r16,0(sp)
 40200e8:	dec00204 	addi	sp,sp,8
 40200ec:	f800283a 	ret
 40200f0:	202090fa 	slli	r16,r4,3
 40200f4:	008100f4 	movhi	r2,1027
 40200f8:	10b09704 	addi	r2,r2,-15780
 40200fc:	1421883a 	add	r16,r2,r16
 4020100:	80800017 	ldw	r2,0(r16)
 4020104:	80c00117 	ldw	r3,4(r16)
 4020108:	dfc00117 	ldw	ra,4(sp)
 402010c:	dc000017 	ldw	r16,0(sp)
 4020110:	dec00204 	addi	sp,sp,8
 4020114:	f800283a 	ret

04020118 <__copybits>:
 4020118:	297fffc4 	addi	r5,r5,-1
 402011c:	280fd17a 	srai	r7,r5,5
 4020120:	30c00417 	ldw	r3,16(r6)
 4020124:	30800504 	addi	r2,r6,20
 4020128:	39c00044 	addi	r7,r7,1
 402012c:	18c7883a 	add	r3,r3,r3
 4020130:	39cf883a 	add	r7,r7,r7
 4020134:	18c7883a 	add	r3,r3,r3
 4020138:	39cf883a 	add	r7,r7,r7
 402013c:	10c7883a 	add	r3,r2,r3
 4020140:	21cf883a 	add	r7,r4,r7
 4020144:	10c00d2e 	bgeu	r2,r3,402017c <__copybits+0x64>
 4020148:	200b883a 	mov	r5,r4
 402014c:	12000017 	ldw	r8,0(r2)
 4020150:	29400104 	addi	r5,r5,4
 4020154:	10800104 	addi	r2,r2,4
 4020158:	2a3fff15 	stw	r8,-4(r5)
 402015c:	10fffb36 	bltu	r2,r3,402014c <__alt_data_end+0xfc02014c>
 4020160:	1985c83a 	sub	r2,r3,r6
 4020164:	10bffac4 	addi	r2,r2,-21
 4020168:	1004d0ba 	srli	r2,r2,2
 402016c:	10800044 	addi	r2,r2,1
 4020170:	1085883a 	add	r2,r2,r2
 4020174:	1085883a 	add	r2,r2,r2
 4020178:	2089883a 	add	r4,r4,r2
 402017c:	21c0032e 	bgeu	r4,r7,402018c <__copybits+0x74>
 4020180:	20000015 	stw	zero,0(r4)
 4020184:	21000104 	addi	r4,r4,4
 4020188:	21fffd36 	bltu	r4,r7,4020180 <__alt_data_end+0xfc020180>
 402018c:	f800283a 	ret

04020190 <__any_on>:
 4020190:	20c00417 	ldw	r3,16(r4)
 4020194:	2805d17a 	srai	r2,r5,5
 4020198:	21000504 	addi	r4,r4,20
 402019c:	18800d0e 	bge	r3,r2,40201d4 <__any_on+0x44>
 40201a0:	18c7883a 	add	r3,r3,r3
 40201a4:	18c7883a 	add	r3,r3,r3
 40201a8:	20c7883a 	add	r3,r4,r3
 40201ac:	20c0192e 	bgeu	r4,r3,4020214 <__any_on+0x84>
 40201b0:	18bfff17 	ldw	r2,-4(r3)
 40201b4:	18ffff04 	addi	r3,r3,-4
 40201b8:	1000041e 	bne	r2,zero,40201cc <__any_on+0x3c>
 40201bc:	20c0142e 	bgeu	r4,r3,4020210 <__any_on+0x80>
 40201c0:	18ffff04 	addi	r3,r3,-4
 40201c4:	19400017 	ldw	r5,0(r3)
 40201c8:	283ffc26 	beq	r5,zero,40201bc <__alt_data_end+0xfc0201bc>
 40201cc:	00800044 	movi	r2,1
 40201d0:	f800283a 	ret
 40201d4:	10c00a0e 	bge	r2,r3,4020200 <__any_on+0x70>
 40201d8:	1085883a 	add	r2,r2,r2
 40201dc:	1085883a 	add	r2,r2,r2
 40201e0:	294007cc 	andi	r5,r5,31
 40201e4:	2087883a 	add	r3,r4,r2
 40201e8:	283ff026 	beq	r5,zero,40201ac <__alt_data_end+0xfc0201ac>
 40201ec:	19800017 	ldw	r6,0(r3)
 40201f0:	3144d83a 	srl	r2,r6,r5
 40201f4:	114a983a 	sll	r5,r2,r5
 40201f8:	317ff41e 	bne	r6,r5,40201cc <__alt_data_end+0xfc0201cc>
 40201fc:	003feb06 	br	40201ac <__alt_data_end+0xfc0201ac>
 4020200:	1085883a 	add	r2,r2,r2
 4020204:	1085883a 	add	r2,r2,r2
 4020208:	2087883a 	add	r3,r4,r2
 402020c:	003fe706 	br	40201ac <__alt_data_end+0xfc0201ac>
 4020210:	f800283a 	ret
 4020214:	0005883a 	mov	r2,zero
 4020218:	f800283a 	ret

0402021c <_realloc_r>:
 402021c:	defff604 	addi	sp,sp,-40
 4020220:	dc800215 	stw	r18,8(sp)
 4020224:	dfc00915 	stw	ra,36(sp)
 4020228:	df000815 	stw	fp,32(sp)
 402022c:	ddc00715 	stw	r23,28(sp)
 4020230:	dd800615 	stw	r22,24(sp)
 4020234:	dd400515 	stw	r21,20(sp)
 4020238:	dd000415 	stw	r20,16(sp)
 402023c:	dcc00315 	stw	r19,12(sp)
 4020240:	dc400115 	stw	r17,4(sp)
 4020244:	dc000015 	stw	r16,0(sp)
 4020248:	3025883a 	mov	r18,r6
 402024c:	2800b726 	beq	r5,zero,402052c <_realloc_r+0x310>
 4020250:	282b883a 	mov	r21,r5
 4020254:	2029883a 	mov	r20,r4
 4020258:	40265b00 	call	40265b0 <__malloc_lock>
 402025c:	a8bfff17 	ldw	r2,-4(r21)
 4020260:	043fff04 	movi	r16,-4
 4020264:	90c002c4 	addi	r3,r18,11
 4020268:	01000584 	movi	r4,22
 402026c:	acfffe04 	addi	r19,r21,-8
 4020270:	1420703a 	and	r16,r2,r16
 4020274:	20c0332e 	bgeu	r4,r3,4020344 <_realloc_r+0x128>
 4020278:	047ffe04 	movi	r17,-8
 402027c:	1c62703a 	and	r17,r3,r17
 4020280:	8807883a 	mov	r3,r17
 4020284:	88005816 	blt	r17,zero,40203e8 <_realloc_r+0x1cc>
 4020288:	8c805736 	bltu	r17,r18,40203e8 <_realloc_r+0x1cc>
 402028c:	80c0300e 	bge	r16,r3,4020350 <_realloc_r+0x134>
 4020290:	07010134 	movhi	fp,1028
 4020294:	e729d104 	addi	fp,fp,-22716
 4020298:	e1c00217 	ldw	r7,8(fp)
 402029c:	9c09883a 	add	r4,r19,r16
 40202a0:	22000117 	ldw	r8,4(r4)
 40202a4:	21c06326 	beq	r4,r7,4020434 <_realloc_r+0x218>
 40202a8:	017fff84 	movi	r5,-2
 40202ac:	414a703a 	and	r5,r8,r5
 40202b0:	214b883a 	add	r5,r4,r5
 40202b4:	29800117 	ldw	r6,4(r5)
 40202b8:	3180004c 	andi	r6,r6,1
 40202bc:	30003f26 	beq	r6,zero,40203bc <_realloc_r+0x1a0>
 40202c0:	1080004c 	andi	r2,r2,1
 40202c4:	10008326 	beq	r2,zero,40204d4 <_realloc_r+0x2b8>
 40202c8:	900b883a 	mov	r5,r18
 40202cc:	a009883a 	mov	r4,r20
 40202d0:	401e7180 	call	401e718 <_malloc_r>
 40202d4:	1025883a 	mov	r18,r2
 40202d8:	10011e26 	beq	r2,zero,4020754 <_realloc_r+0x538>
 40202dc:	a93fff17 	ldw	r4,-4(r21)
 40202e0:	10fffe04 	addi	r3,r2,-8
 40202e4:	00bfff84 	movi	r2,-2
 40202e8:	2084703a 	and	r2,r4,r2
 40202ec:	9885883a 	add	r2,r19,r2
 40202f0:	1880ee26 	beq	r3,r2,40206ac <_realloc_r+0x490>
 40202f4:	81bfff04 	addi	r6,r16,-4
 40202f8:	00800904 	movi	r2,36
 40202fc:	1180b836 	bltu	r2,r6,40205e0 <_realloc_r+0x3c4>
 4020300:	00c004c4 	movi	r3,19
 4020304:	19809636 	bltu	r3,r6,4020560 <_realloc_r+0x344>
 4020308:	9005883a 	mov	r2,r18
 402030c:	a807883a 	mov	r3,r21
 4020310:	19000017 	ldw	r4,0(r3)
 4020314:	11000015 	stw	r4,0(r2)
 4020318:	19000117 	ldw	r4,4(r3)
 402031c:	11000115 	stw	r4,4(r2)
 4020320:	18c00217 	ldw	r3,8(r3)
 4020324:	10c00215 	stw	r3,8(r2)
 4020328:	a80b883a 	mov	r5,r21
 402032c:	a009883a 	mov	r4,r20
 4020330:	401db200 	call	401db20 <_free_r>
 4020334:	a009883a 	mov	r4,r20
 4020338:	40265d40 	call	40265d4 <__malloc_unlock>
 402033c:	9005883a 	mov	r2,r18
 4020340:	00001206 	br	402038c <_realloc_r+0x170>
 4020344:	00c00404 	movi	r3,16
 4020348:	1823883a 	mov	r17,r3
 402034c:	003fce06 	br	4020288 <__alt_data_end+0xfc020288>
 4020350:	a825883a 	mov	r18,r21
 4020354:	8445c83a 	sub	r2,r16,r17
 4020358:	00c003c4 	movi	r3,15
 402035c:	18802636 	bltu	r3,r2,40203f8 <_realloc_r+0x1dc>
 4020360:	99800117 	ldw	r6,4(r19)
 4020364:	9c07883a 	add	r3,r19,r16
 4020368:	3180004c 	andi	r6,r6,1
 402036c:	3420b03a 	or	r16,r6,r16
 4020370:	9c000115 	stw	r16,4(r19)
 4020374:	18800117 	ldw	r2,4(r3)
 4020378:	10800054 	ori	r2,r2,1
 402037c:	18800115 	stw	r2,4(r3)
 4020380:	a009883a 	mov	r4,r20
 4020384:	40265d40 	call	40265d4 <__malloc_unlock>
 4020388:	9005883a 	mov	r2,r18
 402038c:	dfc00917 	ldw	ra,36(sp)
 4020390:	df000817 	ldw	fp,32(sp)
 4020394:	ddc00717 	ldw	r23,28(sp)
 4020398:	dd800617 	ldw	r22,24(sp)
 402039c:	dd400517 	ldw	r21,20(sp)
 40203a0:	dd000417 	ldw	r20,16(sp)
 40203a4:	dcc00317 	ldw	r19,12(sp)
 40203a8:	dc800217 	ldw	r18,8(sp)
 40203ac:	dc400117 	ldw	r17,4(sp)
 40203b0:	dc000017 	ldw	r16,0(sp)
 40203b4:	dec00a04 	addi	sp,sp,40
 40203b8:	f800283a 	ret
 40203bc:	017fff04 	movi	r5,-4
 40203c0:	414a703a 	and	r5,r8,r5
 40203c4:	814d883a 	add	r6,r16,r5
 40203c8:	30c01f16 	blt	r6,r3,4020448 <_realloc_r+0x22c>
 40203cc:	20800317 	ldw	r2,12(r4)
 40203d0:	20c00217 	ldw	r3,8(r4)
 40203d4:	a825883a 	mov	r18,r21
 40203d8:	3021883a 	mov	r16,r6
 40203dc:	18800315 	stw	r2,12(r3)
 40203e0:	10c00215 	stw	r3,8(r2)
 40203e4:	003fdb06 	br	4020354 <__alt_data_end+0xfc020354>
 40203e8:	00800304 	movi	r2,12
 40203ec:	a0800015 	stw	r2,0(r20)
 40203f0:	0005883a 	mov	r2,zero
 40203f4:	003fe506 	br	402038c <__alt_data_end+0xfc02038c>
 40203f8:	98c00117 	ldw	r3,4(r19)
 40203fc:	9c4b883a 	add	r5,r19,r17
 4020400:	11000054 	ori	r4,r2,1
 4020404:	18c0004c 	andi	r3,r3,1
 4020408:	1c62b03a 	or	r17,r3,r17
 402040c:	9c400115 	stw	r17,4(r19)
 4020410:	29000115 	stw	r4,4(r5)
 4020414:	2885883a 	add	r2,r5,r2
 4020418:	10c00117 	ldw	r3,4(r2)
 402041c:	29400204 	addi	r5,r5,8
 4020420:	a009883a 	mov	r4,r20
 4020424:	18c00054 	ori	r3,r3,1
 4020428:	10c00115 	stw	r3,4(r2)
 402042c:	401db200 	call	401db20 <_free_r>
 4020430:	003fd306 	br	4020380 <__alt_data_end+0xfc020380>
 4020434:	017fff04 	movi	r5,-4
 4020438:	414a703a 	and	r5,r8,r5
 402043c:	89800404 	addi	r6,r17,16
 4020440:	8151883a 	add	r8,r16,r5
 4020444:	4180590e 	bge	r8,r6,40205ac <_realloc_r+0x390>
 4020448:	1080004c 	andi	r2,r2,1
 402044c:	103f9e1e 	bne	r2,zero,40202c8 <__alt_data_end+0xfc0202c8>
 4020450:	adbffe17 	ldw	r22,-8(r21)
 4020454:	00bfff04 	movi	r2,-4
 4020458:	9dadc83a 	sub	r22,r19,r22
 402045c:	b1800117 	ldw	r6,4(r22)
 4020460:	3084703a 	and	r2,r6,r2
 4020464:	20002026 	beq	r4,zero,40204e8 <_realloc_r+0x2cc>
 4020468:	80af883a 	add	r23,r16,r2
 402046c:	b96f883a 	add	r23,r23,r5
 4020470:	21c05f26 	beq	r4,r7,40205f0 <_realloc_r+0x3d4>
 4020474:	b8c01c16 	blt	r23,r3,40204e8 <_realloc_r+0x2cc>
 4020478:	20800317 	ldw	r2,12(r4)
 402047c:	20c00217 	ldw	r3,8(r4)
 4020480:	81bfff04 	addi	r6,r16,-4
 4020484:	01000904 	movi	r4,36
 4020488:	18800315 	stw	r2,12(r3)
 402048c:	10c00215 	stw	r3,8(r2)
 4020490:	b0c00217 	ldw	r3,8(r22)
 4020494:	b0800317 	ldw	r2,12(r22)
 4020498:	b4800204 	addi	r18,r22,8
 402049c:	18800315 	stw	r2,12(r3)
 40204a0:	10c00215 	stw	r3,8(r2)
 40204a4:	21801b36 	bltu	r4,r6,4020514 <_realloc_r+0x2f8>
 40204a8:	008004c4 	movi	r2,19
 40204ac:	1180352e 	bgeu	r2,r6,4020584 <_realloc_r+0x368>
 40204b0:	a8800017 	ldw	r2,0(r21)
 40204b4:	b0800215 	stw	r2,8(r22)
 40204b8:	a8800117 	ldw	r2,4(r21)
 40204bc:	b0800315 	stw	r2,12(r22)
 40204c0:	008006c4 	movi	r2,27
 40204c4:	11807f36 	bltu	r2,r6,40206c4 <_realloc_r+0x4a8>
 40204c8:	b0800404 	addi	r2,r22,16
 40204cc:	ad400204 	addi	r21,r21,8
 40204d0:	00002d06 	br	4020588 <_realloc_r+0x36c>
 40204d4:	adbffe17 	ldw	r22,-8(r21)
 40204d8:	00bfff04 	movi	r2,-4
 40204dc:	9dadc83a 	sub	r22,r19,r22
 40204e0:	b1000117 	ldw	r4,4(r22)
 40204e4:	2084703a 	and	r2,r4,r2
 40204e8:	b03f7726 	beq	r22,zero,40202c8 <__alt_data_end+0xfc0202c8>
 40204ec:	80af883a 	add	r23,r16,r2
 40204f0:	b8ff7516 	blt	r23,r3,40202c8 <__alt_data_end+0xfc0202c8>
 40204f4:	b0800317 	ldw	r2,12(r22)
 40204f8:	b0c00217 	ldw	r3,8(r22)
 40204fc:	81bfff04 	addi	r6,r16,-4
 4020500:	01000904 	movi	r4,36
 4020504:	18800315 	stw	r2,12(r3)
 4020508:	10c00215 	stw	r3,8(r2)
 402050c:	b4800204 	addi	r18,r22,8
 4020510:	21bfe52e 	bgeu	r4,r6,40204a8 <__alt_data_end+0xfc0204a8>
 4020514:	a80b883a 	mov	r5,r21
 4020518:	9009883a 	mov	r4,r18
 402051c:	401f0080 	call	401f008 <memmove>
 4020520:	b821883a 	mov	r16,r23
 4020524:	b027883a 	mov	r19,r22
 4020528:	003f8a06 	br	4020354 <__alt_data_end+0xfc020354>
 402052c:	300b883a 	mov	r5,r6
 4020530:	dfc00917 	ldw	ra,36(sp)
 4020534:	df000817 	ldw	fp,32(sp)
 4020538:	ddc00717 	ldw	r23,28(sp)
 402053c:	dd800617 	ldw	r22,24(sp)
 4020540:	dd400517 	ldw	r21,20(sp)
 4020544:	dd000417 	ldw	r20,16(sp)
 4020548:	dcc00317 	ldw	r19,12(sp)
 402054c:	dc800217 	ldw	r18,8(sp)
 4020550:	dc400117 	ldw	r17,4(sp)
 4020554:	dc000017 	ldw	r16,0(sp)
 4020558:	dec00a04 	addi	sp,sp,40
 402055c:	401e7181 	jmpi	401e718 <_malloc_r>
 4020560:	a8c00017 	ldw	r3,0(r21)
 4020564:	90c00015 	stw	r3,0(r18)
 4020568:	a8c00117 	ldw	r3,4(r21)
 402056c:	90c00115 	stw	r3,4(r18)
 4020570:	00c006c4 	movi	r3,27
 4020574:	19804536 	bltu	r3,r6,402068c <_realloc_r+0x470>
 4020578:	90800204 	addi	r2,r18,8
 402057c:	a8c00204 	addi	r3,r21,8
 4020580:	003f6306 	br	4020310 <__alt_data_end+0xfc020310>
 4020584:	9005883a 	mov	r2,r18
 4020588:	a8c00017 	ldw	r3,0(r21)
 402058c:	b821883a 	mov	r16,r23
 4020590:	b027883a 	mov	r19,r22
 4020594:	10c00015 	stw	r3,0(r2)
 4020598:	a8c00117 	ldw	r3,4(r21)
 402059c:	10c00115 	stw	r3,4(r2)
 40205a0:	a8c00217 	ldw	r3,8(r21)
 40205a4:	10c00215 	stw	r3,8(r2)
 40205a8:	003f6a06 	br	4020354 <__alt_data_end+0xfc020354>
 40205ac:	9c67883a 	add	r19,r19,r17
 40205b0:	4445c83a 	sub	r2,r8,r17
 40205b4:	e4c00215 	stw	r19,8(fp)
 40205b8:	10800054 	ori	r2,r2,1
 40205bc:	98800115 	stw	r2,4(r19)
 40205c0:	a8bfff17 	ldw	r2,-4(r21)
 40205c4:	a009883a 	mov	r4,r20
 40205c8:	1080004c 	andi	r2,r2,1
 40205cc:	1462b03a 	or	r17,r2,r17
 40205d0:	ac7fff15 	stw	r17,-4(r21)
 40205d4:	40265d40 	call	40265d4 <__malloc_unlock>
 40205d8:	a805883a 	mov	r2,r21
 40205dc:	003f6b06 	br	402038c <__alt_data_end+0xfc02038c>
 40205e0:	a80b883a 	mov	r5,r21
 40205e4:	9009883a 	mov	r4,r18
 40205e8:	401f0080 	call	401f008 <memmove>
 40205ec:	003f4e06 	br	4020328 <__alt_data_end+0xfc020328>
 40205f0:	89000404 	addi	r4,r17,16
 40205f4:	b93fbc16 	blt	r23,r4,40204e8 <__alt_data_end+0xfc0204e8>
 40205f8:	b0800317 	ldw	r2,12(r22)
 40205fc:	b0c00217 	ldw	r3,8(r22)
 4020600:	81bfff04 	addi	r6,r16,-4
 4020604:	01000904 	movi	r4,36
 4020608:	18800315 	stw	r2,12(r3)
 402060c:	10c00215 	stw	r3,8(r2)
 4020610:	b4800204 	addi	r18,r22,8
 4020614:	21804336 	bltu	r4,r6,4020724 <_realloc_r+0x508>
 4020618:	008004c4 	movi	r2,19
 402061c:	11803f2e 	bgeu	r2,r6,402071c <_realloc_r+0x500>
 4020620:	a8800017 	ldw	r2,0(r21)
 4020624:	b0800215 	stw	r2,8(r22)
 4020628:	a8800117 	ldw	r2,4(r21)
 402062c:	b0800315 	stw	r2,12(r22)
 4020630:	008006c4 	movi	r2,27
 4020634:	11803f36 	bltu	r2,r6,4020734 <_realloc_r+0x518>
 4020638:	b0800404 	addi	r2,r22,16
 402063c:	ad400204 	addi	r21,r21,8
 4020640:	a8c00017 	ldw	r3,0(r21)
 4020644:	10c00015 	stw	r3,0(r2)
 4020648:	a8c00117 	ldw	r3,4(r21)
 402064c:	10c00115 	stw	r3,4(r2)
 4020650:	a8c00217 	ldw	r3,8(r21)
 4020654:	10c00215 	stw	r3,8(r2)
 4020658:	b447883a 	add	r3,r22,r17
 402065c:	bc45c83a 	sub	r2,r23,r17
 4020660:	e0c00215 	stw	r3,8(fp)
 4020664:	10800054 	ori	r2,r2,1
 4020668:	18800115 	stw	r2,4(r3)
 402066c:	b0800117 	ldw	r2,4(r22)
 4020670:	a009883a 	mov	r4,r20
 4020674:	1080004c 	andi	r2,r2,1
 4020678:	1462b03a 	or	r17,r2,r17
 402067c:	b4400115 	stw	r17,4(r22)
 4020680:	40265d40 	call	40265d4 <__malloc_unlock>
 4020684:	9005883a 	mov	r2,r18
 4020688:	003f4006 	br	402038c <__alt_data_end+0xfc02038c>
 402068c:	a8c00217 	ldw	r3,8(r21)
 4020690:	90c00215 	stw	r3,8(r18)
 4020694:	a8c00317 	ldw	r3,12(r21)
 4020698:	90c00315 	stw	r3,12(r18)
 402069c:	30801126 	beq	r6,r2,40206e4 <_realloc_r+0x4c8>
 40206a0:	90800404 	addi	r2,r18,16
 40206a4:	a8c00404 	addi	r3,r21,16
 40206a8:	003f1906 	br	4020310 <__alt_data_end+0xfc020310>
 40206ac:	90ffff17 	ldw	r3,-4(r18)
 40206b0:	00bfff04 	movi	r2,-4
 40206b4:	a825883a 	mov	r18,r21
 40206b8:	1884703a 	and	r2,r3,r2
 40206bc:	80a1883a 	add	r16,r16,r2
 40206c0:	003f2406 	br	4020354 <__alt_data_end+0xfc020354>
 40206c4:	a8800217 	ldw	r2,8(r21)
 40206c8:	b0800415 	stw	r2,16(r22)
 40206cc:	a8800317 	ldw	r2,12(r21)
 40206d0:	b0800515 	stw	r2,20(r22)
 40206d4:	31000a26 	beq	r6,r4,4020700 <_realloc_r+0x4e4>
 40206d8:	b0800604 	addi	r2,r22,24
 40206dc:	ad400404 	addi	r21,r21,16
 40206e0:	003fa906 	br	4020588 <__alt_data_end+0xfc020588>
 40206e4:	a9000417 	ldw	r4,16(r21)
 40206e8:	90800604 	addi	r2,r18,24
 40206ec:	a8c00604 	addi	r3,r21,24
 40206f0:	91000415 	stw	r4,16(r18)
 40206f4:	a9000517 	ldw	r4,20(r21)
 40206f8:	91000515 	stw	r4,20(r18)
 40206fc:	003f0406 	br	4020310 <__alt_data_end+0xfc020310>
 4020700:	a8c00417 	ldw	r3,16(r21)
 4020704:	ad400604 	addi	r21,r21,24
 4020708:	b0800804 	addi	r2,r22,32
 402070c:	b0c00615 	stw	r3,24(r22)
 4020710:	a8ffff17 	ldw	r3,-4(r21)
 4020714:	b0c00715 	stw	r3,28(r22)
 4020718:	003f9b06 	br	4020588 <__alt_data_end+0xfc020588>
 402071c:	9005883a 	mov	r2,r18
 4020720:	003fc706 	br	4020640 <__alt_data_end+0xfc020640>
 4020724:	a80b883a 	mov	r5,r21
 4020728:	9009883a 	mov	r4,r18
 402072c:	401f0080 	call	401f008 <memmove>
 4020730:	003fc906 	br	4020658 <__alt_data_end+0xfc020658>
 4020734:	a8800217 	ldw	r2,8(r21)
 4020738:	b0800415 	stw	r2,16(r22)
 402073c:	a8800317 	ldw	r2,12(r21)
 4020740:	b0800515 	stw	r2,20(r22)
 4020744:	31000726 	beq	r6,r4,4020764 <_realloc_r+0x548>
 4020748:	b0800604 	addi	r2,r22,24
 402074c:	ad400404 	addi	r21,r21,16
 4020750:	003fbb06 	br	4020640 <__alt_data_end+0xfc020640>
 4020754:	a009883a 	mov	r4,r20
 4020758:	40265d40 	call	40265d4 <__malloc_unlock>
 402075c:	0005883a 	mov	r2,zero
 4020760:	003f0a06 	br	402038c <__alt_data_end+0xfc02038c>
 4020764:	a8c00417 	ldw	r3,16(r21)
 4020768:	ad400604 	addi	r21,r21,24
 402076c:	b0800804 	addi	r2,r22,32
 4020770:	b0c00615 	stw	r3,24(r22)
 4020774:	a8ffff17 	ldw	r3,-4(r21)
 4020778:	b0c00715 	stw	r3,28(r22)
 402077c:	003fb006 	br	4020640 <__alt_data_end+0xfc020640>

04020780 <__fpclassifyd>:
 4020780:	00a00034 	movhi	r2,32768
 4020784:	10bfffc4 	addi	r2,r2,-1
 4020788:	2884703a 	and	r2,r5,r2
 402078c:	10000726 	beq	r2,zero,40207ac <__fpclassifyd+0x2c>
 4020790:	00fffc34 	movhi	r3,65520
 4020794:	019ff834 	movhi	r6,32736
 4020798:	28c7883a 	add	r3,r5,r3
 402079c:	31bfffc4 	addi	r6,r6,-1
 40207a0:	30c00536 	bltu	r6,r3,40207b8 <__fpclassifyd+0x38>
 40207a4:	00800104 	movi	r2,4
 40207a8:	f800283a 	ret
 40207ac:	2000021e 	bne	r4,zero,40207b8 <__fpclassifyd+0x38>
 40207b0:	00800084 	movi	r2,2
 40207b4:	f800283a 	ret
 40207b8:	00dffc34 	movhi	r3,32752
 40207bc:	019ff834 	movhi	r6,32736
 40207c0:	28cb883a 	add	r5,r5,r3
 40207c4:	31bfffc4 	addi	r6,r6,-1
 40207c8:	317ff62e 	bgeu	r6,r5,40207a4 <__alt_data_end+0xfc0207a4>
 40207cc:	01400434 	movhi	r5,16
 40207d0:	297fffc4 	addi	r5,r5,-1
 40207d4:	28800236 	bltu	r5,r2,40207e0 <__fpclassifyd+0x60>
 40207d8:	008000c4 	movi	r2,3
 40207dc:	f800283a 	ret
 40207e0:	10c00226 	beq	r2,r3,40207ec <__fpclassifyd+0x6c>
 40207e4:	0005883a 	mov	r2,zero
 40207e8:	f800283a 	ret
 40207ec:	2005003a 	cmpeq	r2,r4,zero
 40207f0:	f800283a 	ret

040207f4 <_sbrk_r>:
 40207f4:	defffd04 	addi	sp,sp,-12
 40207f8:	dc000015 	stw	r16,0(sp)
 40207fc:	04010174 	movhi	r16,1029
 4020800:	dc400115 	stw	r17,4(sp)
 4020804:	842e2004 	addi	r16,r16,-18304
 4020808:	2023883a 	mov	r17,r4
 402080c:	2809883a 	mov	r4,r5
 4020810:	dfc00215 	stw	ra,8(sp)
 4020814:	80000015 	stw	zero,0(r16)
 4020818:	40267bc0 	call	40267bc <sbrk>
 402081c:	00ffffc4 	movi	r3,-1
 4020820:	10c00526 	beq	r2,r3,4020838 <_sbrk_r+0x44>
 4020824:	dfc00217 	ldw	ra,8(sp)
 4020828:	dc400117 	ldw	r17,4(sp)
 402082c:	dc000017 	ldw	r16,0(sp)
 4020830:	dec00304 	addi	sp,sp,12
 4020834:	f800283a 	ret
 4020838:	80c00017 	ldw	r3,0(r16)
 402083c:	183ff926 	beq	r3,zero,4020824 <__alt_data_end+0xfc020824>
 4020840:	88c00015 	stw	r3,0(r17)
 4020844:	003ff706 	br	4020824 <__alt_data_end+0xfc020824>

04020848 <__sread>:
 4020848:	defffe04 	addi	sp,sp,-8
 402084c:	dc000015 	stw	r16,0(sp)
 4020850:	2821883a 	mov	r16,r5
 4020854:	2940038f 	ldh	r5,14(r5)
 4020858:	dfc00115 	stw	ra,4(sp)
 402085c:	40227040 	call	4022704 <_read_r>
 4020860:	10000716 	blt	r2,zero,4020880 <__sread+0x38>
 4020864:	80c01417 	ldw	r3,80(r16)
 4020868:	1887883a 	add	r3,r3,r2
 402086c:	80c01415 	stw	r3,80(r16)
 4020870:	dfc00117 	ldw	ra,4(sp)
 4020874:	dc000017 	ldw	r16,0(sp)
 4020878:	dec00204 	addi	sp,sp,8
 402087c:	f800283a 	ret
 4020880:	80c0030b 	ldhu	r3,12(r16)
 4020884:	18fbffcc 	andi	r3,r3,61439
 4020888:	80c0030d 	sth	r3,12(r16)
 402088c:	dfc00117 	ldw	ra,4(sp)
 4020890:	dc000017 	ldw	r16,0(sp)
 4020894:	dec00204 	addi	sp,sp,8
 4020898:	f800283a 	ret

0402089c <__seofread>:
 402089c:	0005883a 	mov	r2,zero
 40208a0:	f800283a 	ret

040208a4 <__swrite>:
 40208a4:	2880030b 	ldhu	r2,12(r5)
 40208a8:	defffb04 	addi	sp,sp,-20
 40208ac:	dcc00315 	stw	r19,12(sp)
 40208b0:	dc800215 	stw	r18,8(sp)
 40208b4:	dc400115 	stw	r17,4(sp)
 40208b8:	dc000015 	stw	r16,0(sp)
 40208bc:	dfc00415 	stw	ra,16(sp)
 40208c0:	10c0400c 	andi	r3,r2,256
 40208c4:	2821883a 	mov	r16,r5
 40208c8:	2023883a 	mov	r17,r4
 40208cc:	3025883a 	mov	r18,r6
 40208d0:	3827883a 	mov	r19,r7
 40208d4:	18000526 	beq	r3,zero,40208ec <__swrite+0x48>
 40208d8:	2940038f 	ldh	r5,14(r5)
 40208dc:	01c00084 	movi	r7,2
 40208e0:	000d883a 	mov	r6,zero
 40208e4:	40226a40 	call	40226a4 <_lseek_r>
 40208e8:	8080030b 	ldhu	r2,12(r16)
 40208ec:	8140038f 	ldh	r5,14(r16)
 40208f0:	10bbffcc 	andi	r2,r2,61439
 40208f4:	980f883a 	mov	r7,r19
 40208f8:	900d883a 	mov	r6,r18
 40208fc:	8809883a 	mov	r4,r17
 4020900:	8080030d 	sth	r2,12(r16)
 4020904:	dfc00417 	ldw	ra,16(sp)
 4020908:	dcc00317 	ldw	r19,12(sp)
 402090c:	dc800217 	ldw	r18,8(sp)
 4020910:	dc400117 	ldw	r17,4(sp)
 4020914:	dc000017 	ldw	r16,0(sp)
 4020918:	dec00504 	addi	sp,sp,20
 402091c:	40221581 	jmpi	4022158 <_write_r>

04020920 <__sseek>:
 4020920:	defffe04 	addi	sp,sp,-8
 4020924:	dc000015 	stw	r16,0(sp)
 4020928:	2821883a 	mov	r16,r5
 402092c:	2940038f 	ldh	r5,14(r5)
 4020930:	dfc00115 	stw	ra,4(sp)
 4020934:	40226a40 	call	40226a4 <_lseek_r>
 4020938:	00ffffc4 	movi	r3,-1
 402093c:	10c00826 	beq	r2,r3,4020960 <__sseek+0x40>
 4020940:	80c0030b 	ldhu	r3,12(r16)
 4020944:	80801415 	stw	r2,80(r16)
 4020948:	18c40014 	ori	r3,r3,4096
 402094c:	80c0030d 	sth	r3,12(r16)
 4020950:	dfc00117 	ldw	ra,4(sp)
 4020954:	dc000017 	ldw	r16,0(sp)
 4020958:	dec00204 	addi	sp,sp,8
 402095c:	f800283a 	ret
 4020960:	80c0030b 	ldhu	r3,12(r16)
 4020964:	18fbffcc 	andi	r3,r3,61439
 4020968:	80c0030d 	sth	r3,12(r16)
 402096c:	dfc00117 	ldw	ra,4(sp)
 4020970:	dc000017 	ldw	r16,0(sp)
 4020974:	dec00204 	addi	sp,sp,8
 4020978:	f800283a 	ret

0402097c <__sclose>:
 402097c:	2940038f 	ldh	r5,14(r5)
 4020980:	40221b81 	jmpi	40221b8 <_close_r>

04020984 <strcmp>:
 4020984:	2144b03a 	or	r2,r4,r5
 4020988:	108000cc 	andi	r2,r2,3
 402098c:	1000171e 	bne	r2,zero,40209ec <strcmp+0x68>
 4020990:	20800017 	ldw	r2,0(r4)
 4020994:	28c00017 	ldw	r3,0(r5)
 4020998:	10c0141e 	bne	r2,r3,40209ec <strcmp+0x68>
 402099c:	027fbff4 	movhi	r9,65279
 40209a0:	4a7fbfc4 	addi	r9,r9,-257
 40209a4:	0086303a 	nor	r3,zero,r2
 40209a8:	02202074 	movhi	r8,32897
 40209ac:	1245883a 	add	r2,r2,r9
 40209b0:	42202004 	addi	r8,r8,-32640
 40209b4:	10c4703a 	and	r2,r2,r3
 40209b8:	1204703a 	and	r2,r2,r8
 40209bc:	10000226 	beq	r2,zero,40209c8 <strcmp+0x44>
 40209c0:	00002306 	br	4020a50 <strcmp+0xcc>
 40209c4:	1000221e 	bne	r2,zero,4020a50 <strcmp+0xcc>
 40209c8:	21000104 	addi	r4,r4,4
 40209cc:	20c00017 	ldw	r3,0(r4)
 40209d0:	29400104 	addi	r5,r5,4
 40209d4:	29800017 	ldw	r6,0(r5)
 40209d8:	1a4f883a 	add	r7,r3,r9
 40209dc:	00c4303a 	nor	r2,zero,r3
 40209e0:	3884703a 	and	r2,r7,r2
 40209e4:	1204703a 	and	r2,r2,r8
 40209e8:	19bff626 	beq	r3,r6,40209c4 <__alt_data_end+0xfc0209c4>
 40209ec:	20800003 	ldbu	r2,0(r4)
 40209f0:	10c03fcc 	andi	r3,r2,255
 40209f4:	18c0201c 	xori	r3,r3,128
 40209f8:	18ffe004 	addi	r3,r3,-128
 40209fc:	18000c26 	beq	r3,zero,4020a30 <strcmp+0xac>
 4020a00:	29800007 	ldb	r6,0(r5)
 4020a04:	19800326 	beq	r3,r6,4020a14 <strcmp+0x90>
 4020a08:	00001306 	br	4020a58 <strcmp+0xd4>
 4020a0c:	29800007 	ldb	r6,0(r5)
 4020a10:	11800b1e 	bne	r2,r6,4020a40 <strcmp+0xbc>
 4020a14:	21000044 	addi	r4,r4,1
 4020a18:	20c00003 	ldbu	r3,0(r4)
 4020a1c:	29400044 	addi	r5,r5,1
 4020a20:	18803fcc 	andi	r2,r3,255
 4020a24:	1080201c 	xori	r2,r2,128
 4020a28:	10bfe004 	addi	r2,r2,-128
 4020a2c:	103ff71e 	bne	r2,zero,4020a0c <__alt_data_end+0xfc020a0c>
 4020a30:	0007883a 	mov	r3,zero
 4020a34:	28800003 	ldbu	r2,0(r5)
 4020a38:	1885c83a 	sub	r2,r3,r2
 4020a3c:	f800283a 	ret
 4020a40:	28800003 	ldbu	r2,0(r5)
 4020a44:	18c03fcc 	andi	r3,r3,255
 4020a48:	1885c83a 	sub	r2,r3,r2
 4020a4c:	f800283a 	ret
 4020a50:	0005883a 	mov	r2,zero
 4020a54:	f800283a 	ret
 4020a58:	10c03fcc 	andi	r3,r2,255
 4020a5c:	003ff506 	br	4020a34 <__alt_data_end+0xfc020a34>

04020a60 <__sprint_r.part.0>:
 4020a60:	28801917 	ldw	r2,100(r5)
 4020a64:	defff604 	addi	sp,sp,-40
 4020a68:	dd400515 	stw	r21,20(sp)
 4020a6c:	dfc00915 	stw	ra,36(sp)
 4020a70:	df000815 	stw	fp,32(sp)
 4020a74:	ddc00715 	stw	r23,28(sp)
 4020a78:	dd800615 	stw	r22,24(sp)
 4020a7c:	dd000415 	stw	r20,16(sp)
 4020a80:	dcc00315 	stw	r19,12(sp)
 4020a84:	dc800215 	stw	r18,8(sp)
 4020a88:	dc400115 	stw	r17,4(sp)
 4020a8c:	dc000015 	stw	r16,0(sp)
 4020a90:	1088000c 	andi	r2,r2,8192
 4020a94:	302b883a 	mov	r21,r6
 4020a98:	10002e26 	beq	r2,zero,4020b54 <__sprint_r.part.0+0xf4>
 4020a9c:	30800217 	ldw	r2,8(r6)
 4020aa0:	35800017 	ldw	r22,0(r6)
 4020aa4:	10002926 	beq	r2,zero,4020b4c <__sprint_r.part.0+0xec>
 4020aa8:	2827883a 	mov	r19,r5
 4020aac:	2029883a 	mov	r20,r4
 4020ab0:	b5c00104 	addi	r23,r22,4
 4020ab4:	04bfffc4 	movi	r18,-1
 4020ab8:	bc400017 	ldw	r17,0(r23)
 4020abc:	b4000017 	ldw	r16,0(r22)
 4020ac0:	0039883a 	mov	fp,zero
 4020ac4:	8822d0ba 	srli	r17,r17,2
 4020ac8:	8800031e 	bne	r17,zero,4020ad8 <__sprint_r.part.0+0x78>
 4020acc:	00001806 	br	4020b30 <__sprint_r.part.0+0xd0>
 4020ad0:	84000104 	addi	r16,r16,4
 4020ad4:	8f001526 	beq	r17,fp,4020b2c <__sprint_r.part.0+0xcc>
 4020ad8:	81400017 	ldw	r5,0(r16)
 4020adc:	980d883a 	mov	r6,r19
 4020ae0:	a009883a 	mov	r4,r20
 4020ae4:	40225500 	call	4022550 <_fputwc_r>
 4020ae8:	e7000044 	addi	fp,fp,1
 4020aec:	14bff81e 	bne	r2,r18,4020ad0 <__alt_data_end+0xfc020ad0>
 4020af0:	9005883a 	mov	r2,r18
 4020af4:	a8000215 	stw	zero,8(r21)
 4020af8:	a8000115 	stw	zero,4(r21)
 4020afc:	dfc00917 	ldw	ra,36(sp)
 4020b00:	df000817 	ldw	fp,32(sp)
 4020b04:	ddc00717 	ldw	r23,28(sp)
 4020b08:	dd800617 	ldw	r22,24(sp)
 4020b0c:	dd400517 	ldw	r21,20(sp)
 4020b10:	dd000417 	ldw	r20,16(sp)
 4020b14:	dcc00317 	ldw	r19,12(sp)
 4020b18:	dc800217 	ldw	r18,8(sp)
 4020b1c:	dc400117 	ldw	r17,4(sp)
 4020b20:	dc000017 	ldw	r16,0(sp)
 4020b24:	dec00a04 	addi	sp,sp,40
 4020b28:	f800283a 	ret
 4020b2c:	a8800217 	ldw	r2,8(r21)
 4020b30:	8c63883a 	add	r17,r17,r17
 4020b34:	8c63883a 	add	r17,r17,r17
 4020b38:	1445c83a 	sub	r2,r2,r17
 4020b3c:	a8800215 	stw	r2,8(r21)
 4020b40:	b5800204 	addi	r22,r22,8
 4020b44:	bdc00204 	addi	r23,r23,8
 4020b48:	103fdb1e 	bne	r2,zero,4020ab8 <__alt_data_end+0xfc020ab8>
 4020b4c:	0005883a 	mov	r2,zero
 4020b50:	003fe806 	br	4020af4 <__alt_data_end+0xfc020af4>
 4020b54:	401de300 	call	401de30 <__sfvwrite_r>
 4020b58:	003fe606 	br	4020af4 <__alt_data_end+0xfc020af4>

04020b5c <__sprint_r>:
 4020b5c:	30c00217 	ldw	r3,8(r6)
 4020b60:	18000126 	beq	r3,zero,4020b68 <__sprint_r+0xc>
 4020b64:	4020a601 	jmpi	4020a60 <__sprint_r.part.0>
 4020b68:	30000115 	stw	zero,4(r6)
 4020b6c:	0005883a 	mov	r2,zero
 4020b70:	f800283a 	ret

04020b74 <___vfiprintf_internal_r>:
 4020b74:	deffca04 	addi	sp,sp,-216
 4020b78:	dd403115 	stw	r21,196(sp)
 4020b7c:	dfc03515 	stw	ra,212(sp)
 4020b80:	df003415 	stw	fp,208(sp)
 4020b84:	ddc03315 	stw	r23,204(sp)
 4020b88:	dd803215 	stw	r22,200(sp)
 4020b8c:	dd003015 	stw	r20,192(sp)
 4020b90:	dcc02f15 	stw	r19,188(sp)
 4020b94:	dc802e15 	stw	r18,184(sp)
 4020b98:	dc402d15 	stw	r17,180(sp)
 4020b9c:	dc002c15 	stw	r16,176(sp)
 4020ba0:	d9002115 	stw	r4,132(sp)
 4020ba4:	d9402015 	stw	r5,128(sp)
 4020ba8:	d9c02215 	stw	r7,136(sp)
 4020bac:	302b883a 	mov	r21,r6
 4020bb0:	20000226 	beq	r4,zero,4020bbc <___vfiprintf_internal_r+0x48>
 4020bb4:	20800e17 	ldw	r2,56(r4)
 4020bb8:	1000cf26 	beq	r2,zero,4020ef8 <___vfiprintf_internal_r+0x384>
 4020bbc:	d8c02017 	ldw	r3,128(sp)
 4020bc0:	1880030b 	ldhu	r2,12(r3)
 4020bc4:	10c8000c 	andi	r3,r2,8192
 4020bc8:	1800071e 	bne	r3,zero,4020be8 <___vfiprintf_internal_r+0x74>
 4020bcc:	d9402017 	ldw	r5,128(sp)
 4020bd0:	00f7ffc4 	movi	r3,-8193
 4020bd4:	10880014 	ori	r2,r2,8192
 4020bd8:	29001917 	ldw	r4,100(r5)
 4020bdc:	2880030d 	sth	r2,12(r5)
 4020be0:	20c6703a 	and	r3,r4,r3
 4020be4:	28c01915 	stw	r3,100(r5)
 4020be8:	10c0020c 	andi	r3,r2,8
 4020bec:	1800a526 	beq	r3,zero,4020e84 <___vfiprintf_internal_r+0x310>
 4020bf0:	d9002017 	ldw	r4,128(sp)
 4020bf4:	20c00417 	ldw	r3,16(r4)
 4020bf8:	1800a226 	beq	r3,zero,4020e84 <___vfiprintf_internal_r+0x310>
 4020bfc:	1080068c 	andi	r2,r2,26
 4020c00:	00c00284 	movi	r3,10
 4020c04:	10c0a826 	beq	r2,r3,4020ea8 <___vfiprintf_internal_r+0x334>
 4020c08:	d9001a04 	addi	r4,sp,104
 4020c0c:	d94019c4 	addi	r5,sp,103
 4020c10:	048100f4 	movhi	r18,1027
 4020c14:	2145c83a 	sub	r2,r4,r5
 4020c18:	94b0c904 	addi	r18,r18,-15580
 4020c1c:	d9001e15 	stw	r4,120(sp)
 4020c20:	d9401f15 	stw	r5,124(sp)
 4020c24:	dec01a15 	stw	sp,104(sp)
 4020c28:	d8001c15 	stw	zero,112(sp)
 4020c2c:	d8001b15 	stw	zero,108(sp)
 4020c30:	d811883a 	mov	r8,sp
 4020c34:	d8002615 	stw	zero,152(sp)
 4020c38:	d8002415 	stw	zero,144(sp)
 4020c3c:	d8802815 	stw	r2,160(sp)
 4020c40:	a82d883a 	mov	r22,r21
 4020c44:	b0800007 	ldb	r2,0(r22)
 4020c48:	10040d26 	beq	r2,zero,4021c80 <___vfiprintf_internal_r+0x110c>
 4020c4c:	00c00944 	movi	r3,37
 4020c50:	b029883a 	mov	r20,r22
 4020c54:	10c0021e 	bne	r2,r3,4020c60 <___vfiprintf_internal_r+0xec>
 4020c58:	00001606 	br	4020cb4 <___vfiprintf_internal_r+0x140>
 4020c5c:	10c00326 	beq	r2,r3,4020c6c <___vfiprintf_internal_r+0xf8>
 4020c60:	a5000044 	addi	r20,r20,1
 4020c64:	a0800007 	ldb	r2,0(r20)
 4020c68:	103ffc1e 	bne	r2,zero,4020c5c <__alt_data_end+0xfc020c5c>
 4020c6c:	a5a1c83a 	sub	r16,r20,r22
 4020c70:	80001026 	beq	r16,zero,4020cb4 <___vfiprintf_internal_r+0x140>
 4020c74:	d8c01c17 	ldw	r3,112(sp)
 4020c78:	d8801b17 	ldw	r2,108(sp)
 4020c7c:	45800015 	stw	r22,0(r8)
 4020c80:	80c7883a 	add	r3,r16,r3
 4020c84:	10800044 	addi	r2,r2,1
 4020c88:	44000115 	stw	r16,4(r8)
 4020c8c:	d8c01c15 	stw	r3,112(sp)
 4020c90:	d8801b15 	stw	r2,108(sp)
 4020c94:	010001c4 	movi	r4,7
 4020c98:	2080750e 	bge	r4,r2,4020e70 <___vfiprintf_internal_r+0x2fc>
 4020c9c:	1803951e 	bne	r3,zero,4021af4 <___vfiprintf_internal_r+0xf80>
 4020ca0:	d8c02417 	ldw	r3,144(sp)
 4020ca4:	d8001b15 	stw	zero,108(sp)
 4020ca8:	d811883a 	mov	r8,sp
 4020cac:	1c07883a 	add	r3,r3,r16
 4020cb0:	d8c02415 	stw	r3,144(sp)
 4020cb4:	a0800007 	ldb	r2,0(r20)
 4020cb8:	1002e026 	beq	r2,zero,402183c <___vfiprintf_internal_r+0xcc8>
 4020cbc:	a5800044 	addi	r22,r20,1
 4020cc0:	a0c00047 	ldb	r3,1(r20)
 4020cc4:	d8001d85 	stb	zero,118(sp)
 4020cc8:	0027883a 	mov	r19,zero
 4020ccc:	d8002305 	stb	zero,140(sp)
 4020cd0:	043fffc4 	movi	r16,-1
 4020cd4:	d8002515 	stw	zero,148(sp)
 4020cd8:	0023883a 	mov	r17,zero
 4020cdc:	05001604 	movi	r20,88
 4020ce0:	05400244 	movi	r21,9
 4020ce4:	402f883a 	mov	r23,r8
 4020ce8:	b5800044 	addi	r22,r22,1
 4020cec:	18bff804 	addi	r2,r3,-32
 4020cf0:	a0827736 	bltu	r20,r2,40216d0 <___vfiprintf_internal_r+0xb5c>
 4020cf4:	100490ba 	slli	r2,r2,2
 4020cf8:	010100b4 	movhi	r4,1026
 4020cfc:	21034304 	addi	r4,r4,3340
 4020d00:	1105883a 	add	r2,r2,r4
 4020d04:	10800017 	ldw	r2,0(r2)
 4020d08:	1000683a 	jmp	r2
 4020d0c:	040213d0 	cmplti	r16,zero,2127
 4020d10:	040216d0 	cmplti	r16,zero,2139
 4020d14:	040216d0 	cmplti	r16,zero,2139
 4020d18:	040213ec 	andhi	r16,zero,2127
 4020d1c:	040216d0 	cmplti	r16,zero,2139
 4020d20:	040216d0 	cmplti	r16,zero,2139
 4020d24:	040216d0 	cmplti	r16,zero,2139
 4020d28:	040216d0 	cmplti	r16,zero,2139
 4020d2c:	040216d0 	cmplti	r16,zero,2139
 4020d30:	040216d0 	cmplti	r16,zero,2139
 4020d34:	040215f4 	movhi	r16,2135
 4020d38:	04021618 	cmpnei	r16,zero,2136
 4020d3c:	040216d0 	cmplti	r16,zero,2139
 4020d40:	04020f10 	cmplti	r16,zero,2108
 4020d44:	0402162c 	andhi	r16,zero,2136
 4020d48:	040216d0 	cmplti	r16,zero,2139
 4020d4c:	040213f8 	rdprs	r16,zero,2127
 4020d50:	04021404 	movi	r16,2128
 4020d54:	04021404 	movi	r16,2128
 4020d58:	04021404 	movi	r16,2128
 4020d5c:	04021404 	movi	r16,2128
 4020d60:	04021404 	movi	r16,2128
 4020d64:	04021404 	movi	r16,2128
 4020d68:	04021404 	movi	r16,2128
 4020d6c:	04021404 	movi	r16,2128
 4020d70:	04021404 	movi	r16,2128
 4020d74:	040216d0 	cmplti	r16,zero,2139
 4020d78:	040216d0 	cmplti	r16,zero,2139
 4020d7c:	040216d0 	cmplti	r16,zero,2139
 4020d80:	040216d0 	cmplti	r16,zero,2139
 4020d84:	040216d0 	cmplti	r16,zero,2139
 4020d88:	040216d0 	cmplti	r16,zero,2139
 4020d8c:	040216d0 	cmplti	r16,zero,2139
 4020d90:	040216d0 	cmplti	r16,zero,2139
 4020d94:	040216d0 	cmplti	r16,zero,2139
 4020d98:	040216d0 	cmplti	r16,zero,2139
 4020d9c:	04021444 	movi	r16,2129
 4020da0:	040216d0 	cmplti	r16,zero,2139
 4020da4:	040216d0 	cmplti	r16,zero,2139
 4020da8:	040216d0 	cmplti	r16,zero,2139
 4020dac:	040216d0 	cmplti	r16,zero,2139
 4020db0:	040216d0 	cmplti	r16,zero,2139
 4020db4:	040216d0 	cmplti	r16,zero,2139
 4020db8:	040216d0 	cmplti	r16,zero,2139
 4020dbc:	040216d0 	cmplti	r16,zero,2139
 4020dc0:	040216d0 	cmplti	r16,zero,2139
 4020dc4:	040216d0 	cmplti	r16,zero,2139
 4020dc8:	04021480 	call	402148 <__alt_mem_SDRAM-0x3bfdeb8>
 4020dcc:	040216d0 	cmplti	r16,zero,2139
 4020dd0:	040216d0 	cmplti	r16,zero,2139
 4020dd4:	040216d0 	cmplti	r16,zero,2139
 4020dd8:	040216d0 	cmplti	r16,zero,2139
 4020ddc:	040216d0 	cmplti	r16,zero,2139
 4020de0:	040214dc 	xori	r16,zero,2131
 4020de4:	040216d0 	cmplti	r16,zero,2139
 4020de8:	040216d0 	cmplti	r16,zero,2139
 4020dec:	04021550 	cmplti	r16,zero,2133
 4020df0:	040216d0 	cmplti	r16,zero,2139
 4020df4:	040216d0 	cmplti	r16,zero,2139
 4020df8:	040216d0 	cmplti	r16,zero,2139
 4020dfc:	040216d0 	cmplti	r16,zero,2139
 4020e00:	040216d0 	cmplti	r16,zero,2139
 4020e04:	040216d0 	cmplti	r16,zero,2139
 4020e08:	040216d0 	cmplti	r16,zero,2139
 4020e0c:	040216d0 	cmplti	r16,zero,2139
 4020e10:	040216d0 	cmplti	r16,zero,2139
 4020e14:	040216d0 	cmplti	r16,zero,2139
 4020e18:	040212f8 	rdprs	r16,zero,2123
 4020e1c:	04021328 	cmpgeui	r16,zero,2124
 4020e20:	040216d0 	cmplti	r16,zero,2139
 4020e24:	040216d0 	cmplti	r16,zero,2139
 4020e28:	040216d0 	cmplti	r16,zero,2139
 4020e2c:	04021678 	rdprs	r16,zero,2137
 4020e30:	04021328 	cmpgeui	r16,zero,2124
 4020e34:	040216d0 	cmplti	r16,zero,2139
 4020e38:	040216d0 	cmplti	r16,zero,2139
 4020e3c:	040211d0 	cmplti	r16,zero,2119
 4020e40:	040216d0 	cmplti	r16,zero,2139
 4020e44:	040211e4 	muli	r16,zero,2119
 4020e48:	0402121c 	xori	r16,zero,2120
 4020e4c:	04020f1c 	xori	r16,zero,2108
 4020e50:	040211c4 	movi	r16,2119
 4020e54:	040216d0 	cmplti	r16,zero,2139
 4020e58:	04021590 	cmplti	r16,zero,2134
 4020e5c:	040216d0 	cmplti	r16,zero,2139
 4020e60:	040215dc 	xori	r16,zero,2135
 4020e64:	040216d0 	cmplti	r16,zero,2139
 4020e68:	040216d0 	cmplti	r16,zero,2139
 4020e6c:	040212a0 	cmpeqi	r16,zero,2122
 4020e70:	42000204 	addi	r8,r8,8
 4020e74:	d8c02417 	ldw	r3,144(sp)
 4020e78:	1c07883a 	add	r3,r3,r16
 4020e7c:	d8c02415 	stw	r3,144(sp)
 4020e80:	003f8c06 	br	4020cb4 <__alt_data_end+0xfc020cb4>
 4020e84:	d9402017 	ldw	r5,128(sp)
 4020e88:	d9002117 	ldw	r4,132(sp)
 4020e8c:	401b9a00 	call	401b9a0 <__swsetup_r>
 4020e90:	1003c11e 	bne	r2,zero,4021d98 <___vfiprintf_internal_r+0x1224>
 4020e94:	d9402017 	ldw	r5,128(sp)
 4020e98:	00c00284 	movi	r3,10
 4020e9c:	2880030b 	ldhu	r2,12(r5)
 4020ea0:	1080068c 	andi	r2,r2,26
 4020ea4:	10ff581e 	bne	r2,r3,4020c08 <__alt_data_end+0xfc020c08>
 4020ea8:	d8c02017 	ldw	r3,128(sp)
 4020eac:	1880038f 	ldh	r2,14(r3)
 4020eb0:	103f5516 	blt	r2,zero,4020c08 <__alt_data_end+0xfc020c08>
 4020eb4:	d9c02217 	ldw	r7,136(sp)
 4020eb8:	d9002117 	ldw	r4,132(sp)
 4020ebc:	a80d883a 	mov	r6,r21
 4020ec0:	180b883a 	mov	r5,r3
 4020ec4:	402209c0 	call	402209c <__sbprintf>
 4020ec8:	dfc03517 	ldw	ra,212(sp)
 4020ecc:	df003417 	ldw	fp,208(sp)
 4020ed0:	ddc03317 	ldw	r23,204(sp)
 4020ed4:	dd803217 	ldw	r22,200(sp)
 4020ed8:	dd403117 	ldw	r21,196(sp)
 4020edc:	dd003017 	ldw	r20,192(sp)
 4020ee0:	dcc02f17 	ldw	r19,188(sp)
 4020ee4:	dc802e17 	ldw	r18,184(sp)
 4020ee8:	dc402d17 	ldw	r17,180(sp)
 4020eec:	dc002c17 	ldw	r16,176(sp)
 4020ef0:	dec03604 	addi	sp,sp,216
 4020ef4:	f800283a 	ret
 4020ef8:	401d9ac0 	call	401d9ac <__sinit>
 4020efc:	003f2f06 	br	4020bbc <__alt_data_end+0xfc020bbc>
 4020f00:	d8c02517 	ldw	r3,148(sp)
 4020f04:	d8802215 	stw	r2,136(sp)
 4020f08:	00c7c83a 	sub	r3,zero,r3
 4020f0c:	d8c02515 	stw	r3,148(sp)
 4020f10:	8c400114 	ori	r17,r17,4
 4020f14:	b0c00007 	ldb	r3,0(r22)
 4020f18:	003f7306 	br	4020ce8 <__alt_data_end+0xfc020ce8>
 4020f1c:	00800c04 	movi	r2,48
 4020f20:	d9402217 	ldw	r5,136(sp)
 4020f24:	d8801d05 	stb	r2,116(sp)
 4020f28:	00801e04 	movi	r2,120
 4020f2c:	d8801d45 	stb	r2,117(sp)
 4020f30:	d8001d85 	stb	zero,118(sp)
 4020f34:	b811883a 	mov	r8,r23
 4020f38:	28c00104 	addi	r3,r5,4
 4020f3c:	2cc00017 	ldw	r19,0(r5)
 4020f40:	0029883a 	mov	r20,zero
 4020f44:	88800094 	ori	r2,r17,2
 4020f48:	80032516 	blt	r16,zero,4021be0 <___vfiprintf_internal_r+0x106c>
 4020f4c:	00bfdfc4 	movi	r2,-129
 4020f50:	88a2703a 	and	r17,r17,r2
 4020f54:	d8c02215 	stw	r3,136(sp)
 4020f58:	8c400094 	ori	r17,r17,2
 4020f5c:	98032a1e 	bne	r19,zero,4021c08 <___vfiprintf_internal_r+0x1094>
 4020f60:	008100f4 	movhi	r2,1027
 4020f64:	10b06804 	addi	r2,r2,-15968
 4020f68:	d8802615 	stw	r2,152(sp)
 4020f6c:	002b883a 	mov	r21,zero
 4020f70:	8001741e 	bne	r16,zero,4021544 <___vfiprintf_internal_r+0x9d0>
 4020f74:	0021883a 	mov	r16,zero
 4020f78:	0029883a 	mov	r20,zero
 4020f7c:	ddc01a04 	addi	r23,sp,104
 4020f80:	8027883a 	mov	r19,r16
 4020f84:	8500010e 	bge	r16,r20,4020f8c <___vfiprintf_internal_r+0x418>
 4020f88:	a027883a 	mov	r19,r20
 4020f8c:	ad403fcc 	andi	r21,r21,255
 4020f90:	ad40201c 	xori	r21,r21,128
 4020f94:	ad7fe004 	addi	r21,r21,-128
 4020f98:	a8000126 	beq	r21,zero,4020fa0 <___vfiprintf_internal_r+0x42c>
 4020f9c:	9cc00044 	addi	r19,r19,1
 4020fa0:	89c0008c 	andi	r7,r17,2
 4020fa4:	38000126 	beq	r7,zero,4020fac <___vfiprintf_internal_r+0x438>
 4020fa8:	9cc00084 	addi	r19,r19,2
 4020fac:	88c0210c 	andi	r3,r17,132
 4020fb0:	1801dd1e 	bne	r3,zero,4021728 <___vfiprintf_internal_r+0xbb4>
 4020fb4:	d9402517 	ldw	r5,148(sp)
 4020fb8:	2cebc83a 	sub	r21,r5,r19
 4020fbc:	0541da0e 	bge	zero,r21,4021728 <___vfiprintf_internal_r+0xbb4>
 4020fc0:	07000404 	movi	fp,16
 4020fc4:	d8801c17 	ldw	r2,112(sp)
 4020fc8:	e543be0e 	bge	fp,r21,4021ec4 <___vfiprintf_internal_r+0x1350>
 4020fcc:	014100f4 	movhi	r5,1027
 4020fd0:	2970cd04 	addi	r5,r5,-15564
 4020fd4:	dc002715 	stw	r16,156(sp)
 4020fd8:	d9801b17 	ldw	r6,108(sp)
 4020fdc:	a821883a 	mov	r16,r21
 4020fe0:	d9402315 	stw	r5,140(sp)
 4020fe4:	028001c4 	movi	r10,7
 4020fe8:	d9c02915 	stw	r7,164(sp)
 4020fec:	182b883a 	mov	r21,r3
 4020ff0:	00000506 	br	4021008 <___vfiprintf_internal_r+0x494>
 4020ff4:	31000084 	addi	r4,r6,2
 4020ff8:	42000204 	addi	r8,r8,8
 4020ffc:	180d883a 	mov	r6,r3
 4021000:	843ffc04 	addi	r16,r16,-16
 4021004:	e4000f0e 	bge	fp,r16,4021044 <___vfiprintf_internal_r+0x4d0>
 4021008:	010100f4 	movhi	r4,1027
 402100c:	10800404 	addi	r2,r2,16
 4021010:	30c00044 	addi	r3,r6,1
 4021014:	2130cd04 	addi	r4,r4,-15564
 4021018:	41000015 	stw	r4,0(r8)
 402101c:	47000115 	stw	fp,4(r8)
 4021020:	d8801c15 	stw	r2,112(sp)
 4021024:	d8c01b15 	stw	r3,108(sp)
 4021028:	50fff20e 	bge	r10,r3,4020ff4 <__alt_data_end+0xfc020ff4>
 402102c:	1001b21e 	bne	r2,zero,40216f8 <___vfiprintf_internal_r+0xb84>
 4021030:	843ffc04 	addi	r16,r16,-16
 4021034:	000d883a 	mov	r6,zero
 4021038:	01000044 	movi	r4,1
 402103c:	d811883a 	mov	r8,sp
 4021040:	e43ff116 	blt	fp,r16,4021008 <__alt_data_end+0xfc021008>
 4021044:	a807883a 	mov	r3,r21
 4021048:	d9c02917 	ldw	r7,164(sp)
 402104c:	802b883a 	mov	r21,r16
 4021050:	dc002717 	ldw	r16,156(sp)
 4021054:	d9402317 	ldw	r5,140(sp)
 4021058:	a885883a 	add	r2,r21,r2
 402105c:	45400115 	stw	r21,4(r8)
 4021060:	41400015 	stw	r5,0(r8)
 4021064:	d8801c15 	stw	r2,112(sp)
 4021068:	d9001b15 	stw	r4,108(sp)
 402106c:	014001c4 	movi	r5,7
 4021070:	29026216 	blt	r5,r4,40219fc <___vfiprintf_internal_r+0xe88>
 4021074:	d9801d87 	ldb	r6,118(sp)
 4021078:	42000204 	addi	r8,r8,8
 402107c:	21400044 	addi	r5,r4,1
 4021080:	3001ae1e 	bne	r6,zero,402173c <___vfiprintf_internal_r+0xbc8>
 4021084:	3801bb26 	beq	r7,zero,4021774 <___vfiprintf_internal_r+0xc00>
 4021088:	d9001d04 	addi	r4,sp,116
 402108c:	10800084 	addi	r2,r2,2
 4021090:	41000015 	stw	r4,0(r8)
 4021094:	01000084 	movi	r4,2
 4021098:	41000115 	stw	r4,4(r8)
 402109c:	d8801c15 	stw	r2,112(sp)
 40210a0:	d9401b15 	stw	r5,108(sp)
 40210a4:	010001c4 	movi	r4,7
 40210a8:	2142680e 	bge	r4,r5,4021a4c <___vfiprintf_internal_r+0xed8>
 40210ac:	1002b11e 	bne	r2,zero,4021b74 <___vfiprintf_internal_r+0x1000>
 40210b0:	01802004 	movi	r6,128
 40210b4:	01400044 	movi	r5,1
 40210b8:	0009883a 	mov	r4,zero
 40210bc:	d811883a 	mov	r8,sp
 40210c0:	1981ae1e 	bne	r3,r6,402177c <___vfiprintf_internal_r+0xc08>
 40210c4:	d8c02517 	ldw	r3,148(sp)
 40210c8:	1cf9c83a 	sub	fp,r3,r19
 40210cc:	0701ab0e 	bge	zero,fp,402177c <___vfiprintf_internal_r+0xc08>
 40210d0:	05400404 	movi	r21,16
 40210d4:	af03a90e 	bge	r21,fp,4021f7c <___vfiprintf_internal_r+0x1408>
 40210d8:	014100f4 	movhi	r5,1027
 40210dc:	2970c904 	addi	r5,r5,-15580
 40210e0:	d9402315 	stw	r5,140(sp)
 40210e4:	01c001c4 	movi	r7,7
 40210e8:	00000506 	br	4021100 <___vfiprintf_internal_r+0x58c>
 40210ec:	21800084 	addi	r6,r4,2
 40210f0:	42000204 	addi	r8,r8,8
 40210f4:	1809883a 	mov	r4,r3
 40210f8:	e73ffc04 	addi	fp,fp,-16
 40210fc:	af000d0e 	bge	r21,fp,4021134 <___vfiprintf_internal_r+0x5c0>
 4021100:	10800404 	addi	r2,r2,16
 4021104:	20c00044 	addi	r3,r4,1
 4021108:	44800015 	stw	r18,0(r8)
 402110c:	45400115 	stw	r21,4(r8)
 4021110:	d8801c15 	stw	r2,112(sp)
 4021114:	d8c01b15 	stw	r3,108(sp)
 4021118:	38fff40e 	bge	r7,r3,40210ec <__alt_data_end+0xfc0210ec>
 402111c:	10022b1e 	bne	r2,zero,40219cc <___vfiprintf_internal_r+0xe58>
 4021120:	e73ffc04 	addi	fp,fp,-16
 4021124:	01800044 	movi	r6,1
 4021128:	0009883a 	mov	r4,zero
 402112c:	d811883a 	mov	r8,sp
 4021130:	af3ff316 	blt	r21,fp,4021100 <__alt_data_end+0xfc021100>
 4021134:	d8c02317 	ldw	r3,140(sp)
 4021138:	1705883a 	add	r2,r2,fp
 402113c:	47000115 	stw	fp,4(r8)
 4021140:	40c00015 	stw	r3,0(r8)
 4021144:	d8801c15 	stw	r2,112(sp)
 4021148:	d9801b15 	stw	r6,108(sp)
 402114c:	00c001c4 	movi	r3,7
 4021150:	19829416 	blt	r3,r6,4021ba4 <___vfiprintf_internal_r+0x1030>
 4021154:	8521c83a 	sub	r16,r16,r20
 4021158:	42000204 	addi	r8,r8,8
 402115c:	31400044 	addi	r5,r6,1
 4021160:	3009883a 	mov	r4,r6
 4021164:	04018716 	blt	zero,r16,4021784 <___vfiprintf_internal_r+0xc10>
 4021168:	a085883a 	add	r2,r20,r2
 402116c:	45c00015 	stw	r23,0(r8)
 4021170:	45000115 	stw	r20,4(r8)
 4021174:	d8801c15 	stw	r2,112(sp)
 4021178:	d9401b15 	stw	r5,108(sp)
 402117c:	00c001c4 	movi	r3,7
 4021180:	1941c20e 	bge	r3,r5,402188c <___vfiprintf_internal_r+0xd18>
 4021184:	1002531e 	bne	r2,zero,4021ad4 <___vfiprintf_internal_r+0xf60>
 4021188:	d8001b15 	stw	zero,108(sp)
 402118c:	8c40010c 	andi	r17,r17,4
 4021190:	88023226 	beq	r17,zero,4021a5c <___vfiprintf_internal_r+0xee8>
 4021194:	d9002517 	ldw	r4,148(sp)
 4021198:	24e3c83a 	sub	r17,r4,r19
 402119c:	04432916 	blt	zero,r17,4021e44 <___vfiprintf_internal_r+0x12d0>
 40211a0:	d8802517 	ldw	r2,148(sp)
 40211a4:	14c0010e 	bge	r2,r19,40211ac <___vfiprintf_internal_r+0x638>
 40211a8:	9805883a 	mov	r2,r19
 40211ac:	d8c02417 	ldw	r3,144(sp)
 40211b0:	1887883a 	add	r3,r3,r2
 40211b4:	d8c02415 	stw	r3,144(sp)
 40211b8:	d8001b15 	stw	zero,108(sp)
 40211bc:	d811883a 	mov	r8,sp
 40211c0:	003ea006 	br	4020c44 <__alt_data_end+0xfc020c44>
 40211c4:	8c400814 	ori	r17,r17,32
 40211c8:	b0c00007 	ldb	r3,0(r22)
 40211cc:	003ec606 	br	4020ce8 <__alt_data_end+0xfc020ce8>
 40211d0:	b0c00007 	ldb	r3,0(r22)
 40211d4:	00801b04 	movi	r2,108
 40211d8:	18832026 	beq	r3,r2,4021e5c <___vfiprintf_internal_r+0x12e8>
 40211dc:	8c400414 	ori	r17,r17,16
 40211e0:	003ec106 	br	4020ce8 <__alt_data_end+0xfc020ce8>
 40211e4:	9cc03fcc 	andi	r19,r19,255
 40211e8:	b811883a 	mov	r8,r23
 40211ec:	9803981e 	bne	r19,zero,4022050 <___vfiprintf_internal_r+0x14dc>
 40211f0:	8880080c 	andi	r2,r17,32
 40211f4:	1002be26 	beq	r2,zero,4021cf0 <___vfiprintf_internal_r+0x117c>
 40211f8:	d9002217 	ldw	r4,136(sp)
 40211fc:	d9402417 	ldw	r5,144(sp)
 4021200:	20800017 	ldw	r2,0(r4)
 4021204:	2807d7fa 	srai	r3,r5,31
 4021208:	21000104 	addi	r4,r4,4
 402120c:	d9002215 	stw	r4,136(sp)
 4021210:	11400015 	stw	r5,0(r2)
 4021214:	10c00115 	stw	r3,4(r2)
 4021218:	003e8a06 	br	4020c44 <__alt_data_end+0xfc020c44>
 402121c:	9cc03fcc 	andi	r19,r19,255
 4021220:	b811883a 	mov	r8,r23
 4021224:	9803871e 	bne	r19,zero,4022044 <___vfiprintf_internal_r+0x14d0>
 4021228:	8880080c 	andi	r2,r17,32
 402122c:	10009a26 	beq	r2,zero,4021498 <___vfiprintf_internal_r+0x924>
 4021230:	d9002217 	ldw	r4,136(sp)
 4021234:	d8001d85 	stb	zero,118(sp)
 4021238:	20800204 	addi	r2,r4,8
 402123c:	24c00017 	ldw	r19,0(r4)
 4021240:	25000117 	ldw	r20,4(r4)
 4021244:	8002a416 	blt	r16,zero,4021cd8 <___vfiprintf_internal_r+0x1164>
 4021248:	013fdfc4 	movi	r4,-129
 402124c:	9d06b03a 	or	r3,r19,r20
 4021250:	d8802215 	stw	r2,136(sp)
 4021254:	8922703a 	and	r17,r17,r4
 4021258:	18009b26 	beq	r3,zero,40214c8 <___vfiprintf_internal_r+0x954>
 402125c:	002b883a 	mov	r21,zero
 4021260:	ddc01a04 	addi	r23,sp,104
 4021264:	9806d0fa 	srli	r3,r19,3
 4021268:	a008977a 	slli	r4,r20,29
 402126c:	a028d0fa 	srli	r20,r20,3
 4021270:	9cc001cc 	andi	r19,r19,7
 4021274:	98800c04 	addi	r2,r19,48
 4021278:	bdffffc4 	addi	r23,r23,-1
 402127c:	20e6b03a 	or	r19,r4,r3
 4021280:	b8800005 	stb	r2,0(r23)
 4021284:	9d06b03a 	or	r3,r19,r20
 4021288:	183ff61e 	bne	r3,zero,4021264 <__alt_data_end+0xfc021264>
 402128c:	88c0004c 	andi	r3,r17,1
 4021290:	18021f1e 	bne	r3,zero,4021b10 <___vfiprintf_internal_r+0xf9c>
 4021294:	d9401e17 	ldw	r5,120(sp)
 4021298:	2de9c83a 	sub	r20,r5,r23
 402129c:	003f3806 	br	4020f80 <__alt_data_end+0xfc020f80>
 40212a0:	9cc03fcc 	andi	r19,r19,255
 40212a4:	b811883a 	mov	r8,r23
 40212a8:	98034f1e 	bne	r19,zero,4021fe8 <___vfiprintf_internal_r+0x1474>
 40212ac:	008100f4 	movhi	r2,1027
 40212b0:	10b06804 	addi	r2,r2,-15968
 40212b4:	d8802615 	stw	r2,152(sp)
 40212b8:	8880080c 	andi	r2,r17,32
 40212bc:	1000ac26 	beq	r2,zero,4021570 <___vfiprintf_internal_r+0x9fc>
 40212c0:	d9002217 	ldw	r4,136(sp)
 40212c4:	24c00017 	ldw	r19,0(r4)
 40212c8:	25000117 	ldw	r20,4(r4)
 40212cc:	21000204 	addi	r4,r4,8
 40212d0:	d9002215 	stw	r4,136(sp)
 40212d4:	8880004c 	andi	r2,r17,1
 40212d8:	1001e726 	beq	r2,zero,4021a78 <___vfiprintf_internal_r+0xf04>
 40212dc:	9d04b03a 	or	r2,r19,r20
 40212e0:	10025c1e 	bne	r2,zero,4021c54 <___vfiprintf_internal_r+0x10e0>
 40212e4:	d8001d85 	stb	zero,118(sp)
 40212e8:	80024416 	blt	r16,zero,4021bfc <___vfiprintf_internal_r+0x1088>
 40212ec:	00bfdfc4 	movi	r2,-129
 40212f0:	88a2703a 	and	r17,r17,r2
 40212f4:	003f1d06 	br	4020f6c <__alt_data_end+0xfc020f6c>
 40212f8:	d8c02217 	ldw	r3,136(sp)
 40212fc:	04c00044 	movi	r19,1
 4021300:	b811883a 	mov	r8,r23
 4021304:	18800017 	ldw	r2,0(r3)
 4021308:	18c00104 	addi	r3,r3,4
 402130c:	d8001d85 	stb	zero,118(sp)
 4021310:	d8801005 	stb	r2,64(sp)
 4021314:	d8c02215 	stw	r3,136(sp)
 4021318:	9829883a 	mov	r20,r19
 402131c:	ddc01004 	addi	r23,sp,64
 4021320:	0021883a 	mov	r16,zero
 4021324:	003f1e06 	br	4020fa0 <__alt_data_end+0xfc020fa0>
 4021328:	9cc03fcc 	andi	r19,r19,255
 402132c:	b811883a 	mov	r8,r23
 4021330:	9803331e 	bne	r19,zero,4022000 <___vfiprintf_internal_r+0x148c>
 4021334:	8880080c 	andi	r2,r17,32
 4021338:	10004826 	beq	r2,zero,402145c <___vfiprintf_internal_r+0x8e8>
 402133c:	d9002217 	ldw	r4,136(sp)
 4021340:	20800117 	ldw	r2,4(r4)
 4021344:	24c00017 	ldw	r19,0(r4)
 4021348:	21000204 	addi	r4,r4,8
 402134c:	d9002215 	stw	r4,136(sp)
 4021350:	1029883a 	mov	r20,r2
 4021354:	10024c16 	blt	r2,zero,4021c88 <___vfiprintf_internal_r+0x1114>
 4021358:	dd401d83 	ldbu	r21,118(sp)
 402135c:	80007116 	blt	r16,zero,4021524 <___vfiprintf_internal_r+0x9b0>
 4021360:	00ffdfc4 	movi	r3,-129
 4021364:	9d04b03a 	or	r2,r19,r20
 4021368:	88e2703a 	and	r17,r17,r3
 402136c:	1000d126 	beq	r2,zero,40216b4 <___vfiprintf_internal_r+0xb40>
 4021370:	a0023526 	beq	r20,zero,4021c48 <___vfiprintf_internal_r+0x10d4>
 4021374:	ddc01a04 	addi	r23,sp,104
 4021378:	4039883a 	mov	fp,r8
 402137c:	9809883a 	mov	r4,r19
 4021380:	a00b883a 	mov	r5,r20
 4021384:	01800284 	movi	r6,10
 4021388:	000f883a 	mov	r7,zero
 402138c:	40231ac0 	call	40231ac <__umoddi3>
 4021390:	10800c04 	addi	r2,r2,48
 4021394:	bdffffc4 	addi	r23,r23,-1
 4021398:	9809883a 	mov	r4,r19
 402139c:	a00b883a 	mov	r5,r20
 40213a0:	b8800005 	stb	r2,0(r23)
 40213a4:	01800284 	movi	r6,10
 40213a8:	000f883a 	mov	r7,zero
 40213ac:	4022bb00 	call	4022bb0 <__udivdi3>
 40213b0:	1027883a 	mov	r19,r2
 40213b4:	10c4b03a 	or	r2,r2,r3
 40213b8:	1829883a 	mov	r20,r3
 40213bc:	103fef1e 	bne	r2,zero,402137c <__alt_data_end+0xfc02137c>
 40213c0:	d9001e17 	ldw	r4,120(sp)
 40213c4:	e011883a 	mov	r8,fp
 40213c8:	25e9c83a 	sub	r20,r4,r23
 40213cc:	003eec06 	br	4020f80 <__alt_data_end+0xfc020f80>
 40213d0:	d8802307 	ldb	r2,140(sp)
 40213d4:	1002361e 	bne	r2,zero,4021cb0 <___vfiprintf_internal_r+0x113c>
 40213d8:	00c00804 	movi	r3,32
 40213dc:	d8c02305 	stb	r3,140(sp)
 40213e0:	04c00044 	movi	r19,1
 40213e4:	b0c00007 	ldb	r3,0(r22)
 40213e8:	003e3f06 	br	4020ce8 <__alt_data_end+0xfc020ce8>
 40213ec:	8c400054 	ori	r17,r17,1
 40213f0:	b0c00007 	ldb	r3,0(r22)
 40213f4:	003e3c06 	br	4020ce8 <__alt_data_end+0xfc020ce8>
 40213f8:	8c402014 	ori	r17,r17,128
 40213fc:	b0c00007 	ldb	r3,0(r22)
 4021400:	003e3906 	br	4020ce8 <__alt_data_end+0xfc020ce8>
 4021404:	dc002715 	stw	r16,156(sp)
 4021408:	d8002515 	stw	zero,148(sp)
 402140c:	1f3ff404 	addi	fp,r3,-48
 4021410:	0009883a 	mov	r4,zero
 4021414:	b021883a 	mov	r16,r22
 4021418:	01400284 	movi	r5,10
 402141c:	40191000 	call	4019100 <__mulsi3>
 4021420:	80c00007 	ldb	r3,0(r16)
 4021424:	e089883a 	add	r4,fp,r2
 4021428:	b5800044 	addi	r22,r22,1
 402142c:	1f3ff404 	addi	fp,r3,-48
 4021430:	b021883a 	mov	r16,r22
 4021434:	af3ff82e 	bgeu	r21,fp,4021418 <__alt_data_end+0xfc021418>
 4021438:	d9002515 	stw	r4,148(sp)
 402143c:	dc002717 	ldw	r16,156(sp)
 4021440:	003e2a06 	br	4020cec <__alt_data_end+0xfc020cec>
 4021444:	9cc03fcc 	andi	r19,r19,255
 4021448:	b811883a 	mov	r8,r23
 402144c:	9802e91e 	bne	r19,zero,4021ff4 <___vfiprintf_internal_r+0x1480>
 4021450:	8c400414 	ori	r17,r17,16
 4021454:	8880080c 	andi	r2,r17,32
 4021458:	103fb81e 	bne	r2,zero,402133c <__alt_data_end+0xfc02133c>
 402145c:	8880040c 	andi	r2,r17,16
 4021460:	10022e26 	beq	r2,zero,4021d1c <___vfiprintf_internal_r+0x11a8>
 4021464:	d9402217 	ldw	r5,136(sp)
 4021468:	2cc00017 	ldw	r19,0(r5)
 402146c:	29400104 	addi	r5,r5,4
 4021470:	d9402215 	stw	r5,136(sp)
 4021474:	9829d7fa 	srai	r20,r19,31
 4021478:	a005883a 	mov	r2,r20
 402147c:	003fb506 	br	4021354 <__alt_data_end+0xfc021354>
 4021480:	9cc03fcc 	andi	r19,r19,255
 4021484:	b811883a 	mov	r8,r23
 4021488:	9802fa1e 	bne	r19,zero,4022074 <___vfiprintf_internal_r+0x1500>
 402148c:	8c400414 	ori	r17,r17,16
 4021490:	8880080c 	andi	r2,r17,32
 4021494:	103f661e 	bne	r2,zero,4021230 <__alt_data_end+0xfc021230>
 4021498:	8880040c 	andi	r2,r17,16
 402149c:	10020626 	beq	r2,zero,4021cb8 <___vfiprintf_internal_r+0x1144>
 40214a0:	d9402217 	ldw	r5,136(sp)
 40214a4:	d8001d85 	stb	zero,118(sp)
 40214a8:	0029883a 	mov	r20,zero
 40214ac:	28800104 	addi	r2,r5,4
 40214b0:	2cc00017 	ldw	r19,0(r5)
 40214b4:	80020816 	blt	r16,zero,4021cd8 <___vfiprintf_internal_r+0x1164>
 40214b8:	00ffdfc4 	movi	r3,-129
 40214bc:	d8802215 	stw	r2,136(sp)
 40214c0:	88e2703a 	and	r17,r17,r3
 40214c4:	983f651e 	bne	r19,zero,402125c <__alt_data_end+0xfc02125c>
 40214c8:	002b883a 	mov	r21,zero
 40214cc:	8002cf26 	beq	r16,zero,402200c <___vfiprintf_internal_r+0x1498>
 40214d0:	0027883a 	mov	r19,zero
 40214d4:	0029883a 	mov	r20,zero
 40214d8:	003f6106 	br	4021260 <__alt_data_end+0xfc021260>
 40214dc:	9cc03fcc 	andi	r19,r19,255
 40214e0:	b811883a 	mov	r8,r23
 40214e4:	9802e01e 	bne	r19,zero,4022068 <___vfiprintf_internal_r+0x14f4>
 40214e8:	8c400414 	ori	r17,r17,16
 40214ec:	8880080c 	andi	r2,r17,32
 40214f0:	1000641e 	bne	r2,zero,4021684 <___vfiprintf_internal_r+0xb10>
 40214f4:	8880040c 	andi	r2,r17,16
 40214f8:	1001c81e 	bne	r2,zero,4021c1c <___vfiprintf_internal_r+0x10a8>
 40214fc:	8880100c 	andi	r2,r17,64
 4021500:	d8001d85 	stb	zero,118(sp)
 4021504:	1002281e 	bne	r2,zero,4021da8 <___vfiprintf_internal_r+0x1234>
 4021508:	d9002217 	ldw	r4,136(sp)
 402150c:	0029883a 	mov	r20,zero
 4021510:	20800104 	addi	r2,r4,4
 4021514:	24c00017 	ldw	r19,0(r4)
 4021518:	8001c60e 	bge	r16,zero,4021c34 <___vfiprintf_internal_r+0x10c0>
 402151c:	d8802215 	stw	r2,136(sp)
 4021520:	002b883a 	mov	r21,zero
 4021524:	9d04b03a 	or	r2,r19,r20
 4021528:	103f911e 	bne	r2,zero,4021370 <__alt_data_end+0xfc021370>
 402152c:	00800044 	movi	r2,1
 4021530:	10803fcc 	andi	r2,r2,255
 4021534:	00c00044 	movi	r3,1
 4021538:	10c05f26 	beq	r2,r3,40216b8 <___vfiprintf_internal_r+0xb44>
 402153c:	00c00084 	movi	r3,2
 4021540:	10ffe31e 	bne	r2,r3,40214d0 <__alt_data_end+0xfc0214d0>
 4021544:	0027883a 	mov	r19,zero
 4021548:	0029883a 	mov	r20,zero
 402154c:	00015106 	br	4021a94 <___vfiprintf_internal_r+0xf20>
 4021550:	9cc03fcc 	andi	r19,r19,255
 4021554:	b811883a 	mov	r8,r23
 4021558:	9802c01e 	bne	r19,zero,402205c <___vfiprintf_internal_r+0x14e8>
 402155c:	014100f4 	movhi	r5,1027
 4021560:	29706304 	addi	r5,r5,-15988
 4021564:	d9402615 	stw	r5,152(sp)
 4021568:	8880080c 	andi	r2,r17,32
 402156c:	103f541e 	bne	r2,zero,40212c0 <__alt_data_end+0xfc0212c0>
 4021570:	8880040c 	andi	r2,r17,16
 4021574:	1001f226 	beq	r2,zero,4021d40 <___vfiprintf_internal_r+0x11cc>
 4021578:	d9402217 	ldw	r5,136(sp)
 402157c:	0029883a 	mov	r20,zero
 4021580:	2cc00017 	ldw	r19,0(r5)
 4021584:	29400104 	addi	r5,r5,4
 4021588:	d9402215 	stw	r5,136(sp)
 402158c:	003f5106 	br	40212d4 <__alt_data_end+0xfc0212d4>
 4021590:	d8c02217 	ldw	r3,136(sp)
 4021594:	b811883a 	mov	r8,r23
 4021598:	d8001d85 	stb	zero,118(sp)
 402159c:	1dc00017 	ldw	r23,0(r3)
 40215a0:	1f000104 	addi	fp,r3,4
 40215a4:	b8025926 	beq	r23,zero,4021f0c <___vfiprintf_internal_r+0x1398>
 40215a8:	80023316 	blt	r16,zero,4021e78 <___vfiprintf_internal_r+0x1304>
 40215ac:	800d883a 	mov	r6,r16
 40215b0:	000b883a 	mov	r5,zero
 40215b4:	b809883a 	mov	r4,r23
 40215b8:	da002a15 	stw	r8,168(sp)
 40215bc:	401ef240 	call	401ef24 <memchr>
 40215c0:	da002a17 	ldw	r8,168(sp)
 40215c4:	10026826 	beq	r2,zero,4021f68 <___vfiprintf_internal_r+0x13f4>
 40215c8:	15e9c83a 	sub	r20,r2,r23
 40215cc:	dd401d83 	ldbu	r21,118(sp)
 40215d0:	df002215 	stw	fp,136(sp)
 40215d4:	0021883a 	mov	r16,zero
 40215d8:	003e6906 	br	4020f80 <__alt_data_end+0xfc020f80>
 40215dc:	9cc03fcc 	andi	r19,r19,255
 40215e0:	b811883a 	mov	r8,r23
 40215e4:	983fc126 	beq	r19,zero,40214ec <__alt_data_end+0xfc0214ec>
 40215e8:	d8c02303 	ldbu	r3,140(sp)
 40215ec:	d8c01d85 	stb	r3,118(sp)
 40215f0:	003fbe06 	br	40214ec <__alt_data_end+0xfc0214ec>
 40215f4:	d9002217 	ldw	r4,136(sp)
 40215f8:	d9402217 	ldw	r5,136(sp)
 40215fc:	21000017 	ldw	r4,0(r4)
 4021600:	28800104 	addi	r2,r5,4
 4021604:	d9002515 	stw	r4,148(sp)
 4021608:	203e3d16 	blt	r4,zero,4020f00 <__alt_data_end+0xfc020f00>
 402160c:	d8802215 	stw	r2,136(sp)
 4021610:	b0c00007 	ldb	r3,0(r22)
 4021614:	003db406 	br	4020ce8 <__alt_data_end+0xfc020ce8>
 4021618:	00c00ac4 	movi	r3,43
 402161c:	d8c02305 	stb	r3,140(sp)
 4021620:	04c00044 	movi	r19,1
 4021624:	b0c00007 	ldb	r3,0(r22)
 4021628:	003daf06 	br	4020ce8 <__alt_data_end+0xfc020ce8>
 402162c:	b0c00007 	ldb	r3,0(r22)
 4021630:	01000a84 	movi	r4,42
 4021634:	b4000044 	addi	r16,r22,1
 4021638:	19025e26 	beq	r3,r4,4021fb4 <___vfiprintf_internal_r+0x1440>
 402163c:	1f3ff404 	addi	fp,r3,-48
 4021640:	0009883a 	mov	r4,zero
 4021644:	af025236 	bltu	r21,fp,4021f90 <___vfiprintf_internal_r+0x141c>
 4021648:	01400284 	movi	r5,10
 402164c:	40191000 	call	4019100 <__mulsi3>
 4021650:	80c00007 	ldb	r3,0(r16)
 4021654:	1709883a 	add	r4,r2,fp
 4021658:	85800044 	addi	r22,r16,1
 402165c:	1f3ff404 	addi	fp,r3,-48
 4021660:	b021883a 	mov	r16,r22
 4021664:	af3ff82e 	bgeu	r21,fp,4021648 <__alt_data_end+0xfc021648>
 4021668:	2021883a 	mov	r16,r4
 402166c:	203d9f0e 	bge	r4,zero,4020cec <__alt_data_end+0xfc020cec>
 4021670:	043fffc4 	movi	r16,-1
 4021674:	003d9d06 	br	4020cec <__alt_data_end+0xfc020cec>
 4021678:	8c401014 	ori	r17,r17,64
 402167c:	b0c00007 	ldb	r3,0(r22)
 4021680:	003d9906 	br	4020ce8 <__alt_data_end+0xfc020ce8>
 4021684:	d9002217 	ldw	r4,136(sp)
 4021688:	d8001d85 	stb	zero,118(sp)
 402168c:	20c00204 	addi	r3,r4,8
 4021690:	24c00017 	ldw	r19,0(r4)
 4021694:	25000117 	ldw	r20,4(r4)
 4021698:	8001e716 	blt	r16,zero,4021e38 <___vfiprintf_internal_r+0x12c4>
 402169c:	013fdfc4 	movi	r4,-129
 40216a0:	9d04b03a 	or	r2,r19,r20
 40216a4:	d8c02215 	stw	r3,136(sp)
 40216a8:	8922703a 	and	r17,r17,r4
 40216ac:	002b883a 	mov	r21,zero
 40216b0:	103f2f1e 	bne	r2,zero,4021370 <__alt_data_end+0xfc021370>
 40216b4:	803e2f26 	beq	r16,zero,4020f74 <__alt_data_end+0xfc020f74>
 40216b8:	0027883a 	mov	r19,zero
 40216bc:	9cc00c04 	addi	r19,r19,48
 40216c0:	dcc019c5 	stb	r19,103(sp)
 40216c4:	dd002817 	ldw	r20,160(sp)
 40216c8:	ddc019c4 	addi	r23,sp,103
 40216cc:	003e2c06 	br	4020f80 <__alt_data_end+0xfc020f80>
 40216d0:	9cc03fcc 	andi	r19,r19,255
 40216d4:	b811883a 	mov	r8,r23
 40216d8:	9802571e 	bne	r19,zero,4022038 <___vfiprintf_internal_r+0x14c4>
 40216dc:	18005726 	beq	r3,zero,402183c <___vfiprintf_internal_r+0xcc8>
 40216e0:	04c00044 	movi	r19,1
 40216e4:	d8c01005 	stb	r3,64(sp)
 40216e8:	d8001d85 	stb	zero,118(sp)
 40216ec:	9829883a 	mov	r20,r19
 40216f0:	ddc01004 	addi	r23,sp,64
 40216f4:	003f0a06 	br	4021320 <__alt_data_end+0xfc021320>
 40216f8:	d9402017 	ldw	r5,128(sp)
 40216fc:	d9002117 	ldw	r4,132(sp)
 4021700:	d9801a04 	addi	r6,sp,104
 4021704:	da802a15 	stw	r10,168(sp)
 4021708:	4020a600 	call	4020a60 <__sprint_r.part.0>
 402170c:	da802a17 	ldw	r10,168(sp)
 4021710:	1000501e 	bne	r2,zero,4021854 <___vfiprintf_internal_r+0xce0>
 4021714:	d9801b17 	ldw	r6,108(sp)
 4021718:	d8801c17 	ldw	r2,112(sp)
 402171c:	d811883a 	mov	r8,sp
 4021720:	31000044 	addi	r4,r6,1
 4021724:	003e3606 	br	4021000 <__alt_data_end+0xfc021000>
 4021728:	d9001b17 	ldw	r4,108(sp)
 402172c:	d8801c17 	ldw	r2,112(sp)
 4021730:	21400044 	addi	r5,r4,1
 4021734:	d9801d87 	ldb	r6,118(sp)
 4021738:	303e5226 	beq	r6,zero,4021084 <__alt_data_end+0xfc021084>
 402173c:	01800044 	movi	r6,1
 4021740:	d9001d84 	addi	r4,sp,118
 4021744:	1185883a 	add	r2,r2,r6
 4021748:	41000015 	stw	r4,0(r8)
 402174c:	41800115 	stw	r6,4(r8)
 4021750:	d8801c15 	stw	r2,112(sp)
 4021754:	d9401b15 	stw	r5,108(sp)
 4021758:	010001c4 	movi	r4,7
 402175c:	2140b00e 	bge	r4,r5,4021a20 <___vfiprintf_internal_r+0xeac>
 4021760:	1000f61e 	bne	r2,zero,4021b3c <___vfiprintf_internal_r+0xfc8>
 4021764:	3800b31e 	bne	r7,zero,4021a34 <___vfiprintf_internal_r+0xec0>
 4021768:	0009883a 	mov	r4,zero
 402176c:	300b883a 	mov	r5,r6
 4021770:	d811883a 	mov	r8,sp
 4021774:	01802004 	movi	r6,128
 4021778:	19be5226 	beq	r3,r6,40210c4 <__alt_data_end+0xfc0210c4>
 402177c:	8521c83a 	sub	r16,r16,r20
 4021780:	043e790e 	bge	zero,r16,4021168 <__alt_data_end+0xfc021168>
 4021784:	05400404 	movi	r21,16
 4021788:	ac01b00e 	bge	r21,r16,4021e4c <___vfiprintf_internal_r+0x12d8>
 402178c:	014100f4 	movhi	r5,1027
 4021790:	2970c904 	addi	r5,r5,-15580
 4021794:	d9402315 	stw	r5,140(sp)
 4021798:	070001c4 	movi	fp,7
 402179c:	00000506 	br	40217b4 <___vfiprintf_internal_r+0xc40>
 40217a0:	21400084 	addi	r5,r4,2
 40217a4:	42000204 	addi	r8,r8,8
 40217a8:	1809883a 	mov	r4,r3
 40217ac:	843ffc04 	addi	r16,r16,-16
 40217b0:	ac000d0e 	bge	r21,r16,40217e8 <___vfiprintf_internal_r+0xc74>
 40217b4:	10800404 	addi	r2,r2,16
 40217b8:	20c00044 	addi	r3,r4,1
 40217bc:	44800015 	stw	r18,0(r8)
 40217c0:	45400115 	stw	r21,4(r8)
 40217c4:	d8801c15 	stw	r2,112(sp)
 40217c8:	d8c01b15 	stw	r3,108(sp)
 40217cc:	e0fff40e 	bge	fp,r3,40217a0 <__alt_data_end+0xfc0217a0>
 40217d0:	1000101e 	bne	r2,zero,4021814 <___vfiprintf_internal_r+0xca0>
 40217d4:	843ffc04 	addi	r16,r16,-16
 40217d8:	01400044 	movi	r5,1
 40217dc:	0009883a 	mov	r4,zero
 40217e0:	d811883a 	mov	r8,sp
 40217e4:	ac3ff316 	blt	r21,r16,40217b4 <__alt_data_end+0xfc0217b4>
 40217e8:	d8c02317 	ldw	r3,140(sp)
 40217ec:	1405883a 	add	r2,r2,r16
 40217f0:	44000115 	stw	r16,4(r8)
 40217f4:	40c00015 	stw	r3,0(r8)
 40217f8:	d8801c15 	stw	r2,112(sp)
 40217fc:	d9401b15 	stw	r5,108(sp)
 4021800:	00c001c4 	movi	r3,7
 4021804:	19401916 	blt	r3,r5,402186c <___vfiprintf_internal_r+0xcf8>
 4021808:	42000204 	addi	r8,r8,8
 402180c:	29400044 	addi	r5,r5,1
 4021810:	003e5506 	br	4021168 <__alt_data_end+0xfc021168>
 4021814:	d9402017 	ldw	r5,128(sp)
 4021818:	d9002117 	ldw	r4,132(sp)
 402181c:	d9801a04 	addi	r6,sp,104
 4021820:	4020a600 	call	4020a60 <__sprint_r.part.0>
 4021824:	10000b1e 	bne	r2,zero,4021854 <___vfiprintf_internal_r+0xce0>
 4021828:	d9001b17 	ldw	r4,108(sp)
 402182c:	d8801c17 	ldw	r2,112(sp)
 4021830:	d811883a 	mov	r8,sp
 4021834:	21400044 	addi	r5,r4,1
 4021838:	003fdc06 	br	40217ac <__alt_data_end+0xfc0217ac>
 402183c:	d8801c17 	ldw	r2,112(sp)
 4021840:	10000426 	beq	r2,zero,4021854 <___vfiprintf_internal_r+0xce0>
 4021844:	d9402017 	ldw	r5,128(sp)
 4021848:	d9002117 	ldw	r4,132(sp)
 402184c:	d9801a04 	addi	r6,sp,104
 4021850:	4020a600 	call	4020a60 <__sprint_r.part.0>
 4021854:	d9402017 	ldw	r5,128(sp)
 4021858:	2880030b 	ldhu	r2,12(r5)
 402185c:	1080100c 	andi	r2,r2,64
 4021860:	10014d1e 	bne	r2,zero,4021d98 <___vfiprintf_internal_r+0x1224>
 4021864:	d8802417 	ldw	r2,144(sp)
 4021868:	003d9706 	br	4020ec8 <__alt_data_end+0xfc020ec8>
 402186c:	1000d21e 	bne	r2,zero,4021bb8 <___vfiprintf_internal_r+0x1044>
 4021870:	00c00044 	movi	r3,1
 4021874:	a005883a 	mov	r2,r20
 4021878:	ddc00015 	stw	r23,0(sp)
 402187c:	dd000115 	stw	r20,4(sp)
 4021880:	dd001c15 	stw	r20,112(sp)
 4021884:	d8c01b15 	stw	r3,108(sp)
 4021888:	d811883a 	mov	r8,sp
 402188c:	42000204 	addi	r8,r8,8
 4021890:	8c40010c 	andi	r17,r17,4
 4021894:	88004026 	beq	r17,zero,4021998 <___vfiprintf_internal_r+0xe24>
 4021898:	d9002517 	ldw	r4,148(sp)
 402189c:	24e3c83a 	sub	r17,r4,r19
 40218a0:	04403d0e 	bge	zero,r17,4021998 <___vfiprintf_internal_r+0xe24>
 40218a4:	04000404 	movi	r16,16
 40218a8:	8441a90e 	bge	r16,r17,4021f50 <___vfiprintf_internal_r+0x13dc>
 40218ac:	00c100f4 	movhi	r3,1027
 40218b0:	18f0cd04 	addi	r3,r3,-15564
 40218b4:	d9001b17 	ldw	r4,108(sp)
 40218b8:	d8c02315 	stw	r3,140(sp)
 40218bc:	050001c4 	movi	r20,7
 40218c0:	dd402117 	ldw	r21,132(sp)
 40218c4:	ddc02017 	ldw	r23,128(sp)
 40218c8:	00000506 	br	40218e0 <___vfiprintf_internal_r+0xd6c>
 40218cc:	21400084 	addi	r5,r4,2
 40218d0:	42000204 	addi	r8,r8,8
 40218d4:	1809883a 	mov	r4,r3
 40218d8:	8c7ffc04 	addi	r17,r17,-16
 40218dc:	84400f0e 	bge	r16,r17,402191c <___vfiprintf_internal_r+0xda8>
 40218e0:	014100f4 	movhi	r5,1027
 40218e4:	10800404 	addi	r2,r2,16
 40218e8:	20c00044 	addi	r3,r4,1
 40218ec:	2970cd04 	addi	r5,r5,-15564
 40218f0:	41400015 	stw	r5,0(r8)
 40218f4:	44000115 	stw	r16,4(r8)
 40218f8:	d8801c15 	stw	r2,112(sp)
 40218fc:	d8c01b15 	stw	r3,108(sp)
 4021900:	a0fff20e 	bge	r20,r3,40218cc <__alt_data_end+0xfc0218cc>
 4021904:	1000141e 	bne	r2,zero,4021958 <___vfiprintf_internal_r+0xde4>
 4021908:	8c7ffc04 	addi	r17,r17,-16
 402190c:	01400044 	movi	r5,1
 4021910:	0009883a 	mov	r4,zero
 4021914:	d811883a 	mov	r8,sp
 4021918:	847ff116 	blt	r16,r17,40218e0 <__alt_data_end+0xfc0218e0>
 402191c:	d8c02317 	ldw	r3,140(sp)
 4021920:	1445883a 	add	r2,r2,r17
 4021924:	44400115 	stw	r17,4(r8)
 4021928:	40c00015 	stw	r3,0(r8)
 402192c:	d8801c15 	stw	r2,112(sp)
 4021930:	d9401b15 	stw	r5,108(sp)
 4021934:	00c001c4 	movi	r3,7
 4021938:	1940170e 	bge	r3,r5,4021998 <___vfiprintf_internal_r+0xe24>
 402193c:	1000101e 	bne	r2,zero,4021980 <___vfiprintf_internal_r+0xe0c>
 4021940:	d8802517 	ldw	r2,148(sp)
 4021944:	14c11616 	blt	r2,r19,4021da0 <___vfiprintf_internal_r+0x122c>
 4021948:	d9002417 	ldw	r4,144(sp)
 402194c:	2089883a 	add	r4,r4,r2
 4021950:	d9002415 	stw	r4,144(sp)
 4021954:	003e1806 	br	40211b8 <__alt_data_end+0xfc0211b8>
 4021958:	d9801a04 	addi	r6,sp,104
 402195c:	b80b883a 	mov	r5,r23
 4021960:	a809883a 	mov	r4,r21
 4021964:	4020a600 	call	4020a60 <__sprint_r.part.0>
 4021968:	103fba1e 	bne	r2,zero,4021854 <__alt_data_end+0xfc021854>
 402196c:	d9001b17 	ldw	r4,108(sp)
 4021970:	d8801c17 	ldw	r2,112(sp)
 4021974:	d811883a 	mov	r8,sp
 4021978:	21400044 	addi	r5,r4,1
 402197c:	003fd606 	br	40218d8 <__alt_data_end+0xfc0218d8>
 4021980:	d9402017 	ldw	r5,128(sp)
 4021984:	d9002117 	ldw	r4,132(sp)
 4021988:	d9801a04 	addi	r6,sp,104
 402198c:	4020a600 	call	4020a60 <__sprint_r.part.0>
 4021990:	103fb01e 	bne	r2,zero,4021854 <__alt_data_end+0xfc021854>
 4021994:	d8801c17 	ldw	r2,112(sp)
 4021998:	d8c02517 	ldw	r3,148(sp)
 402199c:	1cc0010e 	bge	r3,r19,40219a4 <___vfiprintf_internal_r+0xe30>
 40219a0:	9807883a 	mov	r3,r19
 40219a4:	d9002417 	ldw	r4,144(sp)
 40219a8:	20c9883a 	add	r4,r4,r3
 40219ac:	d9002415 	stw	r4,144(sp)
 40219b0:	103e0126 	beq	r2,zero,40211b8 <__alt_data_end+0xfc0211b8>
 40219b4:	d9402017 	ldw	r5,128(sp)
 40219b8:	d9002117 	ldw	r4,132(sp)
 40219bc:	d9801a04 	addi	r6,sp,104
 40219c0:	4020a600 	call	4020a60 <__sprint_r.part.0>
 40219c4:	103dfc26 	beq	r2,zero,40211b8 <__alt_data_end+0xfc0211b8>
 40219c8:	003fa206 	br	4021854 <__alt_data_end+0xfc021854>
 40219cc:	d9402017 	ldw	r5,128(sp)
 40219d0:	d9002117 	ldw	r4,132(sp)
 40219d4:	d9801a04 	addi	r6,sp,104
 40219d8:	d9c02b15 	stw	r7,172(sp)
 40219dc:	4020a600 	call	4020a60 <__sprint_r.part.0>
 40219e0:	d9c02b17 	ldw	r7,172(sp)
 40219e4:	103f9b1e 	bne	r2,zero,4021854 <__alt_data_end+0xfc021854>
 40219e8:	d9001b17 	ldw	r4,108(sp)
 40219ec:	d8801c17 	ldw	r2,112(sp)
 40219f0:	d811883a 	mov	r8,sp
 40219f4:	21800044 	addi	r6,r4,1
 40219f8:	003dbf06 	br	40210f8 <__alt_data_end+0xfc0210f8>
 40219fc:	1000d81e 	bne	r2,zero,4021d60 <___vfiprintf_internal_r+0x11ec>
 4021a00:	d9001d87 	ldb	r4,118(sp)
 4021a04:	20000a26 	beq	r4,zero,4021a30 <___vfiprintf_internal_r+0xebc>
 4021a08:	00800044 	movi	r2,1
 4021a0c:	d9001d84 	addi	r4,sp,118
 4021a10:	100b883a 	mov	r5,r2
 4021a14:	d9000015 	stw	r4,0(sp)
 4021a18:	d8800115 	stw	r2,4(sp)
 4021a1c:	d811883a 	mov	r8,sp
 4021a20:	2809883a 	mov	r4,r5
 4021a24:	42000204 	addi	r8,r8,8
 4021a28:	29400044 	addi	r5,r5,1
 4021a2c:	003d9506 	br	4021084 <__alt_data_end+0xfc021084>
 4021a30:	3800fd26 	beq	r7,zero,4021e28 <___vfiprintf_internal_r+0x12b4>
 4021a34:	00800084 	movi	r2,2
 4021a38:	d9001d04 	addi	r4,sp,116
 4021a3c:	d9000015 	stw	r4,0(sp)
 4021a40:	d8800115 	stw	r2,4(sp)
 4021a44:	01400044 	movi	r5,1
 4021a48:	d811883a 	mov	r8,sp
 4021a4c:	2809883a 	mov	r4,r5
 4021a50:	42000204 	addi	r8,r8,8
 4021a54:	29400044 	addi	r5,r5,1
 4021a58:	003f4606 	br	4021774 <__alt_data_end+0xfc021774>
 4021a5c:	d8802517 	ldw	r2,148(sp)
 4021a60:	14c0010e 	bge	r2,r19,4021a68 <___vfiprintf_internal_r+0xef4>
 4021a64:	9805883a 	mov	r2,r19
 4021a68:	d9402417 	ldw	r5,144(sp)
 4021a6c:	288b883a 	add	r5,r5,r2
 4021a70:	d9402415 	stw	r5,144(sp)
 4021a74:	003dd006 	br	40211b8 <__alt_data_end+0xfc0211b8>
 4021a78:	d8001d85 	stb	zero,118(sp)
 4021a7c:	80005d16 	blt	r16,zero,4021bf4 <___vfiprintf_internal_r+0x1080>
 4021a80:	00ffdfc4 	movi	r3,-129
 4021a84:	9d04b03a 	or	r2,r19,r20
 4021a88:	88e2703a 	and	r17,r17,r3
 4021a8c:	103d3726 	beq	r2,zero,4020f6c <__alt_data_end+0xfc020f6c>
 4021a90:	002b883a 	mov	r21,zero
 4021a94:	d9002617 	ldw	r4,152(sp)
 4021a98:	ddc01a04 	addi	r23,sp,104
 4021a9c:	988003cc 	andi	r2,r19,15
 4021aa0:	a006973a 	slli	r3,r20,28
 4021aa4:	2085883a 	add	r2,r4,r2
 4021aa8:	9826d13a 	srli	r19,r19,4
 4021aac:	10800003 	ldbu	r2,0(r2)
 4021ab0:	a028d13a 	srli	r20,r20,4
 4021ab4:	bdffffc4 	addi	r23,r23,-1
 4021ab8:	1ce6b03a 	or	r19,r3,r19
 4021abc:	b8800005 	stb	r2,0(r23)
 4021ac0:	9d04b03a 	or	r2,r19,r20
 4021ac4:	103ff51e 	bne	r2,zero,4021a9c <__alt_data_end+0xfc021a9c>
 4021ac8:	d8801e17 	ldw	r2,120(sp)
 4021acc:	15e9c83a 	sub	r20,r2,r23
 4021ad0:	003d2b06 	br	4020f80 <__alt_data_end+0xfc020f80>
 4021ad4:	d9402017 	ldw	r5,128(sp)
 4021ad8:	d9002117 	ldw	r4,132(sp)
 4021adc:	d9801a04 	addi	r6,sp,104
 4021ae0:	4020a600 	call	4020a60 <__sprint_r.part.0>
 4021ae4:	103f5b1e 	bne	r2,zero,4021854 <__alt_data_end+0xfc021854>
 4021ae8:	d8801c17 	ldw	r2,112(sp)
 4021aec:	d811883a 	mov	r8,sp
 4021af0:	003f6706 	br	4021890 <__alt_data_end+0xfc021890>
 4021af4:	d9402017 	ldw	r5,128(sp)
 4021af8:	d9002117 	ldw	r4,132(sp)
 4021afc:	d9801a04 	addi	r6,sp,104
 4021b00:	4020a600 	call	4020a60 <__sprint_r.part.0>
 4021b04:	103f531e 	bne	r2,zero,4021854 <__alt_data_end+0xfc021854>
 4021b08:	d811883a 	mov	r8,sp
 4021b0c:	003cd906 	br	4020e74 <__alt_data_end+0xfc020e74>
 4021b10:	10803fcc 	andi	r2,r2,255
 4021b14:	1080201c 	xori	r2,r2,128
 4021b18:	10bfe004 	addi	r2,r2,-128
 4021b1c:	00c00c04 	movi	r3,48
 4021b20:	10ffe926 	beq	r2,r3,4021ac8 <__alt_data_end+0xfc021ac8>
 4021b24:	b8ffffc5 	stb	r3,-1(r23)
 4021b28:	d8c01e17 	ldw	r3,120(sp)
 4021b2c:	b8bfffc4 	addi	r2,r23,-1
 4021b30:	102f883a 	mov	r23,r2
 4021b34:	18a9c83a 	sub	r20,r3,r2
 4021b38:	003d1106 	br	4020f80 <__alt_data_end+0xfc020f80>
 4021b3c:	d9402017 	ldw	r5,128(sp)
 4021b40:	d9002117 	ldw	r4,132(sp)
 4021b44:	d9801a04 	addi	r6,sp,104
 4021b48:	d8c02a15 	stw	r3,168(sp)
 4021b4c:	d9c02b15 	stw	r7,172(sp)
 4021b50:	4020a600 	call	4020a60 <__sprint_r.part.0>
 4021b54:	d8c02a17 	ldw	r3,168(sp)
 4021b58:	d9c02b17 	ldw	r7,172(sp)
 4021b5c:	103f3d1e 	bne	r2,zero,4021854 <__alt_data_end+0xfc021854>
 4021b60:	d9001b17 	ldw	r4,108(sp)
 4021b64:	d8801c17 	ldw	r2,112(sp)
 4021b68:	d811883a 	mov	r8,sp
 4021b6c:	21400044 	addi	r5,r4,1
 4021b70:	003d4406 	br	4021084 <__alt_data_end+0xfc021084>
 4021b74:	d9402017 	ldw	r5,128(sp)
 4021b78:	d9002117 	ldw	r4,132(sp)
 4021b7c:	d9801a04 	addi	r6,sp,104
 4021b80:	d8c02a15 	stw	r3,168(sp)
 4021b84:	4020a600 	call	4020a60 <__sprint_r.part.0>
 4021b88:	d8c02a17 	ldw	r3,168(sp)
 4021b8c:	103f311e 	bne	r2,zero,4021854 <__alt_data_end+0xfc021854>
 4021b90:	d9001b17 	ldw	r4,108(sp)
 4021b94:	d8801c17 	ldw	r2,112(sp)
 4021b98:	d811883a 	mov	r8,sp
 4021b9c:	21400044 	addi	r5,r4,1
 4021ba0:	003ef406 	br	4021774 <__alt_data_end+0xfc021774>
 4021ba4:	1000bd1e 	bne	r2,zero,4021e9c <___vfiprintf_internal_r+0x1328>
 4021ba8:	01400044 	movi	r5,1
 4021bac:	0009883a 	mov	r4,zero
 4021bb0:	d811883a 	mov	r8,sp
 4021bb4:	003ef106 	br	402177c <__alt_data_end+0xfc02177c>
 4021bb8:	d9402017 	ldw	r5,128(sp)
 4021bbc:	d9002117 	ldw	r4,132(sp)
 4021bc0:	d9801a04 	addi	r6,sp,104
 4021bc4:	4020a600 	call	4020a60 <__sprint_r.part.0>
 4021bc8:	103f221e 	bne	r2,zero,4021854 <__alt_data_end+0xfc021854>
 4021bcc:	d9401b17 	ldw	r5,108(sp)
 4021bd0:	d8801c17 	ldw	r2,112(sp)
 4021bd4:	d811883a 	mov	r8,sp
 4021bd8:	29400044 	addi	r5,r5,1
 4021bdc:	003d6206 	br	4021168 <__alt_data_end+0xfc021168>
 4021be0:	014100f4 	movhi	r5,1027
 4021be4:	29706804 	addi	r5,r5,-15968
 4021be8:	d9402615 	stw	r5,152(sp)
 4021bec:	d8c02215 	stw	r3,136(sp)
 4021bf0:	1023883a 	mov	r17,r2
 4021bf4:	9d04b03a 	or	r2,r19,r20
 4021bf8:	103fa51e 	bne	r2,zero,4021a90 <__alt_data_end+0xfc021a90>
 4021bfc:	002b883a 	mov	r21,zero
 4021c00:	00800084 	movi	r2,2
 4021c04:	003e4a06 	br	4021530 <__alt_data_end+0xfc021530>
 4021c08:	014100f4 	movhi	r5,1027
 4021c0c:	29706804 	addi	r5,r5,-15968
 4021c10:	002b883a 	mov	r21,zero
 4021c14:	d9402615 	stw	r5,152(sp)
 4021c18:	003f9e06 	br	4021a94 <__alt_data_end+0xfc021a94>
 4021c1c:	d9402217 	ldw	r5,136(sp)
 4021c20:	d8001d85 	stb	zero,118(sp)
 4021c24:	0029883a 	mov	r20,zero
 4021c28:	28800104 	addi	r2,r5,4
 4021c2c:	2cc00017 	ldw	r19,0(r5)
 4021c30:	803e3a16 	blt	r16,zero,402151c <__alt_data_end+0xfc02151c>
 4021c34:	00ffdfc4 	movi	r3,-129
 4021c38:	d8802215 	stw	r2,136(sp)
 4021c3c:	88e2703a 	and	r17,r17,r3
 4021c40:	002b883a 	mov	r21,zero
 4021c44:	983e9b26 	beq	r19,zero,40216b4 <__alt_data_end+0xfc0216b4>
 4021c48:	00800244 	movi	r2,9
 4021c4c:	14fdc936 	bltu	r2,r19,4021374 <__alt_data_end+0xfc021374>
 4021c50:	003e9a06 	br	40216bc <__alt_data_end+0xfc0216bc>
 4021c54:	00800c04 	movi	r2,48
 4021c58:	d8c01d45 	stb	r3,117(sp)
 4021c5c:	d8801d05 	stb	r2,116(sp)
 4021c60:	d8001d85 	stb	zero,118(sp)
 4021c64:	88c00094 	ori	r3,r17,2
 4021c68:	80009c16 	blt	r16,zero,4021edc <___vfiprintf_internal_r+0x1368>
 4021c6c:	00bfdfc4 	movi	r2,-129
 4021c70:	88a2703a 	and	r17,r17,r2
 4021c74:	8c400094 	ori	r17,r17,2
 4021c78:	002b883a 	mov	r21,zero
 4021c7c:	003f8506 	br	4021a94 <__alt_data_end+0xfc021a94>
 4021c80:	b029883a 	mov	r20,r22
 4021c84:	003c0b06 	br	4020cb4 <__alt_data_end+0xfc020cb4>
 4021c88:	04e7c83a 	sub	r19,zero,r19
 4021c8c:	05400b44 	movi	r21,45
 4021c90:	9804c03a 	cmpne	r2,r19,zero
 4021c94:	0529c83a 	sub	r20,zero,r20
 4021c98:	dd401d85 	stb	r21,118(sp)
 4021c9c:	a0a9c83a 	sub	r20,r20,r2
 4021ca0:	80009716 	blt	r16,zero,4021f00 <___vfiprintf_internal_r+0x138c>
 4021ca4:	00bfdfc4 	movi	r2,-129
 4021ca8:	88a2703a 	and	r17,r17,r2
 4021cac:	003db006 	br	4021370 <__alt_data_end+0xfc021370>
 4021cb0:	b0c00007 	ldb	r3,0(r22)
 4021cb4:	003c0c06 	br	4020ce8 <__alt_data_end+0xfc020ce8>
 4021cb8:	8880100c 	andi	r2,r17,64
 4021cbc:	d8001d85 	stb	zero,118(sp)
 4021cc0:	1000461e 	bne	r2,zero,4021ddc <___vfiprintf_internal_r+0x1268>
 4021cc4:	d9002217 	ldw	r4,136(sp)
 4021cc8:	0029883a 	mov	r20,zero
 4021ccc:	20800104 	addi	r2,r4,4
 4021cd0:	24c00017 	ldw	r19,0(r4)
 4021cd4:	803df80e 	bge	r16,zero,40214b8 <__alt_data_end+0xfc0214b8>
 4021cd8:	9d06b03a 	or	r3,r19,r20
 4021cdc:	d8802215 	stw	r2,136(sp)
 4021ce0:	183d5e1e 	bne	r3,zero,402125c <__alt_data_end+0xfc02125c>
 4021ce4:	002b883a 	mov	r21,zero
 4021ce8:	0005883a 	mov	r2,zero
 4021cec:	003e1006 	br	4021530 <__alt_data_end+0xfc021530>
 4021cf0:	8880040c 	andi	r2,r17,16
 4021cf4:	1000321e 	bne	r2,zero,4021dc0 <___vfiprintf_internal_r+0x124c>
 4021cf8:	8c40100c 	andi	r17,r17,64
 4021cfc:	88008d26 	beq	r17,zero,4021f34 <___vfiprintf_internal_r+0x13c0>
 4021d00:	d9402217 	ldw	r5,136(sp)
 4021d04:	d8c02417 	ldw	r3,144(sp)
 4021d08:	28800017 	ldw	r2,0(r5)
 4021d0c:	29400104 	addi	r5,r5,4
 4021d10:	d9402215 	stw	r5,136(sp)
 4021d14:	10c0000d 	sth	r3,0(r2)
 4021d18:	003bca06 	br	4020c44 <__alt_data_end+0xfc020c44>
 4021d1c:	8880100c 	andi	r2,r17,64
 4021d20:	10003a26 	beq	r2,zero,4021e0c <___vfiprintf_internal_r+0x1298>
 4021d24:	d8802217 	ldw	r2,136(sp)
 4021d28:	14c0000f 	ldh	r19,0(r2)
 4021d2c:	10800104 	addi	r2,r2,4
 4021d30:	d8802215 	stw	r2,136(sp)
 4021d34:	9829d7fa 	srai	r20,r19,31
 4021d38:	a005883a 	mov	r2,r20
 4021d3c:	003d8506 	br	4021354 <__alt_data_end+0xfc021354>
 4021d40:	8880100c 	andi	r2,r17,64
 4021d44:	10002b26 	beq	r2,zero,4021df4 <___vfiprintf_internal_r+0x1280>
 4021d48:	d8802217 	ldw	r2,136(sp)
 4021d4c:	0029883a 	mov	r20,zero
 4021d50:	14c0000b 	ldhu	r19,0(r2)
 4021d54:	10800104 	addi	r2,r2,4
 4021d58:	d8802215 	stw	r2,136(sp)
 4021d5c:	003d5d06 	br	40212d4 <__alt_data_end+0xfc0212d4>
 4021d60:	d9402017 	ldw	r5,128(sp)
 4021d64:	d9002117 	ldw	r4,132(sp)
 4021d68:	d9801a04 	addi	r6,sp,104
 4021d6c:	d8c02a15 	stw	r3,168(sp)
 4021d70:	d9c02b15 	stw	r7,172(sp)
 4021d74:	4020a600 	call	4020a60 <__sprint_r.part.0>
 4021d78:	d8c02a17 	ldw	r3,168(sp)
 4021d7c:	d9c02b17 	ldw	r7,172(sp)
 4021d80:	103eb41e 	bne	r2,zero,4021854 <__alt_data_end+0xfc021854>
 4021d84:	d9001b17 	ldw	r4,108(sp)
 4021d88:	d8801c17 	ldw	r2,112(sp)
 4021d8c:	d811883a 	mov	r8,sp
 4021d90:	21400044 	addi	r5,r4,1
 4021d94:	003e6706 	br	4021734 <__alt_data_end+0xfc021734>
 4021d98:	00bfffc4 	movi	r2,-1
 4021d9c:	003c4a06 	br	4020ec8 <__alt_data_end+0xfc020ec8>
 4021da0:	9805883a 	mov	r2,r19
 4021da4:	003ee806 	br	4021948 <__alt_data_end+0xfc021948>
 4021da8:	d8c02217 	ldw	r3,136(sp)
 4021dac:	0029883a 	mov	r20,zero
 4021db0:	18800104 	addi	r2,r3,4
 4021db4:	1cc0000b 	ldhu	r19,0(r3)
 4021db8:	803f9e0e 	bge	r16,zero,4021c34 <__alt_data_end+0xfc021c34>
 4021dbc:	003dd706 	br	402151c <__alt_data_end+0xfc02151c>
 4021dc0:	d8c02217 	ldw	r3,136(sp)
 4021dc4:	d9002417 	ldw	r4,144(sp)
 4021dc8:	18800017 	ldw	r2,0(r3)
 4021dcc:	18c00104 	addi	r3,r3,4
 4021dd0:	d8c02215 	stw	r3,136(sp)
 4021dd4:	11000015 	stw	r4,0(r2)
 4021dd8:	003b9a06 	br	4020c44 <__alt_data_end+0xfc020c44>
 4021ddc:	d8c02217 	ldw	r3,136(sp)
 4021de0:	0029883a 	mov	r20,zero
 4021de4:	18800104 	addi	r2,r3,4
 4021de8:	1cc0000b 	ldhu	r19,0(r3)
 4021dec:	803db20e 	bge	r16,zero,40214b8 <__alt_data_end+0xfc0214b8>
 4021df0:	003fb906 	br	4021cd8 <__alt_data_end+0xfc021cd8>
 4021df4:	d9002217 	ldw	r4,136(sp)
 4021df8:	0029883a 	mov	r20,zero
 4021dfc:	24c00017 	ldw	r19,0(r4)
 4021e00:	21000104 	addi	r4,r4,4
 4021e04:	d9002215 	stw	r4,136(sp)
 4021e08:	003d3206 	br	40212d4 <__alt_data_end+0xfc0212d4>
 4021e0c:	d8c02217 	ldw	r3,136(sp)
 4021e10:	1cc00017 	ldw	r19,0(r3)
 4021e14:	18c00104 	addi	r3,r3,4
 4021e18:	d8c02215 	stw	r3,136(sp)
 4021e1c:	9829d7fa 	srai	r20,r19,31
 4021e20:	a005883a 	mov	r2,r20
 4021e24:	003d4b06 	br	4021354 <__alt_data_end+0xfc021354>
 4021e28:	0009883a 	mov	r4,zero
 4021e2c:	01400044 	movi	r5,1
 4021e30:	d811883a 	mov	r8,sp
 4021e34:	003e4f06 	br	4021774 <__alt_data_end+0xfc021774>
 4021e38:	d8c02215 	stw	r3,136(sp)
 4021e3c:	002b883a 	mov	r21,zero
 4021e40:	003db806 	br	4021524 <__alt_data_end+0xfc021524>
 4021e44:	d811883a 	mov	r8,sp
 4021e48:	003e9606 	br	40218a4 <__alt_data_end+0xfc0218a4>
 4021e4c:	010100f4 	movhi	r4,1027
 4021e50:	2130c904 	addi	r4,r4,-15580
 4021e54:	d9002315 	stw	r4,140(sp)
 4021e58:	003e6306 	br	40217e8 <__alt_data_end+0xfc0217e8>
 4021e5c:	b0c00043 	ldbu	r3,1(r22)
 4021e60:	8c400814 	ori	r17,r17,32
 4021e64:	b5800044 	addi	r22,r22,1
 4021e68:	18c03fcc 	andi	r3,r3,255
 4021e6c:	18c0201c 	xori	r3,r3,128
 4021e70:	18ffe004 	addi	r3,r3,-128
 4021e74:	003b9c06 	br	4020ce8 <__alt_data_end+0xfc020ce8>
 4021e78:	b809883a 	mov	r4,r23
 4021e7c:	da002a15 	stw	r8,168(sp)
 4021e80:	40195540 	call	4019554 <strlen>
 4021e84:	1029883a 	mov	r20,r2
 4021e88:	dd401d83 	ldbu	r21,118(sp)
 4021e8c:	df002215 	stw	fp,136(sp)
 4021e90:	0021883a 	mov	r16,zero
 4021e94:	da002a17 	ldw	r8,168(sp)
 4021e98:	003c3906 	br	4020f80 <__alt_data_end+0xfc020f80>
 4021e9c:	d9402017 	ldw	r5,128(sp)
 4021ea0:	d9002117 	ldw	r4,132(sp)
 4021ea4:	d9801a04 	addi	r6,sp,104
 4021ea8:	4020a600 	call	4020a60 <__sprint_r.part.0>
 4021eac:	103e691e 	bne	r2,zero,4021854 <__alt_data_end+0xfc021854>
 4021eb0:	d9001b17 	ldw	r4,108(sp)
 4021eb4:	d8801c17 	ldw	r2,112(sp)
 4021eb8:	d811883a 	mov	r8,sp
 4021ebc:	21400044 	addi	r5,r4,1
 4021ec0:	003e2e06 	br	402177c <__alt_data_end+0xfc02177c>
 4021ec4:	010100f4 	movhi	r4,1027
 4021ec8:	2130cd04 	addi	r4,r4,-15564
 4021ecc:	d9002315 	stw	r4,140(sp)
 4021ed0:	d9001b17 	ldw	r4,108(sp)
 4021ed4:	21000044 	addi	r4,r4,1
 4021ed8:	003c5e06 	br	4021054 <__alt_data_end+0xfc021054>
 4021edc:	002b883a 	mov	r21,zero
 4021ee0:	00800084 	movi	r2,2
 4021ee4:	10803fcc 	andi	r2,r2,255
 4021ee8:	01000044 	movi	r4,1
 4021eec:	11002b26 	beq	r2,r4,4021f9c <___vfiprintf_internal_r+0x1428>
 4021ef0:	01000084 	movi	r4,2
 4021ef4:	11002b1e 	bne	r2,r4,4021fa4 <___vfiprintf_internal_r+0x1430>
 4021ef8:	1823883a 	mov	r17,r3
 4021efc:	003ee506 	br	4021a94 <__alt_data_end+0xfc021a94>
 4021f00:	8807883a 	mov	r3,r17
 4021f04:	00800044 	movi	r2,1
 4021f08:	003ff606 	br	4021ee4 <__alt_data_end+0xfc021ee4>
 4021f0c:	00800184 	movi	r2,6
 4021f10:	1400012e 	bgeu	r2,r16,4021f18 <___vfiprintf_internal_r+0x13a4>
 4021f14:	1021883a 	mov	r16,r2
 4021f18:	8029883a 	mov	r20,r16
 4021f1c:	8027883a 	mov	r19,r16
 4021f20:	80002216 	blt	r16,zero,4021fac <___vfiprintf_internal_r+0x1438>
 4021f24:	05c100f4 	movhi	r23,1027
 4021f28:	df002215 	stw	fp,136(sp)
 4021f2c:	bdf06d04 	addi	r23,r23,-15948
 4021f30:	003cfb06 	br	4021320 <__alt_data_end+0xfc021320>
 4021f34:	d9002217 	ldw	r4,136(sp)
 4021f38:	d9402417 	ldw	r5,144(sp)
 4021f3c:	20800017 	ldw	r2,0(r4)
 4021f40:	21000104 	addi	r4,r4,4
 4021f44:	d9002215 	stw	r4,136(sp)
 4021f48:	11400015 	stw	r5,0(r2)
 4021f4c:	003b3d06 	br	4020c44 <__alt_data_end+0xfc020c44>
 4021f50:	014100f4 	movhi	r5,1027
 4021f54:	2970cd04 	addi	r5,r5,-15564
 4021f58:	d9402315 	stw	r5,140(sp)
 4021f5c:	d9401b17 	ldw	r5,108(sp)
 4021f60:	29400044 	addi	r5,r5,1
 4021f64:	003e6d06 	br	402191c <__alt_data_end+0xfc02191c>
 4021f68:	8029883a 	mov	r20,r16
 4021f6c:	dd401d83 	ldbu	r21,118(sp)
 4021f70:	df002215 	stw	fp,136(sp)
 4021f74:	0021883a 	mov	r16,zero
 4021f78:	003c0106 	br	4020f80 <__alt_data_end+0xfc020f80>
 4021f7c:	00c100f4 	movhi	r3,1027
 4021f80:	18f0c904 	addi	r3,r3,-15580
 4021f84:	d8c02315 	stw	r3,140(sp)
 4021f88:	280d883a 	mov	r6,r5
 4021f8c:	003c6906 	br	4021134 <__alt_data_end+0xfc021134>
 4021f90:	802d883a 	mov	r22,r16
 4021f94:	0021883a 	mov	r16,zero
 4021f98:	003b5406 	br	4020cec <__alt_data_end+0xfc020cec>
 4021f9c:	1823883a 	mov	r17,r3
 4021fa0:	003cf306 	br	4021370 <__alt_data_end+0xfc021370>
 4021fa4:	1823883a 	mov	r17,r3
 4021fa8:	003cad06 	br	4021260 <__alt_data_end+0xfc021260>
 4021fac:	0027883a 	mov	r19,zero
 4021fb0:	003fdc06 	br	4021f24 <__alt_data_end+0xfc021f24>
 4021fb4:	d9402217 	ldw	r5,136(sp)
 4021fb8:	8005883a 	mov	r2,r16
 4021fbc:	b0c00043 	ldbu	r3,1(r22)
 4021fc0:	2c000017 	ldw	r16,0(r5)
 4021fc4:	29000104 	addi	r4,r5,4
 4021fc8:	d9002215 	stw	r4,136(sp)
 4021fcc:	102d883a 	mov	r22,r2
 4021fd0:	803fa50e 	bge	r16,zero,4021e68 <__alt_data_end+0xfc021e68>
 4021fd4:	18c03fcc 	andi	r3,r3,255
 4021fd8:	18c0201c 	xori	r3,r3,128
 4021fdc:	043fffc4 	movi	r16,-1
 4021fe0:	18ffe004 	addi	r3,r3,-128
 4021fe4:	003b4006 	br	4020ce8 <__alt_data_end+0xfc020ce8>
 4021fe8:	d9402303 	ldbu	r5,140(sp)
 4021fec:	d9401d85 	stb	r5,118(sp)
 4021ff0:	003cae06 	br	40212ac <__alt_data_end+0xfc0212ac>
 4021ff4:	d8c02303 	ldbu	r3,140(sp)
 4021ff8:	d8c01d85 	stb	r3,118(sp)
 4021ffc:	003d1406 	br	4021450 <__alt_data_end+0xfc021450>
 4022000:	d8c02303 	ldbu	r3,140(sp)
 4022004:	d8c01d85 	stb	r3,118(sp)
 4022008:	003cca06 	br	4021334 <__alt_data_end+0xfc021334>
 402200c:	8880004c 	andi	r2,r17,1
 4022010:	002b883a 	mov	r21,zero
 4022014:	10000526 	beq	r2,zero,402202c <___vfiprintf_internal_r+0x14b8>
 4022018:	00800c04 	movi	r2,48
 402201c:	d88019c5 	stb	r2,103(sp)
 4022020:	dd002817 	ldw	r20,160(sp)
 4022024:	ddc019c4 	addi	r23,sp,103
 4022028:	003bd506 	br	4020f80 <__alt_data_end+0xfc020f80>
 402202c:	0029883a 	mov	r20,zero
 4022030:	ddc01a04 	addi	r23,sp,104
 4022034:	003bd206 	br	4020f80 <__alt_data_end+0xfc020f80>
 4022038:	d9002303 	ldbu	r4,140(sp)
 402203c:	d9001d85 	stb	r4,118(sp)
 4022040:	003da606 	br	40216dc <__alt_data_end+0xfc0216dc>
 4022044:	d8c02303 	ldbu	r3,140(sp)
 4022048:	d8c01d85 	stb	r3,118(sp)
 402204c:	003c7606 	br	4021228 <__alt_data_end+0xfc021228>
 4022050:	d8c02303 	ldbu	r3,140(sp)
 4022054:	d8c01d85 	stb	r3,118(sp)
 4022058:	003c6506 	br	40211f0 <__alt_data_end+0xfc0211f0>
 402205c:	d9002303 	ldbu	r4,140(sp)
 4022060:	d9001d85 	stb	r4,118(sp)
 4022064:	003d3d06 	br	402155c <__alt_data_end+0xfc02155c>
 4022068:	d8c02303 	ldbu	r3,140(sp)
 402206c:	d8c01d85 	stb	r3,118(sp)
 4022070:	003d1d06 	br	40214e8 <__alt_data_end+0xfc0214e8>
 4022074:	d8c02303 	ldbu	r3,140(sp)
 4022078:	d8c01d85 	stb	r3,118(sp)
 402207c:	003d0306 	br	402148c <__alt_data_end+0xfc02148c>

04022080 <__vfiprintf_internal>:
 4022080:	00810134 	movhi	r2,1028
 4022084:	10af8104 	addi	r2,r2,-16892
 4022088:	300f883a 	mov	r7,r6
 402208c:	280d883a 	mov	r6,r5
 4022090:	200b883a 	mov	r5,r4
 4022094:	11000017 	ldw	r4,0(r2)
 4022098:	4020b741 	jmpi	4020b74 <___vfiprintf_internal_r>

0402209c <__sbprintf>:
 402209c:	2880030b 	ldhu	r2,12(r5)
 40220a0:	2ac01917 	ldw	r11,100(r5)
 40220a4:	2a80038b 	ldhu	r10,14(r5)
 40220a8:	2a400717 	ldw	r9,28(r5)
 40220ac:	2a000917 	ldw	r8,36(r5)
 40220b0:	defee204 	addi	sp,sp,-1144
 40220b4:	00c10004 	movi	r3,1024
 40220b8:	dc011a15 	stw	r16,1128(sp)
 40220bc:	10bfff4c 	andi	r2,r2,65533
 40220c0:	2821883a 	mov	r16,r5
 40220c4:	d8cb883a 	add	r5,sp,r3
 40220c8:	dc811c15 	stw	r18,1136(sp)
 40220cc:	dc411b15 	stw	r17,1132(sp)
 40220d0:	dfc11d15 	stw	ra,1140(sp)
 40220d4:	2025883a 	mov	r18,r4
 40220d8:	d881030d 	sth	r2,1036(sp)
 40220dc:	dac11915 	stw	r11,1124(sp)
 40220e0:	da81038d 	sth	r10,1038(sp)
 40220e4:	da410715 	stw	r9,1052(sp)
 40220e8:	da010915 	stw	r8,1060(sp)
 40220ec:	dec10015 	stw	sp,1024(sp)
 40220f0:	dec10415 	stw	sp,1040(sp)
 40220f4:	d8c10215 	stw	r3,1032(sp)
 40220f8:	d8c10515 	stw	r3,1044(sp)
 40220fc:	d8010615 	stw	zero,1048(sp)
 4022100:	4020b740 	call	4020b74 <___vfiprintf_internal_r>
 4022104:	1023883a 	mov	r17,r2
 4022108:	10000416 	blt	r2,zero,402211c <__sbprintf+0x80>
 402210c:	d9410004 	addi	r5,sp,1024
 4022110:	9009883a 	mov	r4,r18
 4022114:	401d5c00 	call	401d5c0 <_fflush_r>
 4022118:	10000d1e 	bne	r2,zero,4022150 <__sbprintf+0xb4>
 402211c:	d881030b 	ldhu	r2,1036(sp)
 4022120:	1080100c 	andi	r2,r2,64
 4022124:	10000326 	beq	r2,zero,4022134 <__sbprintf+0x98>
 4022128:	8080030b 	ldhu	r2,12(r16)
 402212c:	10801014 	ori	r2,r2,64
 4022130:	8080030d 	sth	r2,12(r16)
 4022134:	8805883a 	mov	r2,r17
 4022138:	dfc11d17 	ldw	ra,1140(sp)
 402213c:	dc811c17 	ldw	r18,1136(sp)
 4022140:	dc411b17 	ldw	r17,1132(sp)
 4022144:	dc011a17 	ldw	r16,1128(sp)
 4022148:	dec11e04 	addi	sp,sp,1144
 402214c:	f800283a 	ret
 4022150:	047fffc4 	movi	r17,-1
 4022154:	003ff106 	br	402211c <__alt_data_end+0xfc02211c>

04022158 <_write_r>:
 4022158:	defffd04 	addi	sp,sp,-12
 402215c:	2805883a 	mov	r2,r5
 4022160:	dc000015 	stw	r16,0(sp)
 4022164:	04010174 	movhi	r16,1029
 4022168:	dc400115 	stw	r17,4(sp)
 402216c:	300b883a 	mov	r5,r6
 4022170:	842e2004 	addi	r16,r16,-18304
 4022174:	2023883a 	mov	r17,r4
 4022178:	380d883a 	mov	r6,r7
 402217c:	1009883a 	mov	r4,r2
 4022180:	dfc00215 	stw	ra,8(sp)
 4022184:	80000015 	stw	zero,0(r16)
 4022188:	40268a80 	call	40268a8 <write>
 402218c:	00ffffc4 	movi	r3,-1
 4022190:	10c00526 	beq	r2,r3,40221a8 <_write_r+0x50>
 4022194:	dfc00217 	ldw	ra,8(sp)
 4022198:	dc400117 	ldw	r17,4(sp)
 402219c:	dc000017 	ldw	r16,0(sp)
 40221a0:	dec00304 	addi	sp,sp,12
 40221a4:	f800283a 	ret
 40221a8:	80c00017 	ldw	r3,0(r16)
 40221ac:	183ff926 	beq	r3,zero,4022194 <__alt_data_end+0xfc022194>
 40221b0:	88c00015 	stw	r3,0(r17)
 40221b4:	003ff706 	br	4022194 <__alt_data_end+0xfc022194>

040221b8 <_close_r>:
 40221b8:	defffd04 	addi	sp,sp,-12
 40221bc:	dc000015 	stw	r16,0(sp)
 40221c0:	04010174 	movhi	r16,1029
 40221c4:	dc400115 	stw	r17,4(sp)
 40221c8:	842e2004 	addi	r16,r16,-18304
 40221cc:	2023883a 	mov	r17,r4
 40221d0:	2809883a 	mov	r4,r5
 40221d4:	dfc00215 	stw	ra,8(sp)
 40221d8:	80000015 	stw	zero,0(r16)
 40221dc:	40260500 	call	4026050 <close>
 40221e0:	00ffffc4 	movi	r3,-1
 40221e4:	10c00526 	beq	r2,r3,40221fc <_close_r+0x44>
 40221e8:	dfc00217 	ldw	ra,8(sp)
 40221ec:	dc400117 	ldw	r17,4(sp)
 40221f0:	dc000017 	ldw	r16,0(sp)
 40221f4:	dec00304 	addi	sp,sp,12
 40221f8:	f800283a 	ret
 40221fc:	80c00017 	ldw	r3,0(r16)
 4022200:	183ff926 	beq	r3,zero,40221e8 <__alt_data_end+0xfc0221e8>
 4022204:	88c00015 	stw	r3,0(r17)
 4022208:	003ff706 	br	40221e8 <__alt_data_end+0xfc0221e8>

0402220c <_calloc_r>:
 402220c:	defffe04 	addi	sp,sp,-8
 4022210:	2805883a 	mov	r2,r5
 4022214:	dc000015 	stw	r16,0(sp)
 4022218:	300b883a 	mov	r5,r6
 402221c:	2021883a 	mov	r16,r4
 4022220:	1009883a 	mov	r4,r2
 4022224:	dfc00115 	stw	ra,4(sp)
 4022228:	40191000 	call	4019100 <__mulsi3>
 402222c:	100b883a 	mov	r5,r2
 4022230:	8009883a 	mov	r4,r16
 4022234:	401e7180 	call	401e718 <_malloc_r>
 4022238:	10002926 	beq	r2,zero,40222e0 <_calloc_r+0xd4>
 402223c:	11bfff17 	ldw	r6,-4(r2)
 4022240:	1021883a 	mov	r16,r2
 4022244:	00bfff04 	movi	r2,-4
 4022248:	308c703a 	and	r6,r6,r2
 402224c:	00c00904 	movi	r3,36
 4022250:	308d883a 	add	r6,r6,r2
 4022254:	19801636 	bltu	r3,r6,40222b0 <_calloc_r+0xa4>
 4022258:	008004c4 	movi	r2,19
 402225c:	11800b2e 	bgeu	r2,r6,402228c <_calloc_r+0x80>
 4022260:	80000015 	stw	zero,0(r16)
 4022264:	80000115 	stw	zero,4(r16)
 4022268:	008006c4 	movi	r2,27
 402226c:	11801a2e 	bgeu	r2,r6,40222d8 <_calloc_r+0xcc>
 4022270:	80000215 	stw	zero,8(r16)
 4022274:	80000315 	stw	zero,12(r16)
 4022278:	30c0151e 	bne	r6,r3,40222d0 <_calloc_r+0xc4>
 402227c:	80000415 	stw	zero,16(r16)
 4022280:	80800604 	addi	r2,r16,24
 4022284:	80000515 	stw	zero,20(r16)
 4022288:	00000106 	br	4022290 <_calloc_r+0x84>
 402228c:	8005883a 	mov	r2,r16
 4022290:	10000015 	stw	zero,0(r2)
 4022294:	10000115 	stw	zero,4(r2)
 4022298:	10000215 	stw	zero,8(r2)
 402229c:	8005883a 	mov	r2,r16
 40222a0:	dfc00117 	ldw	ra,4(sp)
 40222a4:	dc000017 	ldw	r16,0(sp)
 40222a8:	dec00204 	addi	sp,sp,8
 40222ac:	f800283a 	ret
 40222b0:	000b883a 	mov	r5,zero
 40222b4:	8009883a 	mov	r4,r16
 40222b8:	40192700 	call	4019270 <memset>
 40222bc:	8005883a 	mov	r2,r16
 40222c0:	dfc00117 	ldw	ra,4(sp)
 40222c4:	dc000017 	ldw	r16,0(sp)
 40222c8:	dec00204 	addi	sp,sp,8
 40222cc:	f800283a 	ret
 40222d0:	80800404 	addi	r2,r16,16
 40222d4:	003fee06 	br	4022290 <__alt_data_end+0xfc022290>
 40222d8:	80800204 	addi	r2,r16,8
 40222dc:	003fec06 	br	4022290 <__alt_data_end+0xfc022290>
 40222e0:	0005883a 	mov	r2,zero
 40222e4:	003fee06 	br	40222a0 <__alt_data_end+0xfc0222a0>

040222e8 <_fclose_r>:
 40222e8:	28003926 	beq	r5,zero,40223d0 <_fclose_r+0xe8>
 40222ec:	defffc04 	addi	sp,sp,-16
 40222f0:	dc400115 	stw	r17,4(sp)
 40222f4:	dc000015 	stw	r16,0(sp)
 40222f8:	dfc00315 	stw	ra,12(sp)
 40222fc:	dc800215 	stw	r18,8(sp)
 4022300:	2023883a 	mov	r17,r4
 4022304:	2821883a 	mov	r16,r5
 4022308:	20000226 	beq	r4,zero,4022314 <_fclose_r+0x2c>
 402230c:	20800e17 	ldw	r2,56(r4)
 4022310:	10002726 	beq	r2,zero,40223b0 <_fclose_r+0xc8>
 4022314:	8080030f 	ldh	r2,12(r16)
 4022318:	1000071e 	bne	r2,zero,4022338 <_fclose_r+0x50>
 402231c:	0005883a 	mov	r2,zero
 4022320:	dfc00317 	ldw	ra,12(sp)
 4022324:	dc800217 	ldw	r18,8(sp)
 4022328:	dc400117 	ldw	r17,4(sp)
 402232c:	dc000017 	ldw	r16,0(sp)
 4022330:	dec00404 	addi	sp,sp,16
 4022334:	f800283a 	ret
 4022338:	800b883a 	mov	r5,r16
 402233c:	8809883a 	mov	r4,r17
 4022340:	401d3a40 	call	401d3a4 <__sflush_r>
 4022344:	1025883a 	mov	r18,r2
 4022348:	80800b17 	ldw	r2,44(r16)
 402234c:	10000426 	beq	r2,zero,4022360 <_fclose_r+0x78>
 4022350:	81400717 	ldw	r5,28(r16)
 4022354:	8809883a 	mov	r4,r17
 4022358:	103ee83a 	callr	r2
 402235c:	10001616 	blt	r2,zero,40223b8 <_fclose_r+0xd0>
 4022360:	8080030b 	ldhu	r2,12(r16)
 4022364:	1080200c 	andi	r2,r2,128
 4022368:	1000151e 	bne	r2,zero,40223c0 <_fclose_r+0xd8>
 402236c:	81400c17 	ldw	r5,48(r16)
 4022370:	28000526 	beq	r5,zero,4022388 <_fclose_r+0xa0>
 4022374:	80801004 	addi	r2,r16,64
 4022378:	28800226 	beq	r5,r2,4022384 <_fclose_r+0x9c>
 402237c:	8809883a 	mov	r4,r17
 4022380:	401db200 	call	401db20 <_free_r>
 4022384:	80000c15 	stw	zero,48(r16)
 4022388:	81401117 	ldw	r5,68(r16)
 402238c:	28000326 	beq	r5,zero,402239c <_fclose_r+0xb4>
 4022390:	8809883a 	mov	r4,r17
 4022394:	401db200 	call	401db20 <_free_r>
 4022398:	80001115 	stw	zero,68(r16)
 402239c:	401d9bc0 	call	401d9bc <__sfp_lock_acquire>
 40223a0:	8000030d 	sth	zero,12(r16)
 40223a4:	401d9c00 	call	401d9c0 <__sfp_lock_release>
 40223a8:	9005883a 	mov	r2,r18
 40223ac:	003fdc06 	br	4022320 <__alt_data_end+0xfc022320>
 40223b0:	401d9ac0 	call	401d9ac <__sinit>
 40223b4:	003fd706 	br	4022314 <__alt_data_end+0xfc022314>
 40223b8:	04bfffc4 	movi	r18,-1
 40223bc:	003fe806 	br	4022360 <__alt_data_end+0xfc022360>
 40223c0:	81400417 	ldw	r5,16(r16)
 40223c4:	8809883a 	mov	r4,r17
 40223c8:	401db200 	call	401db20 <_free_r>
 40223cc:	003fe706 	br	402236c <__alt_data_end+0xfc02236c>
 40223d0:	0005883a 	mov	r2,zero
 40223d4:	f800283a 	ret

040223d8 <fclose>:
 40223d8:	00810134 	movhi	r2,1028
 40223dc:	10af8104 	addi	r2,r2,-16892
 40223e0:	200b883a 	mov	r5,r4
 40223e4:	11000017 	ldw	r4,0(r2)
 40223e8:	40222e81 	jmpi	40222e8 <_fclose_r>

040223ec <__fputwc>:
 40223ec:	defff804 	addi	sp,sp,-32
 40223f0:	dcc00415 	stw	r19,16(sp)
 40223f4:	dc800315 	stw	r18,12(sp)
 40223f8:	dc000115 	stw	r16,4(sp)
 40223fc:	dfc00715 	stw	ra,28(sp)
 4022400:	dd400615 	stw	r21,24(sp)
 4022404:	dd000515 	stw	r20,20(sp)
 4022408:	dc400215 	stw	r17,8(sp)
 402240c:	2027883a 	mov	r19,r4
 4022410:	2825883a 	mov	r18,r5
 4022414:	3021883a 	mov	r16,r6
 4022418:	401e5080 	call	401e508 <__locale_mb_cur_max>
 402241c:	00c00044 	movi	r3,1
 4022420:	10c03e26 	beq	r2,r3,402251c <__fputwc+0x130>
 4022424:	81c01704 	addi	r7,r16,92
 4022428:	900d883a 	mov	r6,r18
 402242c:	d80b883a 	mov	r5,sp
 4022430:	9809883a 	mov	r4,r19
 4022434:	40228bc0 	call	40228bc <_wcrtomb_r>
 4022438:	1029883a 	mov	r20,r2
 402243c:	00bfffc4 	movi	r2,-1
 4022440:	a0802026 	beq	r20,r2,40224c4 <__fputwc+0xd8>
 4022444:	d9400003 	ldbu	r5,0(sp)
 4022448:	a0001c26 	beq	r20,zero,40224bc <__fputwc+0xd0>
 402244c:	0023883a 	mov	r17,zero
 4022450:	05400284 	movi	r21,10
 4022454:	00000906 	br	402247c <__fputwc+0x90>
 4022458:	80800017 	ldw	r2,0(r16)
 402245c:	11400005 	stb	r5,0(r2)
 4022460:	80c00017 	ldw	r3,0(r16)
 4022464:	18c00044 	addi	r3,r3,1
 4022468:	80c00015 	stw	r3,0(r16)
 402246c:	8c400044 	addi	r17,r17,1
 4022470:	dc45883a 	add	r2,sp,r17
 4022474:	8d00112e 	bgeu	r17,r20,40224bc <__fputwc+0xd0>
 4022478:	11400003 	ldbu	r5,0(r2)
 402247c:	80c00217 	ldw	r3,8(r16)
 4022480:	18ffffc4 	addi	r3,r3,-1
 4022484:	80c00215 	stw	r3,8(r16)
 4022488:	183ff30e 	bge	r3,zero,4022458 <__alt_data_end+0xfc022458>
 402248c:	80800617 	ldw	r2,24(r16)
 4022490:	18801916 	blt	r3,r2,40224f8 <__fputwc+0x10c>
 4022494:	80800017 	ldw	r2,0(r16)
 4022498:	11400005 	stb	r5,0(r2)
 402249c:	80800017 	ldw	r2,0(r16)
 40224a0:	10c00003 	ldbu	r3,0(r2)
 40224a4:	10800044 	addi	r2,r2,1
 40224a8:	1d402326 	beq	r3,r21,4022538 <__fputwc+0x14c>
 40224ac:	80800015 	stw	r2,0(r16)
 40224b0:	8c400044 	addi	r17,r17,1
 40224b4:	dc45883a 	add	r2,sp,r17
 40224b8:	8d3fef36 	bltu	r17,r20,4022478 <__alt_data_end+0xfc022478>
 40224bc:	9005883a 	mov	r2,r18
 40224c0:	00000406 	br	40224d4 <__fputwc+0xe8>
 40224c4:	80c0030b 	ldhu	r3,12(r16)
 40224c8:	a005883a 	mov	r2,r20
 40224cc:	18c01014 	ori	r3,r3,64
 40224d0:	80c0030d 	sth	r3,12(r16)
 40224d4:	dfc00717 	ldw	ra,28(sp)
 40224d8:	dd400617 	ldw	r21,24(sp)
 40224dc:	dd000517 	ldw	r20,20(sp)
 40224e0:	dcc00417 	ldw	r19,16(sp)
 40224e4:	dc800317 	ldw	r18,12(sp)
 40224e8:	dc400217 	ldw	r17,8(sp)
 40224ec:	dc000117 	ldw	r16,4(sp)
 40224f0:	dec00804 	addi	sp,sp,32
 40224f4:	f800283a 	ret
 40224f8:	800d883a 	mov	r6,r16
 40224fc:	29403fcc 	andi	r5,r5,255
 4022500:	9809883a 	mov	r4,r19
 4022504:	40227640 	call	4022764 <__swbuf_r>
 4022508:	10bfffe0 	cmpeqi	r2,r2,-1
 402250c:	10803fcc 	andi	r2,r2,255
 4022510:	103fd626 	beq	r2,zero,402246c <__alt_data_end+0xfc02246c>
 4022514:	00bfffc4 	movi	r2,-1
 4022518:	003fee06 	br	40224d4 <__alt_data_end+0xfc0224d4>
 402251c:	90ffffc4 	addi	r3,r18,-1
 4022520:	01003f84 	movi	r4,254
 4022524:	20ffbf36 	bltu	r4,r3,4022424 <__alt_data_end+0xfc022424>
 4022528:	900b883a 	mov	r5,r18
 402252c:	dc800005 	stb	r18,0(sp)
 4022530:	1029883a 	mov	r20,r2
 4022534:	003fc506 	br	402244c <__alt_data_end+0xfc02244c>
 4022538:	800d883a 	mov	r6,r16
 402253c:	a80b883a 	mov	r5,r21
 4022540:	9809883a 	mov	r4,r19
 4022544:	40227640 	call	4022764 <__swbuf_r>
 4022548:	10bfffe0 	cmpeqi	r2,r2,-1
 402254c:	003fef06 	br	402250c <__alt_data_end+0xfc02250c>

04022550 <_fputwc_r>:
 4022550:	3080030b 	ldhu	r2,12(r6)
 4022554:	10c8000c 	andi	r3,r2,8192
 4022558:	1800051e 	bne	r3,zero,4022570 <_fputwc_r+0x20>
 402255c:	30c01917 	ldw	r3,100(r6)
 4022560:	10880014 	ori	r2,r2,8192
 4022564:	3080030d 	sth	r2,12(r6)
 4022568:	18880014 	ori	r2,r3,8192
 402256c:	30801915 	stw	r2,100(r6)
 4022570:	40223ec1 	jmpi	40223ec <__fputwc>

04022574 <fputwc>:
 4022574:	00810134 	movhi	r2,1028
 4022578:	defffc04 	addi	sp,sp,-16
 402257c:	10af8104 	addi	r2,r2,-16892
 4022580:	dc000115 	stw	r16,4(sp)
 4022584:	14000017 	ldw	r16,0(r2)
 4022588:	dc400215 	stw	r17,8(sp)
 402258c:	dfc00315 	stw	ra,12(sp)
 4022590:	2023883a 	mov	r17,r4
 4022594:	80000226 	beq	r16,zero,40225a0 <fputwc+0x2c>
 4022598:	80800e17 	ldw	r2,56(r16)
 402259c:	10001026 	beq	r2,zero,40225e0 <fputwc+0x6c>
 40225a0:	2880030b 	ldhu	r2,12(r5)
 40225a4:	10c8000c 	andi	r3,r2,8192
 40225a8:	1800051e 	bne	r3,zero,40225c0 <fputwc+0x4c>
 40225ac:	28c01917 	ldw	r3,100(r5)
 40225b0:	10880014 	ori	r2,r2,8192
 40225b4:	2880030d 	sth	r2,12(r5)
 40225b8:	18880014 	ori	r2,r3,8192
 40225bc:	28801915 	stw	r2,100(r5)
 40225c0:	280d883a 	mov	r6,r5
 40225c4:	8009883a 	mov	r4,r16
 40225c8:	880b883a 	mov	r5,r17
 40225cc:	dfc00317 	ldw	ra,12(sp)
 40225d0:	dc400217 	ldw	r17,8(sp)
 40225d4:	dc000117 	ldw	r16,4(sp)
 40225d8:	dec00404 	addi	sp,sp,16
 40225dc:	40223ec1 	jmpi	40223ec <__fputwc>
 40225e0:	8009883a 	mov	r4,r16
 40225e4:	d9400015 	stw	r5,0(sp)
 40225e8:	401d9ac0 	call	401d9ac <__sinit>
 40225ec:	d9400017 	ldw	r5,0(sp)
 40225f0:	003feb06 	br	40225a0 <__alt_data_end+0xfc0225a0>

040225f4 <_fstat_r>:
 40225f4:	defffd04 	addi	sp,sp,-12
 40225f8:	2805883a 	mov	r2,r5
 40225fc:	dc000015 	stw	r16,0(sp)
 4022600:	04010174 	movhi	r16,1029
 4022604:	dc400115 	stw	r17,4(sp)
 4022608:	842e2004 	addi	r16,r16,-18304
 402260c:	2023883a 	mov	r17,r4
 4022610:	300b883a 	mov	r5,r6
 4022614:	1009883a 	mov	r4,r2
 4022618:	dfc00215 	stw	ra,8(sp)
 402261c:	80000015 	stw	zero,0(r16)
 4022620:	40261900 	call	4026190 <fstat>
 4022624:	00ffffc4 	movi	r3,-1
 4022628:	10c00526 	beq	r2,r3,4022640 <_fstat_r+0x4c>
 402262c:	dfc00217 	ldw	ra,8(sp)
 4022630:	dc400117 	ldw	r17,4(sp)
 4022634:	dc000017 	ldw	r16,0(sp)
 4022638:	dec00304 	addi	sp,sp,12
 402263c:	f800283a 	ret
 4022640:	80c00017 	ldw	r3,0(r16)
 4022644:	183ff926 	beq	r3,zero,402262c <__alt_data_end+0xfc02262c>
 4022648:	88c00015 	stw	r3,0(r17)
 402264c:	003ff706 	br	402262c <__alt_data_end+0xfc02262c>

04022650 <_isatty_r>:
 4022650:	defffd04 	addi	sp,sp,-12
 4022654:	dc000015 	stw	r16,0(sp)
 4022658:	04010174 	movhi	r16,1029
 402265c:	dc400115 	stw	r17,4(sp)
 4022660:	842e2004 	addi	r16,r16,-18304
 4022664:	2023883a 	mov	r17,r4
 4022668:	2809883a 	mov	r4,r5
 402266c:	dfc00215 	stw	ra,8(sp)
 4022670:	80000015 	stw	zero,0(r16)
 4022674:	40262840 	call	4026284 <isatty>
 4022678:	00ffffc4 	movi	r3,-1
 402267c:	10c00526 	beq	r2,r3,4022694 <_isatty_r+0x44>
 4022680:	dfc00217 	ldw	ra,8(sp)
 4022684:	dc400117 	ldw	r17,4(sp)
 4022688:	dc000017 	ldw	r16,0(sp)
 402268c:	dec00304 	addi	sp,sp,12
 4022690:	f800283a 	ret
 4022694:	80c00017 	ldw	r3,0(r16)
 4022698:	183ff926 	beq	r3,zero,4022680 <__alt_data_end+0xfc022680>
 402269c:	88c00015 	stw	r3,0(r17)
 40226a0:	003ff706 	br	4022680 <__alt_data_end+0xfc022680>

040226a4 <_lseek_r>:
 40226a4:	defffd04 	addi	sp,sp,-12
 40226a8:	2805883a 	mov	r2,r5
 40226ac:	dc000015 	stw	r16,0(sp)
 40226b0:	04010174 	movhi	r16,1029
 40226b4:	dc400115 	stw	r17,4(sp)
 40226b8:	300b883a 	mov	r5,r6
 40226bc:	842e2004 	addi	r16,r16,-18304
 40226c0:	2023883a 	mov	r17,r4
 40226c4:	380d883a 	mov	r6,r7
 40226c8:	1009883a 	mov	r4,r2
 40226cc:	dfc00215 	stw	ra,8(sp)
 40226d0:	80000015 	stw	zero,0(r16)
 40226d4:	40264580 	call	4026458 <lseek>
 40226d8:	00ffffc4 	movi	r3,-1
 40226dc:	10c00526 	beq	r2,r3,40226f4 <_lseek_r+0x50>
 40226e0:	dfc00217 	ldw	ra,8(sp)
 40226e4:	dc400117 	ldw	r17,4(sp)
 40226e8:	dc000017 	ldw	r16,0(sp)
 40226ec:	dec00304 	addi	sp,sp,12
 40226f0:	f800283a 	ret
 40226f4:	80c00017 	ldw	r3,0(r16)
 40226f8:	183ff926 	beq	r3,zero,40226e0 <__alt_data_end+0xfc0226e0>
 40226fc:	88c00015 	stw	r3,0(r17)
 4022700:	003ff706 	br	40226e0 <__alt_data_end+0xfc0226e0>

04022704 <_read_r>:
 4022704:	defffd04 	addi	sp,sp,-12
 4022708:	2805883a 	mov	r2,r5
 402270c:	dc000015 	stw	r16,0(sp)
 4022710:	04010174 	movhi	r16,1029
 4022714:	dc400115 	stw	r17,4(sp)
 4022718:	300b883a 	mov	r5,r6
 402271c:	842e2004 	addi	r16,r16,-18304
 4022720:	2023883a 	mov	r17,r4
 4022724:	380d883a 	mov	r6,r7
 4022728:	1009883a 	mov	r4,r2
 402272c:	dfc00215 	stw	ra,8(sp)
 4022730:	80000015 	stw	zero,0(r16)
 4022734:	40266340 	call	4026634 <read>
 4022738:	00ffffc4 	movi	r3,-1
 402273c:	10c00526 	beq	r2,r3,4022754 <_read_r+0x50>
 4022740:	dfc00217 	ldw	ra,8(sp)
 4022744:	dc400117 	ldw	r17,4(sp)
 4022748:	dc000017 	ldw	r16,0(sp)
 402274c:	dec00304 	addi	sp,sp,12
 4022750:	f800283a 	ret
 4022754:	80c00017 	ldw	r3,0(r16)
 4022758:	183ff926 	beq	r3,zero,4022740 <__alt_data_end+0xfc022740>
 402275c:	88c00015 	stw	r3,0(r17)
 4022760:	003ff706 	br	4022740 <__alt_data_end+0xfc022740>

04022764 <__swbuf_r>:
 4022764:	defffb04 	addi	sp,sp,-20
 4022768:	dcc00315 	stw	r19,12(sp)
 402276c:	dc800215 	stw	r18,8(sp)
 4022770:	dc000015 	stw	r16,0(sp)
 4022774:	dfc00415 	stw	ra,16(sp)
 4022778:	dc400115 	stw	r17,4(sp)
 402277c:	2025883a 	mov	r18,r4
 4022780:	2827883a 	mov	r19,r5
 4022784:	3021883a 	mov	r16,r6
 4022788:	20000226 	beq	r4,zero,4022794 <__swbuf_r+0x30>
 402278c:	20800e17 	ldw	r2,56(r4)
 4022790:	10004226 	beq	r2,zero,402289c <__swbuf_r+0x138>
 4022794:	80800617 	ldw	r2,24(r16)
 4022798:	8100030b 	ldhu	r4,12(r16)
 402279c:	80800215 	stw	r2,8(r16)
 40227a0:	2080020c 	andi	r2,r4,8
 40227a4:	10003626 	beq	r2,zero,4022880 <__swbuf_r+0x11c>
 40227a8:	80c00417 	ldw	r3,16(r16)
 40227ac:	18003426 	beq	r3,zero,4022880 <__swbuf_r+0x11c>
 40227b0:	2088000c 	andi	r2,r4,8192
 40227b4:	9c403fcc 	andi	r17,r19,255
 40227b8:	10001a26 	beq	r2,zero,4022824 <__swbuf_r+0xc0>
 40227bc:	80800017 	ldw	r2,0(r16)
 40227c0:	81000517 	ldw	r4,20(r16)
 40227c4:	10c7c83a 	sub	r3,r2,r3
 40227c8:	1900200e 	bge	r3,r4,402284c <__swbuf_r+0xe8>
 40227cc:	18c00044 	addi	r3,r3,1
 40227d0:	81000217 	ldw	r4,8(r16)
 40227d4:	11400044 	addi	r5,r2,1
 40227d8:	81400015 	stw	r5,0(r16)
 40227dc:	213fffc4 	addi	r4,r4,-1
 40227e0:	81000215 	stw	r4,8(r16)
 40227e4:	14c00005 	stb	r19,0(r2)
 40227e8:	80800517 	ldw	r2,20(r16)
 40227ec:	10c01e26 	beq	r2,r3,4022868 <__swbuf_r+0x104>
 40227f0:	8080030b 	ldhu	r2,12(r16)
 40227f4:	1080004c 	andi	r2,r2,1
 40227f8:	10000226 	beq	r2,zero,4022804 <__swbuf_r+0xa0>
 40227fc:	00800284 	movi	r2,10
 4022800:	88801926 	beq	r17,r2,4022868 <__swbuf_r+0x104>
 4022804:	8805883a 	mov	r2,r17
 4022808:	dfc00417 	ldw	ra,16(sp)
 402280c:	dcc00317 	ldw	r19,12(sp)
 4022810:	dc800217 	ldw	r18,8(sp)
 4022814:	dc400117 	ldw	r17,4(sp)
 4022818:	dc000017 	ldw	r16,0(sp)
 402281c:	dec00504 	addi	sp,sp,20
 4022820:	f800283a 	ret
 4022824:	81401917 	ldw	r5,100(r16)
 4022828:	00b7ffc4 	movi	r2,-8193
 402282c:	21080014 	ori	r4,r4,8192
 4022830:	2884703a 	and	r2,r5,r2
 4022834:	80801915 	stw	r2,100(r16)
 4022838:	80800017 	ldw	r2,0(r16)
 402283c:	8100030d 	sth	r4,12(r16)
 4022840:	81000517 	ldw	r4,20(r16)
 4022844:	10c7c83a 	sub	r3,r2,r3
 4022848:	193fe016 	blt	r3,r4,40227cc <__alt_data_end+0xfc0227cc>
 402284c:	800b883a 	mov	r5,r16
 4022850:	9009883a 	mov	r4,r18
 4022854:	401d5c00 	call	401d5c0 <_fflush_r>
 4022858:	1000071e 	bne	r2,zero,4022878 <__swbuf_r+0x114>
 402285c:	80800017 	ldw	r2,0(r16)
 4022860:	00c00044 	movi	r3,1
 4022864:	003fda06 	br	40227d0 <__alt_data_end+0xfc0227d0>
 4022868:	800b883a 	mov	r5,r16
 402286c:	9009883a 	mov	r4,r18
 4022870:	401d5c00 	call	401d5c0 <_fflush_r>
 4022874:	103fe326 	beq	r2,zero,4022804 <__alt_data_end+0xfc022804>
 4022878:	00bfffc4 	movi	r2,-1
 402287c:	003fe206 	br	4022808 <__alt_data_end+0xfc022808>
 4022880:	800b883a 	mov	r5,r16
 4022884:	9009883a 	mov	r4,r18
 4022888:	401b9a00 	call	401b9a0 <__swsetup_r>
 402288c:	103ffa1e 	bne	r2,zero,4022878 <__alt_data_end+0xfc022878>
 4022890:	8100030b 	ldhu	r4,12(r16)
 4022894:	80c00417 	ldw	r3,16(r16)
 4022898:	003fc506 	br	40227b0 <__alt_data_end+0xfc0227b0>
 402289c:	401d9ac0 	call	401d9ac <__sinit>
 40228a0:	003fbc06 	br	4022794 <__alt_data_end+0xfc022794>

040228a4 <__swbuf>:
 40228a4:	00810134 	movhi	r2,1028
 40228a8:	10af8104 	addi	r2,r2,-16892
 40228ac:	280d883a 	mov	r6,r5
 40228b0:	200b883a 	mov	r5,r4
 40228b4:	11000017 	ldw	r4,0(r2)
 40228b8:	40227641 	jmpi	4022764 <__swbuf_r>

040228bc <_wcrtomb_r>:
 40228bc:	defff604 	addi	sp,sp,-40
 40228c0:	00810134 	movhi	r2,1028
 40228c4:	dc800815 	stw	r18,32(sp)
 40228c8:	dc400715 	stw	r17,28(sp)
 40228cc:	dc000615 	stw	r16,24(sp)
 40228d0:	10af8504 	addi	r2,r2,-16876
 40228d4:	dfc00915 	stw	ra,36(sp)
 40228d8:	2021883a 	mov	r16,r4
 40228dc:	3823883a 	mov	r17,r7
 40228e0:	14800017 	ldw	r18,0(r2)
 40228e4:	28001426 	beq	r5,zero,4022938 <_wcrtomb_r+0x7c>
 40228e8:	d9400415 	stw	r5,16(sp)
 40228ec:	d9800515 	stw	r6,20(sp)
 40228f0:	401e4fc0 	call	401e4fc <__locale_charset>
 40228f4:	d9800517 	ldw	r6,20(sp)
 40228f8:	d9400417 	ldw	r5,16(sp)
 40228fc:	100f883a 	mov	r7,r2
 4022900:	dc400015 	stw	r17,0(sp)
 4022904:	8009883a 	mov	r4,r16
 4022908:	903ee83a 	callr	r18
 402290c:	00ffffc4 	movi	r3,-1
 4022910:	10c0031e 	bne	r2,r3,4022920 <_wcrtomb_r+0x64>
 4022914:	88000015 	stw	zero,0(r17)
 4022918:	00c02284 	movi	r3,138
 402291c:	80c00015 	stw	r3,0(r16)
 4022920:	dfc00917 	ldw	ra,36(sp)
 4022924:	dc800817 	ldw	r18,32(sp)
 4022928:	dc400717 	ldw	r17,28(sp)
 402292c:	dc000617 	ldw	r16,24(sp)
 4022930:	dec00a04 	addi	sp,sp,40
 4022934:	f800283a 	ret
 4022938:	401e4fc0 	call	401e4fc <__locale_charset>
 402293c:	100f883a 	mov	r7,r2
 4022940:	dc400015 	stw	r17,0(sp)
 4022944:	000d883a 	mov	r6,zero
 4022948:	d9400104 	addi	r5,sp,4
 402294c:	8009883a 	mov	r4,r16
 4022950:	903ee83a 	callr	r18
 4022954:	003fed06 	br	402290c <__alt_data_end+0xfc02290c>

04022958 <wcrtomb>:
 4022958:	defff604 	addi	sp,sp,-40
 402295c:	00810134 	movhi	r2,1028
 4022960:	dc800615 	stw	r18,24(sp)
 4022964:	dc400515 	stw	r17,20(sp)
 4022968:	10af8104 	addi	r2,r2,-16892
 402296c:	dfc00915 	stw	ra,36(sp)
 4022970:	dd000815 	stw	r20,32(sp)
 4022974:	dcc00715 	stw	r19,28(sp)
 4022978:	dc000415 	stw	r16,16(sp)
 402297c:	3025883a 	mov	r18,r6
 4022980:	14400017 	ldw	r17,0(r2)
 4022984:	20001926 	beq	r4,zero,40229ec <wcrtomb+0x94>
 4022988:	00810134 	movhi	r2,1028
 402298c:	10af8504 	addi	r2,r2,-16876
 4022990:	15000017 	ldw	r20,0(r2)
 4022994:	2021883a 	mov	r16,r4
 4022998:	2827883a 	mov	r19,r5
 402299c:	401e4fc0 	call	401e4fc <__locale_charset>
 40229a0:	100f883a 	mov	r7,r2
 40229a4:	dc800015 	stw	r18,0(sp)
 40229a8:	980d883a 	mov	r6,r19
 40229ac:	800b883a 	mov	r5,r16
 40229b0:	8809883a 	mov	r4,r17
 40229b4:	a03ee83a 	callr	r20
 40229b8:	00ffffc4 	movi	r3,-1
 40229bc:	10c0031e 	bne	r2,r3,40229cc <wcrtomb+0x74>
 40229c0:	90000015 	stw	zero,0(r18)
 40229c4:	00c02284 	movi	r3,138
 40229c8:	88c00015 	stw	r3,0(r17)
 40229cc:	dfc00917 	ldw	ra,36(sp)
 40229d0:	dd000817 	ldw	r20,32(sp)
 40229d4:	dcc00717 	ldw	r19,28(sp)
 40229d8:	dc800617 	ldw	r18,24(sp)
 40229dc:	dc400517 	ldw	r17,20(sp)
 40229e0:	dc000417 	ldw	r16,16(sp)
 40229e4:	dec00a04 	addi	sp,sp,40
 40229e8:	f800283a 	ret
 40229ec:	00810134 	movhi	r2,1028
 40229f0:	10af8504 	addi	r2,r2,-16876
 40229f4:	14000017 	ldw	r16,0(r2)
 40229f8:	401e4fc0 	call	401e4fc <__locale_charset>
 40229fc:	100f883a 	mov	r7,r2
 4022a00:	dc800015 	stw	r18,0(sp)
 4022a04:	000d883a 	mov	r6,zero
 4022a08:	d9400104 	addi	r5,sp,4
 4022a0c:	8809883a 	mov	r4,r17
 4022a10:	803ee83a 	callr	r16
 4022a14:	003fe806 	br	40229b8 <__alt_data_end+0xfc0229b8>

04022a18 <__ascii_wctomb>:
 4022a18:	28000526 	beq	r5,zero,4022a30 <__ascii_wctomb+0x18>
 4022a1c:	00803fc4 	movi	r2,255
 4022a20:	11800536 	bltu	r2,r6,4022a38 <__ascii_wctomb+0x20>
 4022a24:	29800005 	stb	r6,0(r5)
 4022a28:	00800044 	movi	r2,1
 4022a2c:	f800283a 	ret
 4022a30:	0005883a 	mov	r2,zero
 4022a34:	f800283a 	ret
 4022a38:	00802284 	movi	r2,138
 4022a3c:	20800015 	stw	r2,0(r4)
 4022a40:	00bfffc4 	movi	r2,-1
 4022a44:	f800283a 	ret

04022a48 <_wctomb_r>:
 4022a48:	00810134 	movhi	r2,1028
 4022a4c:	defff904 	addi	sp,sp,-28
 4022a50:	10af8504 	addi	r2,r2,-16876
 4022a54:	dfc00615 	stw	ra,24(sp)
 4022a58:	dc400515 	stw	r17,20(sp)
 4022a5c:	dc000415 	stw	r16,16(sp)
 4022a60:	3823883a 	mov	r17,r7
 4022a64:	14000017 	ldw	r16,0(r2)
 4022a68:	d9000115 	stw	r4,4(sp)
 4022a6c:	d9400215 	stw	r5,8(sp)
 4022a70:	d9800315 	stw	r6,12(sp)
 4022a74:	401e4fc0 	call	401e4fc <__locale_charset>
 4022a78:	d9800317 	ldw	r6,12(sp)
 4022a7c:	d9400217 	ldw	r5,8(sp)
 4022a80:	d9000117 	ldw	r4,4(sp)
 4022a84:	100f883a 	mov	r7,r2
 4022a88:	dc400015 	stw	r17,0(sp)
 4022a8c:	803ee83a 	callr	r16
 4022a90:	dfc00617 	ldw	ra,24(sp)
 4022a94:	dc400517 	ldw	r17,20(sp)
 4022a98:	dc000417 	ldw	r16,16(sp)
 4022a9c:	dec00704 	addi	sp,sp,28
 4022aa0:	f800283a 	ret

04022aa4 <__muldi3>:
 4022aa4:	defff604 	addi	sp,sp,-40
 4022aa8:	dd800615 	stw	r22,24(sp)
 4022aac:	dd400515 	stw	r21,20(sp)
 4022ab0:	dc400115 	stw	r17,4(sp)
 4022ab4:	357fffcc 	andi	r21,r6,65535
 4022ab8:	2022d43a 	srli	r17,r4,16
 4022abc:	25bfffcc 	andi	r22,r4,65535
 4022ac0:	dcc00315 	stw	r19,12(sp)
 4022ac4:	dc800215 	stw	r18,8(sp)
 4022ac8:	2027883a 	mov	r19,r4
 4022acc:	2825883a 	mov	r18,r5
 4022ad0:	b009883a 	mov	r4,r22
 4022ad4:	a80b883a 	mov	r5,r21
 4022ad8:	dfc00915 	stw	ra,36(sp)
 4022adc:	df000815 	stw	fp,32(sp)
 4022ae0:	ddc00715 	stw	r23,28(sp)
 4022ae4:	3839883a 	mov	fp,r7
 4022ae8:	302ed43a 	srli	r23,r6,16
 4022aec:	dd000415 	stw	r20,16(sp)
 4022af0:	dc000015 	stw	r16,0(sp)
 4022af4:	3029883a 	mov	r20,r6
 4022af8:	40191000 	call	4019100 <__mulsi3>
 4022afc:	a80b883a 	mov	r5,r21
 4022b00:	8809883a 	mov	r4,r17
 4022b04:	1021883a 	mov	r16,r2
 4022b08:	40191000 	call	4019100 <__mulsi3>
 4022b0c:	8809883a 	mov	r4,r17
 4022b10:	b80b883a 	mov	r5,r23
 4022b14:	102b883a 	mov	r21,r2
 4022b18:	40191000 	call	4019100 <__mulsi3>
 4022b1c:	b80b883a 	mov	r5,r23
 4022b20:	b009883a 	mov	r4,r22
 4022b24:	1023883a 	mov	r17,r2
 4022b28:	40191000 	call	4019100 <__mulsi3>
 4022b2c:	8006d43a 	srli	r3,r16,16
 4022b30:	1545883a 	add	r2,r2,r21
 4022b34:	1885883a 	add	r2,r3,r2
 4022b38:	1540022e 	bgeu	r2,r21,4022b44 <__muldi3+0xa0>
 4022b3c:	00c00074 	movhi	r3,1
 4022b40:	88e3883a 	add	r17,r17,r3
 4022b44:	1006d43a 	srli	r3,r2,16
 4022b48:	1004943a 	slli	r2,r2,16
 4022b4c:	e00b883a 	mov	r5,fp
 4022b50:	9809883a 	mov	r4,r19
 4022b54:	843fffcc 	andi	r16,r16,65535
 4022b58:	1c63883a 	add	r17,r3,r17
 4022b5c:	1421883a 	add	r16,r2,r16
 4022b60:	40191000 	call	4019100 <__mulsi3>
 4022b64:	900b883a 	mov	r5,r18
 4022b68:	a009883a 	mov	r4,r20
 4022b6c:	1027883a 	mov	r19,r2
 4022b70:	40191000 	call	4019100 <__mulsi3>
 4022b74:	9885883a 	add	r2,r19,r2
 4022b78:	1447883a 	add	r3,r2,r17
 4022b7c:	8005883a 	mov	r2,r16
 4022b80:	dfc00917 	ldw	ra,36(sp)
 4022b84:	df000817 	ldw	fp,32(sp)
 4022b88:	ddc00717 	ldw	r23,28(sp)
 4022b8c:	dd800617 	ldw	r22,24(sp)
 4022b90:	dd400517 	ldw	r21,20(sp)
 4022b94:	dd000417 	ldw	r20,16(sp)
 4022b98:	dcc00317 	ldw	r19,12(sp)
 4022b9c:	dc800217 	ldw	r18,8(sp)
 4022ba0:	dc400117 	ldw	r17,4(sp)
 4022ba4:	dc000017 	ldw	r16,0(sp)
 4022ba8:	dec00a04 	addi	sp,sp,40
 4022bac:	f800283a 	ret

04022bb0 <__udivdi3>:
 4022bb0:	defff404 	addi	sp,sp,-48
 4022bb4:	dcc00515 	stw	r19,20(sp)
 4022bb8:	dc000215 	stw	r16,8(sp)
 4022bbc:	dfc00b15 	stw	ra,44(sp)
 4022bc0:	df000a15 	stw	fp,40(sp)
 4022bc4:	ddc00915 	stw	r23,36(sp)
 4022bc8:	dd800815 	stw	r22,32(sp)
 4022bcc:	dd400715 	stw	r21,28(sp)
 4022bd0:	dd000615 	stw	r20,24(sp)
 4022bd4:	dc800415 	stw	r18,16(sp)
 4022bd8:	dc400315 	stw	r17,12(sp)
 4022bdc:	2027883a 	mov	r19,r4
 4022be0:	2821883a 	mov	r16,r5
 4022be4:	3800461e 	bne	r7,zero,4022d00 <__udivdi3+0x150>
 4022be8:	3023883a 	mov	r17,r6
 4022bec:	2025883a 	mov	r18,r4
 4022bf0:	2980572e 	bgeu	r5,r6,4022d50 <__udivdi3+0x1a0>
 4022bf4:	00bfffd4 	movui	r2,65535
 4022bf8:	282d883a 	mov	r22,r5
 4022bfc:	1180b236 	bltu	r2,r6,4022ec8 <__udivdi3+0x318>
 4022c00:	00803fc4 	movi	r2,255
 4022c04:	1185803a 	cmpltu	r2,r2,r6
 4022c08:	100490fa 	slli	r2,r2,3
 4022c0c:	3086d83a 	srl	r3,r6,r2
 4022c10:	010100f4 	movhi	r4,1027
 4022c14:	2130d104 	addi	r4,r4,-15548
 4022c18:	20c7883a 	add	r3,r4,r3
 4022c1c:	18c00003 	ldbu	r3,0(r3)
 4022c20:	1885883a 	add	r2,r3,r2
 4022c24:	00c00804 	movi	r3,32
 4022c28:	1887c83a 	sub	r3,r3,r2
 4022c2c:	18000526 	beq	r3,zero,4022c44 <__udivdi3+0x94>
 4022c30:	80e0983a 	sll	r16,r16,r3
 4022c34:	9884d83a 	srl	r2,r19,r2
 4022c38:	30e2983a 	sll	r17,r6,r3
 4022c3c:	98e4983a 	sll	r18,r19,r3
 4022c40:	142cb03a 	or	r22,r2,r16
 4022c44:	882ad43a 	srli	r21,r17,16
 4022c48:	b009883a 	mov	r4,r22
 4022c4c:	8d3fffcc 	andi	r20,r17,65535
 4022c50:	a80b883a 	mov	r5,r21
 4022c54:	40190a80 	call	40190a8 <__umodsi3>
 4022c58:	b009883a 	mov	r4,r22
 4022c5c:	a80b883a 	mov	r5,r21
 4022c60:	1027883a 	mov	r19,r2
 4022c64:	40190440 	call	4019044 <__udivsi3>
 4022c68:	100b883a 	mov	r5,r2
 4022c6c:	a009883a 	mov	r4,r20
 4022c70:	102d883a 	mov	r22,r2
 4022c74:	40191000 	call	4019100 <__mulsi3>
 4022c78:	9826943a 	slli	r19,r19,16
 4022c7c:	9006d43a 	srli	r3,r18,16
 4022c80:	1cc6b03a 	or	r3,r3,r19
 4022c84:	1880052e 	bgeu	r3,r2,4022c9c <__udivdi3+0xec>
 4022c88:	1c47883a 	add	r3,r3,r17
 4022c8c:	b13fffc4 	addi	r4,r22,-1
 4022c90:	1c400136 	bltu	r3,r17,4022c98 <__udivdi3+0xe8>
 4022c94:	18814236 	bltu	r3,r2,40231a0 <__udivdi3+0x5f0>
 4022c98:	202d883a 	mov	r22,r4
 4022c9c:	18a1c83a 	sub	r16,r3,r2
 4022ca0:	8009883a 	mov	r4,r16
 4022ca4:	a80b883a 	mov	r5,r21
 4022ca8:	40190a80 	call	40190a8 <__umodsi3>
 4022cac:	1027883a 	mov	r19,r2
 4022cb0:	8009883a 	mov	r4,r16
 4022cb4:	a80b883a 	mov	r5,r21
 4022cb8:	9826943a 	slli	r19,r19,16
 4022cbc:	40190440 	call	4019044 <__udivsi3>
 4022cc0:	100b883a 	mov	r5,r2
 4022cc4:	a009883a 	mov	r4,r20
 4022cc8:	94bfffcc 	andi	r18,r18,65535
 4022ccc:	1021883a 	mov	r16,r2
 4022cd0:	94e4b03a 	or	r18,r18,r19
 4022cd4:	40191000 	call	4019100 <__mulsi3>
 4022cd8:	9080052e 	bgeu	r18,r2,4022cf0 <__udivdi3+0x140>
 4022cdc:	8ca5883a 	add	r18,r17,r18
 4022ce0:	80ffffc4 	addi	r3,r16,-1
 4022ce4:	94410c36 	bltu	r18,r17,4023118 <__udivdi3+0x568>
 4022ce8:	90810b2e 	bgeu	r18,r2,4023118 <__udivdi3+0x568>
 4022cec:	843fff84 	addi	r16,r16,-2
 4022cf0:	b004943a 	slli	r2,r22,16
 4022cf4:	0007883a 	mov	r3,zero
 4022cf8:	1404b03a 	or	r2,r2,r16
 4022cfc:	00005e06 	br	4022e78 <__udivdi3+0x2c8>
 4022d00:	29c05b36 	bltu	r5,r7,4022e70 <__udivdi3+0x2c0>
 4022d04:	00bfffd4 	movui	r2,65535
 4022d08:	11c0672e 	bgeu	r2,r7,4022ea8 <__udivdi3+0x2f8>
 4022d0c:	00804034 	movhi	r2,256
 4022d10:	10bfffc4 	addi	r2,r2,-1
 4022d14:	11c10a36 	bltu	r2,r7,4023140 <__udivdi3+0x590>
 4022d18:	00800404 	movi	r2,16
 4022d1c:	3886d83a 	srl	r3,r7,r2
 4022d20:	010100f4 	movhi	r4,1027
 4022d24:	2130d104 	addi	r4,r4,-15548
 4022d28:	20c7883a 	add	r3,r4,r3
 4022d2c:	18c00003 	ldbu	r3,0(r3)
 4022d30:	05c00804 	movi	r23,32
 4022d34:	1885883a 	add	r2,r3,r2
 4022d38:	b8afc83a 	sub	r23,r23,r2
 4022d3c:	b800671e 	bne	r23,zero,4022edc <__udivdi3+0x32c>
 4022d40:	3c010536 	bltu	r7,r16,4023158 <__udivdi3+0x5a8>
 4022d44:	9985403a 	cmpgeu	r2,r19,r6
 4022d48:	0007883a 	mov	r3,zero
 4022d4c:	00004a06 	br	4022e78 <__udivdi3+0x2c8>
 4022d50:	3000041e 	bne	r6,zero,4022d64 <__udivdi3+0x1b4>
 4022d54:	000b883a 	mov	r5,zero
 4022d58:	01000044 	movi	r4,1
 4022d5c:	40190440 	call	4019044 <__udivsi3>
 4022d60:	1023883a 	mov	r17,r2
 4022d64:	00bfffd4 	movui	r2,65535
 4022d68:	1440532e 	bgeu	r2,r17,4022eb8 <__udivdi3+0x308>
 4022d6c:	00804034 	movhi	r2,256
 4022d70:	10bfffc4 	addi	r2,r2,-1
 4022d74:	1440f436 	bltu	r2,r17,4023148 <__udivdi3+0x598>
 4022d78:	00800404 	movi	r2,16
 4022d7c:	8886d83a 	srl	r3,r17,r2
 4022d80:	010100f4 	movhi	r4,1027
 4022d84:	2130d104 	addi	r4,r4,-15548
 4022d88:	20c7883a 	add	r3,r4,r3
 4022d8c:	18c00003 	ldbu	r3,0(r3)
 4022d90:	1885883a 	add	r2,r3,r2
 4022d94:	00c00804 	movi	r3,32
 4022d98:	1887c83a 	sub	r3,r3,r2
 4022d9c:	1800a51e 	bne	r3,zero,4023034 <__udivdi3+0x484>
 4022da0:	882ad43a 	srli	r21,r17,16
 4022da4:	8461c83a 	sub	r16,r16,r17
 4022da8:	8d3fffcc 	andi	r20,r17,65535
 4022dac:	00c00044 	movi	r3,1
 4022db0:	a80b883a 	mov	r5,r21
 4022db4:	8009883a 	mov	r4,r16
 4022db8:	d8c00115 	stw	r3,4(sp)
 4022dbc:	40190a80 	call	40190a8 <__umodsi3>
 4022dc0:	a80b883a 	mov	r5,r21
 4022dc4:	8009883a 	mov	r4,r16
 4022dc8:	1027883a 	mov	r19,r2
 4022dcc:	40190440 	call	4019044 <__udivsi3>
 4022dd0:	a00b883a 	mov	r5,r20
 4022dd4:	1009883a 	mov	r4,r2
 4022dd8:	102d883a 	mov	r22,r2
 4022ddc:	40191000 	call	4019100 <__mulsi3>
 4022de0:	9826943a 	slli	r19,r19,16
 4022de4:	900ed43a 	srli	r7,r18,16
 4022de8:	d8c00117 	ldw	r3,4(sp)
 4022dec:	3cceb03a 	or	r7,r7,r19
 4022df0:	3880052e 	bgeu	r7,r2,4022e08 <__udivdi3+0x258>
 4022df4:	3c4f883a 	add	r7,r7,r17
 4022df8:	b13fffc4 	addi	r4,r22,-1
 4022dfc:	3c400136 	bltu	r7,r17,4022e04 <__udivdi3+0x254>
 4022e00:	3880e436 	bltu	r7,r2,4023194 <__udivdi3+0x5e4>
 4022e04:	202d883a 	mov	r22,r4
 4022e08:	38a1c83a 	sub	r16,r7,r2
 4022e0c:	8009883a 	mov	r4,r16
 4022e10:	a80b883a 	mov	r5,r21
 4022e14:	d8c00115 	stw	r3,4(sp)
 4022e18:	40190a80 	call	40190a8 <__umodsi3>
 4022e1c:	1027883a 	mov	r19,r2
 4022e20:	8009883a 	mov	r4,r16
 4022e24:	a80b883a 	mov	r5,r21
 4022e28:	9826943a 	slli	r19,r19,16
 4022e2c:	40190440 	call	4019044 <__udivsi3>
 4022e30:	a00b883a 	mov	r5,r20
 4022e34:	1009883a 	mov	r4,r2
 4022e38:	94bfffcc 	andi	r18,r18,65535
 4022e3c:	1021883a 	mov	r16,r2
 4022e40:	94e4b03a 	or	r18,r18,r19
 4022e44:	40191000 	call	4019100 <__mulsi3>
 4022e48:	d8c00117 	ldw	r3,4(sp)
 4022e4c:	9080052e 	bgeu	r18,r2,4022e64 <__udivdi3+0x2b4>
 4022e50:	8ca5883a 	add	r18,r17,r18
 4022e54:	813fffc4 	addi	r4,r16,-1
 4022e58:	9440ad36 	bltu	r18,r17,4023110 <__udivdi3+0x560>
 4022e5c:	9080ac2e 	bgeu	r18,r2,4023110 <__udivdi3+0x560>
 4022e60:	843fff84 	addi	r16,r16,-2
 4022e64:	b004943a 	slli	r2,r22,16
 4022e68:	1404b03a 	or	r2,r2,r16
 4022e6c:	00000206 	br	4022e78 <__udivdi3+0x2c8>
 4022e70:	0007883a 	mov	r3,zero
 4022e74:	0005883a 	mov	r2,zero
 4022e78:	dfc00b17 	ldw	ra,44(sp)
 4022e7c:	df000a17 	ldw	fp,40(sp)
 4022e80:	ddc00917 	ldw	r23,36(sp)
 4022e84:	dd800817 	ldw	r22,32(sp)
 4022e88:	dd400717 	ldw	r21,28(sp)
 4022e8c:	dd000617 	ldw	r20,24(sp)
 4022e90:	dcc00517 	ldw	r19,20(sp)
 4022e94:	dc800417 	ldw	r18,16(sp)
 4022e98:	dc400317 	ldw	r17,12(sp)
 4022e9c:	dc000217 	ldw	r16,8(sp)
 4022ea0:	dec00c04 	addi	sp,sp,48
 4022ea4:	f800283a 	ret
 4022ea8:	00803fc4 	movi	r2,255
 4022eac:	11c5803a 	cmpltu	r2,r2,r7
 4022eb0:	100490fa 	slli	r2,r2,3
 4022eb4:	003f9906 	br	4022d1c <__alt_data_end+0xfc022d1c>
 4022eb8:	00803fc4 	movi	r2,255
 4022ebc:	1445803a 	cmpltu	r2,r2,r17
 4022ec0:	100490fa 	slli	r2,r2,3
 4022ec4:	003fad06 	br	4022d7c <__alt_data_end+0xfc022d7c>
 4022ec8:	00804034 	movhi	r2,256
 4022ecc:	10bfffc4 	addi	r2,r2,-1
 4022ed0:	11809f36 	bltu	r2,r6,4023150 <__udivdi3+0x5a0>
 4022ed4:	00800404 	movi	r2,16
 4022ed8:	003f4c06 	br	4022c0c <__alt_data_end+0xfc022c0c>
 4022edc:	3dce983a 	sll	r7,r7,r23
 4022ee0:	30b8d83a 	srl	fp,r6,r2
 4022ee4:	80a2d83a 	srl	r17,r16,r2
 4022ee8:	35cc983a 	sll	r6,r6,r23
 4022eec:	3f38b03a 	or	fp,r7,fp
 4022ef0:	e024d43a 	srli	r18,fp,16
 4022ef4:	9884d83a 	srl	r2,r19,r2
 4022ef8:	85e0983a 	sll	r16,r16,r23
 4022efc:	8809883a 	mov	r4,r17
 4022f00:	900b883a 	mov	r5,r18
 4022f04:	d9800015 	stw	r6,0(sp)
 4022f08:	1420b03a 	or	r16,r2,r16
 4022f0c:	40190a80 	call	40190a8 <__umodsi3>
 4022f10:	900b883a 	mov	r5,r18
 4022f14:	8809883a 	mov	r4,r17
 4022f18:	1029883a 	mov	r20,r2
 4022f1c:	e5bfffcc 	andi	r22,fp,65535
 4022f20:	40190440 	call	4019044 <__udivsi3>
 4022f24:	100b883a 	mov	r5,r2
 4022f28:	b009883a 	mov	r4,r22
 4022f2c:	102b883a 	mov	r21,r2
 4022f30:	40191000 	call	4019100 <__mulsi3>
 4022f34:	a028943a 	slli	r20,r20,16
 4022f38:	8006d43a 	srli	r3,r16,16
 4022f3c:	1d06b03a 	or	r3,r3,r20
 4022f40:	1880042e 	bgeu	r3,r2,4022f54 <__udivdi3+0x3a4>
 4022f44:	1f07883a 	add	r3,r3,fp
 4022f48:	a93fffc4 	addi	r4,r21,-1
 4022f4c:	1f00892e 	bgeu	r3,fp,4023174 <__udivdi3+0x5c4>
 4022f50:	202b883a 	mov	r21,r4
 4022f54:	18a3c83a 	sub	r17,r3,r2
 4022f58:	8809883a 	mov	r4,r17
 4022f5c:	900b883a 	mov	r5,r18
 4022f60:	40190a80 	call	40190a8 <__umodsi3>
 4022f64:	1029883a 	mov	r20,r2
 4022f68:	8809883a 	mov	r4,r17
 4022f6c:	900b883a 	mov	r5,r18
 4022f70:	a028943a 	slli	r20,r20,16
 4022f74:	40190440 	call	4019044 <__udivsi3>
 4022f78:	100b883a 	mov	r5,r2
 4022f7c:	b009883a 	mov	r4,r22
 4022f80:	843fffcc 	andi	r16,r16,65535
 4022f84:	1023883a 	mov	r17,r2
 4022f88:	8520b03a 	or	r16,r16,r20
 4022f8c:	40191000 	call	4019100 <__mulsi3>
 4022f90:	8080042e 	bgeu	r16,r2,4022fa4 <__udivdi3+0x3f4>
 4022f94:	8721883a 	add	r16,r16,fp
 4022f98:	88ffffc4 	addi	r3,r17,-1
 4022f9c:	8700712e 	bgeu	r16,fp,4023164 <__udivdi3+0x5b4>
 4022fa0:	1823883a 	mov	r17,r3
 4022fa4:	a80e943a 	slli	r7,r21,16
 4022fa8:	d8c00017 	ldw	r3,0(sp)
 4022fac:	80a1c83a 	sub	r16,r16,r2
 4022fb0:	3c64b03a 	or	r18,r7,r17
 4022fb4:	1d3fffcc 	andi	r20,r3,65535
 4022fb8:	9022d43a 	srli	r17,r18,16
 4022fbc:	95bfffcc 	andi	r22,r18,65535
 4022fc0:	a00b883a 	mov	r5,r20
 4022fc4:	b009883a 	mov	r4,r22
 4022fc8:	182ad43a 	srli	r21,r3,16
 4022fcc:	40191000 	call	4019100 <__mulsi3>
 4022fd0:	a00b883a 	mov	r5,r20
 4022fd4:	8809883a 	mov	r4,r17
 4022fd8:	1039883a 	mov	fp,r2
 4022fdc:	40191000 	call	4019100 <__mulsi3>
 4022fe0:	8809883a 	mov	r4,r17
 4022fe4:	a80b883a 	mov	r5,r21
 4022fe8:	1029883a 	mov	r20,r2
 4022fec:	40191000 	call	4019100 <__mulsi3>
 4022ff0:	a80b883a 	mov	r5,r21
 4022ff4:	b009883a 	mov	r4,r22
 4022ff8:	1023883a 	mov	r17,r2
 4022ffc:	40191000 	call	4019100 <__mulsi3>
 4023000:	e006d43a 	srli	r3,fp,16
 4023004:	1505883a 	add	r2,r2,r20
 4023008:	1887883a 	add	r3,r3,r2
 402300c:	1d00022e 	bgeu	r3,r20,4023018 <__udivdi3+0x468>
 4023010:	00800074 	movhi	r2,1
 4023014:	88a3883a 	add	r17,r17,r2
 4023018:	1804d43a 	srli	r2,r3,16
 402301c:	1463883a 	add	r17,r2,r17
 4023020:	84404436 	bltu	r16,r17,4023134 <__udivdi3+0x584>
 4023024:	84403e26 	beq	r16,r17,4023120 <__udivdi3+0x570>
 4023028:	9005883a 	mov	r2,r18
 402302c:	0007883a 	mov	r3,zero
 4023030:	003f9106 	br	4022e78 <__alt_data_end+0xfc022e78>
 4023034:	88e2983a 	sll	r17,r17,r3
 4023038:	80aed83a 	srl	r23,r16,r2
 402303c:	80e0983a 	sll	r16,r16,r3
 4023040:	882ad43a 	srli	r21,r17,16
 4023044:	9884d83a 	srl	r2,r19,r2
 4023048:	b809883a 	mov	r4,r23
 402304c:	a80b883a 	mov	r5,r21
 4023050:	98e4983a 	sll	r18,r19,r3
 4023054:	142cb03a 	or	r22,r2,r16
 4023058:	40190a80 	call	40190a8 <__umodsi3>
 402305c:	b809883a 	mov	r4,r23
 4023060:	a80b883a 	mov	r5,r21
 4023064:	1027883a 	mov	r19,r2
 4023068:	8d3fffcc 	andi	r20,r17,65535
 402306c:	40190440 	call	4019044 <__udivsi3>
 4023070:	a009883a 	mov	r4,r20
 4023074:	100b883a 	mov	r5,r2
 4023078:	102f883a 	mov	r23,r2
 402307c:	40191000 	call	4019100 <__mulsi3>
 4023080:	9826943a 	slli	r19,r19,16
 4023084:	b008d43a 	srli	r4,r22,16
 4023088:	24c8b03a 	or	r4,r4,r19
 402308c:	2080062e 	bgeu	r4,r2,40230a8 <__udivdi3+0x4f8>
 4023090:	2449883a 	add	r4,r4,r17
 4023094:	b8ffffc4 	addi	r3,r23,-1
 4023098:	24403c36 	bltu	r4,r17,402318c <__udivdi3+0x5dc>
 402309c:	20803b2e 	bgeu	r4,r2,402318c <__udivdi3+0x5dc>
 40230a0:	bdffff84 	addi	r23,r23,-2
 40230a4:	2449883a 	add	r4,r4,r17
 40230a8:	20a1c83a 	sub	r16,r4,r2
 40230ac:	a80b883a 	mov	r5,r21
 40230b0:	8009883a 	mov	r4,r16
 40230b4:	40190a80 	call	40190a8 <__umodsi3>
 40230b8:	a80b883a 	mov	r5,r21
 40230bc:	8009883a 	mov	r4,r16
 40230c0:	1027883a 	mov	r19,r2
 40230c4:	40190440 	call	4019044 <__udivsi3>
 40230c8:	a009883a 	mov	r4,r20
 40230cc:	100b883a 	mov	r5,r2
 40230d0:	9826943a 	slli	r19,r19,16
 40230d4:	1039883a 	mov	fp,r2
 40230d8:	40191000 	call	4019100 <__mulsi3>
 40230dc:	b13fffcc 	andi	r4,r22,65535
 40230e0:	24c8b03a 	or	r4,r4,r19
 40230e4:	2080062e 	bgeu	r4,r2,4023100 <__udivdi3+0x550>
 40230e8:	2449883a 	add	r4,r4,r17
 40230ec:	e0ffffc4 	addi	r3,fp,-1
 40230f0:	24402436 	bltu	r4,r17,4023184 <__udivdi3+0x5d4>
 40230f4:	2080232e 	bgeu	r4,r2,4023184 <__udivdi3+0x5d4>
 40230f8:	e73fff84 	addi	fp,fp,-2
 40230fc:	2449883a 	add	r4,r4,r17
 4023100:	b82e943a 	slli	r23,r23,16
 4023104:	20a1c83a 	sub	r16,r4,r2
 4023108:	bf06b03a 	or	r3,r23,fp
 402310c:	003f2806 	br	4022db0 <__alt_data_end+0xfc022db0>
 4023110:	2021883a 	mov	r16,r4
 4023114:	003f5306 	br	4022e64 <__alt_data_end+0xfc022e64>
 4023118:	1821883a 	mov	r16,r3
 402311c:	003ef406 	br	4022cf0 <__alt_data_end+0xfc022cf0>
 4023120:	1806943a 	slli	r3,r3,16
 4023124:	9de6983a 	sll	r19,r19,r23
 4023128:	e73fffcc 	andi	fp,fp,65535
 402312c:	1f07883a 	add	r3,r3,fp
 4023130:	98ffbd2e 	bgeu	r19,r3,4023028 <__alt_data_end+0xfc023028>
 4023134:	90bfffc4 	addi	r2,r18,-1
 4023138:	0007883a 	mov	r3,zero
 402313c:	003f4e06 	br	4022e78 <__alt_data_end+0xfc022e78>
 4023140:	00800604 	movi	r2,24
 4023144:	003ef506 	br	4022d1c <__alt_data_end+0xfc022d1c>
 4023148:	00800604 	movi	r2,24
 402314c:	003f0b06 	br	4022d7c <__alt_data_end+0xfc022d7c>
 4023150:	00800604 	movi	r2,24
 4023154:	003ead06 	br	4022c0c <__alt_data_end+0xfc022c0c>
 4023158:	0007883a 	mov	r3,zero
 402315c:	00800044 	movi	r2,1
 4023160:	003f4506 	br	4022e78 <__alt_data_end+0xfc022e78>
 4023164:	80bf8e2e 	bgeu	r16,r2,4022fa0 <__alt_data_end+0xfc022fa0>
 4023168:	8c7fff84 	addi	r17,r17,-2
 402316c:	8721883a 	add	r16,r16,fp
 4023170:	003f8c06 	br	4022fa4 <__alt_data_end+0xfc022fa4>
 4023174:	18bf762e 	bgeu	r3,r2,4022f50 <__alt_data_end+0xfc022f50>
 4023178:	ad7fff84 	addi	r21,r21,-2
 402317c:	1f07883a 	add	r3,r3,fp
 4023180:	003f7406 	br	4022f54 <__alt_data_end+0xfc022f54>
 4023184:	1839883a 	mov	fp,r3
 4023188:	003fdd06 	br	4023100 <__alt_data_end+0xfc023100>
 402318c:	182f883a 	mov	r23,r3
 4023190:	003fc506 	br	40230a8 <__alt_data_end+0xfc0230a8>
 4023194:	b5bfff84 	addi	r22,r22,-2
 4023198:	3c4f883a 	add	r7,r7,r17
 402319c:	003f1a06 	br	4022e08 <__alt_data_end+0xfc022e08>
 40231a0:	b5bfff84 	addi	r22,r22,-2
 40231a4:	1c47883a 	add	r3,r3,r17
 40231a8:	003ebc06 	br	4022c9c <__alt_data_end+0xfc022c9c>

040231ac <__umoddi3>:
 40231ac:	defff304 	addi	sp,sp,-52
 40231b0:	df000b15 	stw	fp,44(sp)
 40231b4:	dc400415 	stw	r17,16(sp)
 40231b8:	dc000315 	stw	r16,12(sp)
 40231bc:	dfc00c15 	stw	ra,48(sp)
 40231c0:	ddc00a15 	stw	r23,40(sp)
 40231c4:	dd800915 	stw	r22,36(sp)
 40231c8:	dd400815 	stw	r21,32(sp)
 40231cc:	dd000715 	stw	r20,28(sp)
 40231d0:	dcc00615 	stw	r19,24(sp)
 40231d4:	dc800515 	stw	r18,20(sp)
 40231d8:	2021883a 	mov	r16,r4
 40231dc:	2823883a 	mov	r17,r5
 40231e0:	2839883a 	mov	fp,r5
 40231e4:	3800401e 	bne	r7,zero,40232e8 <__umoddi3+0x13c>
 40231e8:	3027883a 	mov	r19,r6
 40231ec:	2029883a 	mov	r20,r4
 40231f0:	2980552e 	bgeu	r5,r6,4023348 <__umoddi3+0x19c>
 40231f4:	00bfffd4 	movui	r2,65535
 40231f8:	1180a236 	bltu	r2,r6,4023484 <__umoddi3+0x2d8>
 40231fc:	01003fc4 	movi	r4,255
 4023200:	2189803a 	cmpltu	r4,r4,r6
 4023204:	200890fa 	slli	r4,r4,3
 4023208:	3104d83a 	srl	r2,r6,r4
 402320c:	00c100f4 	movhi	r3,1027
 4023210:	18f0d104 	addi	r3,r3,-15548
 4023214:	1885883a 	add	r2,r3,r2
 4023218:	10c00003 	ldbu	r3,0(r2)
 402321c:	00800804 	movi	r2,32
 4023220:	1909883a 	add	r4,r3,r4
 4023224:	1125c83a 	sub	r18,r2,r4
 4023228:	90000526 	beq	r18,zero,4023240 <__umoddi3+0x94>
 402322c:	8ca2983a 	sll	r17,r17,r18
 4023230:	8108d83a 	srl	r4,r16,r4
 4023234:	34a6983a 	sll	r19,r6,r18
 4023238:	84a8983a 	sll	r20,r16,r18
 402323c:	2478b03a 	or	fp,r4,r17
 4023240:	982cd43a 	srli	r22,r19,16
 4023244:	e009883a 	mov	r4,fp
 4023248:	9dffffcc 	andi	r23,r19,65535
 402324c:	b00b883a 	mov	r5,r22
 4023250:	40190a80 	call	40190a8 <__umodsi3>
 4023254:	b00b883a 	mov	r5,r22
 4023258:	e009883a 	mov	r4,fp
 402325c:	102b883a 	mov	r21,r2
 4023260:	40190440 	call	4019044 <__udivsi3>
 4023264:	100b883a 	mov	r5,r2
 4023268:	b809883a 	mov	r4,r23
 402326c:	40191000 	call	4019100 <__mulsi3>
 4023270:	a82a943a 	slli	r21,r21,16
 4023274:	a006d43a 	srli	r3,r20,16
 4023278:	1d46b03a 	or	r3,r3,r21
 402327c:	1880032e 	bgeu	r3,r2,402328c <__umoddi3+0xe0>
 4023280:	1cc7883a 	add	r3,r3,r19
 4023284:	1cc00136 	bltu	r3,r19,402328c <__umoddi3+0xe0>
 4023288:	18813136 	bltu	r3,r2,4023750 <__umoddi3+0x5a4>
 402328c:	18a1c83a 	sub	r16,r3,r2
 4023290:	b00b883a 	mov	r5,r22
 4023294:	8009883a 	mov	r4,r16
 4023298:	40190a80 	call	40190a8 <__umodsi3>
 402329c:	b00b883a 	mov	r5,r22
 40232a0:	8009883a 	mov	r4,r16
 40232a4:	1023883a 	mov	r17,r2
 40232a8:	40190440 	call	4019044 <__udivsi3>
 40232ac:	100b883a 	mov	r5,r2
 40232b0:	b809883a 	mov	r4,r23
 40232b4:	8822943a 	slli	r17,r17,16
 40232b8:	40191000 	call	4019100 <__mulsi3>
 40232bc:	a0ffffcc 	andi	r3,r20,65535
 40232c0:	1c46b03a 	or	r3,r3,r17
 40232c4:	1880042e 	bgeu	r3,r2,40232d8 <__umoddi3+0x12c>
 40232c8:	1cc7883a 	add	r3,r3,r19
 40232cc:	1cc00236 	bltu	r3,r19,40232d8 <__umoddi3+0x12c>
 40232d0:	1880012e 	bgeu	r3,r2,40232d8 <__umoddi3+0x12c>
 40232d4:	1cc7883a 	add	r3,r3,r19
 40232d8:	1885c83a 	sub	r2,r3,r2
 40232dc:	1484d83a 	srl	r2,r2,r18
 40232e0:	0007883a 	mov	r3,zero
 40232e4:	00005306 	br	4023434 <__umoddi3+0x288>
 40232e8:	29c05036 	bltu	r5,r7,402342c <__umoddi3+0x280>
 40232ec:	00bfffd4 	movui	r2,65535
 40232f0:	11c05c2e 	bgeu	r2,r7,4023464 <__umoddi3+0x2b8>
 40232f4:	00804034 	movhi	r2,256
 40232f8:	10bfffc4 	addi	r2,r2,-1
 40232fc:	11c10636 	bltu	r2,r7,4023718 <__umoddi3+0x56c>
 4023300:	01000404 	movi	r4,16
 4023304:	3904d83a 	srl	r2,r7,r4
 4023308:	00c100f4 	movhi	r3,1027
 402330c:	18f0d104 	addi	r3,r3,-15548
 4023310:	1885883a 	add	r2,r3,r2
 4023314:	14c00003 	ldbu	r19,0(r2)
 4023318:	00c00804 	movi	r3,32
 402331c:	9927883a 	add	r19,r19,r4
 4023320:	1ce9c83a 	sub	r20,r3,r19
 4023324:	a0005c1e 	bne	r20,zero,4023498 <__umoddi3+0x2ec>
 4023328:	3c400136 	bltu	r7,r17,4023330 <__umoddi3+0x184>
 402332c:	81810a36 	bltu	r16,r6,4023758 <__umoddi3+0x5ac>
 4023330:	8185c83a 	sub	r2,r16,r6
 4023334:	89e3c83a 	sub	r17,r17,r7
 4023338:	8089803a 	cmpltu	r4,r16,r2
 402333c:	8939c83a 	sub	fp,r17,r4
 4023340:	e007883a 	mov	r3,fp
 4023344:	00003b06 	br	4023434 <__umoddi3+0x288>
 4023348:	3000041e 	bne	r6,zero,402335c <__umoddi3+0x1b0>
 402334c:	000b883a 	mov	r5,zero
 4023350:	01000044 	movi	r4,1
 4023354:	40190440 	call	4019044 <__udivsi3>
 4023358:	1027883a 	mov	r19,r2
 402335c:	00bfffd4 	movui	r2,65535
 4023360:	14c0442e 	bgeu	r2,r19,4023474 <__umoddi3+0x2c8>
 4023364:	00804034 	movhi	r2,256
 4023368:	10bfffc4 	addi	r2,r2,-1
 402336c:	14c0ec36 	bltu	r2,r19,4023720 <__umoddi3+0x574>
 4023370:	00800404 	movi	r2,16
 4023374:	9886d83a 	srl	r3,r19,r2
 4023378:	010100f4 	movhi	r4,1027
 402337c:	2130d104 	addi	r4,r4,-15548
 4023380:	20c7883a 	add	r3,r4,r3
 4023384:	18c00003 	ldbu	r3,0(r3)
 4023388:	1887883a 	add	r3,r3,r2
 402338c:	00800804 	movi	r2,32
 4023390:	10e5c83a 	sub	r18,r2,r3
 4023394:	9000ab1e 	bne	r18,zero,4023644 <__umoddi3+0x498>
 4023398:	982cd43a 	srli	r22,r19,16
 402339c:	8ce3c83a 	sub	r17,r17,r19
 40233a0:	9dffffcc 	andi	r23,r19,65535
 40233a4:	b00b883a 	mov	r5,r22
 40233a8:	8809883a 	mov	r4,r17
 40233ac:	40190a80 	call	40190a8 <__umodsi3>
 40233b0:	b00b883a 	mov	r5,r22
 40233b4:	8809883a 	mov	r4,r17
 40233b8:	102b883a 	mov	r21,r2
 40233bc:	40190440 	call	4019044 <__udivsi3>
 40233c0:	b80b883a 	mov	r5,r23
 40233c4:	1009883a 	mov	r4,r2
 40233c8:	40191000 	call	4019100 <__mulsi3>
 40233cc:	a82a943a 	slli	r21,r21,16
 40233d0:	a006d43a 	srli	r3,r20,16
 40233d4:	1d46b03a 	or	r3,r3,r21
 40233d8:	1880042e 	bgeu	r3,r2,40233ec <__umoddi3+0x240>
 40233dc:	1cc7883a 	add	r3,r3,r19
 40233e0:	1cc00236 	bltu	r3,r19,40233ec <__umoddi3+0x240>
 40233e4:	1880012e 	bgeu	r3,r2,40233ec <__umoddi3+0x240>
 40233e8:	1cc7883a 	add	r3,r3,r19
 40233ec:	18a1c83a 	sub	r16,r3,r2
 40233f0:	b00b883a 	mov	r5,r22
 40233f4:	8009883a 	mov	r4,r16
 40233f8:	40190a80 	call	40190a8 <__umodsi3>
 40233fc:	1023883a 	mov	r17,r2
 4023400:	b00b883a 	mov	r5,r22
 4023404:	8009883a 	mov	r4,r16
 4023408:	40190440 	call	4019044 <__udivsi3>
 402340c:	8822943a 	slli	r17,r17,16
 4023410:	b80b883a 	mov	r5,r23
 4023414:	1009883a 	mov	r4,r2
 4023418:	40191000 	call	4019100 <__mulsi3>
 402341c:	a53fffcc 	andi	r20,r20,65535
 4023420:	a446b03a 	or	r3,r20,r17
 4023424:	18bfac2e 	bgeu	r3,r2,40232d8 <__alt_data_end+0xfc0232d8>
 4023428:	003fa706 	br	40232c8 <__alt_data_end+0xfc0232c8>
 402342c:	2005883a 	mov	r2,r4
 4023430:	2807883a 	mov	r3,r5
 4023434:	dfc00c17 	ldw	ra,48(sp)
 4023438:	df000b17 	ldw	fp,44(sp)
 402343c:	ddc00a17 	ldw	r23,40(sp)
 4023440:	dd800917 	ldw	r22,36(sp)
 4023444:	dd400817 	ldw	r21,32(sp)
 4023448:	dd000717 	ldw	r20,28(sp)
 402344c:	dcc00617 	ldw	r19,24(sp)
 4023450:	dc800517 	ldw	r18,20(sp)
 4023454:	dc400417 	ldw	r17,16(sp)
 4023458:	dc000317 	ldw	r16,12(sp)
 402345c:	dec00d04 	addi	sp,sp,52
 4023460:	f800283a 	ret
 4023464:	04c03fc4 	movi	r19,255
 4023468:	99c9803a 	cmpltu	r4,r19,r7
 402346c:	200890fa 	slli	r4,r4,3
 4023470:	003fa406 	br	4023304 <__alt_data_end+0xfc023304>
 4023474:	00803fc4 	movi	r2,255
 4023478:	14c5803a 	cmpltu	r2,r2,r19
 402347c:	100490fa 	slli	r2,r2,3
 4023480:	003fbc06 	br	4023374 <__alt_data_end+0xfc023374>
 4023484:	00804034 	movhi	r2,256
 4023488:	10bfffc4 	addi	r2,r2,-1
 402348c:	1180a636 	bltu	r2,r6,4023728 <__umoddi3+0x57c>
 4023490:	01000404 	movi	r4,16
 4023494:	003f5c06 	br	4023208 <__alt_data_end+0xfc023208>
 4023498:	3d0e983a 	sll	r7,r7,r20
 402349c:	34ead83a 	srl	r21,r6,r19
 40234a0:	8cc6d83a 	srl	r3,r17,r19
 40234a4:	8d10983a 	sll	r8,r17,r20
 40234a8:	3d6ab03a 	or	r21,r7,r21
 40234ac:	a82cd43a 	srli	r22,r21,16
 40234b0:	84e2d83a 	srl	r17,r16,r19
 40234b4:	1809883a 	mov	r4,r3
 40234b8:	b00b883a 	mov	r5,r22
 40234bc:	8a22b03a 	or	r17,r17,r8
 40234c0:	3524983a 	sll	r18,r6,r20
 40234c4:	dc400015 	stw	r17,0(sp)
 40234c8:	d8c00115 	stw	r3,4(sp)
 40234cc:	40190a80 	call	40190a8 <__umodsi3>
 40234d0:	d8c00117 	ldw	r3,4(sp)
 40234d4:	b00b883a 	mov	r5,r22
 40234d8:	1039883a 	mov	fp,r2
 40234dc:	1809883a 	mov	r4,r3
 40234e0:	40190440 	call	4019044 <__udivsi3>
 40234e4:	adffffcc 	andi	r23,r21,65535
 40234e8:	100b883a 	mov	r5,r2
 40234ec:	b809883a 	mov	r4,r23
 40234f0:	1023883a 	mov	r17,r2
 40234f4:	40191000 	call	4019100 <__mulsi3>
 40234f8:	d9400017 	ldw	r5,0(sp)
 40234fc:	e008943a 	slli	r4,fp,16
 4023500:	8520983a 	sll	r16,r16,r20
 4023504:	2806d43a 	srli	r3,r5,16
 4023508:	1906b03a 	or	r3,r3,r4
 402350c:	1880042e 	bgeu	r3,r2,4023520 <__umoddi3+0x374>
 4023510:	1d47883a 	add	r3,r3,r21
 4023514:	893fffc4 	addi	r4,r17,-1
 4023518:	1d40892e 	bgeu	r3,r21,4023740 <__umoddi3+0x594>
 402351c:	2023883a 	mov	r17,r4
 4023520:	18b9c83a 	sub	fp,r3,r2
 4023524:	b00b883a 	mov	r5,r22
 4023528:	e009883a 	mov	r4,fp
 402352c:	40190a80 	call	40190a8 <__umodsi3>
 4023530:	b00b883a 	mov	r5,r22
 4023534:	e009883a 	mov	r4,fp
 4023538:	d8800215 	stw	r2,8(sp)
 402353c:	40190440 	call	4019044 <__udivsi3>
 4023540:	100b883a 	mov	r5,r2
 4023544:	b809883a 	mov	r4,r23
 4023548:	102d883a 	mov	r22,r2
 402354c:	40191000 	call	4019100 <__mulsi3>
 4023550:	d9800217 	ldw	r6,8(sp)
 4023554:	d8c00017 	ldw	r3,0(sp)
 4023558:	300c943a 	slli	r6,r6,16
 402355c:	1a3fffcc 	andi	r8,r3,65535
 4023560:	4190b03a 	or	r8,r8,r6
 4023564:	4080042e 	bgeu	r8,r2,4023578 <__umoddi3+0x3cc>
 4023568:	4551883a 	add	r8,r8,r21
 402356c:	b0ffffc4 	addi	r3,r22,-1
 4023570:	45406f2e 	bgeu	r8,r21,4023730 <__umoddi3+0x584>
 4023574:	182d883a 	mov	r22,r3
 4023578:	880e943a 	slli	r7,r17,16
 402357c:	9006d43a 	srli	r3,r18,16
 4023580:	91bfffcc 	andi	r6,r18,65535
 4023584:	3dacb03a 	or	r22,r7,r22
 4023588:	b02ed43a 	srli	r23,r22,16
 402358c:	b5bfffcc 	andi	r22,r22,65535
 4023590:	300b883a 	mov	r5,r6
 4023594:	b009883a 	mov	r4,r22
 4023598:	40a3c83a 	sub	r17,r8,r2
 402359c:	d8c00115 	stw	r3,4(sp)
 40235a0:	d9800215 	stw	r6,8(sp)
 40235a4:	40191000 	call	4019100 <__mulsi3>
 40235a8:	d9800217 	ldw	r6,8(sp)
 40235ac:	b809883a 	mov	r4,r23
 40235b0:	1039883a 	mov	fp,r2
 40235b4:	300b883a 	mov	r5,r6
 40235b8:	40191000 	call	4019100 <__mulsi3>
 40235bc:	d8c00117 	ldw	r3,4(sp)
 40235c0:	b809883a 	mov	r4,r23
 40235c4:	d8800215 	stw	r2,8(sp)
 40235c8:	180b883a 	mov	r5,r3
 40235cc:	40191000 	call	4019100 <__mulsi3>
 40235d0:	d8c00117 	ldw	r3,4(sp)
 40235d4:	b009883a 	mov	r4,r22
 40235d8:	102f883a 	mov	r23,r2
 40235dc:	180b883a 	mov	r5,r3
 40235e0:	40191000 	call	4019100 <__mulsi3>
 40235e4:	d9800217 	ldw	r6,8(sp)
 40235e8:	e006d43a 	srli	r3,fp,16
 40235ec:	1185883a 	add	r2,r2,r6
 40235f0:	1885883a 	add	r2,r3,r2
 40235f4:	1180022e 	bgeu	r2,r6,4023600 <__umoddi3+0x454>
 40235f8:	00c00074 	movhi	r3,1
 40235fc:	b8ef883a 	add	r23,r23,r3
 4023600:	1006d43a 	srli	r3,r2,16
 4023604:	1004943a 	slli	r2,r2,16
 4023608:	e73fffcc 	andi	fp,fp,65535
 402360c:	1dc7883a 	add	r3,r3,r23
 4023610:	1739883a 	add	fp,r2,fp
 4023614:	88c03a36 	bltu	r17,r3,4023700 <__umoddi3+0x554>
 4023618:	88c05126 	beq	r17,r3,4023760 <__umoddi3+0x5b4>
 402361c:	88c9c83a 	sub	r4,r17,r3
 4023620:	e00f883a 	mov	r7,fp
 4023624:	81cfc83a 	sub	r7,r16,r7
 4023628:	81c7803a 	cmpltu	r3,r16,r7
 402362c:	20c7c83a 	sub	r3,r4,r3
 4023630:	1cc4983a 	sll	r2,r3,r19
 4023634:	3d0ed83a 	srl	r7,r7,r20
 4023638:	1d06d83a 	srl	r3,r3,r20
 402363c:	11c4b03a 	or	r2,r2,r7
 4023640:	003f7c06 	br	4023434 <__alt_data_end+0xfc023434>
 4023644:	9ca6983a 	sll	r19,r19,r18
 4023648:	88f8d83a 	srl	fp,r17,r3
 402364c:	80c4d83a 	srl	r2,r16,r3
 4023650:	982cd43a 	srli	r22,r19,16
 4023654:	8ca2983a 	sll	r17,r17,r18
 4023658:	e009883a 	mov	r4,fp
 402365c:	b00b883a 	mov	r5,r22
 4023660:	146ab03a 	or	r21,r2,r17
 4023664:	40190a80 	call	40190a8 <__umodsi3>
 4023668:	b00b883a 	mov	r5,r22
 402366c:	e009883a 	mov	r4,fp
 4023670:	1029883a 	mov	r20,r2
 4023674:	9dffffcc 	andi	r23,r19,65535
 4023678:	40190440 	call	4019044 <__udivsi3>
 402367c:	b809883a 	mov	r4,r23
 4023680:	100b883a 	mov	r5,r2
 4023684:	40191000 	call	4019100 <__mulsi3>
 4023688:	a008943a 	slli	r4,r20,16
 402368c:	a806d43a 	srli	r3,r21,16
 4023690:	84a8983a 	sll	r20,r16,r18
 4023694:	1906b03a 	or	r3,r3,r4
 4023698:	1880042e 	bgeu	r3,r2,40236ac <__umoddi3+0x500>
 402369c:	1cc7883a 	add	r3,r3,r19
 40236a0:	1cc00236 	bltu	r3,r19,40236ac <__umoddi3+0x500>
 40236a4:	1880012e 	bgeu	r3,r2,40236ac <__umoddi3+0x500>
 40236a8:	1cc7883a 	add	r3,r3,r19
 40236ac:	18a3c83a 	sub	r17,r3,r2
 40236b0:	b00b883a 	mov	r5,r22
 40236b4:	8809883a 	mov	r4,r17
 40236b8:	40190a80 	call	40190a8 <__umodsi3>
 40236bc:	b00b883a 	mov	r5,r22
 40236c0:	8809883a 	mov	r4,r17
 40236c4:	1021883a 	mov	r16,r2
 40236c8:	40190440 	call	4019044 <__udivsi3>
 40236cc:	100b883a 	mov	r5,r2
 40236d0:	b809883a 	mov	r4,r23
 40236d4:	8020943a 	slli	r16,r16,16
 40236d8:	40191000 	call	4019100 <__mulsi3>
 40236dc:	a8ffffcc 	andi	r3,r21,65535
 40236e0:	1c06b03a 	or	r3,r3,r16
 40236e4:	1880042e 	bgeu	r3,r2,40236f8 <__umoddi3+0x54c>
 40236e8:	1cc7883a 	add	r3,r3,r19
 40236ec:	1cc00236 	bltu	r3,r19,40236f8 <__umoddi3+0x54c>
 40236f0:	1880012e 	bgeu	r3,r2,40236f8 <__umoddi3+0x54c>
 40236f4:	1cc7883a 	add	r3,r3,r19
 40236f8:	18a3c83a 	sub	r17,r3,r2
 40236fc:	003f2906 	br	40233a4 <__alt_data_end+0xfc0233a4>
 4023700:	e48fc83a 	sub	r7,fp,r18
 4023704:	1d49c83a 	sub	r4,r3,r21
 4023708:	e1f9803a 	cmpltu	fp,fp,r7
 402370c:	2739c83a 	sub	fp,r4,fp
 4023710:	8f09c83a 	sub	r4,r17,fp
 4023714:	003fc306 	br	4023624 <__alt_data_end+0xfc023624>
 4023718:	01000604 	movi	r4,24
 402371c:	003ef906 	br	4023304 <__alt_data_end+0xfc023304>
 4023720:	00800604 	movi	r2,24
 4023724:	003f1306 	br	4023374 <__alt_data_end+0xfc023374>
 4023728:	01000604 	movi	r4,24
 402372c:	003eb606 	br	4023208 <__alt_data_end+0xfc023208>
 4023730:	40bf902e 	bgeu	r8,r2,4023574 <__alt_data_end+0xfc023574>
 4023734:	b5bfff84 	addi	r22,r22,-2
 4023738:	4551883a 	add	r8,r8,r21
 402373c:	003f8e06 	br	4023578 <__alt_data_end+0xfc023578>
 4023740:	18bf762e 	bgeu	r3,r2,402351c <__alt_data_end+0xfc02351c>
 4023744:	8c7fff84 	addi	r17,r17,-2
 4023748:	1d47883a 	add	r3,r3,r21
 402374c:	003f7406 	br	4023520 <__alt_data_end+0xfc023520>
 4023750:	1cc7883a 	add	r3,r3,r19
 4023754:	003ecd06 	br	402328c <__alt_data_end+0xfc02328c>
 4023758:	8005883a 	mov	r2,r16
 402375c:	003ef806 	br	4023340 <__alt_data_end+0xfc023340>
 4023760:	873fe736 	bltu	r16,fp,4023700 <__alt_data_end+0xfc023700>
 4023764:	e00f883a 	mov	r7,fp
 4023768:	0009883a 	mov	r4,zero
 402376c:	003fad06 	br	4023624 <__alt_data_end+0xfc023624>

04023770 <__adddf3>:
 4023770:	02c00434 	movhi	r11,16
 4023774:	5affffc4 	addi	r11,r11,-1
 4023778:	2806d7fa 	srli	r3,r5,31
 402377c:	2ad4703a 	and	r10,r5,r11
 4023780:	3ad2703a 	and	r9,r7,r11
 4023784:	3804d53a 	srli	r2,r7,20
 4023788:	3018d77a 	srli	r12,r6,29
 402378c:	280ad53a 	srli	r5,r5,20
 4023790:	501490fa 	slli	r10,r10,3
 4023794:	2010d77a 	srli	r8,r4,29
 4023798:	481290fa 	slli	r9,r9,3
 402379c:	380ed7fa 	srli	r7,r7,31
 40237a0:	defffb04 	addi	sp,sp,-20
 40237a4:	dc800215 	stw	r18,8(sp)
 40237a8:	dc400115 	stw	r17,4(sp)
 40237ac:	dc000015 	stw	r16,0(sp)
 40237b0:	dfc00415 	stw	ra,16(sp)
 40237b4:	dcc00315 	stw	r19,12(sp)
 40237b8:	1c803fcc 	andi	r18,r3,255
 40237bc:	2c01ffcc 	andi	r16,r5,2047
 40237c0:	5210b03a 	or	r8,r10,r8
 40237c4:	202290fa 	slli	r17,r4,3
 40237c8:	1081ffcc 	andi	r2,r2,2047
 40237cc:	4b12b03a 	or	r9,r9,r12
 40237d0:	300c90fa 	slli	r6,r6,3
 40237d4:	91c07526 	beq	r18,r7,40239ac <__adddf3+0x23c>
 40237d8:	8087c83a 	sub	r3,r16,r2
 40237dc:	00c0ab0e 	bge	zero,r3,4023a8c <__adddf3+0x31c>
 40237e0:	10002a1e 	bne	r2,zero,402388c <__adddf3+0x11c>
 40237e4:	4984b03a 	or	r2,r9,r6
 40237e8:	1000961e 	bne	r2,zero,4023a44 <__adddf3+0x2d4>
 40237ec:	888001cc 	andi	r2,r17,7
 40237f0:	10000726 	beq	r2,zero,4023810 <__adddf3+0xa0>
 40237f4:	888003cc 	andi	r2,r17,15
 40237f8:	00c00104 	movi	r3,4
 40237fc:	10c00426 	beq	r2,r3,4023810 <__adddf3+0xa0>
 4023800:	88c7883a 	add	r3,r17,r3
 4023804:	1c63803a 	cmpltu	r17,r3,r17
 4023808:	4451883a 	add	r8,r8,r17
 402380c:	1823883a 	mov	r17,r3
 4023810:	4080202c 	andhi	r2,r8,128
 4023814:	10005926 	beq	r2,zero,402397c <__adddf3+0x20c>
 4023818:	84000044 	addi	r16,r16,1
 402381c:	0081ffc4 	movi	r2,2047
 4023820:	8080ba26 	beq	r16,r2,4023b0c <__adddf3+0x39c>
 4023824:	00bfe034 	movhi	r2,65408
 4023828:	10bfffc4 	addi	r2,r2,-1
 402382c:	4090703a 	and	r8,r8,r2
 4023830:	4004977a 	slli	r2,r8,29
 4023834:	4010927a 	slli	r8,r8,9
 4023838:	8822d0fa 	srli	r17,r17,3
 402383c:	8401ffcc 	andi	r16,r16,2047
 4023840:	4010d33a 	srli	r8,r8,12
 4023844:	9007883a 	mov	r3,r18
 4023848:	1444b03a 	or	r2,r2,r17
 402384c:	8401ffcc 	andi	r16,r16,2047
 4023850:	8020953a 	slli	r16,r16,20
 4023854:	18c03fcc 	andi	r3,r3,255
 4023858:	01000434 	movhi	r4,16
 402385c:	213fffc4 	addi	r4,r4,-1
 4023860:	180697fa 	slli	r3,r3,31
 4023864:	4110703a 	and	r8,r8,r4
 4023868:	4410b03a 	or	r8,r8,r16
 402386c:	40c6b03a 	or	r3,r8,r3
 4023870:	dfc00417 	ldw	ra,16(sp)
 4023874:	dcc00317 	ldw	r19,12(sp)
 4023878:	dc800217 	ldw	r18,8(sp)
 402387c:	dc400117 	ldw	r17,4(sp)
 4023880:	dc000017 	ldw	r16,0(sp)
 4023884:	dec00504 	addi	sp,sp,20
 4023888:	f800283a 	ret
 402388c:	0081ffc4 	movi	r2,2047
 4023890:	80bfd626 	beq	r16,r2,40237ec <__alt_data_end+0xfc0237ec>
 4023894:	4a402034 	orhi	r9,r9,128
 4023898:	00800e04 	movi	r2,56
 402389c:	10c09f16 	blt	r2,r3,4023b1c <__adddf3+0x3ac>
 40238a0:	008007c4 	movi	r2,31
 40238a4:	10c0c216 	blt	r2,r3,4023bb0 <__adddf3+0x440>
 40238a8:	00800804 	movi	r2,32
 40238ac:	10c5c83a 	sub	r2,r2,r3
 40238b0:	488a983a 	sll	r5,r9,r2
 40238b4:	30c8d83a 	srl	r4,r6,r3
 40238b8:	3084983a 	sll	r2,r6,r2
 40238bc:	48c6d83a 	srl	r3,r9,r3
 40238c0:	290cb03a 	or	r6,r5,r4
 40238c4:	1004c03a 	cmpne	r2,r2,zero
 40238c8:	308cb03a 	or	r6,r6,r2
 40238cc:	898dc83a 	sub	r6,r17,r6
 40238d0:	89a3803a 	cmpltu	r17,r17,r6
 40238d4:	40d1c83a 	sub	r8,r8,r3
 40238d8:	4451c83a 	sub	r8,r8,r17
 40238dc:	3023883a 	mov	r17,r6
 40238e0:	4080202c 	andhi	r2,r8,128
 40238e4:	10002326 	beq	r2,zero,4023974 <__adddf3+0x204>
 40238e8:	04c02034 	movhi	r19,128
 40238ec:	9cffffc4 	addi	r19,r19,-1
 40238f0:	44e6703a 	and	r19,r8,r19
 40238f4:	98007626 	beq	r19,zero,4023ad0 <__adddf3+0x360>
 40238f8:	9809883a 	mov	r4,r19
 40238fc:	4025fb00 	call	4025fb0 <__clzsi2>
 4023900:	10fffe04 	addi	r3,r2,-8
 4023904:	010007c4 	movi	r4,31
 4023908:	20c07716 	blt	r4,r3,4023ae8 <__adddf3+0x378>
 402390c:	00800804 	movi	r2,32
 4023910:	10c5c83a 	sub	r2,r2,r3
 4023914:	8884d83a 	srl	r2,r17,r2
 4023918:	98d0983a 	sll	r8,r19,r3
 402391c:	88e2983a 	sll	r17,r17,r3
 4023920:	1204b03a 	or	r2,r2,r8
 4023924:	1c007416 	blt	r3,r16,4023af8 <__adddf3+0x388>
 4023928:	1c21c83a 	sub	r16,r3,r16
 402392c:	82000044 	addi	r8,r16,1
 4023930:	00c007c4 	movi	r3,31
 4023934:	1a009116 	blt	r3,r8,4023b7c <__adddf3+0x40c>
 4023938:	00c00804 	movi	r3,32
 402393c:	1a07c83a 	sub	r3,r3,r8
 4023940:	8a08d83a 	srl	r4,r17,r8
 4023944:	88e2983a 	sll	r17,r17,r3
 4023948:	10c6983a 	sll	r3,r2,r3
 402394c:	1210d83a 	srl	r8,r2,r8
 4023950:	8804c03a 	cmpne	r2,r17,zero
 4023954:	1906b03a 	or	r3,r3,r4
 4023958:	18a2b03a 	or	r17,r3,r2
 402395c:	0021883a 	mov	r16,zero
 4023960:	003fa206 	br	40237ec <__alt_data_end+0xfc0237ec>
 4023964:	1890b03a 	or	r8,r3,r2
 4023968:	40017d26 	beq	r8,zero,4023f60 <__adddf3+0x7f0>
 402396c:	1011883a 	mov	r8,r2
 4023970:	1823883a 	mov	r17,r3
 4023974:	888001cc 	andi	r2,r17,7
 4023978:	103f9e1e 	bne	r2,zero,40237f4 <__alt_data_end+0xfc0237f4>
 402397c:	4004977a 	slli	r2,r8,29
 4023980:	8822d0fa 	srli	r17,r17,3
 4023984:	4010d0fa 	srli	r8,r8,3
 4023988:	9007883a 	mov	r3,r18
 402398c:	1444b03a 	or	r2,r2,r17
 4023990:	0101ffc4 	movi	r4,2047
 4023994:	81002426 	beq	r16,r4,4023a28 <__adddf3+0x2b8>
 4023998:	8120703a 	and	r16,r16,r4
 402399c:	01000434 	movhi	r4,16
 40239a0:	213fffc4 	addi	r4,r4,-1
 40239a4:	4110703a 	and	r8,r8,r4
 40239a8:	003fa806 	br	402384c <__alt_data_end+0xfc02384c>
 40239ac:	8089c83a 	sub	r4,r16,r2
 40239b0:	01005e0e 	bge	zero,r4,4023b2c <__adddf3+0x3bc>
 40239b4:	10002b26 	beq	r2,zero,4023a64 <__adddf3+0x2f4>
 40239b8:	0081ffc4 	movi	r2,2047
 40239bc:	80bf8b26 	beq	r16,r2,40237ec <__alt_data_end+0xfc0237ec>
 40239c0:	4a402034 	orhi	r9,r9,128
 40239c4:	00800e04 	movi	r2,56
 40239c8:	1100a40e 	bge	r2,r4,4023c5c <__adddf3+0x4ec>
 40239cc:	498cb03a 	or	r6,r9,r6
 40239d0:	300ac03a 	cmpne	r5,r6,zero
 40239d4:	0013883a 	mov	r9,zero
 40239d8:	2c4b883a 	add	r5,r5,r17
 40239dc:	2c63803a 	cmpltu	r17,r5,r17
 40239e0:	4a11883a 	add	r8,r9,r8
 40239e4:	8a11883a 	add	r8,r17,r8
 40239e8:	2823883a 	mov	r17,r5
 40239ec:	4080202c 	andhi	r2,r8,128
 40239f0:	103fe026 	beq	r2,zero,4023974 <__alt_data_end+0xfc023974>
 40239f4:	84000044 	addi	r16,r16,1
 40239f8:	0081ffc4 	movi	r2,2047
 40239fc:	8080d226 	beq	r16,r2,4023d48 <__adddf3+0x5d8>
 4023a00:	00bfe034 	movhi	r2,65408
 4023a04:	10bfffc4 	addi	r2,r2,-1
 4023a08:	4090703a 	and	r8,r8,r2
 4023a0c:	880ad07a 	srli	r5,r17,1
 4023a10:	400897fa 	slli	r4,r8,31
 4023a14:	88c0004c 	andi	r3,r17,1
 4023a18:	28e2b03a 	or	r17,r5,r3
 4023a1c:	4010d07a 	srli	r8,r8,1
 4023a20:	2462b03a 	or	r17,r4,r17
 4023a24:	003f7106 	br	40237ec <__alt_data_end+0xfc0237ec>
 4023a28:	4088b03a 	or	r4,r8,r2
 4023a2c:	20014526 	beq	r4,zero,4023f44 <__adddf3+0x7d4>
 4023a30:	01000434 	movhi	r4,16
 4023a34:	42000234 	orhi	r8,r8,8
 4023a38:	213fffc4 	addi	r4,r4,-1
 4023a3c:	4110703a 	and	r8,r8,r4
 4023a40:	003f8206 	br	402384c <__alt_data_end+0xfc02384c>
 4023a44:	18ffffc4 	addi	r3,r3,-1
 4023a48:	1800491e 	bne	r3,zero,4023b70 <__adddf3+0x400>
 4023a4c:	898bc83a 	sub	r5,r17,r6
 4023a50:	8963803a 	cmpltu	r17,r17,r5
 4023a54:	4251c83a 	sub	r8,r8,r9
 4023a58:	4451c83a 	sub	r8,r8,r17
 4023a5c:	2823883a 	mov	r17,r5
 4023a60:	003f9f06 	br	40238e0 <__alt_data_end+0xfc0238e0>
 4023a64:	4984b03a 	or	r2,r9,r6
 4023a68:	103f6026 	beq	r2,zero,40237ec <__alt_data_end+0xfc0237ec>
 4023a6c:	213fffc4 	addi	r4,r4,-1
 4023a70:	2000931e 	bne	r4,zero,4023cc0 <__adddf3+0x550>
 4023a74:	898d883a 	add	r6,r17,r6
 4023a78:	3463803a 	cmpltu	r17,r6,r17
 4023a7c:	4251883a 	add	r8,r8,r9
 4023a80:	8a11883a 	add	r8,r17,r8
 4023a84:	3023883a 	mov	r17,r6
 4023a88:	003fd806 	br	40239ec <__alt_data_end+0xfc0239ec>
 4023a8c:	1800541e 	bne	r3,zero,4023be0 <__adddf3+0x470>
 4023a90:	80800044 	addi	r2,r16,1
 4023a94:	1081ffcc 	andi	r2,r2,2047
 4023a98:	00c00044 	movi	r3,1
 4023a9c:	1880a00e 	bge	r3,r2,4023d20 <__adddf3+0x5b0>
 4023aa0:	8989c83a 	sub	r4,r17,r6
 4023aa4:	8905803a 	cmpltu	r2,r17,r4
 4023aa8:	4267c83a 	sub	r19,r8,r9
 4023aac:	98a7c83a 	sub	r19,r19,r2
 4023ab0:	9880202c 	andhi	r2,r19,128
 4023ab4:	10006326 	beq	r2,zero,4023c44 <__adddf3+0x4d4>
 4023ab8:	3463c83a 	sub	r17,r6,r17
 4023abc:	4a07c83a 	sub	r3,r9,r8
 4023ac0:	344d803a 	cmpltu	r6,r6,r17
 4023ac4:	19a7c83a 	sub	r19,r3,r6
 4023ac8:	3825883a 	mov	r18,r7
 4023acc:	983f8a1e 	bne	r19,zero,40238f8 <__alt_data_end+0xfc0238f8>
 4023ad0:	8809883a 	mov	r4,r17
 4023ad4:	4025fb00 	call	4025fb0 <__clzsi2>
 4023ad8:	10800804 	addi	r2,r2,32
 4023adc:	10fffe04 	addi	r3,r2,-8
 4023ae0:	010007c4 	movi	r4,31
 4023ae4:	20ff890e 	bge	r4,r3,402390c <__alt_data_end+0xfc02390c>
 4023ae8:	10bff604 	addi	r2,r2,-40
 4023aec:	8884983a 	sll	r2,r17,r2
 4023af0:	0023883a 	mov	r17,zero
 4023af4:	1c3f8c0e 	bge	r3,r16,4023928 <__alt_data_end+0xfc023928>
 4023af8:	023fe034 	movhi	r8,65408
 4023afc:	423fffc4 	addi	r8,r8,-1
 4023b00:	80e1c83a 	sub	r16,r16,r3
 4023b04:	1210703a 	and	r8,r2,r8
 4023b08:	003f3806 	br	40237ec <__alt_data_end+0xfc0237ec>
 4023b0c:	9007883a 	mov	r3,r18
 4023b10:	0011883a 	mov	r8,zero
 4023b14:	0005883a 	mov	r2,zero
 4023b18:	003f4c06 	br	402384c <__alt_data_end+0xfc02384c>
 4023b1c:	498cb03a 	or	r6,r9,r6
 4023b20:	300cc03a 	cmpne	r6,r6,zero
 4023b24:	0007883a 	mov	r3,zero
 4023b28:	003f6806 	br	40238cc <__alt_data_end+0xfc0238cc>
 4023b2c:	20009c1e 	bne	r4,zero,4023da0 <__adddf3+0x630>
 4023b30:	80800044 	addi	r2,r16,1
 4023b34:	1141ffcc 	andi	r5,r2,2047
 4023b38:	01000044 	movi	r4,1
 4023b3c:	2140670e 	bge	r4,r5,4023cdc <__adddf3+0x56c>
 4023b40:	0101ffc4 	movi	r4,2047
 4023b44:	11007f26 	beq	r2,r4,4023d44 <__adddf3+0x5d4>
 4023b48:	898d883a 	add	r6,r17,r6
 4023b4c:	4247883a 	add	r3,r8,r9
 4023b50:	3451803a 	cmpltu	r8,r6,r17
 4023b54:	40d1883a 	add	r8,r8,r3
 4023b58:	402297fa 	slli	r17,r8,31
 4023b5c:	300cd07a 	srli	r6,r6,1
 4023b60:	4010d07a 	srli	r8,r8,1
 4023b64:	1021883a 	mov	r16,r2
 4023b68:	89a2b03a 	or	r17,r17,r6
 4023b6c:	003f1f06 	br	40237ec <__alt_data_end+0xfc0237ec>
 4023b70:	0081ffc4 	movi	r2,2047
 4023b74:	80bf481e 	bne	r16,r2,4023898 <__alt_data_end+0xfc023898>
 4023b78:	003f1c06 	br	40237ec <__alt_data_end+0xfc0237ec>
 4023b7c:	843ff844 	addi	r16,r16,-31
 4023b80:	01000804 	movi	r4,32
 4023b84:	1406d83a 	srl	r3,r2,r16
 4023b88:	41005026 	beq	r8,r4,4023ccc <__adddf3+0x55c>
 4023b8c:	01001004 	movi	r4,64
 4023b90:	2211c83a 	sub	r8,r4,r8
 4023b94:	1204983a 	sll	r2,r2,r8
 4023b98:	88a2b03a 	or	r17,r17,r2
 4023b9c:	8822c03a 	cmpne	r17,r17,zero
 4023ba0:	1c62b03a 	or	r17,r3,r17
 4023ba4:	0011883a 	mov	r8,zero
 4023ba8:	0021883a 	mov	r16,zero
 4023bac:	003f7106 	br	4023974 <__alt_data_end+0xfc023974>
 4023bb0:	193ff804 	addi	r4,r3,-32
 4023bb4:	00800804 	movi	r2,32
 4023bb8:	4908d83a 	srl	r4,r9,r4
 4023bbc:	18804526 	beq	r3,r2,4023cd4 <__adddf3+0x564>
 4023bc0:	00801004 	movi	r2,64
 4023bc4:	10c5c83a 	sub	r2,r2,r3
 4023bc8:	4886983a 	sll	r3,r9,r2
 4023bcc:	198cb03a 	or	r6,r3,r6
 4023bd0:	300cc03a 	cmpne	r6,r6,zero
 4023bd4:	218cb03a 	or	r6,r4,r6
 4023bd8:	0007883a 	mov	r3,zero
 4023bdc:	003f3b06 	br	40238cc <__alt_data_end+0xfc0238cc>
 4023be0:	80002a26 	beq	r16,zero,4023c8c <__adddf3+0x51c>
 4023be4:	0101ffc4 	movi	r4,2047
 4023be8:	11006826 	beq	r2,r4,4023d8c <__adddf3+0x61c>
 4023bec:	00c7c83a 	sub	r3,zero,r3
 4023bf0:	42002034 	orhi	r8,r8,128
 4023bf4:	01000e04 	movi	r4,56
 4023bf8:	20c07c16 	blt	r4,r3,4023dec <__adddf3+0x67c>
 4023bfc:	010007c4 	movi	r4,31
 4023c00:	20c0da16 	blt	r4,r3,4023f6c <__adddf3+0x7fc>
 4023c04:	01000804 	movi	r4,32
 4023c08:	20c9c83a 	sub	r4,r4,r3
 4023c0c:	4114983a 	sll	r10,r8,r4
 4023c10:	88cad83a 	srl	r5,r17,r3
 4023c14:	8908983a 	sll	r4,r17,r4
 4023c18:	40c6d83a 	srl	r3,r8,r3
 4023c1c:	5162b03a 	or	r17,r10,r5
 4023c20:	2008c03a 	cmpne	r4,r4,zero
 4023c24:	8922b03a 	or	r17,r17,r4
 4023c28:	3463c83a 	sub	r17,r6,r17
 4023c2c:	48c7c83a 	sub	r3,r9,r3
 4023c30:	344d803a 	cmpltu	r6,r6,r17
 4023c34:	1991c83a 	sub	r8,r3,r6
 4023c38:	1021883a 	mov	r16,r2
 4023c3c:	3825883a 	mov	r18,r7
 4023c40:	003f2706 	br	40238e0 <__alt_data_end+0xfc0238e0>
 4023c44:	24d0b03a 	or	r8,r4,r19
 4023c48:	40001b1e 	bne	r8,zero,4023cb8 <__adddf3+0x548>
 4023c4c:	0005883a 	mov	r2,zero
 4023c50:	0007883a 	mov	r3,zero
 4023c54:	0021883a 	mov	r16,zero
 4023c58:	003f4d06 	br	4023990 <__alt_data_end+0xfc023990>
 4023c5c:	008007c4 	movi	r2,31
 4023c60:	11003c16 	blt	r2,r4,4023d54 <__adddf3+0x5e4>
 4023c64:	00800804 	movi	r2,32
 4023c68:	1105c83a 	sub	r2,r2,r4
 4023c6c:	488e983a 	sll	r7,r9,r2
 4023c70:	310ad83a 	srl	r5,r6,r4
 4023c74:	3084983a 	sll	r2,r6,r2
 4023c78:	4912d83a 	srl	r9,r9,r4
 4023c7c:	394ab03a 	or	r5,r7,r5
 4023c80:	1004c03a 	cmpne	r2,r2,zero
 4023c84:	288ab03a 	or	r5,r5,r2
 4023c88:	003f5306 	br	40239d8 <__alt_data_end+0xfc0239d8>
 4023c8c:	4448b03a 	or	r4,r8,r17
 4023c90:	20003e26 	beq	r4,zero,4023d8c <__adddf3+0x61c>
 4023c94:	00c6303a 	nor	r3,zero,r3
 4023c98:	18003a1e 	bne	r3,zero,4023d84 <__adddf3+0x614>
 4023c9c:	3463c83a 	sub	r17,r6,r17
 4023ca0:	4a07c83a 	sub	r3,r9,r8
 4023ca4:	344d803a 	cmpltu	r6,r6,r17
 4023ca8:	1991c83a 	sub	r8,r3,r6
 4023cac:	1021883a 	mov	r16,r2
 4023cb0:	3825883a 	mov	r18,r7
 4023cb4:	003f0a06 	br	40238e0 <__alt_data_end+0xfc0238e0>
 4023cb8:	2023883a 	mov	r17,r4
 4023cbc:	003f0d06 	br	40238f4 <__alt_data_end+0xfc0238f4>
 4023cc0:	0081ffc4 	movi	r2,2047
 4023cc4:	80bf3f1e 	bne	r16,r2,40239c4 <__alt_data_end+0xfc0239c4>
 4023cc8:	003ec806 	br	40237ec <__alt_data_end+0xfc0237ec>
 4023ccc:	0005883a 	mov	r2,zero
 4023cd0:	003fb106 	br	4023b98 <__alt_data_end+0xfc023b98>
 4023cd4:	0007883a 	mov	r3,zero
 4023cd8:	003fbc06 	br	4023bcc <__alt_data_end+0xfc023bcc>
 4023cdc:	4444b03a 	or	r2,r8,r17
 4023ce0:	8000871e 	bne	r16,zero,4023f00 <__adddf3+0x790>
 4023ce4:	1000ba26 	beq	r2,zero,4023fd0 <__adddf3+0x860>
 4023ce8:	4984b03a 	or	r2,r9,r6
 4023cec:	103ebf26 	beq	r2,zero,40237ec <__alt_data_end+0xfc0237ec>
 4023cf0:	8985883a 	add	r2,r17,r6
 4023cf4:	4247883a 	add	r3,r8,r9
 4023cf8:	1451803a 	cmpltu	r8,r2,r17
 4023cfc:	40d1883a 	add	r8,r8,r3
 4023d00:	40c0202c 	andhi	r3,r8,128
 4023d04:	1023883a 	mov	r17,r2
 4023d08:	183f1a26 	beq	r3,zero,4023974 <__alt_data_end+0xfc023974>
 4023d0c:	00bfe034 	movhi	r2,65408
 4023d10:	10bfffc4 	addi	r2,r2,-1
 4023d14:	2021883a 	mov	r16,r4
 4023d18:	4090703a 	and	r8,r8,r2
 4023d1c:	003eb306 	br	40237ec <__alt_data_end+0xfc0237ec>
 4023d20:	4444b03a 	or	r2,r8,r17
 4023d24:	8000291e 	bne	r16,zero,4023dcc <__adddf3+0x65c>
 4023d28:	10004b1e 	bne	r2,zero,4023e58 <__adddf3+0x6e8>
 4023d2c:	4990b03a 	or	r8,r9,r6
 4023d30:	40008b26 	beq	r8,zero,4023f60 <__adddf3+0x7f0>
 4023d34:	4811883a 	mov	r8,r9
 4023d38:	3023883a 	mov	r17,r6
 4023d3c:	3825883a 	mov	r18,r7
 4023d40:	003eaa06 	br	40237ec <__alt_data_end+0xfc0237ec>
 4023d44:	1021883a 	mov	r16,r2
 4023d48:	0011883a 	mov	r8,zero
 4023d4c:	0005883a 	mov	r2,zero
 4023d50:	003f0f06 	br	4023990 <__alt_data_end+0xfc023990>
 4023d54:	217ff804 	addi	r5,r4,-32
 4023d58:	00800804 	movi	r2,32
 4023d5c:	494ad83a 	srl	r5,r9,r5
 4023d60:	20807d26 	beq	r4,r2,4023f58 <__adddf3+0x7e8>
 4023d64:	00801004 	movi	r2,64
 4023d68:	1109c83a 	sub	r4,r2,r4
 4023d6c:	4912983a 	sll	r9,r9,r4
 4023d70:	498cb03a 	or	r6,r9,r6
 4023d74:	300cc03a 	cmpne	r6,r6,zero
 4023d78:	298ab03a 	or	r5,r5,r6
 4023d7c:	0013883a 	mov	r9,zero
 4023d80:	003f1506 	br	40239d8 <__alt_data_end+0xfc0239d8>
 4023d84:	0101ffc4 	movi	r4,2047
 4023d88:	113f9a1e 	bne	r2,r4,4023bf4 <__alt_data_end+0xfc023bf4>
 4023d8c:	4811883a 	mov	r8,r9
 4023d90:	3023883a 	mov	r17,r6
 4023d94:	1021883a 	mov	r16,r2
 4023d98:	3825883a 	mov	r18,r7
 4023d9c:	003e9306 	br	40237ec <__alt_data_end+0xfc0237ec>
 4023da0:	8000161e 	bne	r16,zero,4023dfc <__adddf3+0x68c>
 4023da4:	444ab03a 	or	r5,r8,r17
 4023da8:	28005126 	beq	r5,zero,4023ef0 <__adddf3+0x780>
 4023dac:	0108303a 	nor	r4,zero,r4
 4023db0:	20004d1e 	bne	r4,zero,4023ee8 <__adddf3+0x778>
 4023db4:	89a3883a 	add	r17,r17,r6
 4023db8:	4253883a 	add	r9,r8,r9
 4023dbc:	898d803a 	cmpltu	r6,r17,r6
 4023dc0:	3251883a 	add	r8,r6,r9
 4023dc4:	1021883a 	mov	r16,r2
 4023dc8:	003f0806 	br	40239ec <__alt_data_end+0xfc0239ec>
 4023dcc:	1000301e 	bne	r2,zero,4023e90 <__adddf3+0x720>
 4023dd0:	4984b03a 	or	r2,r9,r6
 4023dd4:	10007126 	beq	r2,zero,4023f9c <__adddf3+0x82c>
 4023dd8:	4811883a 	mov	r8,r9
 4023ddc:	3023883a 	mov	r17,r6
 4023de0:	3825883a 	mov	r18,r7
 4023de4:	0401ffc4 	movi	r16,2047
 4023de8:	003e8006 	br	40237ec <__alt_data_end+0xfc0237ec>
 4023dec:	4462b03a 	or	r17,r8,r17
 4023df0:	8822c03a 	cmpne	r17,r17,zero
 4023df4:	0007883a 	mov	r3,zero
 4023df8:	003f8b06 	br	4023c28 <__alt_data_end+0xfc023c28>
 4023dfc:	0141ffc4 	movi	r5,2047
 4023e00:	11403b26 	beq	r2,r5,4023ef0 <__adddf3+0x780>
 4023e04:	0109c83a 	sub	r4,zero,r4
 4023e08:	42002034 	orhi	r8,r8,128
 4023e0c:	01400e04 	movi	r5,56
 4023e10:	29006716 	blt	r5,r4,4023fb0 <__adddf3+0x840>
 4023e14:	014007c4 	movi	r5,31
 4023e18:	29007016 	blt	r5,r4,4023fdc <__adddf3+0x86c>
 4023e1c:	01400804 	movi	r5,32
 4023e20:	290bc83a 	sub	r5,r5,r4
 4023e24:	4154983a 	sll	r10,r8,r5
 4023e28:	890ed83a 	srl	r7,r17,r4
 4023e2c:	894a983a 	sll	r5,r17,r5
 4023e30:	4108d83a 	srl	r4,r8,r4
 4023e34:	51e2b03a 	or	r17,r10,r7
 4023e38:	280ac03a 	cmpne	r5,r5,zero
 4023e3c:	8962b03a 	or	r17,r17,r5
 4023e40:	89a3883a 	add	r17,r17,r6
 4023e44:	2253883a 	add	r9,r4,r9
 4023e48:	898d803a 	cmpltu	r6,r17,r6
 4023e4c:	3251883a 	add	r8,r6,r9
 4023e50:	1021883a 	mov	r16,r2
 4023e54:	003ee506 	br	40239ec <__alt_data_end+0xfc0239ec>
 4023e58:	4984b03a 	or	r2,r9,r6
 4023e5c:	103e6326 	beq	r2,zero,40237ec <__alt_data_end+0xfc0237ec>
 4023e60:	8987c83a 	sub	r3,r17,r6
 4023e64:	88c9803a 	cmpltu	r4,r17,r3
 4023e68:	4245c83a 	sub	r2,r8,r9
 4023e6c:	1105c83a 	sub	r2,r2,r4
 4023e70:	1100202c 	andhi	r4,r2,128
 4023e74:	203ebb26 	beq	r4,zero,4023964 <__alt_data_end+0xfc023964>
 4023e78:	3463c83a 	sub	r17,r6,r17
 4023e7c:	4a07c83a 	sub	r3,r9,r8
 4023e80:	344d803a 	cmpltu	r6,r6,r17
 4023e84:	1991c83a 	sub	r8,r3,r6
 4023e88:	3825883a 	mov	r18,r7
 4023e8c:	003e5706 	br	40237ec <__alt_data_end+0xfc0237ec>
 4023e90:	4984b03a 	or	r2,r9,r6
 4023e94:	10002e26 	beq	r2,zero,4023f50 <__adddf3+0x7e0>
 4023e98:	4004d0fa 	srli	r2,r8,3
 4023e9c:	8822d0fa 	srli	r17,r17,3
 4023ea0:	4010977a 	slli	r8,r8,29
 4023ea4:	10c0022c 	andhi	r3,r2,8
 4023ea8:	4462b03a 	or	r17,r8,r17
 4023eac:	18000826 	beq	r3,zero,4023ed0 <__adddf3+0x760>
 4023eb0:	4808d0fa 	srli	r4,r9,3
 4023eb4:	20c0022c 	andhi	r3,r4,8
 4023eb8:	1800051e 	bne	r3,zero,4023ed0 <__adddf3+0x760>
 4023ebc:	300cd0fa 	srli	r6,r6,3
 4023ec0:	4806977a 	slli	r3,r9,29
 4023ec4:	2005883a 	mov	r2,r4
 4023ec8:	3825883a 	mov	r18,r7
 4023ecc:	19a2b03a 	or	r17,r3,r6
 4023ed0:	8810d77a 	srli	r8,r17,29
 4023ed4:	100490fa 	slli	r2,r2,3
 4023ed8:	882290fa 	slli	r17,r17,3
 4023edc:	0401ffc4 	movi	r16,2047
 4023ee0:	4090b03a 	or	r8,r8,r2
 4023ee4:	003e4106 	br	40237ec <__alt_data_end+0xfc0237ec>
 4023ee8:	0141ffc4 	movi	r5,2047
 4023eec:	117fc71e 	bne	r2,r5,4023e0c <__alt_data_end+0xfc023e0c>
 4023ef0:	4811883a 	mov	r8,r9
 4023ef4:	3023883a 	mov	r17,r6
 4023ef8:	1021883a 	mov	r16,r2
 4023efc:	003e3b06 	br	40237ec <__alt_data_end+0xfc0237ec>
 4023f00:	10002f26 	beq	r2,zero,4023fc0 <__adddf3+0x850>
 4023f04:	4984b03a 	or	r2,r9,r6
 4023f08:	10001126 	beq	r2,zero,4023f50 <__adddf3+0x7e0>
 4023f0c:	4004d0fa 	srli	r2,r8,3
 4023f10:	8822d0fa 	srli	r17,r17,3
 4023f14:	4010977a 	slli	r8,r8,29
 4023f18:	10c0022c 	andhi	r3,r2,8
 4023f1c:	4462b03a 	or	r17,r8,r17
 4023f20:	183feb26 	beq	r3,zero,4023ed0 <__alt_data_end+0xfc023ed0>
 4023f24:	4808d0fa 	srli	r4,r9,3
 4023f28:	20c0022c 	andhi	r3,r4,8
 4023f2c:	183fe81e 	bne	r3,zero,4023ed0 <__alt_data_end+0xfc023ed0>
 4023f30:	300cd0fa 	srli	r6,r6,3
 4023f34:	4806977a 	slli	r3,r9,29
 4023f38:	2005883a 	mov	r2,r4
 4023f3c:	19a2b03a 	or	r17,r3,r6
 4023f40:	003fe306 	br	4023ed0 <__alt_data_end+0xfc023ed0>
 4023f44:	0011883a 	mov	r8,zero
 4023f48:	0005883a 	mov	r2,zero
 4023f4c:	003e3f06 	br	402384c <__alt_data_end+0xfc02384c>
 4023f50:	0401ffc4 	movi	r16,2047
 4023f54:	003e2506 	br	40237ec <__alt_data_end+0xfc0237ec>
 4023f58:	0013883a 	mov	r9,zero
 4023f5c:	003f8406 	br	4023d70 <__alt_data_end+0xfc023d70>
 4023f60:	0005883a 	mov	r2,zero
 4023f64:	0007883a 	mov	r3,zero
 4023f68:	003e8906 	br	4023990 <__alt_data_end+0xfc023990>
 4023f6c:	197ff804 	addi	r5,r3,-32
 4023f70:	01000804 	movi	r4,32
 4023f74:	414ad83a 	srl	r5,r8,r5
 4023f78:	19002426 	beq	r3,r4,402400c <__adddf3+0x89c>
 4023f7c:	01001004 	movi	r4,64
 4023f80:	20c7c83a 	sub	r3,r4,r3
 4023f84:	40c6983a 	sll	r3,r8,r3
 4023f88:	1c46b03a 	or	r3,r3,r17
 4023f8c:	1806c03a 	cmpne	r3,r3,zero
 4023f90:	28e2b03a 	or	r17,r5,r3
 4023f94:	0007883a 	mov	r3,zero
 4023f98:	003f2306 	br	4023c28 <__alt_data_end+0xfc023c28>
 4023f9c:	0007883a 	mov	r3,zero
 4023fa0:	5811883a 	mov	r8,r11
 4023fa4:	00bfffc4 	movi	r2,-1
 4023fa8:	0401ffc4 	movi	r16,2047
 4023fac:	003e7806 	br	4023990 <__alt_data_end+0xfc023990>
 4023fb0:	4462b03a 	or	r17,r8,r17
 4023fb4:	8822c03a 	cmpne	r17,r17,zero
 4023fb8:	0009883a 	mov	r4,zero
 4023fbc:	003fa006 	br	4023e40 <__alt_data_end+0xfc023e40>
 4023fc0:	4811883a 	mov	r8,r9
 4023fc4:	3023883a 	mov	r17,r6
 4023fc8:	0401ffc4 	movi	r16,2047
 4023fcc:	003e0706 	br	40237ec <__alt_data_end+0xfc0237ec>
 4023fd0:	4811883a 	mov	r8,r9
 4023fd4:	3023883a 	mov	r17,r6
 4023fd8:	003e0406 	br	40237ec <__alt_data_end+0xfc0237ec>
 4023fdc:	21fff804 	addi	r7,r4,-32
 4023fe0:	01400804 	movi	r5,32
 4023fe4:	41ced83a 	srl	r7,r8,r7
 4023fe8:	21400a26 	beq	r4,r5,4024014 <__adddf3+0x8a4>
 4023fec:	01401004 	movi	r5,64
 4023ff0:	2909c83a 	sub	r4,r5,r4
 4023ff4:	4108983a 	sll	r4,r8,r4
 4023ff8:	2448b03a 	or	r4,r4,r17
 4023ffc:	2008c03a 	cmpne	r4,r4,zero
 4024000:	3922b03a 	or	r17,r7,r4
 4024004:	0009883a 	mov	r4,zero
 4024008:	003f8d06 	br	4023e40 <__alt_data_end+0xfc023e40>
 402400c:	0007883a 	mov	r3,zero
 4024010:	003fdd06 	br	4023f88 <__alt_data_end+0xfc023f88>
 4024014:	0009883a 	mov	r4,zero
 4024018:	003ff706 	br	4023ff8 <__alt_data_end+0xfc023ff8>

0402401c <__divdf3>:
 402401c:	defff004 	addi	sp,sp,-64
 4024020:	dc800815 	stw	r18,32(sp)
 4024024:	2824d53a 	srli	r18,r5,20
 4024028:	dd800c15 	stw	r22,48(sp)
 402402c:	282cd7fa 	srli	r22,r5,31
 4024030:	dc000615 	stw	r16,24(sp)
 4024034:	04000434 	movhi	r16,16
 4024038:	843fffc4 	addi	r16,r16,-1
 402403c:	dfc00f15 	stw	ra,60(sp)
 4024040:	df000e15 	stw	fp,56(sp)
 4024044:	ddc00d15 	stw	r23,52(sp)
 4024048:	dd400b15 	stw	r21,44(sp)
 402404c:	dd000a15 	stw	r20,40(sp)
 4024050:	dcc00915 	stw	r19,36(sp)
 4024054:	dc400715 	stw	r17,28(sp)
 4024058:	9481ffcc 	andi	r18,r18,2047
 402405c:	2c20703a 	and	r16,r5,r16
 4024060:	b2003fcc 	andi	r8,r22,255
 4024064:	90006126 	beq	r18,zero,40241ec <__divdf3+0x1d0>
 4024068:	0081ffc4 	movi	r2,2047
 402406c:	202b883a 	mov	r21,r4
 4024070:	90803726 	beq	r18,r2,4024150 <__divdf3+0x134>
 4024074:	80800434 	orhi	r2,r16,16
 4024078:	100490fa 	slli	r2,r2,3
 402407c:	2020d77a 	srli	r16,r4,29
 4024080:	202a90fa 	slli	r21,r4,3
 4024084:	94bf0044 	addi	r18,r18,-1023
 4024088:	80a0b03a 	or	r16,r16,r2
 402408c:	0013883a 	mov	r9,zero
 4024090:	000b883a 	mov	r5,zero
 4024094:	3806d53a 	srli	r3,r7,20
 4024098:	382ed7fa 	srli	r23,r7,31
 402409c:	04400434 	movhi	r17,16
 40240a0:	8c7fffc4 	addi	r17,r17,-1
 40240a4:	18c1ffcc 	andi	r3,r3,2047
 40240a8:	3029883a 	mov	r20,r6
 40240ac:	3c62703a 	and	r17,r7,r17
 40240b0:	bf003fcc 	andi	fp,r23,255
 40240b4:	18006e26 	beq	r3,zero,4024270 <__divdf3+0x254>
 40240b8:	0081ffc4 	movi	r2,2047
 40240bc:	18806626 	beq	r3,r2,4024258 <__divdf3+0x23c>
 40240c0:	88800434 	orhi	r2,r17,16
 40240c4:	100490fa 	slli	r2,r2,3
 40240c8:	3022d77a 	srli	r17,r6,29
 40240cc:	302890fa 	slli	r20,r6,3
 40240d0:	18ff0044 	addi	r3,r3,-1023
 40240d4:	88a2b03a 	or	r17,r17,r2
 40240d8:	000f883a 	mov	r7,zero
 40240dc:	b5e6f03a 	xor	r19,r22,r23
 40240e0:	3a4cb03a 	or	r6,r7,r9
 40240e4:	008003c4 	movi	r2,15
 40240e8:	9809883a 	mov	r4,r19
 40240ec:	90c7c83a 	sub	r3,r18,r3
 40240f0:	9cc03fcc 	andi	r19,r19,255
 40240f4:	11809636 	bltu	r2,r6,4024350 <__divdf3+0x334>
 40240f8:	300c90ba 	slli	r6,r6,2
 40240fc:	008100b4 	movhi	r2,1026
 4024100:	10904404 	addi	r2,r2,16656
 4024104:	308d883a 	add	r6,r6,r2
 4024108:	30800017 	ldw	r2,0(r6)
 402410c:	1000683a 	jmp	r2
 4024110:	04024350 	cmplti	r16,zero,2317
 4024114:	04024188 	cmpgei	r16,zero,2310
 4024118:	04024340 	call	402434 <__alt_mem_SDRAM-0x3bfdbcc>
 402411c:	0402417c 	xorhi	r16,zero,2309
 4024120:	04024340 	call	402434 <__alt_mem_SDRAM-0x3bfdbcc>
 4024124:	04024314 	movui	r16,2316
 4024128:	04024340 	call	402434 <__alt_mem_SDRAM-0x3bfdbcc>
 402412c:	0402417c 	xorhi	r16,zero,2309
 4024130:	04024188 	cmpgei	r16,zero,2310
 4024134:	04024188 	cmpgei	r16,zero,2310
 4024138:	04024314 	movui	r16,2316
 402413c:	0402417c 	xorhi	r16,zero,2309
 4024140:	0402416c 	andhi	r16,zero,2309
 4024144:	0402416c 	andhi	r16,zero,2309
 4024148:	0402416c 	andhi	r16,zero,2309
 402414c:	040246d8 	cmpnei	r16,zero,2331
 4024150:	2404b03a 	or	r2,r4,r16
 4024154:	10006c1e 	bne	r2,zero,4024308 <__divdf3+0x2ec>
 4024158:	02400204 	movi	r9,8
 402415c:	0021883a 	mov	r16,zero
 4024160:	002b883a 	mov	r21,zero
 4024164:	01400084 	movi	r5,2
 4024168:	003fca06 	br	4024094 <__alt_data_end+0xfc024094>
 402416c:	8023883a 	mov	r17,r16
 4024170:	a829883a 	mov	r20,r21
 4024174:	4039883a 	mov	fp,r8
 4024178:	280f883a 	mov	r7,r5
 402417c:	00800084 	movi	r2,2
 4024180:	3881601e 	bne	r7,r2,4024704 <__divdf3+0x6e8>
 4024184:	e027883a 	mov	r19,fp
 4024188:	9900004c 	andi	r4,r19,1
 402418c:	0081ffc4 	movi	r2,2047
 4024190:	0021883a 	mov	r16,zero
 4024194:	002b883a 	mov	r21,zero
 4024198:	1004953a 	slli	r2,r2,20
 402419c:	20c03fcc 	andi	r3,r4,255
 40241a0:	01400434 	movhi	r5,16
 40241a4:	297fffc4 	addi	r5,r5,-1
 40241a8:	180697fa 	slli	r3,r3,31
 40241ac:	8160703a 	and	r16,r16,r5
 40241b0:	80a0b03a 	or	r16,r16,r2
 40241b4:	80c6b03a 	or	r3,r16,r3
 40241b8:	a805883a 	mov	r2,r21
 40241bc:	dfc00f17 	ldw	ra,60(sp)
 40241c0:	df000e17 	ldw	fp,56(sp)
 40241c4:	ddc00d17 	ldw	r23,52(sp)
 40241c8:	dd800c17 	ldw	r22,48(sp)
 40241cc:	dd400b17 	ldw	r21,44(sp)
 40241d0:	dd000a17 	ldw	r20,40(sp)
 40241d4:	dcc00917 	ldw	r19,36(sp)
 40241d8:	dc800817 	ldw	r18,32(sp)
 40241dc:	dc400717 	ldw	r17,28(sp)
 40241e0:	dc000617 	ldw	r16,24(sp)
 40241e4:	dec01004 	addi	sp,sp,64
 40241e8:	f800283a 	ret
 40241ec:	2404b03a 	or	r2,r4,r16
 40241f0:	2023883a 	mov	r17,r4
 40241f4:	10003f26 	beq	r2,zero,40242f4 <__divdf3+0x2d8>
 40241f8:	80015e26 	beq	r16,zero,4024774 <__divdf3+0x758>
 40241fc:	8009883a 	mov	r4,r16
 4024200:	d9800215 	stw	r6,8(sp)
 4024204:	d9c00515 	stw	r7,20(sp)
 4024208:	da000415 	stw	r8,16(sp)
 402420c:	4025fb00 	call	4025fb0 <__clzsi2>
 4024210:	d9800217 	ldw	r6,8(sp)
 4024214:	d9c00517 	ldw	r7,20(sp)
 4024218:	da000417 	ldw	r8,16(sp)
 402421c:	113ffd44 	addi	r4,r2,-11
 4024220:	00c00704 	movi	r3,28
 4024224:	19014f16 	blt	r3,r4,4024764 <__divdf3+0x748>
 4024228:	00c00744 	movi	r3,29
 402422c:	157ffe04 	addi	r21,r2,-8
 4024230:	1907c83a 	sub	r3,r3,r4
 4024234:	8560983a 	sll	r16,r16,r21
 4024238:	88c6d83a 	srl	r3,r17,r3
 402423c:	8d6a983a 	sll	r21,r17,r21
 4024240:	1c20b03a 	or	r16,r3,r16
 4024244:	1080fcc4 	addi	r2,r2,1011
 4024248:	00a5c83a 	sub	r18,zero,r2
 402424c:	0013883a 	mov	r9,zero
 4024250:	000b883a 	mov	r5,zero
 4024254:	003f8f06 	br	4024094 <__alt_data_end+0xfc024094>
 4024258:	3444b03a 	or	r2,r6,r17
 402425c:	1000231e 	bne	r2,zero,40242ec <__divdf3+0x2d0>
 4024260:	0023883a 	mov	r17,zero
 4024264:	0029883a 	mov	r20,zero
 4024268:	01c00084 	movi	r7,2
 402426c:	003f9b06 	br	40240dc <__alt_data_end+0xfc0240dc>
 4024270:	3444b03a 	or	r2,r6,r17
 4024274:	10001926 	beq	r2,zero,40242dc <__divdf3+0x2c0>
 4024278:	88014b26 	beq	r17,zero,40247a8 <__divdf3+0x78c>
 402427c:	8809883a 	mov	r4,r17
 4024280:	d9400115 	stw	r5,4(sp)
 4024284:	d9800215 	stw	r6,8(sp)
 4024288:	da000415 	stw	r8,16(sp)
 402428c:	da400315 	stw	r9,12(sp)
 4024290:	4025fb00 	call	4025fb0 <__clzsi2>
 4024294:	d9400117 	ldw	r5,4(sp)
 4024298:	d9800217 	ldw	r6,8(sp)
 402429c:	da000417 	ldw	r8,16(sp)
 40242a0:	da400317 	ldw	r9,12(sp)
 40242a4:	113ffd44 	addi	r4,r2,-11
 40242a8:	00c00704 	movi	r3,28
 40242ac:	19013a16 	blt	r3,r4,4024798 <__divdf3+0x77c>
 40242b0:	00c00744 	movi	r3,29
 40242b4:	153ffe04 	addi	r20,r2,-8
 40242b8:	1907c83a 	sub	r3,r3,r4
 40242bc:	8d22983a 	sll	r17,r17,r20
 40242c0:	30c6d83a 	srl	r3,r6,r3
 40242c4:	3528983a 	sll	r20,r6,r20
 40242c8:	1c62b03a 	or	r17,r3,r17
 40242cc:	1080fcc4 	addi	r2,r2,1011
 40242d0:	0087c83a 	sub	r3,zero,r2
 40242d4:	000f883a 	mov	r7,zero
 40242d8:	003f8006 	br	40240dc <__alt_data_end+0xfc0240dc>
 40242dc:	0023883a 	mov	r17,zero
 40242e0:	0029883a 	mov	r20,zero
 40242e4:	01c00044 	movi	r7,1
 40242e8:	003f7c06 	br	40240dc <__alt_data_end+0xfc0240dc>
 40242ec:	01c000c4 	movi	r7,3
 40242f0:	003f7a06 	br	40240dc <__alt_data_end+0xfc0240dc>
 40242f4:	02400104 	movi	r9,4
 40242f8:	0021883a 	mov	r16,zero
 40242fc:	002b883a 	mov	r21,zero
 4024300:	01400044 	movi	r5,1
 4024304:	003f6306 	br	4024094 <__alt_data_end+0xfc024094>
 4024308:	02400304 	movi	r9,12
 402430c:	014000c4 	movi	r5,3
 4024310:	003f6006 	br	4024094 <__alt_data_end+0xfc024094>
 4024314:	04000434 	movhi	r16,16
 4024318:	0009883a 	mov	r4,zero
 402431c:	843fffc4 	addi	r16,r16,-1
 4024320:	057fffc4 	movi	r21,-1
 4024324:	0081ffc4 	movi	r2,2047
 4024328:	003f9b06 	br	4024198 <__alt_data_end+0xfc024198>
 402432c:	00c00044 	movi	r3,1
 4024330:	1887c83a 	sub	r3,r3,r2
 4024334:	01000e04 	movi	r4,56
 4024338:	20c1530e 	bge	r4,r3,4024888 <__divdf3+0x86c>
 402433c:	9900004c 	andi	r4,r19,1
 4024340:	0005883a 	mov	r2,zero
 4024344:	0021883a 	mov	r16,zero
 4024348:	002b883a 	mov	r21,zero
 402434c:	003f9206 	br	4024198 <__alt_data_end+0xfc024198>
 4024350:	8c012e36 	bltu	r17,r16,402480c <__divdf3+0x7f0>
 4024354:	84412c26 	beq	r16,r17,4024808 <__divdf3+0x7ec>
 4024358:	a82f883a 	mov	r23,r21
 402435c:	18ffffc4 	addi	r3,r3,-1
 4024360:	002b883a 	mov	r21,zero
 4024364:	a004d63a 	srli	r2,r20,24
 4024368:	8822923a 	slli	r17,r17,8
 402436c:	a028923a 	slli	r20,r20,8
 4024370:	8009883a 	mov	r4,r16
 4024374:	88acb03a 	or	r22,r17,r2
 4024378:	dd000015 	stw	r20,0(sp)
 402437c:	b028d43a 	srli	r20,r22,16
 4024380:	d8c00215 	stw	r3,8(sp)
 4024384:	b4bfffcc 	andi	r18,r22,65535
 4024388:	a00b883a 	mov	r5,r20
 402438c:	40190440 	call	4019044 <__udivsi3>
 4024390:	100b883a 	mov	r5,r2
 4024394:	9009883a 	mov	r4,r18
 4024398:	1023883a 	mov	r17,r2
 402439c:	40191000 	call	4019100 <__mulsi3>
 40243a0:	8009883a 	mov	r4,r16
 40243a4:	a00b883a 	mov	r5,r20
 40243a8:	1039883a 	mov	fp,r2
 40243ac:	40190a80 	call	40190a8 <__umodsi3>
 40243b0:	1004943a 	slli	r2,r2,16
 40243b4:	b808d43a 	srli	r4,r23,16
 40243b8:	d8c00217 	ldw	r3,8(sp)
 40243bc:	2084b03a 	or	r2,r4,r2
 40243c0:	1700062e 	bgeu	r2,fp,40243dc <__divdf3+0x3c0>
 40243c4:	1585883a 	add	r2,r2,r22
 40243c8:	893fffc4 	addi	r4,r17,-1
 40243cc:	15811d36 	bltu	r2,r22,4024844 <__divdf3+0x828>
 40243d0:	17011c2e 	bgeu	r2,fp,4024844 <__divdf3+0x828>
 40243d4:	8c7fff84 	addi	r17,r17,-2
 40243d8:	1585883a 	add	r2,r2,r22
 40243dc:	1739c83a 	sub	fp,r2,fp
 40243e0:	a00b883a 	mov	r5,r20
 40243e4:	e009883a 	mov	r4,fp
 40243e8:	d8c00215 	stw	r3,8(sp)
 40243ec:	40190440 	call	4019044 <__udivsi3>
 40243f0:	100b883a 	mov	r5,r2
 40243f4:	9009883a 	mov	r4,r18
 40243f8:	1021883a 	mov	r16,r2
 40243fc:	40191000 	call	4019100 <__mulsi3>
 4024400:	a00b883a 	mov	r5,r20
 4024404:	e009883a 	mov	r4,fp
 4024408:	d8800415 	stw	r2,16(sp)
 402440c:	40190a80 	call	40190a8 <__umodsi3>
 4024410:	1004943a 	slli	r2,r2,16
 4024414:	da000417 	ldw	r8,16(sp)
 4024418:	bdffffcc 	andi	r23,r23,65535
 402441c:	b884b03a 	or	r2,r23,r2
 4024420:	d8c00217 	ldw	r3,8(sp)
 4024424:	1200062e 	bgeu	r2,r8,4024440 <__divdf3+0x424>
 4024428:	1585883a 	add	r2,r2,r22
 402442c:	813fffc4 	addi	r4,r16,-1
 4024430:	15810236 	bltu	r2,r22,402483c <__divdf3+0x820>
 4024434:	1201012e 	bgeu	r2,r8,402483c <__divdf3+0x820>
 4024438:	843fff84 	addi	r16,r16,-2
 402443c:	1585883a 	add	r2,r2,r22
 4024440:	8822943a 	slli	r17,r17,16
 4024444:	d9800017 	ldw	r6,0(sp)
 4024448:	1211c83a 	sub	r8,r2,r8
 402444c:	8c22b03a 	or	r17,r17,r16
 4024450:	373fffcc 	andi	fp,r6,65535
 4024454:	8abfffcc 	andi	r10,r17,65535
 4024458:	8820d43a 	srli	r16,r17,16
 402445c:	5009883a 	mov	r4,r10
 4024460:	e00b883a 	mov	r5,fp
 4024464:	302ed43a 	srli	r23,r6,16
 4024468:	d8c00215 	stw	r3,8(sp)
 402446c:	da000415 	stw	r8,16(sp)
 4024470:	da800115 	stw	r10,4(sp)
 4024474:	40191000 	call	4019100 <__mulsi3>
 4024478:	800b883a 	mov	r5,r16
 402447c:	e009883a 	mov	r4,fp
 4024480:	d8800515 	stw	r2,20(sp)
 4024484:	40191000 	call	4019100 <__mulsi3>
 4024488:	8009883a 	mov	r4,r16
 402448c:	b80b883a 	mov	r5,r23
 4024490:	d8800315 	stw	r2,12(sp)
 4024494:	40191000 	call	4019100 <__mulsi3>
 4024498:	da800117 	ldw	r10,4(sp)
 402449c:	b80b883a 	mov	r5,r23
 40244a0:	1021883a 	mov	r16,r2
 40244a4:	5009883a 	mov	r4,r10
 40244a8:	40191000 	call	4019100 <__mulsi3>
 40244ac:	d9c00517 	ldw	r7,20(sp)
 40244b0:	da400317 	ldw	r9,12(sp)
 40244b4:	d8c00217 	ldw	r3,8(sp)
 40244b8:	3808d43a 	srli	r4,r7,16
 40244bc:	1245883a 	add	r2,r2,r9
 40244c0:	da000417 	ldw	r8,16(sp)
 40244c4:	2085883a 	add	r2,r4,r2
 40244c8:	1240022e 	bgeu	r2,r9,40244d4 <__divdf3+0x4b8>
 40244cc:	01000074 	movhi	r4,1
 40244d0:	8121883a 	add	r16,r16,r4
 40244d4:	1008d43a 	srli	r4,r2,16
 40244d8:	1004943a 	slli	r2,r2,16
 40244dc:	39ffffcc 	andi	r7,r7,65535
 40244e0:	2409883a 	add	r4,r4,r16
 40244e4:	11c5883a 	add	r2,r2,r7
 40244e8:	4100bb36 	bltu	r8,r4,40247d8 <__divdf3+0x7bc>
 40244ec:	4100d726 	beq	r8,r4,402484c <__divdf3+0x830>
 40244f0:	4109c83a 	sub	r4,r8,r4
 40244f4:	a8a1c83a 	sub	r16,r21,r2
 40244f8:	ac2b803a 	cmpltu	r21,r21,r16
 40244fc:	256bc83a 	sub	r21,r4,r21
 4024500:	b540d926 	beq	r22,r21,4024868 <__divdf3+0x84c>
 4024504:	a00b883a 	mov	r5,r20
 4024508:	a809883a 	mov	r4,r21
 402450c:	d8c00215 	stw	r3,8(sp)
 4024510:	40190440 	call	4019044 <__udivsi3>
 4024514:	100b883a 	mov	r5,r2
 4024518:	9009883a 	mov	r4,r18
 402451c:	d8800515 	stw	r2,20(sp)
 4024520:	40191000 	call	4019100 <__mulsi3>
 4024524:	a809883a 	mov	r4,r21
 4024528:	a00b883a 	mov	r5,r20
 402452c:	d8800415 	stw	r2,16(sp)
 4024530:	40190a80 	call	40190a8 <__umodsi3>
 4024534:	1004943a 	slli	r2,r2,16
 4024538:	8008d43a 	srli	r4,r16,16
 402453c:	da000417 	ldw	r8,16(sp)
 4024540:	d8c00217 	ldw	r3,8(sp)
 4024544:	2084b03a 	or	r2,r4,r2
 4024548:	d9c00517 	ldw	r7,20(sp)
 402454c:	1200062e 	bgeu	r2,r8,4024568 <__divdf3+0x54c>
 4024550:	1585883a 	add	r2,r2,r22
 4024554:	393fffc4 	addi	r4,r7,-1
 4024558:	1580c536 	bltu	r2,r22,4024870 <__divdf3+0x854>
 402455c:	1200c42e 	bgeu	r2,r8,4024870 <__divdf3+0x854>
 4024560:	39ffff84 	addi	r7,r7,-2
 4024564:	1585883a 	add	r2,r2,r22
 4024568:	122bc83a 	sub	r21,r2,r8
 402456c:	a00b883a 	mov	r5,r20
 4024570:	a809883a 	mov	r4,r21
 4024574:	d8c00215 	stw	r3,8(sp)
 4024578:	d9c00515 	stw	r7,20(sp)
 402457c:	40190440 	call	4019044 <__udivsi3>
 4024580:	9009883a 	mov	r4,r18
 4024584:	100b883a 	mov	r5,r2
 4024588:	d8800415 	stw	r2,16(sp)
 402458c:	40191000 	call	4019100 <__mulsi3>
 4024590:	a809883a 	mov	r4,r21
 4024594:	a00b883a 	mov	r5,r20
 4024598:	1025883a 	mov	r18,r2
 402459c:	40190a80 	call	40190a8 <__umodsi3>
 40245a0:	1004943a 	slli	r2,r2,16
 40245a4:	813fffcc 	andi	r4,r16,65535
 40245a8:	d8c00217 	ldw	r3,8(sp)
 40245ac:	20a0b03a 	or	r16,r4,r2
 40245b0:	d9c00517 	ldw	r7,20(sp)
 40245b4:	da000417 	ldw	r8,16(sp)
 40245b8:	8480062e 	bgeu	r16,r18,40245d4 <__divdf3+0x5b8>
 40245bc:	85a1883a 	add	r16,r16,r22
 40245c0:	40bfffc4 	addi	r2,r8,-1
 40245c4:	8580ac36 	bltu	r16,r22,4024878 <__divdf3+0x85c>
 40245c8:	8480ab2e 	bgeu	r16,r18,4024878 <__divdf3+0x85c>
 40245cc:	423fff84 	addi	r8,r8,-2
 40245d0:	85a1883a 	add	r16,r16,r22
 40245d4:	3804943a 	slli	r2,r7,16
 40245d8:	84a1c83a 	sub	r16,r16,r18
 40245dc:	e009883a 	mov	r4,fp
 40245e0:	1228b03a 	or	r20,r2,r8
 40245e4:	a1ffffcc 	andi	r7,r20,65535
 40245e8:	a024d43a 	srli	r18,r20,16
 40245ec:	380b883a 	mov	r5,r7
 40245f0:	d8c00215 	stw	r3,8(sp)
 40245f4:	d9c00515 	stw	r7,20(sp)
 40245f8:	40191000 	call	4019100 <__mulsi3>
 40245fc:	900b883a 	mov	r5,r18
 4024600:	e009883a 	mov	r4,fp
 4024604:	102b883a 	mov	r21,r2
 4024608:	40191000 	call	4019100 <__mulsi3>
 402460c:	900b883a 	mov	r5,r18
 4024610:	b809883a 	mov	r4,r23
 4024614:	1039883a 	mov	fp,r2
 4024618:	40191000 	call	4019100 <__mulsi3>
 402461c:	d9c00517 	ldw	r7,20(sp)
 4024620:	b80b883a 	mov	r5,r23
 4024624:	1025883a 	mov	r18,r2
 4024628:	3809883a 	mov	r4,r7
 402462c:	40191000 	call	4019100 <__mulsi3>
 4024630:	a808d43a 	srli	r4,r21,16
 4024634:	1705883a 	add	r2,r2,fp
 4024638:	d8c00217 	ldw	r3,8(sp)
 402463c:	2085883a 	add	r2,r4,r2
 4024640:	1700022e 	bgeu	r2,fp,402464c <__divdf3+0x630>
 4024644:	01000074 	movhi	r4,1
 4024648:	9125883a 	add	r18,r18,r4
 402464c:	1008d43a 	srli	r4,r2,16
 4024650:	1004943a 	slli	r2,r2,16
 4024654:	ad7fffcc 	andi	r21,r21,65535
 4024658:	2489883a 	add	r4,r4,r18
 402465c:	1545883a 	add	r2,r2,r21
 4024660:	81003836 	bltu	r16,r4,4024744 <__divdf3+0x728>
 4024664:	81003626 	beq	r16,r4,4024740 <__divdf3+0x724>
 4024668:	a5000054 	ori	r20,r20,1
 402466c:	1880ffc4 	addi	r2,r3,1023
 4024670:	00bf2e0e 	bge	zero,r2,402432c <__alt_data_end+0xfc02432c>
 4024674:	a10001cc 	andi	r4,r20,7
 4024678:	20000726 	beq	r4,zero,4024698 <__divdf3+0x67c>
 402467c:	a10003cc 	andi	r4,r20,15
 4024680:	01400104 	movi	r5,4
 4024684:	21400426 	beq	r4,r5,4024698 <__divdf3+0x67c>
 4024688:	a149883a 	add	r4,r20,r5
 402468c:	2529803a 	cmpltu	r20,r4,r20
 4024690:	8d23883a 	add	r17,r17,r20
 4024694:	2029883a 	mov	r20,r4
 4024698:	8900402c 	andhi	r4,r17,256
 402469c:	20000426 	beq	r4,zero,40246b0 <__divdf3+0x694>
 40246a0:	18810004 	addi	r2,r3,1024
 40246a4:	00ffc034 	movhi	r3,65280
 40246a8:	18ffffc4 	addi	r3,r3,-1
 40246ac:	88e2703a 	and	r17,r17,r3
 40246b0:	00c1ff84 	movi	r3,2046
 40246b4:	18beb416 	blt	r3,r2,4024188 <__alt_data_end+0xfc024188>
 40246b8:	a028d0fa 	srli	r20,r20,3
 40246bc:	882a977a 	slli	r21,r17,29
 40246c0:	8820927a 	slli	r16,r17,9
 40246c4:	1081ffcc 	andi	r2,r2,2047
 40246c8:	ad2ab03a 	or	r21,r21,r20
 40246cc:	8020d33a 	srli	r16,r16,12
 40246d0:	9900004c 	andi	r4,r19,1
 40246d4:	003eb006 	br	4024198 <__alt_data_end+0xfc024198>
 40246d8:	8080022c 	andhi	r2,r16,8
 40246dc:	10001226 	beq	r2,zero,4024728 <__divdf3+0x70c>
 40246e0:	8880022c 	andhi	r2,r17,8
 40246e4:	1000101e 	bne	r2,zero,4024728 <__divdf3+0x70c>
 40246e8:	00800434 	movhi	r2,16
 40246ec:	8c000234 	orhi	r16,r17,8
 40246f0:	10bfffc4 	addi	r2,r2,-1
 40246f4:	b809883a 	mov	r4,r23
 40246f8:	80a0703a 	and	r16,r16,r2
 40246fc:	a02b883a 	mov	r21,r20
 4024700:	003f0806 	br	4024324 <__alt_data_end+0xfc024324>
 4024704:	008000c4 	movi	r2,3
 4024708:	3880b126 	beq	r7,r2,40249d0 <__divdf3+0x9b4>
 402470c:	00800044 	movi	r2,1
 4024710:	38805b1e 	bne	r7,r2,4024880 <__divdf3+0x864>
 4024714:	e009883a 	mov	r4,fp
 4024718:	0005883a 	mov	r2,zero
 402471c:	0021883a 	mov	r16,zero
 4024720:	002b883a 	mov	r21,zero
 4024724:	003e9c06 	br	4024198 <__alt_data_end+0xfc024198>
 4024728:	00800434 	movhi	r2,16
 402472c:	84000234 	orhi	r16,r16,8
 4024730:	10bfffc4 	addi	r2,r2,-1
 4024734:	b009883a 	mov	r4,r22
 4024738:	80a0703a 	and	r16,r16,r2
 402473c:	003ef906 	br	4024324 <__alt_data_end+0xfc024324>
 4024740:	103fca26 	beq	r2,zero,402466c <__alt_data_end+0xfc02466c>
 4024744:	b421883a 	add	r16,r22,r16
 4024748:	a17fffc4 	addi	r5,r20,-1
 402474c:	8580422e 	bgeu	r16,r22,4024858 <__divdf3+0x83c>
 4024750:	2829883a 	mov	r20,r5
 4024754:	813fc41e 	bne	r16,r4,4024668 <__alt_data_end+0xfc024668>
 4024758:	d9800017 	ldw	r6,0(sp)
 402475c:	30bfc21e 	bne	r6,r2,4024668 <__alt_data_end+0xfc024668>
 4024760:	003fc206 	br	402466c <__alt_data_end+0xfc02466c>
 4024764:	143ff604 	addi	r16,r2,-40
 4024768:	8c20983a 	sll	r16,r17,r16
 402476c:	002b883a 	mov	r21,zero
 4024770:	003eb406 	br	4024244 <__alt_data_end+0xfc024244>
 4024774:	d9800215 	stw	r6,8(sp)
 4024778:	d9c00515 	stw	r7,20(sp)
 402477c:	da000415 	stw	r8,16(sp)
 4024780:	4025fb00 	call	4025fb0 <__clzsi2>
 4024784:	10800804 	addi	r2,r2,32
 4024788:	da000417 	ldw	r8,16(sp)
 402478c:	d9c00517 	ldw	r7,20(sp)
 4024790:	d9800217 	ldw	r6,8(sp)
 4024794:	003ea106 	br	402421c <__alt_data_end+0xfc02421c>
 4024798:	147ff604 	addi	r17,r2,-40
 402479c:	3462983a 	sll	r17,r6,r17
 40247a0:	0029883a 	mov	r20,zero
 40247a4:	003ec906 	br	40242cc <__alt_data_end+0xfc0242cc>
 40247a8:	3009883a 	mov	r4,r6
 40247ac:	d9400115 	stw	r5,4(sp)
 40247b0:	d9800215 	stw	r6,8(sp)
 40247b4:	da000415 	stw	r8,16(sp)
 40247b8:	da400315 	stw	r9,12(sp)
 40247bc:	4025fb00 	call	4025fb0 <__clzsi2>
 40247c0:	10800804 	addi	r2,r2,32
 40247c4:	da400317 	ldw	r9,12(sp)
 40247c8:	da000417 	ldw	r8,16(sp)
 40247cc:	d9800217 	ldw	r6,8(sp)
 40247d0:	d9400117 	ldw	r5,4(sp)
 40247d4:	003eb306 	br	40242a4 <__alt_data_end+0xfc0242a4>
 40247d8:	d9800017 	ldw	r6,0(sp)
 40247dc:	a9ab883a 	add	r21,r21,r6
 40247e0:	a98b803a 	cmpltu	r5,r21,r6
 40247e4:	2d8b883a 	add	r5,r5,r22
 40247e8:	2a11883a 	add	r8,r5,r8
 40247ec:	897fffc4 	addi	r5,r17,-1
 40247f0:	b2000c2e 	bgeu	r22,r8,4024824 <__divdf3+0x808>
 40247f4:	41003f36 	bltu	r8,r4,40248f4 <__divdf3+0x8d8>
 40247f8:	22006c26 	beq	r4,r8,40249ac <__divdf3+0x990>
 40247fc:	4109c83a 	sub	r4,r8,r4
 4024800:	2823883a 	mov	r17,r5
 4024804:	003f3b06 	br	40244f4 <__alt_data_end+0xfc0244f4>
 4024808:	ad3ed336 	bltu	r21,r20,4024358 <__alt_data_end+0xfc024358>
 402480c:	a804d07a 	srli	r2,r21,1
 4024810:	802e97fa 	slli	r23,r16,31
 4024814:	a82a97fa 	slli	r21,r21,31
 4024818:	8020d07a 	srli	r16,r16,1
 402481c:	b8aeb03a 	or	r23,r23,r2
 4024820:	003ed006 	br	4024364 <__alt_data_end+0xfc024364>
 4024824:	b23ff51e 	bne	r22,r8,40247fc <__alt_data_end+0xfc0247fc>
 4024828:	d9800017 	ldw	r6,0(sp)
 402482c:	a9bff12e 	bgeu	r21,r6,40247f4 <__alt_data_end+0xfc0247f4>
 4024830:	b109c83a 	sub	r4,r22,r4
 4024834:	2823883a 	mov	r17,r5
 4024838:	003f2e06 	br	40244f4 <__alt_data_end+0xfc0244f4>
 402483c:	2021883a 	mov	r16,r4
 4024840:	003eff06 	br	4024440 <__alt_data_end+0xfc024440>
 4024844:	2023883a 	mov	r17,r4
 4024848:	003ee406 	br	40243dc <__alt_data_end+0xfc0243dc>
 402484c:	a8bfe236 	bltu	r21,r2,40247d8 <__alt_data_end+0xfc0247d8>
 4024850:	0009883a 	mov	r4,zero
 4024854:	003f2706 	br	40244f4 <__alt_data_end+0xfc0244f4>
 4024858:	81002d36 	bltu	r16,r4,4024910 <__divdf3+0x8f4>
 402485c:	24005626 	beq	r4,r16,40249b8 <__divdf3+0x99c>
 4024860:	2829883a 	mov	r20,r5
 4024864:	003f8006 	br	4024668 <__alt_data_end+0xfc024668>
 4024868:	053fffc4 	movi	r20,-1
 402486c:	003f7f06 	br	402466c <__alt_data_end+0xfc02466c>
 4024870:	200f883a 	mov	r7,r4
 4024874:	003f3c06 	br	4024568 <__alt_data_end+0xfc024568>
 4024878:	1011883a 	mov	r8,r2
 402487c:	003f5506 	br	40245d4 <__alt_data_end+0xfc0245d4>
 4024880:	e027883a 	mov	r19,fp
 4024884:	003f7906 	br	402466c <__alt_data_end+0xfc02466c>
 4024888:	010007c4 	movi	r4,31
 402488c:	20c02816 	blt	r4,r3,4024930 <__divdf3+0x914>
 4024890:	00800804 	movi	r2,32
 4024894:	10c5c83a 	sub	r2,r2,r3
 4024898:	888a983a 	sll	r5,r17,r2
 402489c:	a0c8d83a 	srl	r4,r20,r3
 40248a0:	a084983a 	sll	r2,r20,r2
 40248a4:	88e2d83a 	srl	r17,r17,r3
 40248a8:	2906b03a 	or	r3,r5,r4
 40248ac:	1004c03a 	cmpne	r2,r2,zero
 40248b0:	1886b03a 	or	r3,r3,r2
 40248b4:	188001cc 	andi	r2,r3,7
 40248b8:	10000726 	beq	r2,zero,40248d8 <__divdf3+0x8bc>
 40248bc:	188003cc 	andi	r2,r3,15
 40248c0:	01000104 	movi	r4,4
 40248c4:	11000426 	beq	r2,r4,40248d8 <__divdf3+0x8bc>
 40248c8:	1805883a 	mov	r2,r3
 40248cc:	10c00104 	addi	r3,r2,4
 40248d0:	1885803a 	cmpltu	r2,r3,r2
 40248d4:	88a3883a 	add	r17,r17,r2
 40248d8:	8880202c 	andhi	r2,r17,128
 40248dc:	10002926 	beq	r2,zero,4024984 <__divdf3+0x968>
 40248e0:	9900004c 	andi	r4,r19,1
 40248e4:	00800044 	movi	r2,1
 40248e8:	0021883a 	mov	r16,zero
 40248ec:	002b883a 	mov	r21,zero
 40248f0:	003e2906 	br	4024198 <__alt_data_end+0xfc024198>
 40248f4:	d9800017 	ldw	r6,0(sp)
 40248f8:	8c7fff84 	addi	r17,r17,-2
 40248fc:	a9ab883a 	add	r21,r21,r6
 4024900:	a98b803a 	cmpltu	r5,r21,r6
 4024904:	2d8b883a 	add	r5,r5,r22
 4024908:	2a11883a 	add	r8,r5,r8
 402490c:	003ef806 	br	40244f0 <__alt_data_end+0xfc0244f0>
 4024910:	d9800017 	ldw	r6,0(sp)
 4024914:	318f883a 	add	r7,r6,r6
 4024918:	398b803a 	cmpltu	r5,r7,r6
 402491c:	2d8d883a 	add	r6,r5,r22
 4024920:	81a1883a 	add	r16,r16,r6
 4024924:	a17fff84 	addi	r5,r20,-2
 4024928:	d9c00015 	stw	r7,0(sp)
 402492c:	003f8806 	br	4024750 <__alt_data_end+0xfc024750>
 4024930:	013ff844 	movi	r4,-31
 4024934:	2085c83a 	sub	r2,r4,r2
 4024938:	8888d83a 	srl	r4,r17,r2
 402493c:	00800804 	movi	r2,32
 4024940:	18802126 	beq	r3,r2,40249c8 <__divdf3+0x9ac>
 4024944:	04001004 	movi	r16,64
 4024948:	80c7c83a 	sub	r3,r16,r3
 402494c:	88e0983a 	sll	r16,r17,r3
 4024950:	8504b03a 	or	r2,r16,r20
 4024954:	1004c03a 	cmpne	r2,r2,zero
 4024958:	2084b03a 	or	r2,r4,r2
 402495c:	144001cc 	andi	r17,r2,7
 4024960:	88000d1e 	bne	r17,zero,4024998 <__divdf3+0x97c>
 4024964:	0021883a 	mov	r16,zero
 4024968:	102ad0fa 	srli	r21,r2,3
 402496c:	9900004c 	andi	r4,r19,1
 4024970:	0005883a 	mov	r2,zero
 4024974:	ac6ab03a 	or	r21,r21,r17
 4024978:	003e0706 	br	4024198 <__alt_data_end+0xfc024198>
 402497c:	1007883a 	mov	r3,r2
 4024980:	0023883a 	mov	r17,zero
 4024984:	8820927a 	slli	r16,r17,9
 4024988:	1805883a 	mov	r2,r3
 402498c:	8822977a 	slli	r17,r17,29
 4024990:	8020d33a 	srli	r16,r16,12
 4024994:	003ff406 	br	4024968 <__alt_data_end+0xfc024968>
 4024998:	10c003cc 	andi	r3,r2,15
 402499c:	01000104 	movi	r4,4
 40249a0:	193ff626 	beq	r3,r4,402497c <__alt_data_end+0xfc02497c>
 40249a4:	0023883a 	mov	r17,zero
 40249a8:	003fc806 	br	40248cc <__alt_data_end+0xfc0248cc>
 40249ac:	a8bfd136 	bltu	r21,r2,40248f4 <__alt_data_end+0xfc0248f4>
 40249b0:	2823883a 	mov	r17,r5
 40249b4:	003fa606 	br	4024850 <__alt_data_end+0xfc024850>
 40249b8:	d9800017 	ldw	r6,0(sp)
 40249bc:	30bfd436 	bltu	r6,r2,4024910 <__alt_data_end+0xfc024910>
 40249c0:	2829883a 	mov	r20,r5
 40249c4:	003f6406 	br	4024758 <__alt_data_end+0xfc024758>
 40249c8:	0021883a 	mov	r16,zero
 40249cc:	003fe006 	br	4024950 <__alt_data_end+0xfc024950>
 40249d0:	00800434 	movhi	r2,16
 40249d4:	8c000234 	orhi	r16,r17,8
 40249d8:	10bfffc4 	addi	r2,r2,-1
 40249dc:	e009883a 	mov	r4,fp
 40249e0:	80a0703a 	and	r16,r16,r2
 40249e4:	a02b883a 	mov	r21,r20
 40249e8:	003e4e06 	br	4024324 <__alt_data_end+0xfc024324>

040249ec <__eqdf2>:
 40249ec:	2804d53a 	srli	r2,r5,20
 40249f0:	3806d53a 	srli	r3,r7,20
 40249f4:	02000434 	movhi	r8,16
 40249f8:	423fffc4 	addi	r8,r8,-1
 40249fc:	1081ffcc 	andi	r2,r2,2047
 4024a00:	0281ffc4 	movi	r10,2047
 4024a04:	2a12703a 	and	r9,r5,r8
 4024a08:	18c1ffcc 	andi	r3,r3,2047
 4024a0c:	3a10703a 	and	r8,r7,r8
 4024a10:	280ad7fa 	srli	r5,r5,31
 4024a14:	380ed7fa 	srli	r7,r7,31
 4024a18:	12801026 	beq	r2,r10,4024a5c <__eqdf2+0x70>
 4024a1c:	0281ffc4 	movi	r10,2047
 4024a20:	1a800a26 	beq	r3,r10,4024a4c <__eqdf2+0x60>
 4024a24:	10c00226 	beq	r2,r3,4024a30 <__eqdf2+0x44>
 4024a28:	00800044 	movi	r2,1
 4024a2c:	f800283a 	ret
 4024a30:	4a3ffd1e 	bne	r9,r8,4024a28 <__alt_data_end+0xfc024a28>
 4024a34:	21bffc1e 	bne	r4,r6,4024a28 <__alt_data_end+0xfc024a28>
 4024a38:	29c00c26 	beq	r5,r7,4024a6c <__eqdf2+0x80>
 4024a3c:	103ffa1e 	bne	r2,zero,4024a28 <__alt_data_end+0xfc024a28>
 4024a40:	2244b03a 	or	r2,r4,r9
 4024a44:	1004c03a 	cmpne	r2,r2,zero
 4024a48:	f800283a 	ret
 4024a4c:	3214b03a 	or	r10,r6,r8
 4024a50:	503ff426 	beq	r10,zero,4024a24 <__alt_data_end+0xfc024a24>
 4024a54:	00800044 	movi	r2,1
 4024a58:	f800283a 	ret
 4024a5c:	2254b03a 	or	r10,r4,r9
 4024a60:	503fee26 	beq	r10,zero,4024a1c <__alt_data_end+0xfc024a1c>
 4024a64:	00800044 	movi	r2,1
 4024a68:	f800283a 	ret
 4024a6c:	0005883a 	mov	r2,zero
 4024a70:	f800283a 	ret

04024a74 <__gedf2>:
 4024a74:	2804d53a 	srli	r2,r5,20
 4024a78:	3806d53a 	srli	r3,r7,20
 4024a7c:	02000434 	movhi	r8,16
 4024a80:	423fffc4 	addi	r8,r8,-1
 4024a84:	1081ffcc 	andi	r2,r2,2047
 4024a88:	0241ffc4 	movi	r9,2047
 4024a8c:	2a14703a 	and	r10,r5,r8
 4024a90:	18c1ffcc 	andi	r3,r3,2047
 4024a94:	3a10703a 	and	r8,r7,r8
 4024a98:	280ad7fa 	srli	r5,r5,31
 4024a9c:	380ed7fa 	srli	r7,r7,31
 4024aa0:	12401d26 	beq	r2,r9,4024b18 <__gedf2+0xa4>
 4024aa4:	0241ffc4 	movi	r9,2047
 4024aa8:	1a401226 	beq	r3,r9,4024af4 <__gedf2+0x80>
 4024aac:	1000081e 	bne	r2,zero,4024ad0 <__gedf2+0x5c>
 4024ab0:	2296b03a 	or	r11,r4,r10
 4024ab4:	5813003a 	cmpeq	r9,r11,zero
 4024ab8:	1800091e 	bne	r3,zero,4024ae0 <__gedf2+0x6c>
 4024abc:	3218b03a 	or	r12,r6,r8
 4024ac0:	6000071e 	bne	r12,zero,4024ae0 <__gedf2+0x6c>
 4024ac4:	0005883a 	mov	r2,zero
 4024ac8:	5800101e 	bne	r11,zero,4024b0c <__gedf2+0x98>
 4024acc:	f800283a 	ret
 4024ad0:	18000c1e 	bne	r3,zero,4024b04 <__gedf2+0x90>
 4024ad4:	3212b03a 	or	r9,r6,r8
 4024ad8:	48000c26 	beq	r9,zero,4024b0c <__gedf2+0x98>
 4024adc:	0013883a 	mov	r9,zero
 4024ae0:	39c03fcc 	andi	r7,r7,255
 4024ae4:	48000826 	beq	r9,zero,4024b08 <__gedf2+0x94>
 4024ae8:	38000926 	beq	r7,zero,4024b10 <__gedf2+0x9c>
 4024aec:	00800044 	movi	r2,1
 4024af0:	f800283a 	ret
 4024af4:	3212b03a 	or	r9,r6,r8
 4024af8:	483fec26 	beq	r9,zero,4024aac <__alt_data_end+0xfc024aac>
 4024afc:	00bfff84 	movi	r2,-2
 4024b00:	f800283a 	ret
 4024b04:	39c03fcc 	andi	r7,r7,255
 4024b08:	29c00626 	beq	r5,r7,4024b24 <__gedf2+0xb0>
 4024b0c:	283ff726 	beq	r5,zero,4024aec <__alt_data_end+0xfc024aec>
 4024b10:	00bfffc4 	movi	r2,-1
 4024b14:	f800283a 	ret
 4024b18:	2292b03a 	or	r9,r4,r10
 4024b1c:	483fe126 	beq	r9,zero,4024aa4 <__alt_data_end+0xfc024aa4>
 4024b20:	003ff606 	br	4024afc <__alt_data_end+0xfc024afc>
 4024b24:	18bff916 	blt	r3,r2,4024b0c <__alt_data_end+0xfc024b0c>
 4024b28:	10c00316 	blt	r2,r3,4024b38 <__gedf2+0xc4>
 4024b2c:	42bff736 	bltu	r8,r10,4024b0c <__alt_data_end+0xfc024b0c>
 4024b30:	52000326 	beq	r10,r8,4024b40 <__gedf2+0xcc>
 4024b34:	5200042e 	bgeu	r10,r8,4024b48 <__gedf2+0xd4>
 4024b38:	283fec1e 	bne	r5,zero,4024aec <__alt_data_end+0xfc024aec>
 4024b3c:	003ff406 	br	4024b10 <__alt_data_end+0xfc024b10>
 4024b40:	313ff236 	bltu	r6,r4,4024b0c <__alt_data_end+0xfc024b0c>
 4024b44:	21bffc36 	bltu	r4,r6,4024b38 <__alt_data_end+0xfc024b38>
 4024b48:	0005883a 	mov	r2,zero
 4024b4c:	f800283a 	ret

04024b50 <__ledf2>:
 4024b50:	2804d53a 	srli	r2,r5,20
 4024b54:	3810d53a 	srli	r8,r7,20
 4024b58:	00c00434 	movhi	r3,16
 4024b5c:	18ffffc4 	addi	r3,r3,-1
 4024b60:	1081ffcc 	andi	r2,r2,2047
 4024b64:	0241ffc4 	movi	r9,2047
 4024b68:	28d4703a 	and	r10,r5,r3
 4024b6c:	4201ffcc 	andi	r8,r8,2047
 4024b70:	38c6703a 	and	r3,r7,r3
 4024b74:	280ad7fa 	srli	r5,r5,31
 4024b78:	380ed7fa 	srli	r7,r7,31
 4024b7c:	12401f26 	beq	r2,r9,4024bfc <__ledf2+0xac>
 4024b80:	0241ffc4 	movi	r9,2047
 4024b84:	42401426 	beq	r8,r9,4024bd8 <__ledf2+0x88>
 4024b88:	1000091e 	bne	r2,zero,4024bb0 <__ledf2+0x60>
 4024b8c:	2296b03a 	or	r11,r4,r10
 4024b90:	5813003a 	cmpeq	r9,r11,zero
 4024b94:	29403fcc 	andi	r5,r5,255
 4024b98:	40000a1e 	bne	r8,zero,4024bc4 <__ledf2+0x74>
 4024b9c:	30d8b03a 	or	r12,r6,r3
 4024ba0:	6000081e 	bne	r12,zero,4024bc4 <__ledf2+0x74>
 4024ba4:	0005883a 	mov	r2,zero
 4024ba8:	5800111e 	bne	r11,zero,4024bf0 <__ledf2+0xa0>
 4024bac:	f800283a 	ret
 4024bb0:	29403fcc 	andi	r5,r5,255
 4024bb4:	40000c1e 	bne	r8,zero,4024be8 <__ledf2+0x98>
 4024bb8:	30d2b03a 	or	r9,r6,r3
 4024bbc:	48000c26 	beq	r9,zero,4024bf0 <__ledf2+0xa0>
 4024bc0:	0013883a 	mov	r9,zero
 4024bc4:	39c03fcc 	andi	r7,r7,255
 4024bc8:	48000826 	beq	r9,zero,4024bec <__ledf2+0x9c>
 4024bcc:	38001126 	beq	r7,zero,4024c14 <__ledf2+0xc4>
 4024bd0:	00800044 	movi	r2,1
 4024bd4:	f800283a 	ret
 4024bd8:	30d2b03a 	or	r9,r6,r3
 4024bdc:	483fea26 	beq	r9,zero,4024b88 <__alt_data_end+0xfc024b88>
 4024be0:	00800084 	movi	r2,2
 4024be4:	f800283a 	ret
 4024be8:	39c03fcc 	andi	r7,r7,255
 4024bec:	39400726 	beq	r7,r5,4024c0c <__ledf2+0xbc>
 4024bf0:	2800081e 	bne	r5,zero,4024c14 <__ledf2+0xc4>
 4024bf4:	00800044 	movi	r2,1
 4024bf8:	f800283a 	ret
 4024bfc:	2292b03a 	or	r9,r4,r10
 4024c00:	483fdf26 	beq	r9,zero,4024b80 <__alt_data_end+0xfc024b80>
 4024c04:	00800084 	movi	r2,2
 4024c08:	f800283a 	ret
 4024c0c:	4080030e 	bge	r8,r2,4024c1c <__ledf2+0xcc>
 4024c10:	383fef26 	beq	r7,zero,4024bd0 <__alt_data_end+0xfc024bd0>
 4024c14:	00bfffc4 	movi	r2,-1
 4024c18:	f800283a 	ret
 4024c1c:	123feb16 	blt	r2,r8,4024bcc <__alt_data_end+0xfc024bcc>
 4024c20:	1abff336 	bltu	r3,r10,4024bf0 <__alt_data_end+0xfc024bf0>
 4024c24:	50c00326 	beq	r10,r3,4024c34 <__ledf2+0xe4>
 4024c28:	50c0042e 	bgeu	r10,r3,4024c3c <__ledf2+0xec>
 4024c2c:	283fe81e 	bne	r5,zero,4024bd0 <__alt_data_end+0xfc024bd0>
 4024c30:	003ff806 	br	4024c14 <__alt_data_end+0xfc024c14>
 4024c34:	313fee36 	bltu	r6,r4,4024bf0 <__alt_data_end+0xfc024bf0>
 4024c38:	21bffc36 	bltu	r4,r6,4024c2c <__alt_data_end+0xfc024c2c>
 4024c3c:	0005883a 	mov	r2,zero
 4024c40:	f800283a 	ret

04024c44 <__muldf3>:
 4024c44:	deffee04 	addi	sp,sp,-72
 4024c48:	dd000c15 	stw	r20,48(sp)
 4024c4c:	2828d53a 	srli	r20,r5,20
 4024c50:	ddc00f15 	stw	r23,60(sp)
 4024c54:	282ed7fa 	srli	r23,r5,31
 4024c58:	dc000815 	stw	r16,32(sp)
 4024c5c:	04000434 	movhi	r16,16
 4024c60:	dcc00b15 	stw	r19,44(sp)
 4024c64:	843fffc4 	addi	r16,r16,-1
 4024c68:	dfc01115 	stw	ra,68(sp)
 4024c6c:	df001015 	stw	fp,64(sp)
 4024c70:	dd800e15 	stw	r22,56(sp)
 4024c74:	dd400d15 	stw	r21,52(sp)
 4024c78:	dc800a15 	stw	r18,40(sp)
 4024c7c:	dc400915 	stw	r17,36(sp)
 4024c80:	a501ffcc 	andi	r20,r20,2047
 4024c84:	2c20703a 	and	r16,r5,r16
 4024c88:	b827883a 	mov	r19,r23
 4024c8c:	ba403fcc 	andi	r9,r23,255
 4024c90:	a0006026 	beq	r20,zero,4024e14 <__muldf3+0x1d0>
 4024c94:	0081ffc4 	movi	r2,2047
 4024c98:	202d883a 	mov	r22,r4
 4024c9c:	a0803626 	beq	r20,r2,4024d78 <__muldf3+0x134>
 4024ca0:	84000434 	orhi	r16,r16,16
 4024ca4:	200ad77a 	srli	r5,r4,29
 4024ca8:	800490fa 	slli	r2,r16,3
 4024cac:	202c90fa 	slli	r22,r4,3
 4024cb0:	a53f0044 	addi	r20,r20,-1023
 4024cb4:	28a0b03a 	or	r16,r5,r2
 4024cb8:	002b883a 	mov	r21,zero
 4024cbc:	000b883a 	mov	r5,zero
 4024cc0:	3804d53a 	srli	r2,r7,20
 4024cc4:	3838d7fa 	srli	fp,r7,31
 4024cc8:	04400434 	movhi	r17,16
 4024ccc:	8c7fffc4 	addi	r17,r17,-1
 4024cd0:	1081ffcc 	andi	r2,r2,2047
 4024cd4:	3025883a 	mov	r18,r6
 4024cd8:	3c62703a 	and	r17,r7,r17
 4024cdc:	e2803fcc 	andi	r10,fp,255
 4024ce0:	10006d26 	beq	r2,zero,4024e98 <__muldf3+0x254>
 4024ce4:	00c1ffc4 	movi	r3,2047
 4024ce8:	10c06526 	beq	r2,r3,4024e80 <__muldf3+0x23c>
 4024cec:	8c400434 	orhi	r17,r17,16
 4024cf0:	300ed77a 	srli	r7,r6,29
 4024cf4:	880690fa 	slli	r3,r17,3
 4024cf8:	302490fa 	slli	r18,r6,3
 4024cfc:	10bf0044 	addi	r2,r2,-1023
 4024d00:	38e2b03a 	or	r17,r7,r3
 4024d04:	000f883a 	mov	r7,zero
 4024d08:	a087883a 	add	r3,r20,r2
 4024d0c:	010003c4 	movi	r4,15
 4024d10:	3d44b03a 	or	r2,r7,r21
 4024d14:	e5ccf03a 	xor	r6,fp,r23
 4024d18:	1a000044 	addi	r8,r3,1
 4024d1c:	20809b36 	bltu	r4,r2,4024f8c <__muldf3+0x348>
 4024d20:	100490ba 	slli	r2,r2,2
 4024d24:	010100b4 	movhi	r4,1026
 4024d28:	21134e04 	addi	r4,r4,19768
 4024d2c:	1105883a 	add	r2,r2,r4
 4024d30:	10800017 	ldw	r2,0(r2)
 4024d34:	1000683a 	jmp	r2
 4024d38:	04024f8c 	andi	r16,zero,2366
 4024d3c:	04024d98 	cmpnei	r16,zero,2358
 4024d40:	04024d98 	cmpnei	r16,zero,2358
 4024d44:	04024d94 	movui	r16,2358
 4024d48:	04024f68 	cmpgeui	r16,zero,2365
 4024d4c:	04024f68 	cmpgeui	r16,zero,2365
 4024d50:	04024f50 	cmplti	r16,zero,2365
 4024d54:	04024d94 	movui	r16,2358
 4024d58:	04024f68 	cmpgeui	r16,zero,2365
 4024d5c:	04024f50 	cmplti	r16,zero,2365
 4024d60:	04024f68 	cmpgeui	r16,zero,2365
 4024d64:	04024d94 	movui	r16,2358
 4024d68:	04024f78 	rdprs	r16,zero,2365
 4024d6c:	04024f78 	rdprs	r16,zero,2365
 4024d70:	04024f78 	rdprs	r16,zero,2365
 4024d74:	040252d8 	cmpnei	r16,zero,2379
 4024d78:	2404b03a 	or	r2,r4,r16
 4024d7c:	1000711e 	bne	r2,zero,4024f44 <__muldf3+0x300>
 4024d80:	05400204 	movi	r21,8
 4024d84:	0021883a 	mov	r16,zero
 4024d88:	002d883a 	mov	r22,zero
 4024d8c:	01400084 	movi	r5,2
 4024d90:	003fcb06 	br	4024cc0 <__alt_data_end+0xfc024cc0>
 4024d94:	500d883a 	mov	r6,r10
 4024d98:	00800084 	movi	r2,2
 4024d9c:	38805926 	beq	r7,r2,4024f04 <__muldf3+0x2c0>
 4024da0:	008000c4 	movi	r2,3
 4024da4:	3881bb26 	beq	r7,r2,4025494 <__muldf3+0x850>
 4024da8:	00800044 	movi	r2,1
 4024dac:	3881961e 	bne	r7,r2,4025408 <__muldf3+0x7c4>
 4024db0:	3027883a 	mov	r19,r6
 4024db4:	0005883a 	mov	r2,zero
 4024db8:	0021883a 	mov	r16,zero
 4024dbc:	002d883a 	mov	r22,zero
 4024dc0:	1004953a 	slli	r2,r2,20
 4024dc4:	98c03fcc 	andi	r3,r19,255
 4024dc8:	04400434 	movhi	r17,16
 4024dcc:	8c7fffc4 	addi	r17,r17,-1
 4024dd0:	180697fa 	slli	r3,r3,31
 4024dd4:	8460703a 	and	r16,r16,r17
 4024dd8:	80a0b03a 	or	r16,r16,r2
 4024ddc:	80c6b03a 	or	r3,r16,r3
 4024de0:	b005883a 	mov	r2,r22
 4024de4:	dfc01117 	ldw	ra,68(sp)
 4024de8:	df001017 	ldw	fp,64(sp)
 4024dec:	ddc00f17 	ldw	r23,60(sp)
 4024df0:	dd800e17 	ldw	r22,56(sp)
 4024df4:	dd400d17 	ldw	r21,52(sp)
 4024df8:	dd000c17 	ldw	r20,48(sp)
 4024dfc:	dcc00b17 	ldw	r19,44(sp)
 4024e00:	dc800a17 	ldw	r18,40(sp)
 4024e04:	dc400917 	ldw	r17,36(sp)
 4024e08:	dc000817 	ldw	r16,32(sp)
 4024e0c:	dec01204 	addi	sp,sp,72
 4024e10:	f800283a 	ret
 4024e14:	2404b03a 	or	r2,r4,r16
 4024e18:	202b883a 	mov	r21,r4
 4024e1c:	10004426 	beq	r2,zero,4024f30 <__muldf3+0x2ec>
 4024e20:	80015126 	beq	r16,zero,4025368 <__muldf3+0x724>
 4024e24:	8009883a 	mov	r4,r16
 4024e28:	d9800715 	stw	r6,28(sp)
 4024e2c:	d9c00215 	stw	r7,8(sp)
 4024e30:	da400415 	stw	r9,16(sp)
 4024e34:	4025fb00 	call	4025fb0 <__clzsi2>
 4024e38:	d9800717 	ldw	r6,28(sp)
 4024e3c:	d9c00217 	ldw	r7,8(sp)
 4024e40:	da400417 	ldw	r9,16(sp)
 4024e44:	113ffd44 	addi	r4,r2,-11
 4024e48:	00c00704 	movi	r3,28
 4024e4c:	19014216 	blt	r3,r4,4025358 <__muldf3+0x714>
 4024e50:	00c00744 	movi	r3,29
 4024e54:	15bffe04 	addi	r22,r2,-8
 4024e58:	1907c83a 	sub	r3,r3,r4
 4024e5c:	85a0983a 	sll	r16,r16,r22
 4024e60:	a8c6d83a 	srl	r3,r21,r3
 4024e64:	adac983a 	sll	r22,r21,r22
 4024e68:	1c20b03a 	or	r16,r3,r16
 4024e6c:	1080fcc4 	addi	r2,r2,1011
 4024e70:	00a9c83a 	sub	r20,zero,r2
 4024e74:	002b883a 	mov	r21,zero
 4024e78:	000b883a 	mov	r5,zero
 4024e7c:	003f9006 	br	4024cc0 <__alt_data_end+0xfc024cc0>
 4024e80:	3446b03a 	or	r3,r6,r17
 4024e84:	1800281e 	bne	r3,zero,4024f28 <__muldf3+0x2e4>
 4024e88:	0023883a 	mov	r17,zero
 4024e8c:	0025883a 	mov	r18,zero
 4024e90:	01c00084 	movi	r7,2
 4024e94:	003f9c06 	br	4024d08 <__alt_data_end+0xfc024d08>
 4024e98:	3446b03a 	or	r3,r6,r17
 4024e9c:	18001e26 	beq	r3,zero,4024f18 <__muldf3+0x2d4>
 4024ea0:	88012126 	beq	r17,zero,4025328 <__muldf3+0x6e4>
 4024ea4:	8809883a 	mov	r4,r17
 4024ea8:	d9400215 	stw	r5,8(sp)
 4024eac:	d9800715 	stw	r6,28(sp)
 4024eb0:	da400415 	stw	r9,16(sp)
 4024eb4:	da800315 	stw	r10,12(sp)
 4024eb8:	4025fb00 	call	4025fb0 <__clzsi2>
 4024ebc:	d9400217 	ldw	r5,8(sp)
 4024ec0:	d9800717 	ldw	r6,28(sp)
 4024ec4:	da400417 	ldw	r9,16(sp)
 4024ec8:	da800317 	ldw	r10,12(sp)
 4024ecc:	113ffd44 	addi	r4,r2,-11
 4024ed0:	00c00704 	movi	r3,28
 4024ed4:	19011016 	blt	r3,r4,4025318 <__muldf3+0x6d4>
 4024ed8:	00c00744 	movi	r3,29
 4024edc:	14bffe04 	addi	r18,r2,-8
 4024ee0:	1907c83a 	sub	r3,r3,r4
 4024ee4:	8ca2983a 	sll	r17,r17,r18
 4024ee8:	30c6d83a 	srl	r3,r6,r3
 4024eec:	34a4983a 	sll	r18,r6,r18
 4024ef0:	1c62b03a 	or	r17,r3,r17
 4024ef4:	1080fcc4 	addi	r2,r2,1011
 4024ef8:	0085c83a 	sub	r2,zero,r2
 4024efc:	000f883a 	mov	r7,zero
 4024f00:	003f8106 	br	4024d08 <__alt_data_end+0xfc024d08>
 4024f04:	3027883a 	mov	r19,r6
 4024f08:	0081ffc4 	movi	r2,2047
 4024f0c:	0021883a 	mov	r16,zero
 4024f10:	002d883a 	mov	r22,zero
 4024f14:	003faa06 	br	4024dc0 <__alt_data_end+0xfc024dc0>
 4024f18:	0023883a 	mov	r17,zero
 4024f1c:	0025883a 	mov	r18,zero
 4024f20:	01c00044 	movi	r7,1
 4024f24:	003f7806 	br	4024d08 <__alt_data_end+0xfc024d08>
 4024f28:	01c000c4 	movi	r7,3
 4024f2c:	003f7606 	br	4024d08 <__alt_data_end+0xfc024d08>
 4024f30:	05400104 	movi	r21,4
 4024f34:	0021883a 	mov	r16,zero
 4024f38:	002d883a 	mov	r22,zero
 4024f3c:	01400044 	movi	r5,1
 4024f40:	003f5f06 	br	4024cc0 <__alt_data_end+0xfc024cc0>
 4024f44:	05400304 	movi	r21,12
 4024f48:	014000c4 	movi	r5,3
 4024f4c:	003f5c06 	br	4024cc0 <__alt_data_end+0xfc024cc0>
 4024f50:	04000434 	movhi	r16,16
 4024f54:	0027883a 	mov	r19,zero
 4024f58:	843fffc4 	addi	r16,r16,-1
 4024f5c:	05bfffc4 	movi	r22,-1
 4024f60:	0081ffc4 	movi	r2,2047
 4024f64:	003f9606 	br	4024dc0 <__alt_data_end+0xfc024dc0>
 4024f68:	8023883a 	mov	r17,r16
 4024f6c:	b025883a 	mov	r18,r22
 4024f70:	280f883a 	mov	r7,r5
 4024f74:	003f8806 	br	4024d98 <__alt_data_end+0xfc024d98>
 4024f78:	8023883a 	mov	r17,r16
 4024f7c:	b025883a 	mov	r18,r22
 4024f80:	480d883a 	mov	r6,r9
 4024f84:	280f883a 	mov	r7,r5
 4024f88:	003f8306 	br	4024d98 <__alt_data_end+0xfc024d98>
 4024f8c:	b026d43a 	srli	r19,r22,16
 4024f90:	902ed43a 	srli	r23,r18,16
 4024f94:	b5bfffcc 	andi	r22,r22,65535
 4024f98:	94bfffcc 	andi	r18,r18,65535
 4024f9c:	b00b883a 	mov	r5,r22
 4024fa0:	9009883a 	mov	r4,r18
 4024fa4:	d8c00515 	stw	r3,20(sp)
 4024fa8:	d9800715 	stw	r6,28(sp)
 4024fac:	da000615 	stw	r8,24(sp)
 4024fb0:	40191000 	call	4019100 <__mulsi3>
 4024fb4:	980b883a 	mov	r5,r19
 4024fb8:	9009883a 	mov	r4,r18
 4024fbc:	1029883a 	mov	r20,r2
 4024fc0:	40191000 	call	4019100 <__mulsi3>
 4024fc4:	b80b883a 	mov	r5,r23
 4024fc8:	9809883a 	mov	r4,r19
 4024fcc:	102b883a 	mov	r21,r2
 4024fd0:	40191000 	call	4019100 <__mulsi3>
 4024fd4:	b809883a 	mov	r4,r23
 4024fd8:	b00b883a 	mov	r5,r22
 4024fdc:	1039883a 	mov	fp,r2
 4024fe0:	40191000 	call	4019100 <__mulsi3>
 4024fe4:	a008d43a 	srli	r4,r20,16
 4024fe8:	1545883a 	add	r2,r2,r21
 4024fec:	d8c00517 	ldw	r3,20(sp)
 4024ff0:	2085883a 	add	r2,r4,r2
 4024ff4:	d9800717 	ldw	r6,28(sp)
 4024ff8:	da000617 	ldw	r8,24(sp)
 4024ffc:	1540022e 	bgeu	r2,r21,4025008 <__muldf3+0x3c4>
 4025000:	01000074 	movhi	r4,1
 4025004:	e139883a 	add	fp,fp,r4
 4025008:	100e943a 	slli	r7,r2,16
 402500c:	1004d43a 	srli	r2,r2,16
 4025010:	882ad43a 	srli	r21,r17,16
 4025014:	a53fffcc 	andi	r20,r20,65535
 4025018:	8c7fffcc 	andi	r17,r17,65535
 402501c:	3d29883a 	add	r20,r7,r20
 4025020:	b00b883a 	mov	r5,r22
 4025024:	8809883a 	mov	r4,r17
 4025028:	d8c00515 	stw	r3,20(sp)
 402502c:	d9800715 	stw	r6,28(sp)
 4025030:	da000615 	stw	r8,24(sp)
 4025034:	dd000115 	stw	r20,4(sp)
 4025038:	d8800015 	stw	r2,0(sp)
 402503c:	40191000 	call	4019100 <__mulsi3>
 4025040:	980b883a 	mov	r5,r19
 4025044:	8809883a 	mov	r4,r17
 4025048:	d8800215 	stw	r2,8(sp)
 402504c:	40191000 	call	4019100 <__mulsi3>
 4025050:	9809883a 	mov	r4,r19
 4025054:	a80b883a 	mov	r5,r21
 4025058:	1029883a 	mov	r20,r2
 402505c:	40191000 	call	4019100 <__mulsi3>
 4025060:	b00b883a 	mov	r5,r22
 4025064:	a809883a 	mov	r4,r21
 4025068:	d8800415 	stw	r2,16(sp)
 402506c:	40191000 	call	4019100 <__mulsi3>
 4025070:	d9c00217 	ldw	r7,8(sp)
 4025074:	1505883a 	add	r2,r2,r20
 4025078:	d8c00517 	ldw	r3,20(sp)
 402507c:	3826d43a 	srli	r19,r7,16
 4025080:	d9800717 	ldw	r6,28(sp)
 4025084:	da000617 	ldw	r8,24(sp)
 4025088:	9885883a 	add	r2,r19,r2
 402508c:	da400417 	ldw	r9,16(sp)
 4025090:	1500022e 	bgeu	r2,r20,402509c <__muldf3+0x458>
 4025094:	01000074 	movhi	r4,1
 4025098:	4913883a 	add	r9,r9,r4
 402509c:	1028d43a 	srli	r20,r2,16
 40250a0:	1004943a 	slli	r2,r2,16
 40250a4:	802cd43a 	srli	r22,r16,16
 40250a8:	843fffcc 	andi	r16,r16,65535
 40250ac:	3cffffcc 	andi	r19,r7,65535
 40250b0:	9009883a 	mov	r4,r18
 40250b4:	800b883a 	mov	r5,r16
 40250b8:	a269883a 	add	r20,r20,r9
 40250bc:	d8c00515 	stw	r3,20(sp)
 40250c0:	d9800715 	stw	r6,28(sp)
 40250c4:	da000615 	stw	r8,24(sp)
 40250c8:	14e7883a 	add	r19,r2,r19
 40250cc:	40191000 	call	4019100 <__mulsi3>
 40250d0:	9009883a 	mov	r4,r18
 40250d4:	b00b883a 	mov	r5,r22
 40250d8:	d8800315 	stw	r2,12(sp)
 40250dc:	40191000 	call	4019100 <__mulsi3>
 40250e0:	b809883a 	mov	r4,r23
 40250e4:	b00b883a 	mov	r5,r22
 40250e8:	d8800215 	stw	r2,8(sp)
 40250ec:	40191000 	call	4019100 <__mulsi3>
 40250f0:	b80b883a 	mov	r5,r23
 40250f4:	8009883a 	mov	r4,r16
 40250f8:	d8800415 	stw	r2,16(sp)
 40250fc:	40191000 	call	4019100 <__mulsi3>
 4025100:	da800317 	ldw	r10,12(sp)
 4025104:	d9c00217 	ldw	r7,8(sp)
 4025108:	d9000017 	ldw	r4,0(sp)
 402510c:	502ed43a 	srli	r23,r10,16
 4025110:	11c5883a 	add	r2,r2,r7
 4025114:	24e5883a 	add	r18,r4,r19
 4025118:	b885883a 	add	r2,r23,r2
 402511c:	d8c00517 	ldw	r3,20(sp)
 4025120:	d9800717 	ldw	r6,28(sp)
 4025124:	da000617 	ldw	r8,24(sp)
 4025128:	da400417 	ldw	r9,16(sp)
 402512c:	11c0022e 	bgeu	r2,r7,4025138 <__muldf3+0x4f4>
 4025130:	01000074 	movhi	r4,1
 4025134:	4913883a 	add	r9,r9,r4
 4025138:	100ed43a 	srli	r7,r2,16
 402513c:	1004943a 	slli	r2,r2,16
 4025140:	55ffffcc 	andi	r23,r10,65535
 4025144:	3a53883a 	add	r9,r7,r9
 4025148:	8809883a 	mov	r4,r17
 402514c:	800b883a 	mov	r5,r16
 4025150:	d8c00515 	stw	r3,20(sp)
 4025154:	d9800715 	stw	r6,28(sp)
 4025158:	da000615 	stw	r8,24(sp)
 402515c:	da400415 	stw	r9,16(sp)
 4025160:	15ef883a 	add	r23,r2,r23
 4025164:	40191000 	call	4019100 <__mulsi3>
 4025168:	8809883a 	mov	r4,r17
 402516c:	b00b883a 	mov	r5,r22
 4025170:	d8800215 	stw	r2,8(sp)
 4025174:	40191000 	call	4019100 <__mulsi3>
 4025178:	b00b883a 	mov	r5,r22
 402517c:	a809883a 	mov	r4,r21
 4025180:	d8800315 	stw	r2,12(sp)
 4025184:	40191000 	call	4019100 <__mulsi3>
 4025188:	8009883a 	mov	r4,r16
 402518c:	a80b883a 	mov	r5,r21
 4025190:	1023883a 	mov	r17,r2
 4025194:	40191000 	call	4019100 <__mulsi3>
 4025198:	d9c00217 	ldw	r7,8(sp)
 402519c:	da800317 	ldw	r10,12(sp)
 40251a0:	d8c00517 	ldw	r3,20(sp)
 40251a4:	3808d43a 	srli	r4,r7,16
 40251a8:	1285883a 	add	r2,r2,r10
 40251ac:	d9800717 	ldw	r6,28(sp)
 40251b0:	2085883a 	add	r2,r4,r2
 40251b4:	da000617 	ldw	r8,24(sp)
 40251b8:	da400417 	ldw	r9,16(sp)
 40251bc:	1280022e 	bgeu	r2,r10,40251c8 <__muldf3+0x584>
 40251c0:	01000074 	movhi	r4,1
 40251c4:	8923883a 	add	r17,r17,r4
 40251c8:	1008943a 	slli	r4,r2,16
 40251cc:	39ffffcc 	andi	r7,r7,65535
 40251d0:	e4b9883a 	add	fp,fp,r18
 40251d4:	21cf883a 	add	r7,r4,r7
 40251d8:	e4e7803a 	cmpltu	r19,fp,r19
 40251dc:	3d0f883a 	add	r7,r7,r20
 40251e0:	bf39883a 	add	fp,r23,fp
 40251e4:	99c9883a 	add	r4,r19,r7
 40251e8:	e5ef803a 	cmpltu	r23,fp,r23
 40251ec:	490b883a 	add	r5,r9,r4
 40251f0:	1004d43a 	srli	r2,r2,16
 40251f4:	b965883a 	add	r18,r23,r5
 40251f8:	24c9803a 	cmpltu	r4,r4,r19
 40251fc:	3d29803a 	cmpltu	r20,r7,r20
 4025200:	a128b03a 	or	r20,r20,r4
 4025204:	95ef803a 	cmpltu	r23,r18,r23
 4025208:	2a53803a 	cmpltu	r9,r5,r9
 402520c:	a0a9883a 	add	r20,r20,r2
 4025210:	4deeb03a 	or	r23,r9,r23
 4025214:	a5ef883a 	add	r23,r20,r23
 4025218:	bc63883a 	add	r17,r23,r17
 402521c:	e004927a 	slli	r2,fp,9
 4025220:	d9000117 	ldw	r4,4(sp)
 4025224:	882e927a 	slli	r23,r17,9
 4025228:	9022d5fa 	srli	r17,r18,23
 402522c:	e038d5fa 	srli	fp,fp,23
 4025230:	1104b03a 	or	r2,r2,r4
 4025234:	9024927a 	slli	r18,r18,9
 4025238:	1004c03a 	cmpne	r2,r2,zero
 402523c:	bc62b03a 	or	r17,r23,r17
 4025240:	1738b03a 	or	fp,r2,fp
 4025244:	8880402c 	andhi	r2,r17,256
 4025248:	e4a4b03a 	or	r18,fp,r18
 402524c:	10000726 	beq	r2,zero,402526c <__muldf3+0x628>
 4025250:	9006d07a 	srli	r3,r18,1
 4025254:	880497fa 	slli	r2,r17,31
 4025258:	9480004c 	andi	r18,r18,1
 402525c:	8822d07a 	srli	r17,r17,1
 4025260:	1ca4b03a 	or	r18,r3,r18
 4025264:	14a4b03a 	or	r18,r2,r18
 4025268:	4007883a 	mov	r3,r8
 402526c:	1880ffc4 	addi	r2,r3,1023
 4025270:	0080460e 	bge	zero,r2,402538c <__muldf3+0x748>
 4025274:	910001cc 	andi	r4,r18,7
 4025278:	20000726 	beq	r4,zero,4025298 <__muldf3+0x654>
 402527c:	910003cc 	andi	r4,r18,15
 4025280:	01400104 	movi	r5,4
 4025284:	21400426 	beq	r4,r5,4025298 <__muldf3+0x654>
 4025288:	9149883a 	add	r4,r18,r5
 402528c:	24a5803a 	cmpltu	r18,r4,r18
 4025290:	8ca3883a 	add	r17,r17,r18
 4025294:	2025883a 	mov	r18,r4
 4025298:	8900402c 	andhi	r4,r17,256
 402529c:	20000426 	beq	r4,zero,40252b0 <__muldf3+0x66c>
 40252a0:	18810004 	addi	r2,r3,1024
 40252a4:	00ffc034 	movhi	r3,65280
 40252a8:	18ffffc4 	addi	r3,r3,-1
 40252ac:	88e2703a 	and	r17,r17,r3
 40252b0:	00c1ff84 	movi	r3,2046
 40252b4:	18bf1316 	blt	r3,r2,4024f04 <__alt_data_end+0xfc024f04>
 40252b8:	882c977a 	slli	r22,r17,29
 40252bc:	9024d0fa 	srli	r18,r18,3
 40252c0:	8822927a 	slli	r17,r17,9
 40252c4:	1081ffcc 	andi	r2,r2,2047
 40252c8:	b4acb03a 	or	r22,r22,r18
 40252cc:	8820d33a 	srli	r16,r17,12
 40252d0:	3027883a 	mov	r19,r6
 40252d4:	003eba06 	br	4024dc0 <__alt_data_end+0xfc024dc0>
 40252d8:	8080022c 	andhi	r2,r16,8
 40252dc:	10000926 	beq	r2,zero,4025304 <__muldf3+0x6c0>
 40252e0:	8880022c 	andhi	r2,r17,8
 40252e4:	1000071e 	bne	r2,zero,4025304 <__muldf3+0x6c0>
 40252e8:	00800434 	movhi	r2,16
 40252ec:	8c000234 	orhi	r16,r17,8
 40252f0:	10bfffc4 	addi	r2,r2,-1
 40252f4:	e027883a 	mov	r19,fp
 40252f8:	80a0703a 	and	r16,r16,r2
 40252fc:	902d883a 	mov	r22,r18
 4025300:	003f1706 	br	4024f60 <__alt_data_end+0xfc024f60>
 4025304:	00800434 	movhi	r2,16
 4025308:	84000234 	orhi	r16,r16,8
 402530c:	10bfffc4 	addi	r2,r2,-1
 4025310:	80a0703a 	and	r16,r16,r2
 4025314:	003f1206 	br	4024f60 <__alt_data_end+0xfc024f60>
 4025318:	147ff604 	addi	r17,r2,-40
 402531c:	3462983a 	sll	r17,r6,r17
 4025320:	0025883a 	mov	r18,zero
 4025324:	003ef306 	br	4024ef4 <__alt_data_end+0xfc024ef4>
 4025328:	3009883a 	mov	r4,r6
 402532c:	d9400215 	stw	r5,8(sp)
 4025330:	d9800715 	stw	r6,28(sp)
 4025334:	da400415 	stw	r9,16(sp)
 4025338:	da800315 	stw	r10,12(sp)
 402533c:	4025fb00 	call	4025fb0 <__clzsi2>
 4025340:	10800804 	addi	r2,r2,32
 4025344:	da800317 	ldw	r10,12(sp)
 4025348:	da400417 	ldw	r9,16(sp)
 402534c:	d9800717 	ldw	r6,28(sp)
 4025350:	d9400217 	ldw	r5,8(sp)
 4025354:	003edd06 	br	4024ecc <__alt_data_end+0xfc024ecc>
 4025358:	143ff604 	addi	r16,r2,-40
 402535c:	ac20983a 	sll	r16,r21,r16
 4025360:	002d883a 	mov	r22,zero
 4025364:	003ec106 	br	4024e6c <__alt_data_end+0xfc024e6c>
 4025368:	d9800715 	stw	r6,28(sp)
 402536c:	d9c00215 	stw	r7,8(sp)
 4025370:	da400415 	stw	r9,16(sp)
 4025374:	4025fb00 	call	4025fb0 <__clzsi2>
 4025378:	10800804 	addi	r2,r2,32
 402537c:	da400417 	ldw	r9,16(sp)
 4025380:	d9c00217 	ldw	r7,8(sp)
 4025384:	d9800717 	ldw	r6,28(sp)
 4025388:	003eae06 	br	4024e44 <__alt_data_end+0xfc024e44>
 402538c:	00c00044 	movi	r3,1
 4025390:	1887c83a 	sub	r3,r3,r2
 4025394:	01000e04 	movi	r4,56
 4025398:	20fe8516 	blt	r4,r3,4024db0 <__alt_data_end+0xfc024db0>
 402539c:	010007c4 	movi	r4,31
 40253a0:	20c01b16 	blt	r4,r3,4025410 <__muldf3+0x7cc>
 40253a4:	00800804 	movi	r2,32
 40253a8:	10c5c83a 	sub	r2,r2,r3
 40253ac:	888a983a 	sll	r5,r17,r2
 40253b0:	90c8d83a 	srl	r4,r18,r3
 40253b4:	9084983a 	sll	r2,r18,r2
 40253b8:	88e2d83a 	srl	r17,r17,r3
 40253bc:	2906b03a 	or	r3,r5,r4
 40253c0:	1004c03a 	cmpne	r2,r2,zero
 40253c4:	1886b03a 	or	r3,r3,r2
 40253c8:	188001cc 	andi	r2,r3,7
 40253cc:	10000726 	beq	r2,zero,40253ec <__muldf3+0x7a8>
 40253d0:	188003cc 	andi	r2,r3,15
 40253d4:	01000104 	movi	r4,4
 40253d8:	11000426 	beq	r2,r4,40253ec <__muldf3+0x7a8>
 40253dc:	1805883a 	mov	r2,r3
 40253e0:	10c00104 	addi	r3,r2,4
 40253e4:	1885803a 	cmpltu	r2,r3,r2
 40253e8:	88a3883a 	add	r17,r17,r2
 40253ec:	8880202c 	andhi	r2,r17,128
 40253f0:	10001c26 	beq	r2,zero,4025464 <__muldf3+0x820>
 40253f4:	3027883a 	mov	r19,r6
 40253f8:	00800044 	movi	r2,1
 40253fc:	0021883a 	mov	r16,zero
 4025400:	002d883a 	mov	r22,zero
 4025404:	003e6e06 	br	4024dc0 <__alt_data_end+0xfc024dc0>
 4025408:	4007883a 	mov	r3,r8
 402540c:	003f9706 	br	402526c <__alt_data_end+0xfc02526c>
 4025410:	017ff844 	movi	r5,-31
 4025414:	2885c83a 	sub	r2,r5,r2
 4025418:	888ad83a 	srl	r5,r17,r2
 402541c:	00800804 	movi	r2,32
 4025420:	18801a26 	beq	r3,r2,402548c <__muldf3+0x848>
 4025424:	01001004 	movi	r4,64
 4025428:	20c7c83a 	sub	r3,r4,r3
 402542c:	88e2983a 	sll	r17,r17,r3
 4025430:	8ca4b03a 	or	r18,r17,r18
 4025434:	9004c03a 	cmpne	r2,r18,zero
 4025438:	2884b03a 	or	r2,r5,r2
 402543c:	144001cc 	andi	r17,r2,7
 4025440:	88000d1e 	bne	r17,zero,4025478 <__muldf3+0x834>
 4025444:	0021883a 	mov	r16,zero
 4025448:	102cd0fa 	srli	r22,r2,3
 402544c:	3027883a 	mov	r19,r6
 4025450:	0005883a 	mov	r2,zero
 4025454:	b46cb03a 	or	r22,r22,r17
 4025458:	003e5906 	br	4024dc0 <__alt_data_end+0xfc024dc0>
 402545c:	1007883a 	mov	r3,r2
 4025460:	0023883a 	mov	r17,zero
 4025464:	8820927a 	slli	r16,r17,9
 4025468:	1805883a 	mov	r2,r3
 402546c:	8822977a 	slli	r17,r17,29
 4025470:	8020d33a 	srli	r16,r16,12
 4025474:	003ff406 	br	4025448 <__alt_data_end+0xfc025448>
 4025478:	10c003cc 	andi	r3,r2,15
 402547c:	01000104 	movi	r4,4
 4025480:	193ff626 	beq	r3,r4,402545c <__alt_data_end+0xfc02545c>
 4025484:	0023883a 	mov	r17,zero
 4025488:	003fd506 	br	40253e0 <__alt_data_end+0xfc0253e0>
 402548c:	0023883a 	mov	r17,zero
 4025490:	003fe706 	br	4025430 <__alt_data_end+0xfc025430>
 4025494:	00800434 	movhi	r2,16
 4025498:	8c000234 	orhi	r16,r17,8
 402549c:	10bfffc4 	addi	r2,r2,-1
 40254a0:	3027883a 	mov	r19,r6
 40254a4:	80a0703a 	and	r16,r16,r2
 40254a8:	902d883a 	mov	r22,r18
 40254ac:	003eac06 	br	4024f60 <__alt_data_end+0xfc024f60>

040254b0 <__subdf3>:
 40254b0:	02000434 	movhi	r8,16
 40254b4:	423fffc4 	addi	r8,r8,-1
 40254b8:	defffb04 	addi	sp,sp,-20
 40254bc:	2a14703a 	and	r10,r5,r8
 40254c0:	3812d53a 	srli	r9,r7,20
 40254c4:	3a10703a 	and	r8,r7,r8
 40254c8:	2006d77a 	srli	r3,r4,29
 40254cc:	3004d77a 	srli	r2,r6,29
 40254d0:	dc000015 	stw	r16,0(sp)
 40254d4:	501490fa 	slli	r10,r10,3
 40254d8:	2820d53a 	srli	r16,r5,20
 40254dc:	401090fa 	slli	r8,r8,3
 40254e0:	dc800215 	stw	r18,8(sp)
 40254e4:	dc400115 	stw	r17,4(sp)
 40254e8:	dfc00415 	stw	ra,16(sp)
 40254ec:	202290fa 	slli	r17,r4,3
 40254f0:	dcc00315 	stw	r19,12(sp)
 40254f4:	4a41ffcc 	andi	r9,r9,2047
 40254f8:	0101ffc4 	movi	r4,2047
 40254fc:	2824d7fa 	srli	r18,r5,31
 4025500:	8401ffcc 	andi	r16,r16,2047
 4025504:	50c6b03a 	or	r3,r10,r3
 4025508:	380ed7fa 	srli	r7,r7,31
 402550c:	408ab03a 	or	r5,r8,r2
 4025510:	300c90fa 	slli	r6,r6,3
 4025514:	49009626 	beq	r9,r4,4025770 <__subdf3+0x2c0>
 4025518:	39c0005c 	xori	r7,r7,1
 402551c:	8245c83a 	sub	r2,r16,r9
 4025520:	3c807426 	beq	r7,r18,40256f4 <__subdf3+0x244>
 4025524:	0080af0e 	bge	zero,r2,40257e4 <__subdf3+0x334>
 4025528:	48002a1e 	bne	r9,zero,40255d4 <__subdf3+0x124>
 402552c:	2988b03a 	or	r4,r5,r6
 4025530:	20009a1e 	bne	r4,zero,402579c <__subdf3+0x2ec>
 4025534:	888001cc 	andi	r2,r17,7
 4025538:	10000726 	beq	r2,zero,4025558 <__subdf3+0xa8>
 402553c:	888003cc 	andi	r2,r17,15
 4025540:	01000104 	movi	r4,4
 4025544:	11000426 	beq	r2,r4,4025558 <__subdf3+0xa8>
 4025548:	890b883a 	add	r5,r17,r4
 402554c:	2c63803a 	cmpltu	r17,r5,r17
 4025550:	1c47883a 	add	r3,r3,r17
 4025554:	2823883a 	mov	r17,r5
 4025558:	1880202c 	andhi	r2,r3,128
 402555c:	10005926 	beq	r2,zero,40256c4 <__subdf3+0x214>
 4025560:	84000044 	addi	r16,r16,1
 4025564:	0081ffc4 	movi	r2,2047
 4025568:	8080be26 	beq	r16,r2,4025864 <__subdf3+0x3b4>
 402556c:	017fe034 	movhi	r5,65408
 4025570:	297fffc4 	addi	r5,r5,-1
 4025574:	1946703a 	and	r3,r3,r5
 4025578:	1804977a 	slli	r2,r3,29
 402557c:	1806927a 	slli	r3,r3,9
 4025580:	8822d0fa 	srli	r17,r17,3
 4025584:	8401ffcc 	andi	r16,r16,2047
 4025588:	180ad33a 	srli	r5,r3,12
 402558c:	9100004c 	andi	r4,r18,1
 4025590:	1444b03a 	or	r2,r2,r17
 4025594:	80c1ffcc 	andi	r3,r16,2047
 4025598:	1820953a 	slli	r16,r3,20
 402559c:	20c03fcc 	andi	r3,r4,255
 40255a0:	180897fa 	slli	r4,r3,31
 40255a4:	00c00434 	movhi	r3,16
 40255a8:	18ffffc4 	addi	r3,r3,-1
 40255ac:	28c6703a 	and	r3,r5,r3
 40255b0:	1c06b03a 	or	r3,r3,r16
 40255b4:	1906b03a 	or	r3,r3,r4
 40255b8:	dfc00417 	ldw	ra,16(sp)
 40255bc:	dcc00317 	ldw	r19,12(sp)
 40255c0:	dc800217 	ldw	r18,8(sp)
 40255c4:	dc400117 	ldw	r17,4(sp)
 40255c8:	dc000017 	ldw	r16,0(sp)
 40255cc:	dec00504 	addi	sp,sp,20
 40255d0:	f800283a 	ret
 40255d4:	0101ffc4 	movi	r4,2047
 40255d8:	813fd626 	beq	r16,r4,4025534 <__alt_data_end+0xfc025534>
 40255dc:	29402034 	orhi	r5,r5,128
 40255e0:	01000e04 	movi	r4,56
 40255e4:	2080a316 	blt	r4,r2,4025874 <__subdf3+0x3c4>
 40255e8:	010007c4 	movi	r4,31
 40255ec:	2080c616 	blt	r4,r2,4025908 <__subdf3+0x458>
 40255f0:	01000804 	movi	r4,32
 40255f4:	2089c83a 	sub	r4,r4,r2
 40255f8:	2910983a 	sll	r8,r5,r4
 40255fc:	308ed83a 	srl	r7,r6,r2
 4025600:	3108983a 	sll	r4,r6,r4
 4025604:	2884d83a 	srl	r2,r5,r2
 4025608:	41ccb03a 	or	r6,r8,r7
 402560c:	2008c03a 	cmpne	r4,r4,zero
 4025610:	310cb03a 	or	r6,r6,r4
 4025614:	898dc83a 	sub	r6,r17,r6
 4025618:	89a3803a 	cmpltu	r17,r17,r6
 402561c:	1887c83a 	sub	r3,r3,r2
 4025620:	1c47c83a 	sub	r3,r3,r17
 4025624:	3023883a 	mov	r17,r6
 4025628:	1880202c 	andhi	r2,r3,128
 402562c:	10002326 	beq	r2,zero,40256bc <__subdf3+0x20c>
 4025630:	04c02034 	movhi	r19,128
 4025634:	9cffffc4 	addi	r19,r19,-1
 4025638:	1ce6703a 	and	r19,r3,r19
 402563c:	98007a26 	beq	r19,zero,4025828 <__subdf3+0x378>
 4025640:	9809883a 	mov	r4,r19
 4025644:	4025fb00 	call	4025fb0 <__clzsi2>
 4025648:	113ffe04 	addi	r4,r2,-8
 402564c:	00c007c4 	movi	r3,31
 4025650:	19007b16 	blt	r3,r4,4025840 <__subdf3+0x390>
 4025654:	00800804 	movi	r2,32
 4025658:	1105c83a 	sub	r2,r2,r4
 402565c:	8884d83a 	srl	r2,r17,r2
 4025660:	9906983a 	sll	r3,r19,r4
 4025664:	8922983a 	sll	r17,r17,r4
 4025668:	10c4b03a 	or	r2,r2,r3
 402566c:	24007816 	blt	r4,r16,4025850 <__subdf3+0x3a0>
 4025670:	2421c83a 	sub	r16,r4,r16
 4025674:	80c00044 	addi	r3,r16,1
 4025678:	010007c4 	movi	r4,31
 402567c:	20c09516 	blt	r4,r3,40258d4 <__subdf3+0x424>
 4025680:	01400804 	movi	r5,32
 4025684:	28cbc83a 	sub	r5,r5,r3
 4025688:	88c8d83a 	srl	r4,r17,r3
 402568c:	8962983a 	sll	r17,r17,r5
 4025690:	114a983a 	sll	r5,r2,r5
 4025694:	10c6d83a 	srl	r3,r2,r3
 4025698:	8804c03a 	cmpne	r2,r17,zero
 402569c:	290ab03a 	or	r5,r5,r4
 40256a0:	28a2b03a 	or	r17,r5,r2
 40256a4:	0021883a 	mov	r16,zero
 40256a8:	003fa206 	br	4025534 <__alt_data_end+0xfc025534>
 40256ac:	2090b03a 	or	r8,r4,r2
 40256b0:	40018e26 	beq	r8,zero,4025cec <__subdf3+0x83c>
 40256b4:	1007883a 	mov	r3,r2
 40256b8:	2023883a 	mov	r17,r4
 40256bc:	888001cc 	andi	r2,r17,7
 40256c0:	103f9e1e 	bne	r2,zero,402553c <__alt_data_end+0xfc02553c>
 40256c4:	1804977a 	slli	r2,r3,29
 40256c8:	8822d0fa 	srli	r17,r17,3
 40256cc:	1810d0fa 	srli	r8,r3,3
 40256d0:	9100004c 	andi	r4,r18,1
 40256d4:	1444b03a 	or	r2,r2,r17
 40256d8:	00c1ffc4 	movi	r3,2047
 40256dc:	80c02826 	beq	r16,r3,4025780 <__subdf3+0x2d0>
 40256e0:	01400434 	movhi	r5,16
 40256e4:	297fffc4 	addi	r5,r5,-1
 40256e8:	80e0703a 	and	r16,r16,r3
 40256ec:	414a703a 	and	r5,r8,r5
 40256f0:	003fa806 	br	4025594 <__alt_data_end+0xfc025594>
 40256f4:	0080630e 	bge	zero,r2,4025884 <__subdf3+0x3d4>
 40256f8:	48003026 	beq	r9,zero,40257bc <__subdf3+0x30c>
 40256fc:	0101ffc4 	movi	r4,2047
 4025700:	813f8c26 	beq	r16,r4,4025534 <__alt_data_end+0xfc025534>
 4025704:	29402034 	orhi	r5,r5,128
 4025708:	01000e04 	movi	r4,56
 402570c:	2080a90e 	bge	r4,r2,40259b4 <__subdf3+0x504>
 4025710:	298cb03a 	or	r6,r5,r6
 4025714:	3012c03a 	cmpne	r9,r6,zero
 4025718:	0005883a 	mov	r2,zero
 402571c:	4c53883a 	add	r9,r9,r17
 4025720:	4c63803a 	cmpltu	r17,r9,r17
 4025724:	10c7883a 	add	r3,r2,r3
 4025728:	88c7883a 	add	r3,r17,r3
 402572c:	4823883a 	mov	r17,r9
 4025730:	1880202c 	andhi	r2,r3,128
 4025734:	1000d026 	beq	r2,zero,4025a78 <__subdf3+0x5c8>
 4025738:	84000044 	addi	r16,r16,1
 402573c:	0081ffc4 	movi	r2,2047
 4025740:	8080fe26 	beq	r16,r2,4025b3c <__subdf3+0x68c>
 4025744:	00bfe034 	movhi	r2,65408
 4025748:	10bfffc4 	addi	r2,r2,-1
 402574c:	1886703a 	and	r3,r3,r2
 4025750:	880ad07a 	srli	r5,r17,1
 4025754:	180497fa 	slli	r2,r3,31
 4025758:	8900004c 	andi	r4,r17,1
 402575c:	2922b03a 	or	r17,r5,r4
 4025760:	1806d07a 	srli	r3,r3,1
 4025764:	1462b03a 	or	r17,r2,r17
 4025768:	3825883a 	mov	r18,r7
 402576c:	003f7106 	br	4025534 <__alt_data_end+0xfc025534>
 4025770:	2984b03a 	or	r2,r5,r6
 4025774:	103f6826 	beq	r2,zero,4025518 <__alt_data_end+0xfc025518>
 4025778:	39c03fcc 	andi	r7,r7,255
 402577c:	003f6706 	br	402551c <__alt_data_end+0xfc02551c>
 4025780:	4086b03a 	or	r3,r8,r2
 4025784:	18015226 	beq	r3,zero,4025cd0 <__subdf3+0x820>
 4025788:	00c00434 	movhi	r3,16
 402578c:	41400234 	orhi	r5,r8,8
 4025790:	18ffffc4 	addi	r3,r3,-1
 4025794:	28ca703a 	and	r5,r5,r3
 4025798:	003f7e06 	br	4025594 <__alt_data_end+0xfc025594>
 402579c:	10bfffc4 	addi	r2,r2,-1
 40257a0:	1000491e 	bne	r2,zero,40258c8 <__subdf3+0x418>
 40257a4:	898fc83a 	sub	r7,r17,r6
 40257a8:	89e3803a 	cmpltu	r17,r17,r7
 40257ac:	1947c83a 	sub	r3,r3,r5
 40257b0:	1c47c83a 	sub	r3,r3,r17
 40257b4:	3823883a 	mov	r17,r7
 40257b8:	003f9b06 	br	4025628 <__alt_data_end+0xfc025628>
 40257bc:	2988b03a 	or	r4,r5,r6
 40257c0:	203f5c26 	beq	r4,zero,4025534 <__alt_data_end+0xfc025534>
 40257c4:	10bfffc4 	addi	r2,r2,-1
 40257c8:	1000931e 	bne	r2,zero,4025a18 <__subdf3+0x568>
 40257cc:	898d883a 	add	r6,r17,r6
 40257d0:	3463803a 	cmpltu	r17,r6,r17
 40257d4:	1947883a 	add	r3,r3,r5
 40257d8:	88c7883a 	add	r3,r17,r3
 40257dc:	3023883a 	mov	r17,r6
 40257e0:	003fd306 	br	4025730 <__alt_data_end+0xfc025730>
 40257e4:	1000541e 	bne	r2,zero,4025938 <__subdf3+0x488>
 40257e8:	80800044 	addi	r2,r16,1
 40257ec:	1081ffcc 	andi	r2,r2,2047
 40257f0:	01000044 	movi	r4,1
 40257f4:	2080a20e 	bge	r4,r2,4025a80 <__subdf3+0x5d0>
 40257f8:	8989c83a 	sub	r4,r17,r6
 40257fc:	8905803a 	cmpltu	r2,r17,r4
 4025800:	1967c83a 	sub	r19,r3,r5
 4025804:	98a7c83a 	sub	r19,r19,r2
 4025808:	9880202c 	andhi	r2,r19,128
 402580c:	10006326 	beq	r2,zero,402599c <__subdf3+0x4ec>
 4025810:	3463c83a 	sub	r17,r6,r17
 4025814:	28c7c83a 	sub	r3,r5,r3
 4025818:	344d803a 	cmpltu	r6,r6,r17
 402581c:	19a7c83a 	sub	r19,r3,r6
 4025820:	3825883a 	mov	r18,r7
 4025824:	983f861e 	bne	r19,zero,4025640 <__alt_data_end+0xfc025640>
 4025828:	8809883a 	mov	r4,r17
 402582c:	4025fb00 	call	4025fb0 <__clzsi2>
 4025830:	10800804 	addi	r2,r2,32
 4025834:	113ffe04 	addi	r4,r2,-8
 4025838:	00c007c4 	movi	r3,31
 402583c:	193f850e 	bge	r3,r4,4025654 <__alt_data_end+0xfc025654>
 4025840:	10bff604 	addi	r2,r2,-40
 4025844:	8884983a 	sll	r2,r17,r2
 4025848:	0023883a 	mov	r17,zero
 402584c:	243f880e 	bge	r4,r16,4025670 <__alt_data_end+0xfc025670>
 4025850:	00ffe034 	movhi	r3,65408
 4025854:	18ffffc4 	addi	r3,r3,-1
 4025858:	8121c83a 	sub	r16,r16,r4
 402585c:	10c6703a 	and	r3,r2,r3
 4025860:	003f3406 	br	4025534 <__alt_data_end+0xfc025534>
 4025864:	9100004c 	andi	r4,r18,1
 4025868:	000b883a 	mov	r5,zero
 402586c:	0005883a 	mov	r2,zero
 4025870:	003f4806 	br	4025594 <__alt_data_end+0xfc025594>
 4025874:	298cb03a 	or	r6,r5,r6
 4025878:	300cc03a 	cmpne	r6,r6,zero
 402587c:	0005883a 	mov	r2,zero
 4025880:	003f6406 	br	4025614 <__alt_data_end+0xfc025614>
 4025884:	10009a1e 	bne	r2,zero,4025af0 <__subdf3+0x640>
 4025888:	82400044 	addi	r9,r16,1
 402588c:	4881ffcc 	andi	r2,r9,2047
 4025890:	02800044 	movi	r10,1
 4025894:	5080670e 	bge	r10,r2,4025a34 <__subdf3+0x584>
 4025898:	0081ffc4 	movi	r2,2047
 402589c:	4880af26 	beq	r9,r2,4025b5c <__subdf3+0x6ac>
 40258a0:	898d883a 	add	r6,r17,r6
 40258a4:	1945883a 	add	r2,r3,r5
 40258a8:	3447803a 	cmpltu	r3,r6,r17
 40258ac:	1887883a 	add	r3,r3,r2
 40258b0:	182297fa 	slli	r17,r3,31
 40258b4:	300cd07a 	srli	r6,r6,1
 40258b8:	1806d07a 	srli	r3,r3,1
 40258bc:	4821883a 	mov	r16,r9
 40258c0:	89a2b03a 	or	r17,r17,r6
 40258c4:	003f1b06 	br	4025534 <__alt_data_end+0xfc025534>
 40258c8:	0101ffc4 	movi	r4,2047
 40258cc:	813f441e 	bne	r16,r4,40255e0 <__alt_data_end+0xfc0255e0>
 40258d0:	003f1806 	br	4025534 <__alt_data_end+0xfc025534>
 40258d4:	843ff844 	addi	r16,r16,-31
 40258d8:	01400804 	movi	r5,32
 40258dc:	1408d83a 	srl	r4,r2,r16
 40258e0:	19405026 	beq	r3,r5,4025a24 <__subdf3+0x574>
 40258e4:	01401004 	movi	r5,64
 40258e8:	28c7c83a 	sub	r3,r5,r3
 40258ec:	10c4983a 	sll	r2,r2,r3
 40258f0:	88a2b03a 	or	r17,r17,r2
 40258f4:	8822c03a 	cmpne	r17,r17,zero
 40258f8:	2462b03a 	or	r17,r4,r17
 40258fc:	0007883a 	mov	r3,zero
 4025900:	0021883a 	mov	r16,zero
 4025904:	003f6d06 	br	40256bc <__alt_data_end+0xfc0256bc>
 4025908:	11fff804 	addi	r7,r2,-32
 402590c:	01000804 	movi	r4,32
 4025910:	29ced83a 	srl	r7,r5,r7
 4025914:	11004526 	beq	r2,r4,4025a2c <__subdf3+0x57c>
 4025918:	01001004 	movi	r4,64
 402591c:	2089c83a 	sub	r4,r4,r2
 4025920:	2904983a 	sll	r2,r5,r4
 4025924:	118cb03a 	or	r6,r2,r6
 4025928:	300cc03a 	cmpne	r6,r6,zero
 402592c:	398cb03a 	or	r6,r7,r6
 4025930:	0005883a 	mov	r2,zero
 4025934:	003f3706 	br	4025614 <__alt_data_end+0xfc025614>
 4025938:	80002a26 	beq	r16,zero,40259e4 <__subdf3+0x534>
 402593c:	0101ffc4 	movi	r4,2047
 4025940:	49006626 	beq	r9,r4,4025adc <__subdf3+0x62c>
 4025944:	0085c83a 	sub	r2,zero,r2
 4025948:	18c02034 	orhi	r3,r3,128
 402594c:	01000e04 	movi	r4,56
 4025950:	20807e16 	blt	r4,r2,4025b4c <__subdf3+0x69c>
 4025954:	010007c4 	movi	r4,31
 4025958:	2080e716 	blt	r4,r2,4025cf8 <__subdf3+0x848>
 402595c:	01000804 	movi	r4,32
 4025960:	2089c83a 	sub	r4,r4,r2
 4025964:	1914983a 	sll	r10,r3,r4
 4025968:	8890d83a 	srl	r8,r17,r2
 402596c:	8908983a 	sll	r4,r17,r4
 4025970:	1884d83a 	srl	r2,r3,r2
 4025974:	5222b03a 	or	r17,r10,r8
 4025978:	2006c03a 	cmpne	r3,r4,zero
 402597c:	88e2b03a 	or	r17,r17,r3
 4025980:	3463c83a 	sub	r17,r6,r17
 4025984:	2885c83a 	sub	r2,r5,r2
 4025988:	344d803a 	cmpltu	r6,r6,r17
 402598c:	1187c83a 	sub	r3,r2,r6
 4025990:	4821883a 	mov	r16,r9
 4025994:	3825883a 	mov	r18,r7
 4025998:	003f2306 	br	4025628 <__alt_data_end+0xfc025628>
 402599c:	24d0b03a 	or	r8,r4,r19
 40259a0:	40001b1e 	bne	r8,zero,4025a10 <__subdf3+0x560>
 40259a4:	0005883a 	mov	r2,zero
 40259a8:	0009883a 	mov	r4,zero
 40259ac:	0021883a 	mov	r16,zero
 40259b0:	003f4906 	br	40256d8 <__alt_data_end+0xfc0256d8>
 40259b4:	010007c4 	movi	r4,31
 40259b8:	20803a16 	blt	r4,r2,4025aa4 <__subdf3+0x5f4>
 40259bc:	01000804 	movi	r4,32
 40259c0:	2089c83a 	sub	r4,r4,r2
 40259c4:	2912983a 	sll	r9,r5,r4
 40259c8:	3090d83a 	srl	r8,r6,r2
 40259cc:	3108983a 	sll	r4,r6,r4
 40259d0:	2884d83a 	srl	r2,r5,r2
 40259d4:	4a12b03a 	or	r9,r9,r8
 40259d8:	2008c03a 	cmpne	r4,r4,zero
 40259dc:	4912b03a 	or	r9,r9,r4
 40259e0:	003f4e06 	br	402571c <__alt_data_end+0xfc02571c>
 40259e4:	1c48b03a 	or	r4,r3,r17
 40259e8:	20003c26 	beq	r4,zero,4025adc <__subdf3+0x62c>
 40259ec:	0084303a 	nor	r2,zero,r2
 40259f0:	1000381e 	bne	r2,zero,4025ad4 <__subdf3+0x624>
 40259f4:	3463c83a 	sub	r17,r6,r17
 40259f8:	28c5c83a 	sub	r2,r5,r3
 40259fc:	344d803a 	cmpltu	r6,r6,r17
 4025a00:	1187c83a 	sub	r3,r2,r6
 4025a04:	4821883a 	mov	r16,r9
 4025a08:	3825883a 	mov	r18,r7
 4025a0c:	003f0606 	br	4025628 <__alt_data_end+0xfc025628>
 4025a10:	2023883a 	mov	r17,r4
 4025a14:	003f0906 	br	402563c <__alt_data_end+0xfc02563c>
 4025a18:	0101ffc4 	movi	r4,2047
 4025a1c:	813f3a1e 	bne	r16,r4,4025708 <__alt_data_end+0xfc025708>
 4025a20:	003ec406 	br	4025534 <__alt_data_end+0xfc025534>
 4025a24:	0005883a 	mov	r2,zero
 4025a28:	003fb106 	br	40258f0 <__alt_data_end+0xfc0258f0>
 4025a2c:	0005883a 	mov	r2,zero
 4025a30:	003fbc06 	br	4025924 <__alt_data_end+0xfc025924>
 4025a34:	1c44b03a 	or	r2,r3,r17
 4025a38:	80008e1e 	bne	r16,zero,4025c74 <__subdf3+0x7c4>
 4025a3c:	1000c826 	beq	r2,zero,4025d60 <__subdf3+0x8b0>
 4025a40:	2984b03a 	or	r2,r5,r6
 4025a44:	103ebb26 	beq	r2,zero,4025534 <__alt_data_end+0xfc025534>
 4025a48:	8989883a 	add	r4,r17,r6
 4025a4c:	1945883a 	add	r2,r3,r5
 4025a50:	2447803a 	cmpltu	r3,r4,r17
 4025a54:	1887883a 	add	r3,r3,r2
 4025a58:	1880202c 	andhi	r2,r3,128
 4025a5c:	2023883a 	mov	r17,r4
 4025a60:	103f1626 	beq	r2,zero,40256bc <__alt_data_end+0xfc0256bc>
 4025a64:	00bfe034 	movhi	r2,65408
 4025a68:	10bfffc4 	addi	r2,r2,-1
 4025a6c:	5021883a 	mov	r16,r10
 4025a70:	1886703a 	and	r3,r3,r2
 4025a74:	003eaf06 	br	4025534 <__alt_data_end+0xfc025534>
 4025a78:	3825883a 	mov	r18,r7
 4025a7c:	003f0f06 	br	40256bc <__alt_data_end+0xfc0256bc>
 4025a80:	1c44b03a 	or	r2,r3,r17
 4025a84:	8000251e 	bne	r16,zero,4025b1c <__subdf3+0x66c>
 4025a88:	1000661e 	bne	r2,zero,4025c24 <__subdf3+0x774>
 4025a8c:	2990b03a 	or	r8,r5,r6
 4025a90:	40009626 	beq	r8,zero,4025cec <__subdf3+0x83c>
 4025a94:	2807883a 	mov	r3,r5
 4025a98:	3023883a 	mov	r17,r6
 4025a9c:	3825883a 	mov	r18,r7
 4025aa0:	003ea406 	br	4025534 <__alt_data_end+0xfc025534>
 4025aa4:	127ff804 	addi	r9,r2,-32
 4025aa8:	01000804 	movi	r4,32
 4025aac:	2a52d83a 	srl	r9,r5,r9
 4025ab0:	11008c26 	beq	r2,r4,4025ce4 <__subdf3+0x834>
 4025ab4:	01001004 	movi	r4,64
 4025ab8:	2085c83a 	sub	r2,r4,r2
 4025abc:	2884983a 	sll	r2,r5,r2
 4025ac0:	118cb03a 	or	r6,r2,r6
 4025ac4:	300cc03a 	cmpne	r6,r6,zero
 4025ac8:	4992b03a 	or	r9,r9,r6
 4025acc:	0005883a 	mov	r2,zero
 4025ad0:	003f1206 	br	402571c <__alt_data_end+0xfc02571c>
 4025ad4:	0101ffc4 	movi	r4,2047
 4025ad8:	493f9c1e 	bne	r9,r4,402594c <__alt_data_end+0xfc02594c>
 4025adc:	2807883a 	mov	r3,r5
 4025ae0:	3023883a 	mov	r17,r6
 4025ae4:	4821883a 	mov	r16,r9
 4025ae8:	3825883a 	mov	r18,r7
 4025aec:	003e9106 	br	4025534 <__alt_data_end+0xfc025534>
 4025af0:	80001f1e 	bne	r16,zero,4025b70 <__subdf3+0x6c0>
 4025af4:	1c48b03a 	or	r4,r3,r17
 4025af8:	20005a26 	beq	r4,zero,4025c64 <__subdf3+0x7b4>
 4025afc:	0084303a 	nor	r2,zero,r2
 4025b00:	1000561e 	bne	r2,zero,4025c5c <__subdf3+0x7ac>
 4025b04:	89a3883a 	add	r17,r17,r6
 4025b08:	1945883a 	add	r2,r3,r5
 4025b0c:	898d803a 	cmpltu	r6,r17,r6
 4025b10:	3087883a 	add	r3,r6,r2
 4025b14:	4821883a 	mov	r16,r9
 4025b18:	003f0506 	br	4025730 <__alt_data_end+0xfc025730>
 4025b1c:	10002b1e 	bne	r2,zero,4025bcc <__subdf3+0x71c>
 4025b20:	2984b03a 	or	r2,r5,r6
 4025b24:	10008026 	beq	r2,zero,4025d28 <__subdf3+0x878>
 4025b28:	2807883a 	mov	r3,r5
 4025b2c:	3023883a 	mov	r17,r6
 4025b30:	3825883a 	mov	r18,r7
 4025b34:	0401ffc4 	movi	r16,2047
 4025b38:	003e7e06 	br	4025534 <__alt_data_end+0xfc025534>
 4025b3c:	3809883a 	mov	r4,r7
 4025b40:	0011883a 	mov	r8,zero
 4025b44:	0005883a 	mov	r2,zero
 4025b48:	003ee306 	br	40256d8 <__alt_data_end+0xfc0256d8>
 4025b4c:	1c62b03a 	or	r17,r3,r17
 4025b50:	8822c03a 	cmpne	r17,r17,zero
 4025b54:	0005883a 	mov	r2,zero
 4025b58:	003f8906 	br	4025980 <__alt_data_end+0xfc025980>
 4025b5c:	3809883a 	mov	r4,r7
 4025b60:	4821883a 	mov	r16,r9
 4025b64:	0011883a 	mov	r8,zero
 4025b68:	0005883a 	mov	r2,zero
 4025b6c:	003eda06 	br	40256d8 <__alt_data_end+0xfc0256d8>
 4025b70:	0101ffc4 	movi	r4,2047
 4025b74:	49003b26 	beq	r9,r4,4025c64 <__subdf3+0x7b4>
 4025b78:	0085c83a 	sub	r2,zero,r2
 4025b7c:	18c02034 	orhi	r3,r3,128
 4025b80:	01000e04 	movi	r4,56
 4025b84:	20806e16 	blt	r4,r2,4025d40 <__subdf3+0x890>
 4025b88:	010007c4 	movi	r4,31
 4025b8c:	20807716 	blt	r4,r2,4025d6c <__subdf3+0x8bc>
 4025b90:	01000804 	movi	r4,32
 4025b94:	2089c83a 	sub	r4,r4,r2
 4025b98:	1914983a 	sll	r10,r3,r4
 4025b9c:	8890d83a 	srl	r8,r17,r2
 4025ba0:	8908983a 	sll	r4,r17,r4
 4025ba4:	1884d83a 	srl	r2,r3,r2
 4025ba8:	5222b03a 	or	r17,r10,r8
 4025bac:	2006c03a 	cmpne	r3,r4,zero
 4025bb0:	88e2b03a 	or	r17,r17,r3
 4025bb4:	89a3883a 	add	r17,r17,r6
 4025bb8:	1145883a 	add	r2,r2,r5
 4025bbc:	898d803a 	cmpltu	r6,r17,r6
 4025bc0:	3087883a 	add	r3,r6,r2
 4025bc4:	4821883a 	mov	r16,r9
 4025bc8:	003ed906 	br	4025730 <__alt_data_end+0xfc025730>
 4025bcc:	2984b03a 	or	r2,r5,r6
 4025bd0:	10004226 	beq	r2,zero,4025cdc <__subdf3+0x82c>
 4025bd4:	1808d0fa 	srli	r4,r3,3
 4025bd8:	8822d0fa 	srli	r17,r17,3
 4025bdc:	1806977a 	slli	r3,r3,29
 4025be0:	2080022c 	andhi	r2,r4,8
 4025be4:	1c62b03a 	or	r17,r3,r17
 4025be8:	10000826 	beq	r2,zero,4025c0c <__subdf3+0x75c>
 4025bec:	2812d0fa 	srli	r9,r5,3
 4025bf0:	4880022c 	andhi	r2,r9,8
 4025bf4:	1000051e 	bne	r2,zero,4025c0c <__subdf3+0x75c>
 4025bf8:	300cd0fa 	srli	r6,r6,3
 4025bfc:	2804977a 	slli	r2,r5,29
 4025c00:	4809883a 	mov	r4,r9
 4025c04:	3825883a 	mov	r18,r7
 4025c08:	11a2b03a 	or	r17,r2,r6
 4025c0c:	8806d77a 	srli	r3,r17,29
 4025c10:	200890fa 	slli	r4,r4,3
 4025c14:	882290fa 	slli	r17,r17,3
 4025c18:	0401ffc4 	movi	r16,2047
 4025c1c:	1906b03a 	or	r3,r3,r4
 4025c20:	003e4406 	br	4025534 <__alt_data_end+0xfc025534>
 4025c24:	2984b03a 	or	r2,r5,r6
 4025c28:	103e4226 	beq	r2,zero,4025534 <__alt_data_end+0xfc025534>
 4025c2c:	8989c83a 	sub	r4,r17,r6
 4025c30:	8911803a 	cmpltu	r8,r17,r4
 4025c34:	1945c83a 	sub	r2,r3,r5
 4025c38:	1205c83a 	sub	r2,r2,r8
 4025c3c:	1200202c 	andhi	r8,r2,128
 4025c40:	403e9a26 	beq	r8,zero,40256ac <__alt_data_end+0xfc0256ac>
 4025c44:	3463c83a 	sub	r17,r6,r17
 4025c48:	28c5c83a 	sub	r2,r5,r3
 4025c4c:	344d803a 	cmpltu	r6,r6,r17
 4025c50:	1187c83a 	sub	r3,r2,r6
 4025c54:	3825883a 	mov	r18,r7
 4025c58:	003e3606 	br	4025534 <__alt_data_end+0xfc025534>
 4025c5c:	0101ffc4 	movi	r4,2047
 4025c60:	493fc71e 	bne	r9,r4,4025b80 <__alt_data_end+0xfc025b80>
 4025c64:	2807883a 	mov	r3,r5
 4025c68:	3023883a 	mov	r17,r6
 4025c6c:	4821883a 	mov	r16,r9
 4025c70:	003e3006 	br	4025534 <__alt_data_end+0xfc025534>
 4025c74:	10003626 	beq	r2,zero,4025d50 <__subdf3+0x8a0>
 4025c78:	2984b03a 	or	r2,r5,r6
 4025c7c:	10001726 	beq	r2,zero,4025cdc <__subdf3+0x82c>
 4025c80:	1808d0fa 	srli	r4,r3,3
 4025c84:	8822d0fa 	srli	r17,r17,3
 4025c88:	1806977a 	slli	r3,r3,29
 4025c8c:	2080022c 	andhi	r2,r4,8
 4025c90:	1c62b03a 	or	r17,r3,r17
 4025c94:	10000726 	beq	r2,zero,4025cb4 <__subdf3+0x804>
 4025c98:	2812d0fa 	srli	r9,r5,3
 4025c9c:	4880022c 	andhi	r2,r9,8
 4025ca0:	1000041e 	bne	r2,zero,4025cb4 <__subdf3+0x804>
 4025ca4:	300cd0fa 	srli	r6,r6,3
 4025ca8:	2804977a 	slli	r2,r5,29
 4025cac:	4809883a 	mov	r4,r9
 4025cb0:	11a2b03a 	or	r17,r2,r6
 4025cb4:	8806d77a 	srli	r3,r17,29
 4025cb8:	200890fa 	slli	r4,r4,3
 4025cbc:	882290fa 	slli	r17,r17,3
 4025cc0:	3825883a 	mov	r18,r7
 4025cc4:	1906b03a 	or	r3,r3,r4
 4025cc8:	0401ffc4 	movi	r16,2047
 4025ccc:	003e1906 	br	4025534 <__alt_data_end+0xfc025534>
 4025cd0:	000b883a 	mov	r5,zero
 4025cd4:	0005883a 	mov	r2,zero
 4025cd8:	003e2e06 	br	4025594 <__alt_data_end+0xfc025594>
 4025cdc:	0401ffc4 	movi	r16,2047
 4025ce0:	003e1406 	br	4025534 <__alt_data_end+0xfc025534>
 4025ce4:	0005883a 	mov	r2,zero
 4025ce8:	003f7506 	br	4025ac0 <__alt_data_end+0xfc025ac0>
 4025cec:	0005883a 	mov	r2,zero
 4025cf0:	0009883a 	mov	r4,zero
 4025cf4:	003e7806 	br	40256d8 <__alt_data_end+0xfc0256d8>
 4025cf8:	123ff804 	addi	r8,r2,-32
 4025cfc:	01000804 	movi	r4,32
 4025d00:	1a10d83a 	srl	r8,r3,r8
 4025d04:	11002526 	beq	r2,r4,4025d9c <__subdf3+0x8ec>
 4025d08:	01001004 	movi	r4,64
 4025d0c:	2085c83a 	sub	r2,r4,r2
 4025d10:	1884983a 	sll	r2,r3,r2
 4025d14:	1444b03a 	or	r2,r2,r17
 4025d18:	1004c03a 	cmpne	r2,r2,zero
 4025d1c:	40a2b03a 	or	r17,r8,r2
 4025d20:	0005883a 	mov	r2,zero
 4025d24:	003f1606 	br	4025980 <__alt_data_end+0xfc025980>
 4025d28:	02000434 	movhi	r8,16
 4025d2c:	0009883a 	mov	r4,zero
 4025d30:	423fffc4 	addi	r8,r8,-1
 4025d34:	00bfffc4 	movi	r2,-1
 4025d38:	0401ffc4 	movi	r16,2047
 4025d3c:	003e6606 	br	40256d8 <__alt_data_end+0xfc0256d8>
 4025d40:	1c62b03a 	or	r17,r3,r17
 4025d44:	8822c03a 	cmpne	r17,r17,zero
 4025d48:	0005883a 	mov	r2,zero
 4025d4c:	003f9906 	br	4025bb4 <__alt_data_end+0xfc025bb4>
 4025d50:	2807883a 	mov	r3,r5
 4025d54:	3023883a 	mov	r17,r6
 4025d58:	0401ffc4 	movi	r16,2047
 4025d5c:	003df506 	br	4025534 <__alt_data_end+0xfc025534>
 4025d60:	2807883a 	mov	r3,r5
 4025d64:	3023883a 	mov	r17,r6
 4025d68:	003df206 	br	4025534 <__alt_data_end+0xfc025534>
 4025d6c:	123ff804 	addi	r8,r2,-32
 4025d70:	01000804 	movi	r4,32
 4025d74:	1a10d83a 	srl	r8,r3,r8
 4025d78:	11000a26 	beq	r2,r4,4025da4 <__subdf3+0x8f4>
 4025d7c:	01001004 	movi	r4,64
 4025d80:	2085c83a 	sub	r2,r4,r2
 4025d84:	1884983a 	sll	r2,r3,r2
 4025d88:	1444b03a 	or	r2,r2,r17
 4025d8c:	1004c03a 	cmpne	r2,r2,zero
 4025d90:	40a2b03a 	or	r17,r8,r2
 4025d94:	0005883a 	mov	r2,zero
 4025d98:	003f8606 	br	4025bb4 <__alt_data_end+0xfc025bb4>
 4025d9c:	0005883a 	mov	r2,zero
 4025da0:	003fdc06 	br	4025d14 <__alt_data_end+0xfc025d14>
 4025da4:	0005883a 	mov	r2,zero
 4025da8:	003ff706 	br	4025d88 <__alt_data_end+0xfc025d88>

04025dac <__fixdfsi>:
 4025dac:	280cd53a 	srli	r6,r5,20
 4025db0:	00c00434 	movhi	r3,16
 4025db4:	18ffffc4 	addi	r3,r3,-1
 4025db8:	3181ffcc 	andi	r6,r6,2047
 4025dbc:	01c0ff84 	movi	r7,1022
 4025dc0:	28c6703a 	and	r3,r5,r3
 4025dc4:	280ad7fa 	srli	r5,r5,31
 4025dc8:	3980120e 	bge	r7,r6,4025e14 <__fixdfsi+0x68>
 4025dcc:	00810744 	movi	r2,1053
 4025dd0:	11800c16 	blt	r2,r6,4025e04 <__fixdfsi+0x58>
 4025dd4:	00810cc4 	movi	r2,1075
 4025dd8:	1185c83a 	sub	r2,r2,r6
 4025ddc:	01c007c4 	movi	r7,31
 4025de0:	18c00434 	orhi	r3,r3,16
 4025de4:	38800d16 	blt	r7,r2,4025e1c <__fixdfsi+0x70>
 4025de8:	31befb44 	addi	r6,r6,-1043
 4025dec:	2084d83a 	srl	r2,r4,r2
 4025df0:	1986983a 	sll	r3,r3,r6
 4025df4:	1884b03a 	or	r2,r3,r2
 4025df8:	28000726 	beq	r5,zero,4025e18 <__fixdfsi+0x6c>
 4025dfc:	0085c83a 	sub	r2,zero,r2
 4025e00:	f800283a 	ret
 4025e04:	00a00034 	movhi	r2,32768
 4025e08:	10bfffc4 	addi	r2,r2,-1
 4025e0c:	2885883a 	add	r2,r5,r2
 4025e10:	f800283a 	ret
 4025e14:	0005883a 	mov	r2,zero
 4025e18:	f800283a 	ret
 4025e1c:	008104c4 	movi	r2,1043
 4025e20:	1185c83a 	sub	r2,r2,r6
 4025e24:	1884d83a 	srl	r2,r3,r2
 4025e28:	003ff306 	br	4025df8 <__alt_data_end+0xfc025df8>

04025e2c <__floatsidf>:
 4025e2c:	defffd04 	addi	sp,sp,-12
 4025e30:	dfc00215 	stw	ra,8(sp)
 4025e34:	dc400115 	stw	r17,4(sp)
 4025e38:	dc000015 	stw	r16,0(sp)
 4025e3c:	20002b26 	beq	r4,zero,4025eec <__floatsidf+0xc0>
 4025e40:	2023883a 	mov	r17,r4
 4025e44:	2020d7fa 	srli	r16,r4,31
 4025e48:	20002d16 	blt	r4,zero,4025f00 <__floatsidf+0xd4>
 4025e4c:	8809883a 	mov	r4,r17
 4025e50:	4025fb00 	call	4025fb0 <__clzsi2>
 4025e54:	01410784 	movi	r5,1054
 4025e58:	288bc83a 	sub	r5,r5,r2
 4025e5c:	01010cc4 	movi	r4,1075
 4025e60:	2149c83a 	sub	r4,r4,r5
 4025e64:	00c007c4 	movi	r3,31
 4025e68:	1900160e 	bge	r3,r4,4025ec4 <__floatsidf+0x98>
 4025e6c:	00c104c4 	movi	r3,1043
 4025e70:	1947c83a 	sub	r3,r3,r5
 4025e74:	88c6983a 	sll	r3,r17,r3
 4025e78:	00800434 	movhi	r2,16
 4025e7c:	10bfffc4 	addi	r2,r2,-1
 4025e80:	1886703a 	and	r3,r3,r2
 4025e84:	2941ffcc 	andi	r5,r5,2047
 4025e88:	800d883a 	mov	r6,r16
 4025e8c:	0005883a 	mov	r2,zero
 4025e90:	280a953a 	slli	r5,r5,20
 4025e94:	31803fcc 	andi	r6,r6,255
 4025e98:	01000434 	movhi	r4,16
 4025e9c:	300c97fa 	slli	r6,r6,31
 4025ea0:	213fffc4 	addi	r4,r4,-1
 4025ea4:	1906703a 	and	r3,r3,r4
 4025ea8:	1946b03a 	or	r3,r3,r5
 4025eac:	1986b03a 	or	r3,r3,r6
 4025eb0:	dfc00217 	ldw	ra,8(sp)
 4025eb4:	dc400117 	ldw	r17,4(sp)
 4025eb8:	dc000017 	ldw	r16,0(sp)
 4025ebc:	dec00304 	addi	sp,sp,12
 4025ec0:	f800283a 	ret
 4025ec4:	00c002c4 	movi	r3,11
 4025ec8:	1887c83a 	sub	r3,r3,r2
 4025ecc:	88c6d83a 	srl	r3,r17,r3
 4025ed0:	8904983a 	sll	r2,r17,r4
 4025ed4:	01000434 	movhi	r4,16
 4025ed8:	213fffc4 	addi	r4,r4,-1
 4025edc:	2941ffcc 	andi	r5,r5,2047
 4025ee0:	1906703a 	and	r3,r3,r4
 4025ee4:	800d883a 	mov	r6,r16
 4025ee8:	003fe906 	br	4025e90 <__alt_data_end+0xfc025e90>
 4025eec:	000d883a 	mov	r6,zero
 4025ef0:	000b883a 	mov	r5,zero
 4025ef4:	0007883a 	mov	r3,zero
 4025ef8:	0005883a 	mov	r2,zero
 4025efc:	003fe406 	br	4025e90 <__alt_data_end+0xfc025e90>
 4025f00:	0123c83a 	sub	r17,zero,r4
 4025f04:	003fd106 	br	4025e4c <__alt_data_end+0xfc025e4c>

04025f08 <__floatunsidf>:
 4025f08:	defffe04 	addi	sp,sp,-8
 4025f0c:	dc000015 	stw	r16,0(sp)
 4025f10:	dfc00115 	stw	ra,4(sp)
 4025f14:	2021883a 	mov	r16,r4
 4025f18:	20002226 	beq	r4,zero,4025fa4 <__floatunsidf+0x9c>
 4025f1c:	4025fb00 	call	4025fb0 <__clzsi2>
 4025f20:	01010784 	movi	r4,1054
 4025f24:	2089c83a 	sub	r4,r4,r2
 4025f28:	01810cc4 	movi	r6,1075
 4025f2c:	310dc83a 	sub	r6,r6,r4
 4025f30:	00c007c4 	movi	r3,31
 4025f34:	1980120e 	bge	r3,r6,4025f80 <__floatunsidf+0x78>
 4025f38:	00c104c4 	movi	r3,1043
 4025f3c:	1907c83a 	sub	r3,r3,r4
 4025f40:	80ca983a 	sll	r5,r16,r3
 4025f44:	00800434 	movhi	r2,16
 4025f48:	10bfffc4 	addi	r2,r2,-1
 4025f4c:	2101ffcc 	andi	r4,r4,2047
 4025f50:	0021883a 	mov	r16,zero
 4025f54:	288a703a 	and	r5,r5,r2
 4025f58:	2008953a 	slli	r4,r4,20
 4025f5c:	00c00434 	movhi	r3,16
 4025f60:	18ffffc4 	addi	r3,r3,-1
 4025f64:	28c6703a 	and	r3,r5,r3
 4025f68:	8005883a 	mov	r2,r16
 4025f6c:	1906b03a 	or	r3,r3,r4
 4025f70:	dfc00117 	ldw	ra,4(sp)
 4025f74:	dc000017 	ldw	r16,0(sp)
 4025f78:	dec00204 	addi	sp,sp,8
 4025f7c:	f800283a 	ret
 4025f80:	00c002c4 	movi	r3,11
 4025f84:	188bc83a 	sub	r5,r3,r2
 4025f88:	814ad83a 	srl	r5,r16,r5
 4025f8c:	00c00434 	movhi	r3,16
 4025f90:	18ffffc4 	addi	r3,r3,-1
 4025f94:	81a0983a 	sll	r16,r16,r6
 4025f98:	2101ffcc 	andi	r4,r4,2047
 4025f9c:	28ca703a 	and	r5,r5,r3
 4025fa0:	003fed06 	br	4025f58 <__alt_data_end+0xfc025f58>
 4025fa4:	0009883a 	mov	r4,zero
 4025fa8:	000b883a 	mov	r5,zero
 4025fac:	003fea06 	br	4025f58 <__alt_data_end+0xfc025f58>

04025fb0 <__clzsi2>:
 4025fb0:	00bfffd4 	movui	r2,65535
 4025fb4:	11000536 	bltu	r2,r4,4025fcc <__clzsi2+0x1c>
 4025fb8:	00803fc4 	movi	r2,255
 4025fbc:	11000f36 	bltu	r2,r4,4025ffc <__clzsi2+0x4c>
 4025fc0:	00800804 	movi	r2,32
 4025fc4:	0007883a 	mov	r3,zero
 4025fc8:	00000506 	br	4025fe0 <__clzsi2+0x30>
 4025fcc:	00804034 	movhi	r2,256
 4025fd0:	10bfffc4 	addi	r2,r2,-1
 4025fd4:	11000c2e 	bgeu	r2,r4,4026008 <__clzsi2+0x58>
 4025fd8:	00800204 	movi	r2,8
 4025fdc:	00c00604 	movi	r3,24
 4025fe0:	20c8d83a 	srl	r4,r4,r3
 4025fe4:	00c100f4 	movhi	r3,1027
 4025fe8:	18f0d104 	addi	r3,r3,-15548
 4025fec:	1909883a 	add	r4,r3,r4
 4025ff0:	20c00003 	ldbu	r3,0(r4)
 4025ff4:	10c5c83a 	sub	r2,r2,r3
 4025ff8:	f800283a 	ret
 4025ffc:	00800604 	movi	r2,24
 4026000:	00c00204 	movi	r3,8
 4026004:	003ff606 	br	4025fe0 <__alt_data_end+0xfc025fe0>
 4026008:	00800404 	movi	r2,16
 402600c:	1007883a 	mov	r3,r2
 4026010:	003ff306 	br	4025fe0 <__alt_data_end+0xfc025fe0>

04026014 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4026014:	defffe04 	addi	sp,sp,-8
 4026018:	dfc00115 	stw	ra,4(sp)
 402601c:	df000015 	stw	fp,0(sp)
 4026020:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4026024:	d0a00b17 	ldw	r2,-32724(gp)
 4026028:	10000326 	beq	r2,zero,4026038 <alt_get_errno+0x24>
 402602c:	d0a00b17 	ldw	r2,-32724(gp)
 4026030:	103ee83a 	callr	r2
 4026034:	00000106 	br	402603c <alt_get_errno+0x28>
 4026038:	d09ea004 	addi	r2,gp,31360
}
 402603c:	e037883a 	mov	sp,fp
 4026040:	dfc00117 	ldw	ra,4(sp)
 4026044:	df000017 	ldw	fp,0(sp)
 4026048:	dec00204 	addi	sp,sp,8
 402604c:	f800283a 	ret

04026050 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4026050:	defffb04 	addi	sp,sp,-20
 4026054:	dfc00415 	stw	ra,16(sp)
 4026058:	df000315 	stw	fp,12(sp)
 402605c:	df000304 	addi	fp,sp,12
 4026060:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4026064:	e0bfff17 	ldw	r2,-4(fp)
 4026068:	10000816 	blt	r2,zero,402608c <close+0x3c>
 402606c:	01400304 	movi	r5,12
 4026070:	e13fff17 	ldw	r4,-4(fp)
 4026074:	40191000 	call	4019100 <__mulsi3>
 4026078:	1007883a 	mov	r3,r2
 402607c:	00810134 	movhi	r2,1028
 4026080:	10aadd04 	addi	r2,r2,-21644
 4026084:	1885883a 	add	r2,r3,r2
 4026088:	00000106 	br	4026090 <close+0x40>
 402608c:	0005883a 	mov	r2,zero
 4026090:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 4026094:	e0bffd17 	ldw	r2,-12(fp)
 4026098:	10001926 	beq	r2,zero,4026100 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 402609c:	e0bffd17 	ldw	r2,-12(fp)
 40260a0:	10800017 	ldw	r2,0(r2)
 40260a4:	10800417 	ldw	r2,16(r2)
 40260a8:	10000626 	beq	r2,zero,40260c4 <close+0x74>
 40260ac:	e0bffd17 	ldw	r2,-12(fp)
 40260b0:	10800017 	ldw	r2,0(r2)
 40260b4:	10800417 	ldw	r2,16(r2)
 40260b8:	e13ffd17 	ldw	r4,-12(fp)
 40260bc:	103ee83a 	callr	r2
 40260c0:	00000106 	br	40260c8 <close+0x78>
 40260c4:	0005883a 	mov	r2,zero
 40260c8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 40260cc:	e13fff17 	ldw	r4,-4(fp)
 40260d0:	40267380 	call	4026738 <alt_release_fd>
    if (rval < 0)
 40260d4:	e0bffe17 	ldw	r2,-8(fp)
 40260d8:	1000070e 	bge	r2,zero,40260f8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 40260dc:	40260140 	call	4026014 <alt_get_errno>
 40260e0:	1007883a 	mov	r3,r2
 40260e4:	e0bffe17 	ldw	r2,-8(fp)
 40260e8:	0085c83a 	sub	r2,zero,r2
 40260ec:	18800015 	stw	r2,0(r3)
      return -1;
 40260f0:	00bfffc4 	movi	r2,-1
 40260f4:	00000706 	br	4026114 <close+0xc4>
    }
    return 0;
 40260f8:	0005883a 	mov	r2,zero
 40260fc:	00000506 	br	4026114 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4026100:	40260140 	call	4026014 <alt_get_errno>
 4026104:	1007883a 	mov	r3,r2
 4026108:	00801444 	movi	r2,81
 402610c:	18800015 	stw	r2,0(r3)
    return -1;
 4026110:	00bfffc4 	movi	r2,-1
  }
}
 4026114:	e037883a 	mov	sp,fp
 4026118:	dfc00117 	ldw	ra,4(sp)
 402611c:	df000017 	ldw	fp,0(sp)
 4026120:	dec00204 	addi	sp,sp,8
 4026124:	f800283a 	ret

04026128 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4026128:	defffc04 	addi	sp,sp,-16
 402612c:	df000315 	stw	fp,12(sp)
 4026130:	df000304 	addi	fp,sp,12
 4026134:	e13ffd15 	stw	r4,-12(fp)
 4026138:	e17ffe15 	stw	r5,-8(fp)
 402613c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4026140:	e0bfff17 	ldw	r2,-4(fp)
}
 4026144:	e037883a 	mov	sp,fp
 4026148:	df000017 	ldw	fp,0(sp)
 402614c:	dec00104 	addi	sp,sp,4
 4026150:	f800283a 	ret

04026154 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4026154:	defffe04 	addi	sp,sp,-8
 4026158:	dfc00115 	stw	ra,4(sp)
 402615c:	df000015 	stw	fp,0(sp)
 4026160:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4026164:	d0a00b17 	ldw	r2,-32724(gp)
 4026168:	10000326 	beq	r2,zero,4026178 <alt_get_errno+0x24>
 402616c:	d0a00b17 	ldw	r2,-32724(gp)
 4026170:	103ee83a 	callr	r2
 4026174:	00000106 	br	402617c <alt_get_errno+0x28>
 4026178:	d09ea004 	addi	r2,gp,31360
}
 402617c:	e037883a 	mov	sp,fp
 4026180:	dfc00117 	ldw	ra,4(sp)
 4026184:	df000017 	ldw	fp,0(sp)
 4026188:	dec00204 	addi	sp,sp,8
 402618c:	f800283a 	ret

04026190 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 4026190:	defffb04 	addi	sp,sp,-20
 4026194:	dfc00415 	stw	ra,16(sp)
 4026198:	df000315 	stw	fp,12(sp)
 402619c:	df000304 	addi	fp,sp,12
 40261a0:	e13ffe15 	stw	r4,-8(fp)
 40261a4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40261a8:	e0bffe17 	ldw	r2,-8(fp)
 40261ac:	10000816 	blt	r2,zero,40261d0 <fstat+0x40>
 40261b0:	01400304 	movi	r5,12
 40261b4:	e13ffe17 	ldw	r4,-8(fp)
 40261b8:	40191000 	call	4019100 <__mulsi3>
 40261bc:	1007883a 	mov	r3,r2
 40261c0:	00810134 	movhi	r2,1028
 40261c4:	10aadd04 	addi	r2,r2,-21644
 40261c8:	1885883a 	add	r2,r3,r2
 40261cc:	00000106 	br	40261d4 <fstat+0x44>
 40261d0:	0005883a 	mov	r2,zero
 40261d4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 40261d8:	e0bffd17 	ldw	r2,-12(fp)
 40261dc:	10001026 	beq	r2,zero,4026220 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 40261e0:	e0bffd17 	ldw	r2,-12(fp)
 40261e4:	10800017 	ldw	r2,0(r2)
 40261e8:	10800817 	ldw	r2,32(r2)
 40261ec:	10000726 	beq	r2,zero,402620c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 40261f0:	e0bffd17 	ldw	r2,-12(fp)
 40261f4:	10800017 	ldw	r2,0(r2)
 40261f8:	10800817 	ldw	r2,32(r2)
 40261fc:	e17fff17 	ldw	r5,-4(fp)
 4026200:	e13ffd17 	ldw	r4,-12(fp)
 4026204:	103ee83a 	callr	r2
 4026208:	00000a06 	br	4026234 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 402620c:	e0bfff17 	ldw	r2,-4(fp)
 4026210:	00c80004 	movi	r3,8192
 4026214:	10c00115 	stw	r3,4(r2)
      return 0;
 4026218:	0005883a 	mov	r2,zero
 402621c:	00000506 	br	4026234 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4026220:	40261540 	call	4026154 <alt_get_errno>
 4026224:	1007883a 	mov	r3,r2
 4026228:	00801444 	movi	r2,81
 402622c:	18800015 	stw	r2,0(r3)
    return -1;
 4026230:	00bfffc4 	movi	r2,-1
  }
}
 4026234:	e037883a 	mov	sp,fp
 4026238:	dfc00117 	ldw	ra,4(sp)
 402623c:	df000017 	ldw	fp,0(sp)
 4026240:	dec00204 	addi	sp,sp,8
 4026244:	f800283a 	ret

04026248 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4026248:	defffe04 	addi	sp,sp,-8
 402624c:	dfc00115 	stw	ra,4(sp)
 4026250:	df000015 	stw	fp,0(sp)
 4026254:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4026258:	d0a00b17 	ldw	r2,-32724(gp)
 402625c:	10000326 	beq	r2,zero,402626c <alt_get_errno+0x24>
 4026260:	d0a00b17 	ldw	r2,-32724(gp)
 4026264:	103ee83a 	callr	r2
 4026268:	00000106 	br	4026270 <alt_get_errno+0x28>
 402626c:	d09ea004 	addi	r2,gp,31360
}
 4026270:	e037883a 	mov	sp,fp
 4026274:	dfc00117 	ldw	ra,4(sp)
 4026278:	df000017 	ldw	fp,0(sp)
 402627c:	dec00204 	addi	sp,sp,8
 4026280:	f800283a 	ret

04026284 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 4026284:	deffed04 	addi	sp,sp,-76
 4026288:	dfc01215 	stw	ra,72(sp)
 402628c:	df001115 	stw	fp,68(sp)
 4026290:	df001104 	addi	fp,sp,68
 4026294:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4026298:	e0bfff17 	ldw	r2,-4(fp)
 402629c:	10000816 	blt	r2,zero,40262c0 <isatty+0x3c>
 40262a0:	01400304 	movi	r5,12
 40262a4:	e13fff17 	ldw	r4,-4(fp)
 40262a8:	40191000 	call	4019100 <__mulsi3>
 40262ac:	1007883a 	mov	r3,r2
 40262b0:	00810134 	movhi	r2,1028
 40262b4:	10aadd04 	addi	r2,r2,-21644
 40262b8:	1885883a 	add	r2,r3,r2
 40262bc:	00000106 	br	40262c4 <isatty+0x40>
 40262c0:	0005883a 	mov	r2,zero
 40262c4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 40262c8:	e0bfef17 	ldw	r2,-68(fp)
 40262cc:	10000e26 	beq	r2,zero,4026308 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 40262d0:	e0bfef17 	ldw	r2,-68(fp)
 40262d4:	10800017 	ldw	r2,0(r2)
 40262d8:	10800817 	ldw	r2,32(r2)
 40262dc:	1000021e 	bne	r2,zero,40262e8 <isatty+0x64>
    {
      return 1;
 40262e0:	00800044 	movi	r2,1
 40262e4:	00000d06 	br	402631c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 40262e8:	e0bff004 	addi	r2,fp,-64
 40262ec:	100b883a 	mov	r5,r2
 40262f0:	e13fff17 	ldw	r4,-4(fp)
 40262f4:	40261900 	call	4026190 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 40262f8:	e0bff117 	ldw	r2,-60(fp)
 40262fc:	10880020 	cmpeqi	r2,r2,8192
 4026300:	10803fcc 	andi	r2,r2,255
 4026304:	00000506 	br	402631c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4026308:	40262480 	call	4026248 <alt_get_errno>
 402630c:	1007883a 	mov	r3,r2
 4026310:	00801444 	movi	r2,81
 4026314:	18800015 	stw	r2,0(r3)
    return 0;
 4026318:	0005883a 	mov	r2,zero
  }
}
 402631c:	e037883a 	mov	sp,fp
 4026320:	dfc00117 	ldw	ra,4(sp)
 4026324:	df000017 	ldw	fp,0(sp)
 4026328:	dec00204 	addi	sp,sp,8
 402632c:	f800283a 	ret

04026330 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4026330:	defffc04 	addi	sp,sp,-16
 4026334:	df000315 	stw	fp,12(sp)
 4026338:	df000304 	addi	fp,sp,12
 402633c:	e13ffd15 	stw	r4,-12(fp)
 4026340:	e17ffe15 	stw	r5,-8(fp)
 4026344:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4026348:	e0fffe17 	ldw	r3,-8(fp)
 402634c:	e0bffd17 	ldw	r2,-12(fp)
 4026350:	18800c26 	beq	r3,r2,4026384 <alt_load_section+0x54>
  {
    while( to != end )
 4026354:	00000806 	br	4026378 <alt_load_section+0x48>
    {
      *to++ = *from++;
 4026358:	e0bffe17 	ldw	r2,-8(fp)
 402635c:	10c00104 	addi	r3,r2,4
 4026360:	e0fffe15 	stw	r3,-8(fp)
 4026364:	e0fffd17 	ldw	r3,-12(fp)
 4026368:	19000104 	addi	r4,r3,4
 402636c:	e13ffd15 	stw	r4,-12(fp)
 4026370:	18c00017 	ldw	r3,0(r3)
 4026374:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4026378:	e0fffe17 	ldw	r3,-8(fp)
 402637c:	e0bfff17 	ldw	r2,-4(fp)
 4026380:	18bff51e 	bne	r3,r2,4026358 <__alt_data_end+0xfc026358>
    {
      *to++ = *from++;
    }
  }
}
 4026384:	0001883a 	nop
 4026388:	e037883a 	mov	sp,fp
 402638c:	df000017 	ldw	fp,0(sp)
 4026390:	dec00104 	addi	sp,sp,4
 4026394:	f800283a 	ret

04026398 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4026398:	defffe04 	addi	sp,sp,-8
 402639c:	dfc00115 	stw	ra,4(sp)
 40263a0:	df000015 	stw	fp,0(sp)
 40263a4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 40263a8:	01810134 	movhi	r6,1028
 40263ac:	31afa204 	addi	r6,r6,-16760
 40263b0:	014100f4 	movhi	r5,1027
 40263b4:	29712a04 	addi	r5,r5,-15192
 40263b8:	01010134 	movhi	r4,1028
 40263bc:	212fa204 	addi	r4,r4,-16760
 40263c0:	40263300 	call	4026330 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 40263c4:	01810034 	movhi	r6,1024
 40263c8:	31808c04 	addi	r6,r6,560
 40263cc:	01410034 	movhi	r5,1024
 40263d0:	29400804 	addi	r5,r5,32
 40263d4:	01010034 	movhi	r4,1024
 40263d8:	21000804 	addi	r4,r4,32
 40263dc:	40263300 	call	4026330 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 40263e0:	018100f4 	movhi	r6,1027
 40263e4:	31b12a04 	addi	r6,r6,-15192
 40263e8:	014100f4 	movhi	r5,1027
 40263ec:	296a6604 	addi	r5,r5,-22120
 40263f0:	010100f4 	movhi	r4,1027
 40263f4:	212a6604 	addi	r4,r4,-22120
 40263f8:	40263300 	call	4026330 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 40263fc:	40297900 	call	4029790 <alt_dcache_flush_all>
  alt_icache_flush_all();
 4026400:	4029a600 	call	4029a60 <alt_icache_flush_all>
}
 4026404:	0001883a 	nop
 4026408:	e037883a 	mov	sp,fp
 402640c:	dfc00117 	ldw	ra,4(sp)
 4026410:	df000017 	ldw	fp,0(sp)
 4026414:	dec00204 	addi	sp,sp,8
 4026418:	f800283a 	ret

0402641c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402641c:	defffe04 	addi	sp,sp,-8
 4026420:	dfc00115 	stw	ra,4(sp)
 4026424:	df000015 	stw	fp,0(sp)
 4026428:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402642c:	d0a00b17 	ldw	r2,-32724(gp)
 4026430:	10000326 	beq	r2,zero,4026440 <alt_get_errno+0x24>
 4026434:	d0a00b17 	ldw	r2,-32724(gp)
 4026438:	103ee83a 	callr	r2
 402643c:	00000106 	br	4026444 <alt_get_errno+0x28>
 4026440:	d09ea004 	addi	r2,gp,31360
}
 4026444:	e037883a 	mov	sp,fp
 4026448:	dfc00117 	ldw	ra,4(sp)
 402644c:	df000017 	ldw	fp,0(sp)
 4026450:	dec00204 	addi	sp,sp,8
 4026454:	f800283a 	ret

04026458 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 4026458:	defff904 	addi	sp,sp,-28
 402645c:	dfc00615 	stw	ra,24(sp)
 4026460:	df000515 	stw	fp,20(sp)
 4026464:	df000504 	addi	fp,sp,20
 4026468:	e13ffd15 	stw	r4,-12(fp)
 402646c:	e17ffe15 	stw	r5,-8(fp)
 4026470:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 4026474:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4026478:	e0bffd17 	ldw	r2,-12(fp)
 402647c:	10000816 	blt	r2,zero,40264a0 <lseek+0x48>
 4026480:	01400304 	movi	r5,12
 4026484:	e13ffd17 	ldw	r4,-12(fp)
 4026488:	40191000 	call	4019100 <__mulsi3>
 402648c:	1007883a 	mov	r3,r2
 4026490:	00810134 	movhi	r2,1028
 4026494:	10aadd04 	addi	r2,r2,-21644
 4026498:	1885883a 	add	r2,r3,r2
 402649c:	00000106 	br	40264a4 <lseek+0x4c>
 40264a0:	0005883a 	mov	r2,zero
 40264a4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 40264a8:	e0bffc17 	ldw	r2,-16(fp)
 40264ac:	10001026 	beq	r2,zero,40264f0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 40264b0:	e0bffc17 	ldw	r2,-16(fp)
 40264b4:	10800017 	ldw	r2,0(r2)
 40264b8:	10800717 	ldw	r2,28(r2)
 40264bc:	10000926 	beq	r2,zero,40264e4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 40264c0:	e0bffc17 	ldw	r2,-16(fp)
 40264c4:	10800017 	ldw	r2,0(r2)
 40264c8:	10800717 	ldw	r2,28(r2)
 40264cc:	e1bfff17 	ldw	r6,-4(fp)
 40264d0:	e17ffe17 	ldw	r5,-8(fp)
 40264d4:	e13ffc17 	ldw	r4,-16(fp)
 40264d8:	103ee83a 	callr	r2
 40264dc:	e0bffb15 	stw	r2,-20(fp)
 40264e0:	00000506 	br	40264f8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 40264e4:	00bfde84 	movi	r2,-134
 40264e8:	e0bffb15 	stw	r2,-20(fp)
 40264ec:	00000206 	br	40264f8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 40264f0:	00bfebc4 	movi	r2,-81
 40264f4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 40264f8:	e0bffb17 	ldw	r2,-20(fp)
 40264fc:	1000070e 	bge	r2,zero,402651c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 4026500:	402641c0 	call	402641c <alt_get_errno>
 4026504:	1007883a 	mov	r3,r2
 4026508:	e0bffb17 	ldw	r2,-20(fp)
 402650c:	0085c83a 	sub	r2,zero,r2
 4026510:	18800015 	stw	r2,0(r3)
    rc = -1;
 4026514:	00bfffc4 	movi	r2,-1
 4026518:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 402651c:	e0bffb17 	ldw	r2,-20(fp)
}
 4026520:	e037883a 	mov	sp,fp
 4026524:	dfc00117 	ldw	ra,4(sp)
 4026528:	df000017 	ldw	fp,0(sp)
 402652c:	dec00204 	addi	sp,sp,8
 4026530:	f800283a 	ret

04026534 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4026534:	defffd04 	addi	sp,sp,-12
 4026538:	dfc00215 	stw	ra,8(sp)
 402653c:	df000115 	stw	fp,4(sp)
 4026540:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4026544:	0009883a 	mov	r4,zero
 4026548:	40269dc0 	call	40269dc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 402654c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4026550:	4026a140 	call	4026a14 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4026554:	018100f4 	movhi	r6,1027
 4026558:	31b11404 	addi	r6,r6,-15280
 402655c:	014100f4 	movhi	r5,1027
 4026560:	29711404 	addi	r5,r5,-15280
 4026564:	010100f4 	movhi	r4,1027
 4026568:	21311404 	addi	r4,r4,-15280
 402656c:	4029e040 	call	4029e04 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4026570:	40298900 	call	4029890 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4026574:	010100f4 	movhi	r4,1027
 4026578:	21263c04 	addi	r4,r4,-26384
 402657c:	402a5340 	call	402a534 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4026580:	d09ea117 	ldw	r2,31364(gp)
 4026584:	d0dea217 	ldw	r3,31368(gp)
 4026588:	d11ea317 	ldw	r4,31372(gp)
 402658c:	200d883a 	mov	r6,r4
 4026590:	180b883a 	mov	r5,r3
 4026594:	1009883a 	mov	r4,r2
 4026598:	40005d40 	call	40005d4 <main>
 402659c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 40265a0:	01000044 	movi	r4,1
 40265a4:	40260500 	call	4026050 <close>
  exit (result);
 40265a8:	e13fff17 	ldw	r4,-4(fp)
 40265ac:	402a5480 	call	402a548 <exit>

040265b0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 40265b0:	defffe04 	addi	sp,sp,-8
 40265b4:	df000115 	stw	fp,4(sp)
 40265b8:	df000104 	addi	fp,sp,4
 40265bc:	e13fff15 	stw	r4,-4(fp)
}
 40265c0:	0001883a 	nop
 40265c4:	e037883a 	mov	sp,fp
 40265c8:	df000017 	ldw	fp,0(sp)
 40265cc:	dec00104 	addi	sp,sp,4
 40265d0:	f800283a 	ret

040265d4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 40265d4:	defffe04 	addi	sp,sp,-8
 40265d8:	df000115 	stw	fp,4(sp)
 40265dc:	df000104 	addi	fp,sp,4
 40265e0:	e13fff15 	stw	r4,-4(fp)
}
 40265e4:	0001883a 	nop
 40265e8:	e037883a 	mov	sp,fp
 40265ec:	df000017 	ldw	fp,0(sp)
 40265f0:	dec00104 	addi	sp,sp,4
 40265f4:	f800283a 	ret

040265f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40265f8:	defffe04 	addi	sp,sp,-8
 40265fc:	dfc00115 	stw	ra,4(sp)
 4026600:	df000015 	stw	fp,0(sp)
 4026604:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4026608:	d0a00b17 	ldw	r2,-32724(gp)
 402660c:	10000326 	beq	r2,zero,402661c <alt_get_errno+0x24>
 4026610:	d0a00b17 	ldw	r2,-32724(gp)
 4026614:	103ee83a 	callr	r2
 4026618:	00000106 	br	4026620 <alt_get_errno+0x28>
 402661c:	d09ea004 	addi	r2,gp,31360
}
 4026620:	e037883a 	mov	sp,fp
 4026624:	dfc00117 	ldw	ra,4(sp)
 4026628:	df000017 	ldw	fp,0(sp)
 402662c:	dec00204 	addi	sp,sp,8
 4026630:	f800283a 	ret

04026634 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 4026634:	defff904 	addi	sp,sp,-28
 4026638:	dfc00615 	stw	ra,24(sp)
 402663c:	df000515 	stw	fp,20(sp)
 4026640:	df000504 	addi	fp,sp,20
 4026644:	e13ffd15 	stw	r4,-12(fp)
 4026648:	e17ffe15 	stw	r5,-8(fp)
 402664c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4026650:	e0bffd17 	ldw	r2,-12(fp)
 4026654:	10000816 	blt	r2,zero,4026678 <read+0x44>
 4026658:	01400304 	movi	r5,12
 402665c:	e13ffd17 	ldw	r4,-12(fp)
 4026660:	40191000 	call	4019100 <__mulsi3>
 4026664:	1007883a 	mov	r3,r2
 4026668:	00810134 	movhi	r2,1028
 402666c:	10aadd04 	addi	r2,r2,-21644
 4026670:	1885883a 	add	r2,r3,r2
 4026674:	00000106 	br	402667c <read+0x48>
 4026678:	0005883a 	mov	r2,zero
 402667c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4026680:	e0bffb17 	ldw	r2,-20(fp)
 4026684:	10002226 	beq	r2,zero,4026710 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4026688:	e0bffb17 	ldw	r2,-20(fp)
 402668c:	10800217 	ldw	r2,8(r2)
 4026690:	108000cc 	andi	r2,r2,3
 4026694:	10800060 	cmpeqi	r2,r2,1
 4026698:	1000181e 	bne	r2,zero,40266fc <read+0xc8>
        (fd->dev->read))
 402669c:	e0bffb17 	ldw	r2,-20(fp)
 40266a0:	10800017 	ldw	r2,0(r2)
 40266a4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 40266a8:	10001426 	beq	r2,zero,40266fc <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 40266ac:	e0bffb17 	ldw	r2,-20(fp)
 40266b0:	10800017 	ldw	r2,0(r2)
 40266b4:	10800517 	ldw	r2,20(r2)
 40266b8:	e0ffff17 	ldw	r3,-4(fp)
 40266bc:	180d883a 	mov	r6,r3
 40266c0:	e17ffe17 	ldw	r5,-8(fp)
 40266c4:	e13ffb17 	ldw	r4,-20(fp)
 40266c8:	103ee83a 	callr	r2
 40266cc:	e0bffc15 	stw	r2,-16(fp)
 40266d0:	e0bffc17 	ldw	r2,-16(fp)
 40266d4:	1000070e 	bge	r2,zero,40266f4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 40266d8:	40265f80 	call	40265f8 <alt_get_errno>
 40266dc:	1007883a 	mov	r3,r2
 40266e0:	e0bffc17 	ldw	r2,-16(fp)
 40266e4:	0085c83a 	sub	r2,zero,r2
 40266e8:	18800015 	stw	r2,0(r3)
          return -1;
 40266ec:	00bfffc4 	movi	r2,-1
 40266f0:	00000c06 	br	4026724 <read+0xf0>
        }
        return rval;
 40266f4:	e0bffc17 	ldw	r2,-16(fp)
 40266f8:	00000a06 	br	4026724 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 40266fc:	40265f80 	call	40265f8 <alt_get_errno>
 4026700:	1007883a 	mov	r3,r2
 4026704:	00800344 	movi	r2,13
 4026708:	18800015 	stw	r2,0(r3)
 402670c:	00000406 	br	4026720 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 4026710:	40265f80 	call	40265f8 <alt_get_errno>
 4026714:	1007883a 	mov	r3,r2
 4026718:	00801444 	movi	r2,81
 402671c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4026720:	00bfffc4 	movi	r2,-1
}
 4026724:	e037883a 	mov	sp,fp
 4026728:	dfc00117 	ldw	ra,4(sp)
 402672c:	df000017 	ldw	fp,0(sp)
 4026730:	dec00204 	addi	sp,sp,8
 4026734:	f800283a 	ret

04026738 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4026738:	defffc04 	addi	sp,sp,-16
 402673c:	dfc00315 	stw	ra,12(sp)
 4026740:	df000215 	stw	fp,8(sp)
 4026744:	dc000115 	stw	r16,4(sp)
 4026748:	df000204 	addi	fp,sp,8
 402674c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 4026750:	e0bffe17 	ldw	r2,-8(fp)
 4026754:	108000d0 	cmplti	r2,r2,3
 4026758:	1000111e 	bne	r2,zero,40267a0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 402675c:	04010134 	movhi	r16,1028
 4026760:	842add04 	addi	r16,r16,-21644
 4026764:	e0bffe17 	ldw	r2,-8(fp)
 4026768:	01400304 	movi	r5,12
 402676c:	1009883a 	mov	r4,r2
 4026770:	40191000 	call	4019100 <__mulsi3>
 4026774:	8085883a 	add	r2,r16,r2
 4026778:	10800204 	addi	r2,r2,8
 402677c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4026780:	04010134 	movhi	r16,1028
 4026784:	842add04 	addi	r16,r16,-21644
 4026788:	e0bffe17 	ldw	r2,-8(fp)
 402678c:	01400304 	movi	r5,12
 4026790:	1009883a 	mov	r4,r2
 4026794:	40191000 	call	4019100 <__mulsi3>
 4026798:	8085883a 	add	r2,r16,r2
 402679c:	10000015 	stw	zero,0(r2)
  }
}
 40267a0:	0001883a 	nop
 40267a4:	e6ffff04 	addi	sp,fp,-4
 40267a8:	dfc00217 	ldw	ra,8(sp)
 40267ac:	df000117 	ldw	fp,4(sp)
 40267b0:	dc000017 	ldw	r16,0(sp)
 40267b4:	dec00304 	addi	sp,sp,12
 40267b8:	f800283a 	ret

040267bc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 40267bc:	defff904 	addi	sp,sp,-28
 40267c0:	df000615 	stw	fp,24(sp)
 40267c4:	df000604 	addi	fp,sp,24
 40267c8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40267cc:	0005303a 	rdctl	r2,status
 40267d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40267d4:	e0fffe17 	ldw	r3,-8(fp)
 40267d8:	00bfff84 	movi	r2,-2
 40267dc:	1884703a 	and	r2,r3,r2
 40267e0:	1001703a 	wrctl	status,r2
  
  return context;
 40267e4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 40267e8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 40267ec:	d0a00c17 	ldw	r2,-32720(gp)
 40267f0:	10c000c4 	addi	r3,r2,3
 40267f4:	00bfff04 	movi	r2,-4
 40267f8:	1884703a 	and	r2,r3,r2
 40267fc:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 4026800:	d0e00c17 	ldw	r3,-32720(gp)
 4026804:	e0bfff17 	ldw	r2,-4(fp)
 4026808:	1887883a 	add	r3,r3,r2
 402680c:	00820034 	movhi	r2,2048
 4026810:	10800004 	addi	r2,r2,0
 4026814:	10c0062e 	bgeu	r2,r3,4026830 <sbrk+0x74>
 4026818:	e0bffb17 	ldw	r2,-20(fp)
 402681c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4026820:	e0bffa17 	ldw	r2,-24(fp)
 4026824:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4026828:	00bfffc4 	movi	r2,-1
 402682c:	00000b06 	br	402685c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 4026830:	d0a00c17 	ldw	r2,-32720(gp)
 4026834:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 4026838:	d0e00c17 	ldw	r3,-32720(gp)
 402683c:	e0bfff17 	ldw	r2,-4(fp)
 4026840:	1885883a 	add	r2,r3,r2
 4026844:	d0a00c15 	stw	r2,-32720(gp)
 4026848:	e0bffb17 	ldw	r2,-20(fp)
 402684c:	e0bffc15 	stw	r2,-16(fp)
 4026850:	e0bffc17 	ldw	r2,-16(fp)
 4026854:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 4026858:	e0bffd17 	ldw	r2,-12(fp)
} 
 402685c:	e037883a 	mov	sp,fp
 4026860:	df000017 	ldw	fp,0(sp)
 4026864:	dec00104 	addi	sp,sp,4
 4026868:	f800283a 	ret

0402686c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402686c:	defffe04 	addi	sp,sp,-8
 4026870:	dfc00115 	stw	ra,4(sp)
 4026874:	df000015 	stw	fp,0(sp)
 4026878:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402687c:	d0a00b17 	ldw	r2,-32724(gp)
 4026880:	10000326 	beq	r2,zero,4026890 <alt_get_errno+0x24>
 4026884:	d0a00b17 	ldw	r2,-32724(gp)
 4026888:	103ee83a 	callr	r2
 402688c:	00000106 	br	4026894 <alt_get_errno+0x28>
 4026890:	d09ea004 	addi	r2,gp,31360
}
 4026894:	e037883a 	mov	sp,fp
 4026898:	dfc00117 	ldw	ra,4(sp)
 402689c:	df000017 	ldw	fp,0(sp)
 40268a0:	dec00204 	addi	sp,sp,8
 40268a4:	f800283a 	ret

040268a8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 40268a8:	defff904 	addi	sp,sp,-28
 40268ac:	dfc00615 	stw	ra,24(sp)
 40268b0:	df000515 	stw	fp,20(sp)
 40268b4:	df000504 	addi	fp,sp,20
 40268b8:	e13ffd15 	stw	r4,-12(fp)
 40268bc:	e17ffe15 	stw	r5,-8(fp)
 40268c0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40268c4:	e0bffd17 	ldw	r2,-12(fp)
 40268c8:	10000816 	blt	r2,zero,40268ec <write+0x44>
 40268cc:	01400304 	movi	r5,12
 40268d0:	e13ffd17 	ldw	r4,-12(fp)
 40268d4:	40191000 	call	4019100 <__mulsi3>
 40268d8:	1007883a 	mov	r3,r2
 40268dc:	00810134 	movhi	r2,1028
 40268e0:	10aadd04 	addi	r2,r2,-21644
 40268e4:	1885883a 	add	r2,r3,r2
 40268e8:	00000106 	br	40268f0 <write+0x48>
 40268ec:	0005883a 	mov	r2,zero
 40268f0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 40268f4:	e0bffb17 	ldw	r2,-20(fp)
 40268f8:	10002126 	beq	r2,zero,4026980 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 40268fc:	e0bffb17 	ldw	r2,-20(fp)
 4026900:	10800217 	ldw	r2,8(r2)
 4026904:	108000cc 	andi	r2,r2,3
 4026908:	10001826 	beq	r2,zero,402696c <write+0xc4>
 402690c:	e0bffb17 	ldw	r2,-20(fp)
 4026910:	10800017 	ldw	r2,0(r2)
 4026914:	10800617 	ldw	r2,24(r2)
 4026918:	10001426 	beq	r2,zero,402696c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 402691c:	e0bffb17 	ldw	r2,-20(fp)
 4026920:	10800017 	ldw	r2,0(r2)
 4026924:	10800617 	ldw	r2,24(r2)
 4026928:	e0ffff17 	ldw	r3,-4(fp)
 402692c:	180d883a 	mov	r6,r3
 4026930:	e17ffe17 	ldw	r5,-8(fp)
 4026934:	e13ffb17 	ldw	r4,-20(fp)
 4026938:	103ee83a 	callr	r2
 402693c:	e0bffc15 	stw	r2,-16(fp)
 4026940:	e0bffc17 	ldw	r2,-16(fp)
 4026944:	1000070e 	bge	r2,zero,4026964 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 4026948:	402686c0 	call	402686c <alt_get_errno>
 402694c:	1007883a 	mov	r3,r2
 4026950:	e0bffc17 	ldw	r2,-16(fp)
 4026954:	0085c83a 	sub	r2,zero,r2
 4026958:	18800015 	stw	r2,0(r3)
        return -1;
 402695c:	00bfffc4 	movi	r2,-1
 4026960:	00000c06 	br	4026994 <write+0xec>
      }
      return rval;
 4026964:	e0bffc17 	ldw	r2,-16(fp)
 4026968:	00000a06 	br	4026994 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 402696c:	402686c0 	call	402686c <alt_get_errno>
 4026970:	1007883a 	mov	r3,r2
 4026974:	00800344 	movi	r2,13
 4026978:	18800015 	stw	r2,0(r3)
 402697c:	00000406 	br	4026990 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4026980:	402686c0 	call	402686c <alt_get_errno>
 4026984:	1007883a 	mov	r3,r2
 4026988:	00801444 	movi	r2,81
 402698c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4026990:	00bfffc4 	movi	r2,-1
}
 4026994:	e037883a 	mov	sp,fp
 4026998:	dfc00117 	ldw	ra,4(sp)
 402699c:	df000017 	ldw	fp,0(sp)
 40269a0:	dec00204 	addi	sp,sp,8
 40269a4:	f800283a 	ret

040269a8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 40269a8:	defffd04 	addi	sp,sp,-12
 40269ac:	dfc00215 	stw	ra,8(sp)
 40269b0:	df000115 	stw	fp,4(sp)
 40269b4:	df000104 	addi	fp,sp,4
 40269b8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 40269bc:	d1600804 	addi	r5,gp,-32736
 40269c0:	e13fff17 	ldw	r4,-4(fp)
 40269c4:	40297ec0 	call	40297ec <alt_dev_llist_insert>
}
 40269c8:	e037883a 	mov	sp,fp
 40269cc:	dfc00117 	ldw	ra,4(sp)
 40269d0:	df000017 	ldw	fp,0(sp)
 40269d4:	dec00204 	addi	sp,sp,8
 40269d8:	f800283a 	ret

040269dc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 40269dc:	defffd04 	addi	sp,sp,-12
 40269e0:	dfc00215 	stw	ra,8(sp)
 40269e4:	df000115 	stw	fp,4(sp)
 40269e8:	df000104 	addi	fp,sp,4
 40269ec:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, NIOS2);
 40269f0:	402a2a80 	call	402a2a8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 40269f4:	00800044 	movi	r2,1
 40269f8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 40269fc:	0001883a 	nop
 4026a00:	e037883a 	mov	sp,fp
 4026a04:	dfc00117 	ldw	ra,4(sp)
 4026a08:	df000017 	ldw	fp,0(sp)
 4026a0c:	dec00204 	addi	sp,sp,8
 4026a10:	f800283a 	ret

04026a14 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4026a14:	defffd04 	addi	sp,sp,-12
 4026a18:	dfc00215 	stw	ra,8(sp)
 4026a1c:	df000115 	stw	fp,4(sp)
 4026a20:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( USB_BLASTER, USB_BLASTER);
 4026a24:	018001c4 	movi	r6,7
 4026a28:	000b883a 	mov	r5,zero
 4026a2c:	01010134 	movhi	r4,1028
 4026a30:	212b4704 	addi	r4,r4,-21220
 4026a34:	4026dc80 	call	4026dc8 <altera_avalon_jtag_uart_init>
 4026a38:	01010134 	movhi	r4,1028
 4026a3c:	212b3d04 	addi	r4,r4,-21260
 4026a40:	40269a80 	call	40269a8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 4026a44:	0001883a 	nop
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
 4026a48:	01010134 	movhi	r4,1028
 4026a4c:	212f5504 	addi	r4,r4,-17068
 4026a50:	40299e00 	call	40299e0 <alt_fs_reg>
    ALTERA_RO_ZIPFS_INIT ( ALTERA_RO_ZIPFS, altera_ro_zipfs);
 4026a54:	01010134 	movhi	r4,1028
 4026a58:	212f5f04 	addi	r4,r4,-17028
 4026a5c:	40286940 	call	4028694 <alt_ro_zipfs_check_valid>
 4026a60:	10000326 	beq	r2,zero,4026a70 <alt_sys_init+0x5c>
 4026a64:	01010134 	movhi	r4,1028
 4026a68:	212f5f04 	addi	r4,r4,-17028
 4026a6c:	40299e00 	call	40299e0 <alt_fs_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_PIXEL_DMA, VGA_PIXEL_DMA);
 4026a70:	00810134 	movhi	r2,1028
 4026a74:	10af6b04 	addi	r2,r2,-16980
 4026a78:	10800a17 	ldw	r2,40(r2)
 4026a7c:	10800017 	ldw	r2,0(r2)
 4026a80:	1007883a 	mov	r3,r2
 4026a84:	00810134 	movhi	r2,1028
 4026a88:	10af6b04 	addi	r2,r2,-16980
 4026a8c:	10c00b15 	stw	r3,44(r2)
 4026a90:	00810134 	movhi	r2,1028
 4026a94:	10af6b04 	addi	r2,r2,-16980
 4026a98:	10800a17 	ldw	r2,40(r2)
 4026a9c:	10800104 	addi	r2,r2,4
 4026aa0:	10800017 	ldw	r2,0(r2)
 4026aa4:	1007883a 	mov	r3,r2
 4026aa8:	00810134 	movhi	r2,1028
 4026aac:	10af6b04 	addi	r2,r2,-16980
 4026ab0:	10c00c15 	stw	r3,48(r2)
 4026ab4:	00810134 	movhi	r2,1028
 4026ab8:	10af6b04 	addi	r2,r2,-16980
 4026abc:	10800a17 	ldw	r2,40(r2)
 4026ac0:	10800204 	addi	r2,r2,8
 4026ac4:	10800017 	ldw	r2,0(r2)
 4026ac8:	10ffffcc 	andi	r3,r2,65535
 4026acc:	00810134 	movhi	r2,1028
 4026ad0:	10af6b04 	addi	r2,r2,-16980
 4026ad4:	10c00f15 	stw	r3,60(r2)
 4026ad8:	00810134 	movhi	r2,1028
 4026adc:	10af6b04 	addi	r2,r2,-16980
 4026ae0:	10800a17 	ldw	r2,40(r2)
 4026ae4:	10800204 	addi	r2,r2,8
 4026ae8:	10800017 	ldw	r2,0(r2)
 4026aec:	1006d43a 	srli	r3,r2,16
 4026af0:	00810134 	movhi	r2,1028
 4026af4:	10af6b04 	addi	r2,r2,-16980
 4026af8:	10c01015 	stw	r3,64(r2)
 4026afc:	00810134 	movhi	r2,1028
 4026b00:	10af6b04 	addi	r2,r2,-16980
 4026b04:	10800a17 	ldw	r2,40(r2)
 4026b08:	10800304 	addi	r2,r2,12
 4026b0c:	10800017 	ldw	r2,0(r2)
 4026b10:	1005d07a 	srai	r2,r2,1
 4026b14:	10c0004c 	andi	r3,r2,1
 4026b18:	00810134 	movhi	r2,1028
 4026b1c:	10af6b04 	addi	r2,r2,-16980
 4026b20:	10c00d15 	stw	r3,52(r2)
 4026b24:	00810134 	movhi	r2,1028
 4026b28:	10af6b04 	addi	r2,r2,-16980
 4026b2c:	10800a17 	ldw	r2,40(r2)
 4026b30:	10800304 	addi	r2,r2,12
 4026b34:	10800017 	ldw	r2,0(r2)
 4026b38:	1005d13a 	srai	r2,r2,4
 4026b3c:	10c003cc 	andi	r3,r2,15
 4026b40:	00810134 	movhi	r2,1028
 4026b44:	10af6b04 	addi	r2,r2,-16980
 4026b48:	10c00e15 	stw	r3,56(r2)
 4026b4c:	00810134 	movhi	r2,1028
 4026b50:	10af6b04 	addi	r2,r2,-16980
 4026b54:	10800a17 	ldw	r2,40(r2)
 4026b58:	10800304 	addi	r2,r2,12
 4026b5c:	10800017 	ldw	r2,0(r2)
 4026b60:	1005d43a 	srai	r2,r2,16
 4026b64:	e0bfff05 	stb	r2,-4(fp)
 4026b68:	00810134 	movhi	r2,1028
 4026b6c:	10af6b04 	addi	r2,r2,-16980
 4026b70:	10800a17 	ldw	r2,40(r2)
 4026b74:	10800304 	addi	r2,r2,12
 4026b78:	10800017 	ldw	r2,0(r2)
 4026b7c:	1004d63a 	srli	r2,r2,24
 4026b80:	e0bfff45 	stb	r2,-3(fp)
 4026b84:	00810134 	movhi	r2,1028
 4026b88:	10af6b04 	addi	r2,r2,-16980
 4026b8c:	10800e17 	ldw	r2,56(r2)
 4026b90:	10800058 	cmpnei	r2,r2,1
 4026b94:	1000041e 	bne	r2,zero,4026ba8 <alt_sys_init+0x194>
 4026b98:	00810134 	movhi	r2,1028
 4026b9c:	10af6b04 	addi	r2,r2,-16980
 4026ba0:	10001115 	stw	zero,68(r2)
 4026ba4:	00000e06 	br	4026be0 <alt_sys_init+0x1cc>
 4026ba8:	00810134 	movhi	r2,1028
 4026bac:	10af6b04 	addi	r2,r2,-16980
 4026bb0:	10800e17 	ldw	r2,56(r2)
 4026bb4:	10800098 	cmpnei	r2,r2,2
 4026bb8:	1000051e 	bne	r2,zero,4026bd0 <alt_sys_init+0x1bc>
 4026bbc:	00810134 	movhi	r2,1028
 4026bc0:	10af6b04 	addi	r2,r2,-16980
 4026bc4:	00c00044 	movi	r3,1
 4026bc8:	10c01115 	stw	r3,68(r2)
 4026bcc:	00000406 	br	4026be0 <alt_sys_init+0x1cc>
 4026bd0:	00810134 	movhi	r2,1028
 4026bd4:	10af6b04 	addi	r2,r2,-16980
 4026bd8:	00c00084 	movi	r3,2
 4026bdc:	10c01115 	stw	r3,68(r2)
 4026be0:	e0bfff03 	ldbu	r2,-4(fp)
 4026be4:	00c00804 	movi	r3,32
 4026be8:	1885c83a 	sub	r2,r3,r2
 4026bec:	00ffffc4 	movi	r3,-1
 4026bf0:	1886d83a 	srl	r3,r3,r2
 4026bf4:	00810134 	movhi	r2,1028
 4026bf8:	10af6b04 	addi	r2,r2,-16980
 4026bfc:	10c01215 	stw	r3,72(r2)
 4026c00:	e0ffff03 	ldbu	r3,-4(fp)
 4026c04:	00810134 	movhi	r2,1028
 4026c08:	10af6b04 	addi	r2,r2,-16980
 4026c0c:	10801117 	ldw	r2,68(r2)
 4026c10:	1887883a 	add	r3,r3,r2
 4026c14:	00810134 	movhi	r2,1028
 4026c18:	10af6b04 	addi	r2,r2,-16980
 4026c1c:	10c01315 	stw	r3,76(r2)
 4026c20:	e0bfff43 	ldbu	r2,-3(fp)
 4026c24:	00c00804 	movi	r3,32
 4026c28:	1885c83a 	sub	r2,r3,r2
 4026c2c:	00ffffc4 	movi	r3,-1
 4026c30:	1886d83a 	srl	r3,r3,r2
 4026c34:	00810134 	movhi	r2,1028
 4026c38:	10af6b04 	addi	r2,r2,-16980
 4026c3c:	10c01415 	stw	r3,80(r2)
 4026c40:	01010134 	movhi	r4,1028
 4026c44:	212f6b04 	addi	r4,r4,-16980
 4026c48:	40269a80 	call	40269a8 <alt_dev_reg>
}
 4026c4c:	0001883a 	nop
 4026c50:	e037883a 	mov	sp,fp
 4026c54:	dfc00117 	ldw	ra,4(sp)
 4026c58:	df000017 	ldw	fp,0(sp)
 4026c5c:	dec00204 	addi	sp,sp,8
 4026c60:	f800283a 	ret

04026c64 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4026c64:	defffa04 	addi	sp,sp,-24
 4026c68:	dfc00515 	stw	ra,20(sp)
 4026c6c:	df000415 	stw	fp,16(sp)
 4026c70:	df000404 	addi	fp,sp,16
 4026c74:	e13ffd15 	stw	r4,-12(fp)
 4026c78:	e17ffe15 	stw	r5,-8(fp)
 4026c7c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4026c80:	e0bffd17 	ldw	r2,-12(fp)
 4026c84:	10800017 	ldw	r2,0(r2)
 4026c88:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4026c8c:	e0bffc17 	ldw	r2,-16(fp)
 4026c90:	10c00a04 	addi	r3,r2,40
 4026c94:	e0bffd17 	ldw	r2,-12(fp)
 4026c98:	10800217 	ldw	r2,8(r2)
 4026c9c:	100f883a 	mov	r7,r2
 4026ca0:	e1bfff17 	ldw	r6,-4(fp)
 4026ca4:	e17ffe17 	ldw	r5,-8(fp)
 4026ca8:	1809883a 	mov	r4,r3
 4026cac:	402728c0 	call	402728c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4026cb0:	e037883a 	mov	sp,fp
 4026cb4:	dfc00117 	ldw	ra,4(sp)
 4026cb8:	df000017 	ldw	fp,0(sp)
 4026cbc:	dec00204 	addi	sp,sp,8
 4026cc0:	f800283a 	ret

04026cc4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4026cc4:	defffa04 	addi	sp,sp,-24
 4026cc8:	dfc00515 	stw	ra,20(sp)
 4026ccc:	df000415 	stw	fp,16(sp)
 4026cd0:	df000404 	addi	fp,sp,16
 4026cd4:	e13ffd15 	stw	r4,-12(fp)
 4026cd8:	e17ffe15 	stw	r5,-8(fp)
 4026cdc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4026ce0:	e0bffd17 	ldw	r2,-12(fp)
 4026ce4:	10800017 	ldw	r2,0(r2)
 4026ce8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4026cec:	e0bffc17 	ldw	r2,-16(fp)
 4026cf0:	10c00a04 	addi	r3,r2,40
 4026cf4:	e0bffd17 	ldw	r2,-12(fp)
 4026cf8:	10800217 	ldw	r2,8(r2)
 4026cfc:	100f883a 	mov	r7,r2
 4026d00:	e1bfff17 	ldw	r6,-4(fp)
 4026d04:	e17ffe17 	ldw	r5,-8(fp)
 4026d08:	1809883a 	mov	r4,r3
 4026d0c:	40274a80 	call	40274a8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4026d10:	e037883a 	mov	sp,fp
 4026d14:	dfc00117 	ldw	ra,4(sp)
 4026d18:	df000017 	ldw	fp,0(sp)
 4026d1c:	dec00204 	addi	sp,sp,8
 4026d20:	f800283a 	ret

04026d24 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4026d24:	defffc04 	addi	sp,sp,-16
 4026d28:	dfc00315 	stw	ra,12(sp)
 4026d2c:	df000215 	stw	fp,8(sp)
 4026d30:	df000204 	addi	fp,sp,8
 4026d34:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4026d38:	e0bfff17 	ldw	r2,-4(fp)
 4026d3c:	10800017 	ldw	r2,0(r2)
 4026d40:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4026d44:	e0bffe17 	ldw	r2,-8(fp)
 4026d48:	10c00a04 	addi	r3,r2,40
 4026d4c:	e0bfff17 	ldw	r2,-4(fp)
 4026d50:	10800217 	ldw	r2,8(r2)
 4026d54:	100b883a 	mov	r5,r2
 4026d58:	1809883a 	mov	r4,r3
 4026d5c:	40271340 	call	4027134 <altera_avalon_jtag_uart_close>
}
 4026d60:	e037883a 	mov	sp,fp
 4026d64:	dfc00117 	ldw	ra,4(sp)
 4026d68:	df000017 	ldw	fp,0(sp)
 4026d6c:	dec00204 	addi	sp,sp,8
 4026d70:	f800283a 	ret

04026d74 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4026d74:	defffa04 	addi	sp,sp,-24
 4026d78:	dfc00515 	stw	ra,20(sp)
 4026d7c:	df000415 	stw	fp,16(sp)
 4026d80:	df000404 	addi	fp,sp,16
 4026d84:	e13ffd15 	stw	r4,-12(fp)
 4026d88:	e17ffe15 	stw	r5,-8(fp)
 4026d8c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 4026d90:	e0bffd17 	ldw	r2,-12(fp)
 4026d94:	10800017 	ldw	r2,0(r2)
 4026d98:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4026d9c:	e0bffc17 	ldw	r2,-16(fp)
 4026da0:	10800a04 	addi	r2,r2,40
 4026da4:	e1bfff17 	ldw	r6,-4(fp)
 4026da8:	e17ffe17 	ldw	r5,-8(fp)
 4026dac:	1009883a 	mov	r4,r2
 4026db0:	402719c0 	call	402719c <altera_avalon_jtag_uart_ioctl>
}
 4026db4:	e037883a 	mov	sp,fp
 4026db8:	dfc00117 	ldw	ra,4(sp)
 4026dbc:	df000017 	ldw	fp,0(sp)
 4026dc0:	dec00204 	addi	sp,sp,8
 4026dc4:	f800283a 	ret

04026dc8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4026dc8:	defffa04 	addi	sp,sp,-24
 4026dcc:	dfc00515 	stw	ra,20(sp)
 4026dd0:	df000415 	stw	fp,16(sp)
 4026dd4:	df000404 	addi	fp,sp,16
 4026dd8:	e13ffd15 	stw	r4,-12(fp)
 4026ddc:	e17ffe15 	stw	r5,-8(fp)
 4026de0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4026de4:	e0bffd17 	ldw	r2,-12(fp)
 4026de8:	00c00044 	movi	r3,1
 4026dec:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4026df0:	e0bffd17 	ldw	r2,-12(fp)
 4026df4:	10800017 	ldw	r2,0(r2)
 4026df8:	10800104 	addi	r2,r2,4
 4026dfc:	1007883a 	mov	r3,r2
 4026e00:	e0bffd17 	ldw	r2,-12(fp)
 4026e04:	10800817 	ldw	r2,32(r2)
 4026e08:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4026e0c:	e0bffe17 	ldw	r2,-8(fp)
 4026e10:	e0ffff17 	ldw	r3,-4(fp)
 4026e14:	d8000015 	stw	zero,0(sp)
 4026e18:	e1fffd17 	ldw	r7,-12(fp)
 4026e1c:	018100b4 	movhi	r6,1026
 4026e20:	319ba204 	addi	r6,r6,28296
 4026e24:	180b883a 	mov	r5,r3
 4026e28:	1009883a 	mov	r4,r2
 4026e2c:	4029a800 	call	4029a80 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4026e30:	e0bffd17 	ldw	r2,-12(fp)
 4026e34:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4026e38:	e0bffd17 	ldw	r2,-12(fp)
 4026e3c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4026e40:	d0dea517 	ldw	r3,31380(gp)
 4026e44:	e1fffd17 	ldw	r7,-12(fp)
 4026e48:	018100b4 	movhi	r6,1026
 4026e4c:	319c2504 	addi	r6,r6,28820
 4026e50:	180b883a 	mov	r5,r3
 4026e54:	1009883a 	mov	r4,r2
 4026e58:	40296640 	call	4029664 <alt_alarm_start>
 4026e5c:	1000040e 	bge	r2,zero,4026e70 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4026e60:	e0fffd17 	ldw	r3,-12(fp)
 4026e64:	00a00034 	movhi	r2,32768
 4026e68:	10bfffc4 	addi	r2,r2,-1
 4026e6c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4026e70:	0001883a 	nop
 4026e74:	e037883a 	mov	sp,fp
 4026e78:	dfc00117 	ldw	ra,4(sp)
 4026e7c:	df000017 	ldw	fp,0(sp)
 4026e80:	dec00204 	addi	sp,sp,8
 4026e84:	f800283a 	ret

04026e88 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4026e88:	defff804 	addi	sp,sp,-32
 4026e8c:	df000715 	stw	fp,28(sp)
 4026e90:	df000704 	addi	fp,sp,28
 4026e94:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4026e98:	e0bfff17 	ldw	r2,-4(fp)
 4026e9c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 4026ea0:	e0bffb17 	ldw	r2,-20(fp)
 4026ea4:	10800017 	ldw	r2,0(r2)
 4026ea8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4026eac:	e0bffc17 	ldw	r2,-16(fp)
 4026eb0:	10800104 	addi	r2,r2,4
 4026eb4:	10800037 	ldwio	r2,0(r2)
 4026eb8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4026ebc:	e0bffd17 	ldw	r2,-12(fp)
 4026ec0:	1080c00c 	andi	r2,r2,768
 4026ec4:	10006d26 	beq	r2,zero,402707c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4026ec8:	e0bffd17 	ldw	r2,-12(fp)
 4026ecc:	1080400c 	andi	r2,r2,256
 4026ed0:	10003526 	beq	r2,zero,4026fa8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4026ed4:	00800074 	movhi	r2,1
 4026ed8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4026edc:	e0bffb17 	ldw	r2,-20(fp)
 4026ee0:	10800a17 	ldw	r2,40(r2)
 4026ee4:	10800044 	addi	r2,r2,1
 4026ee8:	1081ffcc 	andi	r2,r2,2047
 4026eec:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 4026ef0:	e0bffb17 	ldw	r2,-20(fp)
 4026ef4:	10c00b17 	ldw	r3,44(r2)
 4026ef8:	e0bffe17 	ldw	r2,-8(fp)
 4026efc:	18801526 	beq	r3,r2,4026f54 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4026f00:	e0bffc17 	ldw	r2,-16(fp)
 4026f04:	10800037 	ldwio	r2,0(r2)
 4026f08:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4026f0c:	e0bff917 	ldw	r2,-28(fp)
 4026f10:	10a0000c 	andi	r2,r2,32768
 4026f14:	10001126 	beq	r2,zero,4026f5c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4026f18:	e0bffb17 	ldw	r2,-20(fp)
 4026f1c:	10800a17 	ldw	r2,40(r2)
 4026f20:	e0fff917 	ldw	r3,-28(fp)
 4026f24:	1809883a 	mov	r4,r3
 4026f28:	e0fffb17 	ldw	r3,-20(fp)
 4026f2c:	1885883a 	add	r2,r3,r2
 4026f30:	10800e04 	addi	r2,r2,56
 4026f34:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4026f38:	e0bffb17 	ldw	r2,-20(fp)
 4026f3c:	10800a17 	ldw	r2,40(r2)
 4026f40:	10800044 	addi	r2,r2,1
 4026f44:	10c1ffcc 	andi	r3,r2,2047
 4026f48:	e0bffb17 	ldw	r2,-20(fp)
 4026f4c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 4026f50:	003fe206 	br	4026edc <__alt_data_end+0xfc026edc>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 4026f54:	0001883a 	nop
 4026f58:	00000106 	br	4026f60 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 4026f5c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4026f60:	e0bff917 	ldw	r2,-28(fp)
 4026f64:	10bfffec 	andhi	r2,r2,65535
 4026f68:	10000f26 	beq	r2,zero,4026fa8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4026f6c:	e0bffb17 	ldw	r2,-20(fp)
 4026f70:	10c00817 	ldw	r3,32(r2)
 4026f74:	00bfff84 	movi	r2,-2
 4026f78:	1886703a 	and	r3,r3,r2
 4026f7c:	e0bffb17 	ldw	r2,-20(fp)
 4026f80:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4026f84:	e0bffc17 	ldw	r2,-16(fp)
 4026f88:	10800104 	addi	r2,r2,4
 4026f8c:	1007883a 	mov	r3,r2
 4026f90:	e0bffb17 	ldw	r2,-20(fp)
 4026f94:	10800817 	ldw	r2,32(r2)
 4026f98:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4026f9c:	e0bffc17 	ldw	r2,-16(fp)
 4026fa0:	10800104 	addi	r2,r2,4
 4026fa4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4026fa8:	e0bffd17 	ldw	r2,-12(fp)
 4026fac:	1080800c 	andi	r2,r2,512
 4026fb0:	103fbe26 	beq	r2,zero,4026eac <__alt_data_end+0xfc026eac>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4026fb4:	e0bffd17 	ldw	r2,-12(fp)
 4026fb8:	1004d43a 	srli	r2,r2,16
 4026fbc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4026fc0:	00001406 	br	4027014 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4026fc4:	e0bffc17 	ldw	r2,-16(fp)
 4026fc8:	e0fffb17 	ldw	r3,-20(fp)
 4026fcc:	18c00d17 	ldw	r3,52(r3)
 4026fd0:	e13ffb17 	ldw	r4,-20(fp)
 4026fd4:	20c7883a 	add	r3,r4,r3
 4026fd8:	18c20e04 	addi	r3,r3,2104
 4026fdc:	18c00003 	ldbu	r3,0(r3)
 4026fe0:	18c03fcc 	andi	r3,r3,255
 4026fe4:	18c0201c 	xori	r3,r3,128
 4026fe8:	18ffe004 	addi	r3,r3,-128
 4026fec:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4026ff0:	e0bffb17 	ldw	r2,-20(fp)
 4026ff4:	10800d17 	ldw	r2,52(r2)
 4026ff8:	10800044 	addi	r2,r2,1
 4026ffc:	10c1ffcc 	andi	r3,r2,2047
 4027000:	e0bffb17 	ldw	r2,-20(fp)
 4027004:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4027008:	e0bffa17 	ldw	r2,-24(fp)
 402700c:	10bfffc4 	addi	r2,r2,-1
 4027010:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4027014:	e0bffa17 	ldw	r2,-24(fp)
 4027018:	10000526 	beq	r2,zero,4027030 <altera_avalon_jtag_uart_irq+0x1a8>
 402701c:	e0bffb17 	ldw	r2,-20(fp)
 4027020:	10c00d17 	ldw	r3,52(r2)
 4027024:	e0bffb17 	ldw	r2,-20(fp)
 4027028:	10800c17 	ldw	r2,48(r2)
 402702c:	18bfe51e 	bne	r3,r2,4026fc4 <__alt_data_end+0xfc026fc4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4027030:	e0bffa17 	ldw	r2,-24(fp)
 4027034:	103f9d26 	beq	r2,zero,4026eac <__alt_data_end+0xfc026eac>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4027038:	e0bffb17 	ldw	r2,-20(fp)
 402703c:	10c00817 	ldw	r3,32(r2)
 4027040:	00bfff44 	movi	r2,-3
 4027044:	1886703a 	and	r3,r3,r2
 4027048:	e0bffb17 	ldw	r2,-20(fp)
 402704c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4027050:	e0bffb17 	ldw	r2,-20(fp)
 4027054:	10800017 	ldw	r2,0(r2)
 4027058:	10800104 	addi	r2,r2,4
 402705c:	1007883a 	mov	r3,r2
 4027060:	e0bffb17 	ldw	r2,-20(fp)
 4027064:	10800817 	ldw	r2,32(r2)
 4027068:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 402706c:	e0bffc17 	ldw	r2,-16(fp)
 4027070:	10800104 	addi	r2,r2,4
 4027074:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4027078:	003f8c06 	br	4026eac <__alt_data_end+0xfc026eac>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 402707c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 4027080:	0001883a 	nop
 4027084:	e037883a 	mov	sp,fp
 4027088:	df000017 	ldw	fp,0(sp)
 402708c:	dec00104 	addi	sp,sp,4
 4027090:	f800283a 	ret

04027094 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4027094:	defff804 	addi	sp,sp,-32
 4027098:	df000715 	stw	fp,28(sp)
 402709c:	df000704 	addi	fp,sp,28
 40270a0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 40270a4:	e0bffb17 	ldw	r2,-20(fp)
 40270a8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 40270ac:	e0bff917 	ldw	r2,-28(fp)
 40270b0:	10800017 	ldw	r2,0(r2)
 40270b4:	10800104 	addi	r2,r2,4
 40270b8:	10800037 	ldwio	r2,0(r2)
 40270bc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 40270c0:	e0bffa17 	ldw	r2,-24(fp)
 40270c4:	1081000c 	andi	r2,r2,1024
 40270c8:	10000b26 	beq	r2,zero,40270f8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 40270cc:	e0bff917 	ldw	r2,-28(fp)
 40270d0:	10800017 	ldw	r2,0(r2)
 40270d4:	10800104 	addi	r2,r2,4
 40270d8:	1007883a 	mov	r3,r2
 40270dc:	e0bff917 	ldw	r2,-28(fp)
 40270e0:	10800817 	ldw	r2,32(r2)
 40270e4:	10810014 	ori	r2,r2,1024
 40270e8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 40270ec:	e0bff917 	ldw	r2,-28(fp)
 40270f0:	10000915 	stw	zero,36(r2)
 40270f4:	00000a06 	br	4027120 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 40270f8:	e0bff917 	ldw	r2,-28(fp)
 40270fc:	10c00917 	ldw	r3,36(r2)
 4027100:	00a00034 	movhi	r2,32768
 4027104:	10bfff04 	addi	r2,r2,-4
 4027108:	10c00536 	bltu	r2,r3,4027120 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 402710c:	e0bff917 	ldw	r2,-28(fp)
 4027110:	10800917 	ldw	r2,36(r2)
 4027114:	10c00044 	addi	r3,r2,1
 4027118:	e0bff917 	ldw	r2,-28(fp)
 402711c:	10c00915 	stw	r3,36(r2)
 4027120:	d09ea517 	ldw	r2,31380(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4027124:	e037883a 	mov	sp,fp
 4027128:	df000017 	ldw	fp,0(sp)
 402712c:	dec00104 	addi	sp,sp,4
 4027130:	f800283a 	ret

04027134 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4027134:	defffd04 	addi	sp,sp,-12
 4027138:	df000215 	stw	fp,8(sp)
 402713c:	df000204 	addi	fp,sp,8
 4027140:	e13ffe15 	stw	r4,-8(fp)
 4027144:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4027148:	00000506 	br	4027160 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 402714c:	e0bfff17 	ldw	r2,-4(fp)
 4027150:	1090000c 	andi	r2,r2,16384
 4027154:	10000226 	beq	r2,zero,4027160 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 4027158:	00bffd44 	movi	r2,-11
 402715c:	00000b06 	br	402718c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4027160:	e0bffe17 	ldw	r2,-8(fp)
 4027164:	10c00d17 	ldw	r3,52(r2)
 4027168:	e0bffe17 	ldw	r2,-8(fp)
 402716c:	10800c17 	ldw	r2,48(r2)
 4027170:	18800526 	beq	r3,r2,4027188 <altera_avalon_jtag_uart_close+0x54>
 4027174:	e0bffe17 	ldw	r2,-8(fp)
 4027178:	10c00917 	ldw	r3,36(r2)
 402717c:	e0bffe17 	ldw	r2,-8(fp)
 4027180:	10800117 	ldw	r2,4(r2)
 4027184:	18bff136 	bltu	r3,r2,402714c <__alt_data_end+0xfc02714c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4027188:	0005883a 	mov	r2,zero
}
 402718c:	e037883a 	mov	sp,fp
 4027190:	df000017 	ldw	fp,0(sp)
 4027194:	dec00104 	addi	sp,sp,4
 4027198:	f800283a 	ret

0402719c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 402719c:	defffa04 	addi	sp,sp,-24
 40271a0:	df000515 	stw	fp,20(sp)
 40271a4:	df000504 	addi	fp,sp,20
 40271a8:	e13ffd15 	stw	r4,-12(fp)
 40271ac:	e17ffe15 	stw	r5,-8(fp)
 40271b0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 40271b4:	00bff9c4 	movi	r2,-25
 40271b8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 40271bc:	e0bffe17 	ldw	r2,-8(fp)
 40271c0:	10da8060 	cmpeqi	r3,r2,27137
 40271c4:	1800031e 	bne	r3,zero,40271d4 <altera_avalon_jtag_uart_ioctl+0x38>
 40271c8:	109a80a0 	cmpeqi	r2,r2,27138
 40271cc:	1000181e 	bne	r2,zero,4027230 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 40271d0:	00002906 	br	4027278 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 40271d4:	e0bffd17 	ldw	r2,-12(fp)
 40271d8:	10c00117 	ldw	r3,4(r2)
 40271dc:	00a00034 	movhi	r2,32768
 40271e0:	10bfffc4 	addi	r2,r2,-1
 40271e4:	18802126 	beq	r3,r2,402726c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 40271e8:	e0bfff17 	ldw	r2,-4(fp)
 40271ec:	10800017 	ldw	r2,0(r2)
 40271f0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 40271f4:	e0bffc17 	ldw	r2,-16(fp)
 40271f8:	10800090 	cmplti	r2,r2,2
 40271fc:	1000061e 	bne	r2,zero,4027218 <altera_avalon_jtag_uart_ioctl+0x7c>
 4027200:	e0fffc17 	ldw	r3,-16(fp)
 4027204:	00a00034 	movhi	r2,32768
 4027208:	10bfffc4 	addi	r2,r2,-1
 402720c:	18800226 	beq	r3,r2,4027218 <altera_avalon_jtag_uart_ioctl+0x7c>
 4027210:	e0bffc17 	ldw	r2,-16(fp)
 4027214:	00000206 	br	4027220 <altera_avalon_jtag_uart_ioctl+0x84>
 4027218:	00a00034 	movhi	r2,32768
 402721c:	10bfff84 	addi	r2,r2,-2
 4027220:	e0fffd17 	ldw	r3,-12(fp)
 4027224:	18800115 	stw	r2,4(r3)
      rc = 0;
 4027228:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 402722c:	00000f06 	br	402726c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 4027230:	e0bffd17 	ldw	r2,-12(fp)
 4027234:	10c00117 	ldw	r3,4(r2)
 4027238:	00a00034 	movhi	r2,32768
 402723c:	10bfffc4 	addi	r2,r2,-1
 4027240:	18800c26 	beq	r3,r2,4027274 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4027244:	e0bffd17 	ldw	r2,-12(fp)
 4027248:	10c00917 	ldw	r3,36(r2)
 402724c:	e0bffd17 	ldw	r2,-12(fp)
 4027250:	10800117 	ldw	r2,4(r2)
 4027254:	1885803a 	cmpltu	r2,r3,r2
 4027258:	10c03fcc 	andi	r3,r2,255
 402725c:	e0bfff17 	ldw	r2,-4(fp)
 4027260:	10c00015 	stw	r3,0(r2)
      rc = 0;
 4027264:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4027268:	00000206 	br	4027274 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 402726c:	0001883a 	nop
 4027270:	00000106 	br	4027278 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 4027274:	0001883a 	nop

  default:
    break;
  }

  return rc;
 4027278:	e0bffb17 	ldw	r2,-20(fp)
}
 402727c:	e037883a 	mov	sp,fp
 4027280:	df000017 	ldw	fp,0(sp)
 4027284:	dec00104 	addi	sp,sp,4
 4027288:	f800283a 	ret

0402728c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 402728c:	defff304 	addi	sp,sp,-52
 4027290:	dfc00c15 	stw	ra,48(sp)
 4027294:	df000b15 	stw	fp,44(sp)
 4027298:	df000b04 	addi	fp,sp,44
 402729c:	e13ffc15 	stw	r4,-16(fp)
 40272a0:	e17ffd15 	stw	r5,-12(fp)
 40272a4:	e1bffe15 	stw	r6,-8(fp)
 40272a8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 40272ac:	e0bffd17 	ldw	r2,-12(fp)
 40272b0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 40272b4:	00004706 	br	40273d4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 40272b8:	e0bffc17 	ldw	r2,-16(fp)
 40272bc:	10800a17 	ldw	r2,40(r2)
 40272c0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 40272c4:	e0bffc17 	ldw	r2,-16(fp)
 40272c8:	10800b17 	ldw	r2,44(r2)
 40272cc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 40272d0:	e0fff717 	ldw	r3,-36(fp)
 40272d4:	e0bff817 	ldw	r2,-32(fp)
 40272d8:	18800536 	bltu	r3,r2,40272f0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 40272dc:	e0fff717 	ldw	r3,-36(fp)
 40272e0:	e0bff817 	ldw	r2,-32(fp)
 40272e4:	1885c83a 	sub	r2,r3,r2
 40272e8:	e0bff615 	stw	r2,-40(fp)
 40272ec:	00000406 	br	4027300 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 40272f0:	00c20004 	movi	r3,2048
 40272f4:	e0bff817 	ldw	r2,-32(fp)
 40272f8:	1885c83a 	sub	r2,r3,r2
 40272fc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4027300:	e0bff617 	ldw	r2,-40(fp)
 4027304:	10001e26 	beq	r2,zero,4027380 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 4027308:	e0fffe17 	ldw	r3,-8(fp)
 402730c:	e0bff617 	ldw	r2,-40(fp)
 4027310:	1880022e 	bgeu	r3,r2,402731c <altera_avalon_jtag_uart_read+0x90>
        n = space;
 4027314:	e0bffe17 	ldw	r2,-8(fp)
 4027318:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 402731c:	e0bffc17 	ldw	r2,-16(fp)
 4027320:	10c00e04 	addi	r3,r2,56
 4027324:	e0bff817 	ldw	r2,-32(fp)
 4027328:	1885883a 	add	r2,r3,r2
 402732c:	e1bff617 	ldw	r6,-40(fp)
 4027330:	100b883a 	mov	r5,r2
 4027334:	e13ff517 	ldw	r4,-44(fp)
 4027338:	40191280 	call	4019128 <memcpy>
      ptr   += n;
 402733c:	e0fff517 	ldw	r3,-44(fp)
 4027340:	e0bff617 	ldw	r2,-40(fp)
 4027344:	1885883a 	add	r2,r3,r2
 4027348:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 402734c:	e0fffe17 	ldw	r3,-8(fp)
 4027350:	e0bff617 	ldw	r2,-40(fp)
 4027354:	1885c83a 	sub	r2,r3,r2
 4027358:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402735c:	e0fff817 	ldw	r3,-32(fp)
 4027360:	e0bff617 	ldw	r2,-40(fp)
 4027364:	1885883a 	add	r2,r3,r2
 4027368:	10c1ffcc 	andi	r3,r2,2047
 402736c:	e0bffc17 	ldw	r2,-16(fp)
 4027370:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4027374:	e0bffe17 	ldw	r2,-8(fp)
 4027378:	00bfcf16 	blt	zero,r2,40272b8 <__alt_data_end+0xfc0272b8>
 402737c:	00000106 	br	4027384 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 4027380:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4027384:	e0fff517 	ldw	r3,-44(fp)
 4027388:	e0bffd17 	ldw	r2,-12(fp)
 402738c:	1880141e 	bne	r3,r2,40273e0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4027390:	e0bfff17 	ldw	r2,-4(fp)
 4027394:	1090000c 	andi	r2,r2,16384
 4027398:	1000131e 	bne	r2,zero,40273e8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 402739c:	0001883a 	nop
 40273a0:	e0bffc17 	ldw	r2,-16(fp)
 40273a4:	10c00a17 	ldw	r3,40(r2)
 40273a8:	e0bff717 	ldw	r2,-36(fp)
 40273ac:	1880051e 	bne	r3,r2,40273c4 <altera_avalon_jtag_uart_read+0x138>
 40273b0:	e0bffc17 	ldw	r2,-16(fp)
 40273b4:	10c00917 	ldw	r3,36(r2)
 40273b8:	e0bffc17 	ldw	r2,-16(fp)
 40273bc:	10800117 	ldw	r2,4(r2)
 40273c0:	18bff736 	bltu	r3,r2,40273a0 <__alt_data_end+0xfc0273a0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 40273c4:	e0bffc17 	ldw	r2,-16(fp)
 40273c8:	10c00a17 	ldw	r3,40(r2)
 40273cc:	e0bff717 	ldw	r2,-36(fp)
 40273d0:	18800726 	beq	r3,r2,40273f0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 40273d4:	e0bffe17 	ldw	r2,-8(fp)
 40273d8:	00bfb716 	blt	zero,r2,40272b8 <__alt_data_end+0xfc0272b8>
 40273dc:	00000506 	br	40273f4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 40273e0:	0001883a 	nop
 40273e4:	00000306 	br	40273f4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 40273e8:	0001883a 	nop
 40273ec:	00000106 	br	40273f4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 40273f0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 40273f4:	e0fff517 	ldw	r3,-44(fp)
 40273f8:	e0bffd17 	ldw	r2,-12(fp)
 40273fc:	18801826 	beq	r3,r2,4027460 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4027400:	0005303a 	rdctl	r2,status
 4027404:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4027408:	e0fffb17 	ldw	r3,-20(fp)
 402740c:	00bfff84 	movi	r2,-2
 4027410:	1884703a 	and	r2,r3,r2
 4027414:	1001703a 	wrctl	status,r2
  
  return context;
 4027418:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 402741c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4027420:	e0bffc17 	ldw	r2,-16(fp)
 4027424:	10800817 	ldw	r2,32(r2)
 4027428:	10c00054 	ori	r3,r2,1
 402742c:	e0bffc17 	ldw	r2,-16(fp)
 4027430:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4027434:	e0bffc17 	ldw	r2,-16(fp)
 4027438:	10800017 	ldw	r2,0(r2)
 402743c:	10800104 	addi	r2,r2,4
 4027440:	1007883a 	mov	r3,r2
 4027444:	e0bffc17 	ldw	r2,-16(fp)
 4027448:	10800817 	ldw	r2,32(r2)
 402744c:	18800035 	stwio	r2,0(r3)
 4027450:	e0bffa17 	ldw	r2,-24(fp)
 4027454:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4027458:	e0bff917 	ldw	r2,-28(fp)
 402745c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4027460:	e0fff517 	ldw	r3,-44(fp)
 4027464:	e0bffd17 	ldw	r2,-12(fp)
 4027468:	18800426 	beq	r3,r2,402747c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 402746c:	e0fff517 	ldw	r3,-44(fp)
 4027470:	e0bffd17 	ldw	r2,-12(fp)
 4027474:	1885c83a 	sub	r2,r3,r2
 4027478:	00000606 	br	4027494 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 402747c:	e0bfff17 	ldw	r2,-4(fp)
 4027480:	1090000c 	andi	r2,r2,16384
 4027484:	10000226 	beq	r2,zero,4027490 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 4027488:	00bffd44 	movi	r2,-11
 402748c:	00000106 	br	4027494 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 4027490:	00bffec4 	movi	r2,-5
}
 4027494:	e037883a 	mov	sp,fp
 4027498:	dfc00117 	ldw	ra,4(sp)
 402749c:	df000017 	ldw	fp,0(sp)
 40274a0:	dec00204 	addi	sp,sp,8
 40274a4:	f800283a 	ret

040274a8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 40274a8:	defff304 	addi	sp,sp,-52
 40274ac:	dfc00c15 	stw	ra,48(sp)
 40274b0:	df000b15 	stw	fp,44(sp)
 40274b4:	df000b04 	addi	fp,sp,44
 40274b8:	e13ffc15 	stw	r4,-16(fp)
 40274bc:	e17ffd15 	stw	r5,-12(fp)
 40274c0:	e1bffe15 	stw	r6,-8(fp)
 40274c4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 40274c8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 40274cc:	e0bffd17 	ldw	r2,-12(fp)
 40274d0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 40274d4:	00003706 	br	40275b4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 40274d8:	e0bffc17 	ldw	r2,-16(fp)
 40274dc:	10800c17 	ldw	r2,48(r2)
 40274e0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 40274e4:	e0bffc17 	ldw	r2,-16(fp)
 40274e8:	10800d17 	ldw	r2,52(r2)
 40274ec:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 40274f0:	e0fff917 	ldw	r3,-28(fp)
 40274f4:	e0bff517 	ldw	r2,-44(fp)
 40274f8:	1880062e 	bgeu	r3,r2,4027514 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 40274fc:	e0fff517 	ldw	r3,-44(fp)
 4027500:	e0bff917 	ldw	r2,-28(fp)
 4027504:	1885c83a 	sub	r2,r3,r2
 4027508:	10bfffc4 	addi	r2,r2,-1
 402750c:	e0bff615 	stw	r2,-40(fp)
 4027510:	00000b06 	br	4027540 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 4027514:	e0bff517 	ldw	r2,-44(fp)
 4027518:	10000526 	beq	r2,zero,4027530 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 402751c:	00c20004 	movi	r3,2048
 4027520:	e0bff917 	ldw	r2,-28(fp)
 4027524:	1885c83a 	sub	r2,r3,r2
 4027528:	e0bff615 	stw	r2,-40(fp)
 402752c:	00000406 	br	4027540 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4027530:	00c1ffc4 	movi	r3,2047
 4027534:	e0bff917 	ldw	r2,-28(fp)
 4027538:	1885c83a 	sub	r2,r3,r2
 402753c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4027540:	e0bff617 	ldw	r2,-40(fp)
 4027544:	10001e26 	beq	r2,zero,40275c0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 4027548:	e0fffe17 	ldw	r3,-8(fp)
 402754c:	e0bff617 	ldw	r2,-40(fp)
 4027550:	1880022e 	bgeu	r3,r2,402755c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 4027554:	e0bffe17 	ldw	r2,-8(fp)
 4027558:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 402755c:	e0bffc17 	ldw	r2,-16(fp)
 4027560:	10c20e04 	addi	r3,r2,2104
 4027564:	e0bff917 	ldw	r2,-28(fp)
 4027568:	1885883a 	add	r2,r3,r2
 402756c:	e1bff617 	ldw	r6,-40(fp)
 4027570:	e17ffd17 	ldw	r5,-12(fp)
 4027574:	1009883a 	mov	r4,r2
 4027578:	40191280 	call	4019128 <memcpy>
      ptr   += n;
 402757c:	e0fffd17 	ldw	r3,-12(fp)
 4027580:	e0bff617 	ldw	r2,-40(fp)
 4027584:	1885883a 	add	r2,r3,r2
 4027588:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 402758c:	e0fffe17 	ldw	r3,-8(fp)
 4027590:	e0bff617 	ldw	r2,-40(fp)
 4027594:	1885c83a 	sub	r2,r3,r2
 4027598:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402759c:	e0fff917 	ldw	r3,-28(fp)
 40275a0:	e0bff617 	ldw	r2,-40(fp)
 40275a4:	1885883a 	add	r2,r3,r2
 40275a8:	10c1ffcc 	andi	r3,r2,2047
 40275ac:	e0bffc17 	ldw	r2,-16(fp)
 40275b0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 40275b4:	e0bffe17 	ldw	r2,-8(fp)
 40275b8:	00bfc716 	blt	zero,r2,40274d8 <__alt_data_end+0xfc0274d8>
 40275bc:	00000106 	br	40275c4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 40275c0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40275c4:	0005303a 	rdctl	r2,status
 40275c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40275cc:	e0fffb17 	ldw	r3,-20(fp)
 40275d0:	00bfff84 	movi	r2,-2
 40275d4:	1884703a 	and	r2,r3,r2
 40275d8:	1001703a 	wrctl	status,r2
  
  return context;
 40275dc:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 40275e0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40275e4:	e0bffc17 	ldw	r2,-16(fp)
 40275e8:	10800817 	ldw	r2,32(r2)
 40275ec:	10c00094 	ori	r3,r2,2
 40275f0:	e0bffc17 	ldw	r2,-16(fp)
 40275f4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40275f8:	e0bffc17 	ldw	r2,-16(fp)
 40275fc:	10800017 	ldw	r2,0(r2)
 4027600:	10800104 	addi	r2,r2,4
 4027604:	1007883a 	mov	r3,r2
 4027608:	e0bffc17 	ldw	r2,-16(fp)
 402760c:	10800817 	ldw	r2,32(r2)
 4027610:	18800035 	stwio	r2,0(r3)
 4027614:	e0bffa17 	ldw	r2,-24(fp)
 4027618:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402761c:	e0bff817 	ldw	r2,-32(fp)
 4027620:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4027624:	e0bffe17 	ldw	r2,-8(fp)
 4027628:	0080100e 	bge	zero,r2,402766c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 402762c:	e0bfff17 	ldw	r2,-4(fp)
 4027630:	1090000c 	andi	r2,r2,16384
 4027634:	1000101e 	bne	r2,zero,4027678 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4027638:	0001883a 	nop
 402763c:	e0bffc17 	ldw	r2,-16(fp)
 4027640:	10c00d17 	ldw	r3,52(r2)
 4027644:	e0bff517 	ldw	r2,-44(fp)
 4027648:	1880051e 	bne	r3,r2,4027660 <altera_avalon_jtag_uart_write+0x1b8>
 402764c:	e0bffc17 	ldw	r2,-16(fp)
 4027650:	10c00917 	ldw	r3,36(r2)
 4027654:	e0bffc17 	ldw	r2,-16(fp)
 4027658:	10800117 	ldw	r2,4(r2)
 402765c:	18bff736 	bltu	r3,r2,402763c <__alt_data_end+0xfc02763c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 4027660:	e0bffc17 	ldw	r2,-16(fp)
 4027664:	10800917 	ldw	r2,36(r2)
 4027668:	1000051e 	bne	r2,zero,4027680 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 402766c:	e0bffe17 	ldw	r2,-8(fp)
 4027670:	00bfd016 	blt	zero,r2,40275b4 <__alt_data_end+0xfc0275b4>
 4027674:	00000306 	br	4027684 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 4027678:	0001883a 	nop
 402767c:	00000106 	br	4027684 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 4027680:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4027684:	e0fffd17 	ldw	r3,-12(fp)
 4027688:	e0bff717 	ldw	r2,-36(fp)
 402768c:	18800426 	beq	r3,r2,40276a0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 4027690:	e0fffd17 	ldw	r3,-12(fp)
 4027694:	e0bff717 	ldw	r2,-36(fp)
 4027698:	1885c83a 	sub	r2,r3,r2
 402769c:	00000606 	br	40276b8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 40276a0:	e0bfff17 	ldw	r2,-4(fp)
 40276a4:	1090000c 	andi	r2,r2,16384
 40276a8:	10000226 	beq	r2,zero,40276b4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 40276ac:	00bffd44 	movi	r2,-11
 40276b0:	00000106 	br	40276b8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 40276b4:	00bffec4 	movi	r2,-5
}
 40276b8:	e037883a 	mov	sp,fp
 40276bc:	dfc00117 	ldw	ra,4(sp)
 40276c0:	df000017 	ldw	fp,0(sp)
 40276c4:	dec00204 	addi	sp,sp,8
 40276c8:	f800283a 	ret

040276cc <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
 40276cc:	defff404 	addi	sp,sp,-48
 40276d0:	df000b15 	stw	fp,44(sp)
 40276d4:	df000b04 	addi	fp,sp,44
 40276d8:	e13ffc15 	stw	r4,-16(fp)
 40276dc:	e17ffd15 	stw	r5,-12(fp)
 40276e0:	e1bffe15 	stw	r6,-8(fp)
 40276e4:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
 40276e8:	e0bffc17 	ldw	r2,-16(fp)
 40276ec:	10800017 	ldw	r2,0(r2)
 40276f0:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
 40276f4:	e0bff517 	ldw	r2,-44(fp)
 40276f8:	10800217 	ldw	r2,8(r2)
 40276fc:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
 4027700:	e0bff617 	ldw	r2,-40(fp)
 4027704:	10bfffc4 	addi	r2,r2,-1
 4027708:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
 402770c:	e0bffb17 	ldw	r2,-20(fp)
 4027710:	10800044 	addi	r2,r2,1
 4027714:	e0bffb15 	stw	r2,-20(fp)
 4027718:	e0bffb17 	ldw	r2,-20(fp)
 402771c:	10800003 	ldbu	r2,0(r2)
 4027720:	10803fcc 	andi	r2,r2,255
 4027724:	1080201c 	xori	r2,r2,128
 4027728:	10bfe004 	addi	r2,r2,-128
 402772c:	103ff71e 	bne	r2,zero,402770c <__alt_data_end+0xfc02770c>
    ;

  return ptr - string;
 4027730:	e0fffb17 	ldw	r3,-20(fp)
 4027734:	e0bff617 	ldw	r2,-40(fp)
 4027738:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
 402773c:	10800044 	addi	r2,r2,1
 4027740:	1007883a 	mov	r3,r2
 4027744:	e0bffd17 	ldw	r2,-12(fp)
 4027748:	10c5883a 	add	r2,r2,r3
 402774c:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
 4027750:	d0a00d04 	addi	r2,gp,-32716
 4027754:	1007883a 	mov	r3,r2
  r4 = (int)name;
 4027758:	e0bffd17 	ldw	r2,-12(fp)
 402775c:	1009883a 	mov	r4,r2
  r5 = flags;
 4027760:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
 4027764:	e1bfff17 	ldw	r6,-4(fp)
 4027768:	e0bffd17 	ldw	r2,-12(fp)
 402776c:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
 4027770:	e0bff917 	ldw	r2,-28(fp)
 4027774:	10bfffc4 	addi	r2,r2,-1
 4027778:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
 402777c:	e0bffa17 	ldw	r2,-24(fp)
 4027780:	10800044 	addi	r2,r2,1
 4027784:	e0bffa15 	stw	r2,-24(fp)
 4027788:	e0bffa17 	ldw	r2,-24(fp)
 402778c:	10800003 	ldbu	r2,0(r2)
 4027790:	10803fcc 	andi	r2,r2,255
 4027794:	1080201c 	xori	r2,r2,128
 4027798:	10bfe004 	addi	r2,r2,-128
 402779c:	103ff71e 	bne	r2,zero,402777c <__alt_data_end+0xfc02777c>
    ;

  return ptr - string;
 40277a0:	e1fffa17 	ldw	r7,-24(fp)
 40277a4:	e0bff917 	ldw	r2,-28(fp)
 40277a8:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
 40277ac:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
 40277b0:	003da07a 	break	1

  handle = (void *)r2;
 40277b4:	e0bff715 	stw	r2,-36(fp)
  error = r3;
 40277b8:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
 40277bc:	e0bff817 	ldw	r2,-32(fp)
 40277c0:	1000031e 	bne	r2,zero,40277d0 <alt_hostfs_open+0x104>
    fd->priv = handle;
 40277c4:	e0bffc17 	ldw	r2,-16(fp)
 40277c8:	e0fff717 	ldw	r3,-36(fp)
 40277cc:	10c00115 	stw	r3,4(r2)

  return -error;
 40277d0:	e0bff817 	ldw	r2,-32(fp)
 40277d4:	0085c83a 	sub	r2,zero,r2
}
 40277d8:	e037883a 	mov	sp,fp
 40277dc:	df000017 	ldw	fp,0(sp)
 40277e0:	dec00104 	addi	sp,sp,4
 40277e4:	f800283a 	ret

040277e8 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
 40277e8:	defffd04 	addi	sp,sp,-12
 40277ec:	df000215 	stw	fp,8(sp)
 40277f0:	df000204 	addi	fp,sp,8
 40277f4:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
 40277f8:	d0a01004 	addi	r2,gp,-32704
 40277fc:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 4027800:	e0bfff17 	ldw	r2,-4(fp)
 4027804:	10800117 	ldw	r2,4(r2)
 4027808:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
 402780c:	003da07a 	break	1

  error = r3;
 4027810:	e0fffe15 	stw	r3,-8(fp)

  return -error;
 4027814:	e0bffe17 	ldw	r2,-8(fp)
 4027818:	0085c83a 	sub	r2,zero,r2
}
 402781c:	e037883a 	mov	sp,fp
 4027820:	df000017 	ldw	fp,0(sp)
 4027824:	dec00104 	addi	sp,sp,4
 4027828:	f800283a 	ret

0402782c <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
 402782c:	defffa04 	addi	sp,sp,-24
 4027830:	df000515 	stw	fp,20(sp)
 4027834:	df000504 	addi	fp,sp,20
 4027838:	e13ffd15 	stw	r4,-12(fp)
 402783c:	e17ffe15 	stw	r5,-8(fp)
 4027840:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
 4027844:	d0a01304 	addi	r2,gp,-32692
 4027848:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 402784c:	e0bffd17 	ldw	r2,-12(fp)
 4027850:	10800117 	ldw	r2,4(r2)
 4027854:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
 4027858:	e0bffe17 	ldw	r2,-8(fp)
 402785c:	100b883a 	mov	r5,r2
  r6 = len;
 4027860:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
 4027864:	003da07a 	break	1

  rc = r2;
 4027868:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
 402786c:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
 4027870:	e0bffc17 	ldw	r2,-16(fp)
 4027874:	10000326 	beq	r2,zero,4027884 <alt_hostfs_read+0x58>
 4027878:	e0bffc17 	ldw	r2,-16(fp)
 402787c:	0085c83a 	sub	r2,zero,r2
 4027880:	00000106 	br	4027888 <alt_hostfs_read+0x5c>
 4027884:	e0bffb17 	ldw	r2,-20(fp)
}
 4027888:	e037883a 	mov	sp,fp
 402788c:	df000017 	ldw	fp,0(sp)
 4027890:	dec00104 	addi	sp,sp,4
 4027894:	f800283a 	ret

04027898 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
 4027898:	defffa04 	addi	sp,sp,-24
 402789c:	df000515 	stw	fp,20(sp)
 40278a0:	df000504 	addi	fp,sp,20
 40278a4:	e13ffd15 	stw	r4,-12(fp)
 40278a8:	e17ffe15 	stw	r5,-8(fp)
 40278ac:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
 40278b0:	d0a01604 	addi	r2,gp,-32680
 40278b4:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 40278b8:	e0bffd17 	ldw	r2,-12(fp)
 40278bc:	10800117 	ldw	r2,4(r2)
 40278c0:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
 40278c4:	e0bffe17 	ldw	r2,-8(fp)
 40278c8:	100b883a 	mov	r5,r2
  r6 = len;
 40278cc:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
 40278d0:	003da07a 	break	1

  rc = r2;
 40278d4:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
 40278d8:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
 40278dc:	e0bffc17 	ldw	r2,-16(fp)
 40278e0:	10000326 	beq	r2,zero,40278f0 <alt_hostfs_write+0x58>
 40278e4:	e0bffc17 	ldw	r2,-16(fp)
 40278e8:	0085c83a 	sub	r2,zero,r2
 40278ec:	00000106 	br	40278f4 <alt_hostfs_write+0x5c>
 40278f0:	e0bffb17 	ldw	r2,-20(fp)
}
 40278f4:	e037883a 	mov	sp,fp
 40278f8:	df000017 	ldw	fp,0(sp)
 40278fc:	dec00104 	addi	sp,sp,4
 4027900:	f800283a 	ret

04027904 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
 4027904:	defffa04 	addi	sp,sp,-24
 4027908:	df000515 	stw	fp,20(sp)
 402790c:	df000504 	addi	fp,sp,20
 4027910:	e13ffd15 	stw	r4,-12(fp)
 4027914:	e17ffe15 	stw	r5,-8(fp)
 4027918:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
 402791c:	d0a01904 	addi	r2,gp,-32668
 4027920:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 4027924:	e0bffd17 	ldw	r2,-12(fp)
 4027928:	10800117 	ldw	r2,4(r2)
 402792c:	1009883a 	mov	r4,r2
  r5 = ptr;
 4027930:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
 4027934:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
 4027938:	003da07a 	break	1

  rc = r2;
 402793c:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
 4027940:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
 4027944:	e0bffc17 	ldw	r2,-16(fp)
 4027948:	10000326 	beq	r2,zero,4027958 <alt_hostfs_seek+0x54>
 402794c:	e0bffc17 	ldw	r2,-16(fp)
 4027950:	0085c83a 	sub	r2,zero,r2
 4027954:	00000106 	br	402795c <alt_hostfs_seek+0x58>
 4027958:	e0bffb17 	ldw	r2,-20(fp)
}
 402795c:	e037883a 	mov	sp,fp
 4027960:	df000017 	ldw	fp,0(sp)
 4027964:	dec00104 	addi	sp,sp,4
 4027968:	f800283a 	ret

0402796c <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
 402796c:	deffe904 	addi	sp,sp,-92
 4027970:	df001615 	stw	fp,88(sp)
 4027974:	df001604 	addi	fp,sp,88
 4027978:	e13ffe15 	stw	r4,-8(fp)
 402797c:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
 4027980:	d0a01c04 	addi	r2,gp,-32656
 4027984:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 4027988:	e0bffe17 	ldw	r2,-8(fp)
 402798c:	10800117 	ldw	r2,4(r2)
 4027990:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
 4027994:	e0bfee04 	addi	r2,fp,-72
 4027998:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
 402799c:	003da07a 	break	1

  rc = r2;
 40279a0:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
 40279a4:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
 40279a8:	e0bfec17 	ldw	r2,-80(fp)
 40279ac:	1000621e 	bne	r2,zero,4027b38 <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
 40279b0:	e0bfee04 	addi	r2,fp,-72
 40279b4:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
 40279b8:	e0bfea17 	ldw	r2,-88(fp)
 40279bc:	10801004 	addi	r2,r2,64
 40279c0:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
 40279c4:	00001606 	br	4027a20 <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
 40279c8:	e0bfea17 	ldw	r2,-88(fp)
 40279cc:	10800017 	ldw	r2,0(r2)
 40279d0:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
 40279d4:	e0bfea17 	ldw	r2,-88(fp)
 40279d8:	10800017 	ldw	r2,0(r2)
 40279dc:	10803fec 	andhi	r2,r2,255
 40279e0:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
 40279e4:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
 40279e8:	e0bfea17 	ldw	r2,-88(fp)
 40279ec:	10800017 	ldw	r2,0(r2)
 40279f0:	10bfc00c 	andi	r2,r2,65280
 40279f4:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
 40279f8:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
 40279fc:	e0bfea17 	ldw	r2,-88(fp)
 4027a00:	10800017 	ldw	r2,0(r2)
 4027a04:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
 4027a08:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
 4027a0c:	e0bfea17 	ldw	r2,-88(fp)
 4027a10:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
 4027a14:	e0bfea17 	ldw	r2,-88(fp)
 4027a18:	10800104 	addi	r2,r2,4
 4027a1c:	e0bfea15 	stw	r2,-88(fp)
 4027a20:	e0ffea17 	ldw	r3,-88(fp)
 4027a24:	e0bfed17 	ldw	r2,-76(fp)
 4027a28:	18bfe736 	bltu	r3,r2,40279c8 <__alt_data_end+0xfc0279c8>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
 4027a2c:	e0bfff17 	ldw	r2,-4(fp)
 4027a30:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
 4027a34:	e0bfea17 	ldw	r2,-88(fp)
 4027a38:	10800f04 	addi	r2,r2,60
 4027a3c:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
 4027a40:	00000506 	br	4027a58 <alt_hostfs_fstat+0xec>
      *ptr = 0;
 4027a44:	e0bfea17 	ldw	r2,-88(fp)
 4027a48:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
 4027a4c:	e0bfea17 	ldw	r2,-88(fp)
 4027a50:	10800104 	addi	r2,r2,4
 4027a54:	e0bfea15 	stw	r2,-88(fp)
 4027a58:	e0ffea17 	ldw	r3,-88(fp)
 4027a5c:	e0bfed17 	ldw	r2,-76(fp)
 4027a60:	18bff836 	bltu	r3,r2,4027a44 <__alt_data_end+0xfc027a44>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
 4027a64:	e0bfee17 	ldw	r2,-72(fp)
 4027a68:	1007883a 	mov	r3,r2
 4027a6c:	e0bfff17 	ldw	r2,-4(fp)
 4027a70:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
 4027a74:	e0bfef17 	ldw	r2,-68(fp)
 4027a78:	1007883a 	mov	r3,r2
 4027a7c:	e0bfff17 	ldw	r2,-4(fp)
 4027a80:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
 4027a84:	e0fff017 	ldw	r3,-64(fp)
 4027a88:	e0bfff17 	ldw	r2,-4(fp)
 4027a8c:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
 4027a90:	e0bff117 	ldw	r2,-60(fp)
 4027a94:	1007883a 	mov	r3,r2
 4027a98:	e0bfff17 	ldw	r2,-4(fp)
 4027a9c:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
 4027aa0:	e0bff217 	ldw	r2,-56(fp)
 4027aa4:	1007883a 	mov	r3,r2
 4027aa8:	e0bfff17 	ldw	r2,-4(fp)
 4027aac:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
 4027ab0:	e0bff317 	ldw	r2,-52(fp)
 4027ab4:	1007883a 	mov	r3,r2
 4027ab8:	e0bfff17 	ldw	r2,-4(fp)
 4027abc:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
 4027ac0:	e0bff417 	ldw	r2,-48(fp)
 4027ac4:	1007883a 	mov	r3,r2
 4027ac8:	e0bfff17 	ldw	r2,-4(fp)
 4027acc:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
 4027ad0:	e0bff617 	ldw	r2,-40(fp)
 4027ad4:	1007883a 	mov	r3,r2
 4027ad8:	e0bfff17 	ldw	r2,-4(fp)
 4027adc:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
 4027ae0:	e0bffb17 	ldw	r2,-20(fp)
 4027ae4:	1007883a 	mov	r3,r2
 4027ae8:	e0bfff17 	ldw	r2,-4(fp)
 4027aec:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
 4027af0:	e0bffc17 	ldw	r2,-16(fp)
 4027af4:	1007883a 	mov	r3,r2
 4027af8:	e0bfff17 	ldw	r2,-4(fp)
 4027afc:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
 4027b00:	e0bffd17 	ldw	r2,-12(fp)
 4027b04:	1007883a 	mov	r3,r2
 4027b08:	e0bfff17 	ldw	r2,-4(fp)
 4027b0c:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
 4027b10:	e0bff817 	ldw	r2,-32(fp)
 4027b14:	1007883a 	mov	r3,r2
 4027b18:	e0bfff17 	ldw	r2,-4(fp)
 4027b1c:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
 4027b20:	e0bffa17 	ldw	r2,-24(fp)
 4027b24:	1007883a 	mov	r3,r2
 4027b28:	e0bfff17 	ldw	r2,-4(fp)
 4027b2c:	10c00c15 	stw	r3,48(r2)

    return rc;
 4027b30:	e0bfeb17 	ldw	r2,-84(fp)
 4027b34:	00000206 	br	4027b40 <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
 4027b38:	e0bfec17 	ldw	r2,-80(fp)
 4027b3c:	0085c83a 	sub	r2,zero,r2
}
 4027b40:	e037883a 	mov	sp,fp
 4027b44:	df000017 	ldw	fp,0(sp)
 4027b48:	dec00104 	addi	sp,sp,4
 4027b4c:	f800283a 	ret

04027b50 <read_word>:
* reads a word from an address in flash
* this is necessary as we can't do 
* unaligned from an unaligned boundary in Nios II
*/
static alt_u32 read_word(alt_u8* current_ptr)
{
 4027b50:	defffe04 	addi	sp,sp,-8
 4027b54:	df000115 	stw	fp,4(sp)
 4027b58:	df000104 	addi	fp,sp,4
 4027b5c:	e13fff15 	stw	r4,-4(fp)
  return (alt_u32)(*current_ptr | 
 4027b60:	e0bfff17 	ldw	r2,-4(fp)
 4027b64:	10800003 	ldbu	r2,0(r2)
 4027b68:	10c03fcc 	andi	r3,r2,255
         (*(current_ptr+1) << 8) | 
 4027b6c:	e0bfff17 	ldw	r2,-4(fp)
 4027b70:	10800044 	addi	r2,r2,1
 4027b74:	10800003 	ldbu	r2,0(r2)
 4027b78:	10803fcc 	andi	r2,r2,255
 4027b7c:	1004923a 	slli	r2,r2,8
* this is necessary as we can't do 
* unaligned from an unaligned boundary in Nios II
*/
static alt_u32 read_word(alt_u8* current_ptr)
{
  return (alt_u32)(*current_ptr | 
 4027b80:	1886b03a 	or	r3,r3,r2
         (*(current_ptr+1) << 8) | 
         (*(current_ptr+2) << 16) |
 4027b84:	e0bfff17 	ldw	r2,-4(fp)
 4027b88:	10800084 	addi	r2,r2,2
 4027b8c:	10800003 	ldbu	r2,0(r2)
 4027b90:	10803fcc 	andi	r2,r2,255
 4027b94:	1004943a 	slli	r2,r2,16
* unaligned from an unaligned boundary in Nios II
*/
static alt_u32 read_word(alt_u8* current_ptr)
{
  return (alt_u32)(*current_ptr | 
         (*(current_ptr+1) << 8) | 
 4027b98:	1886b03a 	or	r3,r3,r2
         (*(current_ptr+2) << 16) |
         (*(current_ptr+3) << 24 ));
 4027b9c:	e0bfff17 	ldw	r2,-4(fp)
 4027ba0:	108000c4 	addi	r2,r2,3
 4027ba4:	10800003 	ldbu	r2,0(r2)
 4027ba8:	10803fcc 	andi	r2,r2,255
 4027bac:	1004963a 	slli	r2,r2,24
*/
static alt_u32 read_word(alt_u8* current_ptr)
{
  return (alt_u32)(*current_ptr | 
         (*(current_ptr+1) << 8) | 
         (*(current_ptr+2) << 16) |
 4027bb0:	1884b03a 	or	r2,r3,r2
         (*(current_ptr+3) << 24 ));
}
 4027bb4:	e037883a 	mov	sp,fp
 4027bb8:	df000017 	ldw	fp,0(sp)
 4027bbc:	dec00104 	addi	sp,sp,4
 4027bc0:	f800283a 	ret

04027bc4 <read_word_inc>:
* reads a word from an address in flash, and increments the ptr
* this is necessary as we can't do 
* unaligned from an unaligned boundary in Nios II
*/
static alt_u32 read_word_inc(alt_u8** current_ptr)
{
 4027bc4:	defffc04 	addi	sp,sp,-16
 4027bc8:	dfc00315 	stw	ra,12(sp)
 4027bcc:	df000215 	stw	fp,8(sp)
 4027bd0:	df000204 	addi	fp,sp,8
 4027bd4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 value = read_word(*current_ptr);
 4027bd8:	e0bfff17 	ldw	r2,-4(fp)
 4027bdc:	10800017 	ldw	r2,0(r2)
 4027be0:	1009883a 	mov	r4,r2
 4027be4:	4027b500 	call	4027b50 <read_word>
 4027be8:	e0bffe15 	stw	r2,-8(fp)
  *current_ptr += 4;
 4027bec:	e0bfff17 	ldw	r2,-4(fp)
 4027bf0:	10800017 	ldw	r2,0(r2)
 4027bf4:	10c00104 	addi	r3,r2,4
 4027bf8:	e0bfff17 	ldw	r2,-4(fp)
 4027bfc:	10c00015 	stw	r3,0(r2)
  return value;
 4027c00:	e0bffe17 	ldw	r2,-8(fp)
}
 4027c04:	e037883a 	mov	sp,fp
 4027c08:	dfc00117 	ldw	ra,4(sp)
 4027c0c:	df000017 	ldw	fp,0(sp)
 4027c10:	dec00204 	addi	sp,sp,8
 4027c14:	f800283a 	ret

04027c18 <read_half_word>:
* reads a half word from an address in flash
* this is necessary as we can't do 
* unaligned from an unaligned boundary in Nios II
*/
static alt_u16 read_half_word(alt_u8* current_ptr)
{
 4027c18:	defffe04 	addi	sp,sp,-8
 4027c1c:	df000115 	stw	fp,4(sp)
 4027c20:	df000104 	addi	fp,sp,4
 4027c24:	e13fff15 	stw	r4,-4(fp)
  return (alt_u16)(*current_ptr | 
 4027c28:	e0bfff17 	ldw	r2,-4(fp)
 4027c2c:	10800003 	ldbu	r2,0(r2)
 4027c30:	10803fcc 	andi	r2,r2,255
         (*(current_ptr+1) << 8));
 4027c34:	e0ffff17 	ldw	r3,-4(fp)
 4027c38:	18c00044 	addi	r3,r3,1
 4027c3c:	18c00003 	ldbu	r3,0(r3)
 4027c40:	18c03fcc 	andi	r3,r3,255
 4027c44:	1806923a 	slli	r3,r3,8
* this is necessary as we can't do 
* unaligned from an unaligned boundary in Nios II
*/
static alt_u16 read_half_word(alt_u8* current_ptr)
{
  return (alt_u16)(*current_ptr | 
 4027c48:	10c4b03a 	or	r2,r2,r3
         (*(current_ptr+1) << 8));
}
 4027c4c:	e037883a 	mov	sp,fp
 4027c50:	df000017 	ldw	fp,0(sp)
 4027c54:	dec00104 	addi	sp,sp,4
 4027c58:	f800283a 	ret

04027c5c <read_half_word_inc>:
* reads a half word from an address in flash, and increment the ptr
* this is necessary as we can't do 
* unaligned from an unaligned boundary in Nios II
*/
static alt_u16 read_half_word_inc(alt_u8** current_ptr)
{
 4027c5c:	defffc04 	addi	sp,sp,-16
 4027c60:	dfc00315 	stw	ra,12(sp)
 4027c64:	df000215 	stw	fp,8(sp)
 4027c68:	df000204 	addi	fp,sp,8
 4027c6c:	e13fff15 	stw	r4,-4(fp)
  alt_u16 value = read_word(*current_ptr);
 4027c70:	e0bfff17 	ldw	r2,-4(fp)
 4027c74:	10800017 	ldw	r2,0(r2)
 4027c78:	1009883a 	mov	r4,r2
 4027c7c:	4027b500 	call	4027b50 <read_word>
 4027c80:	e0bffe0d 	sth	r2,-8(fp)
  *current_ptr += 2;
 4027c84:	e0bfff17 	ldw	r2,-4(fp)
 4027c88:	10800017 	ldw	r2,0(r2)
 4027c8c:	10c00084 	addi	r3,r2,2
 4027c90:	e0bfff17 	ldw	r2,-4(fp)
 4027c94:	10c00015 	stw	r3,0(r2)
  return value;
 4027c98:	e0bffe0b 	ldhu	r2,-8(fp)
}
 4027c9c:	e037883a 	mov	sp,fp
 4027ca0:	dfc00117 	ldw	ra,4(sp)
 4027ca4:	df000017 	ldw	fp,0(sp)
 4027ca8:	dec00204 	addi	sp,sp,8
 4027cac:	f800283a 	ret

04027cb0 <check_file_header>:
*
* Check that this is a file header we can cope with and inrement the current ptr 
* accordingly
*/
static int check_file_header(alt_u8** current_ptr)
{
 4027cb0:	defff704 	addi	sp,sp,-36
 4027cb4:	dfc00815 	stw	ra,32(sp)
 4027cb8:	df000715 	stw	fp,28(sp)
 4027cbc:	df000704 	addi	fp,sp,28
 4027cc0:	e13fff15 	stw	r4,-4(fp)
  int ret_code = -ENOENT;
 4027cc4:	00bfff84 	movi	r2,-2
 4027cc8:	e0bff915 	stw	r2,-28(fp)
  alt_u16 name_len, extra_len, version, flags, compression;
  alt_u32 uncompressed_len, compressed_len;

  version = read_half_word_inc(current_ptr);
 4027ccc:	e13fff17 	ldw	r4,-4(fp)
 4027cd0:	4027c5c0 	call	4027c5c <read_half_word_inc>
 4027cd4:	e0bffa0d 	sth	r2,-24(fp)

  /* We can parse files designed for version 10 */
  if (version > 10)
 4027cd8:	e0bffa0b 	ldhu	r2,-24(fp)
 4027cdc:	108002f0 	cmpltui	r2,r2,11
 4027ce0:	10003226 	beq	r2,zero,4027dac <check_file_header+0xfc>
  {
    goto exit;
  }

  /* Read the flags, right now any flags are an error */
  flags = read_half_word_inc(current_ptr);
 4027ce4:	e13fff17 	ldw	r4,-4(fp)
 4027ce8:	4027c5c0 	call	4027c5c <read_half_word_inc>
 4027cec:	e0bffa8d 	sth	r2,-22(fp)

  if (flags )
 4027cf0:	e0bffa8b 	ldhu	r2,-22(fp)
 4027cf4:	10002f1e 	bne	r2,zero,4027db4 <check_file_header+0x104>
  {
    goto exit;
  }

  compression = read_half_word_inc(current_ptr);
 4027cf8:	e13fff17 	ldw	r4,-4(fp)
 4027cfc:	4027c5c0 	call	4027c5c <read_half_word_inc>
 4027d00:	e0bffb0d 	sth	r2,-20(fp)

  /* Skip the mod times and the CRC */
  *current_ptr += 8;
 4027d04:	e0bfff17 	ldw	r2,-4(fp)
 4027d08:	10800017 	ldw	r2,0(r2)
 4027d0c:	10c00204 	addi	r3,r2,8
 4027d10:	e0bfff17 	ldw	r2,-4(fp)
 4027d14:	10c00015 	stw	r3,0(r2)

  /* Read the compressed and uncompressed lengths, these should be the same */
  compressed_len = read_word_inc(current_ptr);
 4027d18:	e13fff17 	ldw	r4,-4(fp)
 4027d1c:	4027bc40 	call	4027bc4 <read_word_inc>
 4027d20:	e0bffc15 	stw	r2,-16(fp)
  uncompressed_len = read_word_inc(current_ptr);
 4027d24:	e13fff17 	ldw	r4,-4(fp)
 4027d28:	4027bc40 	call	4027bc4 <read_word_inc>
 4027d2c:	e0bffd15 	stw	r2,-12(fp)

  if ((compression) || (compressed_len != uncompressed_len))
 4027d30:	e0bffb0b 	ldhu	r2,-20(fp)
 4027d34:	1000201e 	bne	r2,zero,4027db8 <check_file_header+0x108>
 4027d38:	e0fffc17 	ldw	r3,-16(fp)
 4027d3c:	e0bffd17 	ldw	r2,-12(fp)
 4027d40:	18801d1e 	bne	r3,r2,4027db8 <check_file_header+0x108>
  {
    goto exit;
  }

  /* Read the length of the name and extra fields */
  name_len = read_half_word_inc(current_ptr);
 4027d44:	e13fff17 	ldw	r4,-4(fp)
 4027d48:	4027c5c0 	call	4027c5c <read_half_word_inc>
 4027d4c:	e0bffe0d 	sth	r2,-8(fp)
  extra_len = read_half_word_inc(current_ptr);
 4027d50:	e13fff17 	ldw	r4,-4(fp)
 4027d54:	4027c5c0 	call	4027c5c <read_half_word_inc>
 4027d58:	e0bffe8d 	sth	r2,-6(fp)

  /* Skip the name and extra fields */
  *current_ptr += name_len;
 4027d5c:	e0bfff17 	ldw	r2,-4(fp)
 4027d60:	10c00017 	ldw	r3,0(r2)
 4027d64:	e0bffe0b 	ldhu	r2,-8(fp)
 4027d68:	1887883a 	add	r3,r3,r2
 4027d6c:	e0bfff17 	ldw	r2,-4(fp)
 4027d70:	10c00015 	stw	r3,0(r2)
  *current_ptr += extra_len;
 4027d74:	e0bfff17 	ldw	r2,-4(fp)
 4027d78:	10c00017 	ldw	r3,0(r2)
 4027d7c:	e0bffe8b 	ldhu	r2,-6(fp)
 4027d80:	1887883a 	add	r3,r3,r2
 4027d84:	e0bfff17 	ldw	r2,-4(fp)
 4027d88:	10c00015 	stw	r3,0(r2)

  *current_ptr += compressed_len;
 4027d8c:	e0bfff17 	ldw	r2,-4(fp)
 4027d90:	10c00017 	ldw	r3,0(r2)
 4027d94:	e0bffc17 	ldw	r2,-16(fp)
 4027d98:	1887883a 	add	r3,r3,r2
 4027d9c:	e0bfff17 	ldw	r2,-4(fp)
 4027da0:	10c00015 	stw	r3,0(r2)

  ret_code = 0;
 4027da4:	e03ff915 	stw	zero,-28(fp)
 4027da8:	00000306 	br	4027db8 <check_file_header+0x108>
  version = read_half_word_inc(current_ptr);

  /* We can parse files designed for version 10 */
  if (version > 10)
  {
    goto exit;
 4027dac:	0001883a 	nop
 4027db0:	00000106 	br	4027db8 <check_file_header+0x108>
  /* Read the flags, right now any flags are an error */
  flags = read_half_word_inc(current_ptr);

  if (flags )
  {
    goto exit;
 4027db4:	0001883a 	nop
  *current_ptr += compressed_len;

  ret_code = 0;

exit:
  return ret_code;
 4027db8:	e0bff917 	ldw	r2,-28(fp)
}
 4027dbc:	e037883a 	mov	sp,fp
 4027dc0:	dfc00117 	ldw	ra,4(sp)
 4027dc4:	df000017 	ldw	fp,0(sp)
 4027dc8:	dec00204 	addi	sp,sp,8
 4027dcc:	f800283a 	ret

04027dd0 <check_directory_header>:
* Sanity check an entry in the directory structure
* 
* returns 0 for success -ENOENT if not
*/
int check_directory_header(alt_u8** current_ptr)
{
 4027dd0:	defff604 	addi	sp,sp,-40
 4027dd4:	dfc00915 	stw	ra,36(sp)
 4027dd8:	df000815 	stw	fp,32(sp)
 4027ddc:	df000804 	addi	fp,sp,32
 4027de0:	e13fff15 	stw	r4,-4(fp)
  int ret_code = -ENOENT;
 4027de4:	00bfff84 	movi	r2,-2
 4027de8:	e0bff815 	stw	r2,-32(fp)
  alt_u16 version, flags, compression, name_len, extra_len, comment_len;
  alt_u32 compressed_len, uncompressed_len;

  /* We don't care what version made this file */
  *current_ptr += 2;
 4027dec:	e0bfff17 	ldw	r2,-4(fp)
 4027df0:	10800017 	ldw	r2,0(r2)
 4027df4:	10c00084 	addi	r3,r2,2
 4027df8:	e0bfff17 	ldw	r2,-4(fp)
 4027dfc:	10c00015 	stw	r3,0(r2)

  /* We can parse files designed for version 10 */
  version = read_half_word_inc(current_ptr);
 4027e00:	e13fff17 	ldw	r4,-4(fp)
 4027e04:	4027c5c0 	call	4027c5c <read_half_word_inc>
 4027e08:	e0bff90d 	sth	r2,-28(fp)
  if (version > 10)
 4027e0c:	e0bff90b 	ldhu	r2,-28(fp)
 4027e10:	108002f0 	cmpltui	r2,r2,11
 4027e14:	10003226 	beq	r2,zero,4027ee0 <check_directory_header+0x110>
  {
    goto exit;
  }

  /* Read the flags, any set are an error */
  flags = read_half_word_inc(current_ptr);
 4027e18:	e13fff17 	ldw	r4,-4(fp)
 4027e1c:	4027c5c0 	call	4027c5c <read_half_word_inc>
 4027e20:	e0bff98d 	sth	r2,-26(fp)

  if (flags )
 4027e24:	e0bff98b 	ldhu	r2,-26(fp)
 4027e28:	10002f1e 	bne	r2,zero,4027ee8 <check_directory_header+0x118>
  {
    goto exit;
  }

  compression = read_half_word_inc(current_ptr);
 4027e2c:	e13fff17 	ldw	r4,-4(fp)
 4027e30:	4027c5c0 	call	4027c5c <read_half_word_inc>
 4027e34:	e0bffa0d 	sth	r2,-24(fp)


  /* Skip the mod times and the CRC */
  *current_ptr += 8;
 4027e38:	e0bfff17 	ldw	r2,-4(fp)
 4027e3c:	10800017 	ldw	r2,0(r2)
 4027e40:	10c00204 	addi	r3,r2,8
 4027e44:	e0bfff17 	ldw	r2,-4(fp)
 4027e48:	10c00015 	stw	r3,0(r2)

  /* Read the compressed and uncompressed lengths,these should be the same */
  compressed_len = read_word_inc(current_ptr);
 4027e4c:	e13fff17 	ldw	r4,-4(fp)
 4027e50:	4027bc40 	call	4027bc4 <read_word_inc>
 4027e54:	e0bffb15 	stw	r2,-20(fp)
  uncompressed_len = read_word_inc(current_ptr);
 4027e58:	e13fff17 	ldw	r4,-4(fp)
 4027e5c:	4027bc40 	call	4027bc4 <read_word_inc>
 4027e60:	e0bffc15 	stw	r2,-16(fp)

  if ((compression) || (compressed_len != uncompressed_len))
 4027e64:	e0bffa0b 	ldhu	r2,-24(fp)
 4027e68:	1000201e 	bne	r2,zero,4027eec <check_directory_header+0x11c>
 4027e6c:	e0fffb17 	ldw	r3,-20(fp)
 4027e70:	e0bffc17 	ldw	r2,-16(fp)
 4027e74:	18801d1e 	bne	r3,r2,4027eec <check_directory_header+0x11c>
  {
    goto exit;
  }

  /* Read the length of the name, extra fields and comment fields*/
  name_len = read_half_word_inc(current_ptr);
 4027e78:	e13fff17 	ldw	r4,-4(fp)
 4027e7c:	4027c5c0 	call	4027c5c <read_half_word_inc>
 4027e80:	e0bffd0d 	sth	r2,-12(fp)
  extra_len = read_half_word_inc(current_ptr);
 4027e84:	e13fff17 	ldw	r4,-4(fp)
 4027e88:	4027c5c0 	call	4027c5c <read_half_word_inc>
 4027e8c:	e0bffd8d 	sth	r2,-10(fp)
  comment_len = read_half_word_inc(current_ptr);
 4027e90:	e13fff17 	ldw	r4,-4(fp)
 4027e94:	4027c5c0 	call	4027c5c <read_half_word_inc>
 4027e98:	e0bffe0d 	sth	r2,-8(fp)

  /* We don't care about the disk number, the file attributes or the offset */
  *current_ptr += 12;
 4027e9c:	e0bfff17 	ldw	r2,-4(fp)
 4027ea0:	10800017 	ldw	r2,0(r2)
 4027ea4:	10c00304 	addi	r3,r2,12
 4027ea8:	e0bfff17 	ldw	r2,-4(fp)
 4027eac:	10c00015 	stw	r3,0(r2)

  *current_ptr += (name_len + extra_len + comment_len);
 4027eb0:	e0bfff17 	ldw	r2,-4(fp)
 4027eb4:	10800017 	ldw	r2,0(r2)
 4027eb8:	e13ffd0b 	ldhu	r4,-12(fp)
 4027ebc:	e0fffd8b 	ldhu	r3,-10(fp)
 4027ec0:	20c9883a 	add	r4,r4,r3
 4027ec4:	e0fffe0b 	ldhu	r3,-8(fp)
 4027ec8:	20c7883a 	add	r3,r4,r3
 4027ecc:	10c7883a 	add	r3,r2,r3
 4027ed0:	e0bfff17 	ldw	r2,-4(fp)
 4027ed4:	10c00015 	stw	r3,0(r2)

  ret_code = 0;
 4027ed8:	e03ff815 	stw	zero,-32(fp)
 4027edc:	00000306 	br	4027eec <check_directory_header+0x11c>

  /* We can parse files designed for version 10 */
  version = read_half_word_inc(current_ptr);
  if (version > 10)
  {
    goto exit;
 4027ee0:	0001883a 	nop
 4027ee4:	00000106 	br	4027eec <check_directory_header+0x11c>
  /* Read the flags, any set are an error */
  flags = read_half_word_inc(current_ptr);

  if (flags )
  {
    goto exit;
 4027ee8:	0001883a 	nop

  *current_ptr += (name_len + extra_len + comment_len);

  ret_code = 0;
exit:
  return ret_code;
 4027eec:	e0bff817 	ldw	r2,-32(fp)
}
 4027ef0:	e037883a 	mov	sp,fp
 4027ef4:	dfc00117 	ldw	ra,4(sp)
 4027ef8:	df000017 	ldw	fp,0(sp)
 4027efc:	dec00204 	addi	sp,sp,8
 4027f00:	f800283a 	ret

04027f04 <check_directory_table>:
* tokens are in the right place, none of the files are compressed etc.
* 
* returns 0 for success -ENOENT if not
*/
static int check_directory_table(alt_ro_zipfs_dev* dev)
{
 4027f04:	defffa04 	addi	sp,sp,-24
 4027f08:	dfc00515 	stw	ra,20(sp)
 4027f0c:	df000415 	stw	fp,16(sp)
 4027f10:	df000404 	addi	fp,sp,16
 4027f14:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 4027f18:	e03ffc15 	stw	zero,-16(fp)
  alt_u8* current_ptr = (alt_u8*)dev->directory;
 4027f1c:	e0bfff17 	ldw	r2,-4(fp)
 4027f20:	10800b17 	ldw	r2,44(r2)
 4027f24:	e0bffe15 	stw	r2,-8(fp)
  alt_u32 token;

  while(1)
  {
    token = read_word_inc(&current_ptr);
 4027f28:	e0bffe04 	addi	r2,fp,-8
 4027f2c:	1009883a 	mov	r4,r2
 4027f30:	4027bc40 	call	4027bc4 <read_word_inc>
 4027f34:	e0bffd15 	stw	r2,-12(fp)

    switch(token)
 4027f38:	e0fffd17 	ldw	r3,-12(fp)
 4027f3c:	00808074 	movhi	r2,513
 4027f40:	1092d404 	addi	r2,r2,19280
 4027f44:	18800426 	beq	r3,r2,4027f58 <check_directory_table+0x54>
 4027f48:	00818174 	movhi	r2,1541
 4027f4c:	1092d404 	addi	r2,r2,19280
 4027f50:	18800826 	beq	r3,r2,4027f74 <check_directory_table+0x70>
 4027f54:	00000906 	br	4027f7c <check_directory_table+0x78>
    {
    case ZIP_DIRECTORY_RECORD:
      {
        ret_code = check_directory_header(&current_ptr);
 4027f58:	e0bffe04 	addi	r2,fp,-8
 4027f5c:	1009883a 	mov	r4,r2
 4027f60:	4027dd00 	call	4027dd0 <check_directory_header>
 4027f64:	e0bffc15 	stw	r2,-16(fp)
        if (ret_code)
 4027f68:	e0bffc17 	ldw	r2,-16(fp)
 4027f6c:	10000626 	beq	r2,zero,4027f88 <check_directory_table+0x84>
        {
          goto exit;
 4027f70:	00000706 	br	4027f90 <check_directory_table+0x8c>
        }
        break;
      }
    case ZIP_END_OF_DIRECTORY_RECORD:
      {
        ret_code = 0;
 4027f74:	e03ffc15 	stw	zero,-16(fp)
        goto exit;
 4027f78:	00000506 	br	4027f90 <check_directory_table+0x8c>
      }
    default:
      {
        ret_code = -ENOENT;
 4027f7c:	00bfff84 	movi	r2,-2
 4027f80:	e0bffc15 	stw	r2,-16(fp)
        goto exit;
 4027f84:	00000206 	br	4027f90 <check_directory_table+0x8c>
        ret_code = check_directory_header(&current_ptr);
        if (ret_code)
        {
          goto exit;
        }
        break;
 4027f88:	0001883a 	nop
      {
        ret_code = -ENOENT;
        goto exit;
      }
    }
  }
 4027f8c:	003fe606 	br	4027f28 <__alt_data_end+0xfc027f28>

exit:
  return ret_code;
 4027f90:	e0bffc17 	ldw	r2,-16(fp)
}
 4027f94:	e037883a 	mov	sp,fp
 4027f98:	dfc00117 	ldw	ra,4(sp)
 4027f9c:	df000017 	ldw	fp,0(sp)
 4027fa0:	dec00204 	addi	sp,sp,8
 4027fa4:	f800283a 	ret

04027fa8 <find_directory_entry>:
* tokens are in the right place, none of the files are comrpessed etc.
* 
* returns 0 for success -ENOENT if not
*/
static int find_directory_entry(alt_ro_zipfs_dev* dev)
{
 4027fa8:	defffa04 	addi	sp,sp,-24
 4027fac:	dfc00515 	stw	ra,20(sp)
 4027fb0:	df000415 	stw	fp,16(sp)
 4027fb4:	df000404 	addi	fp,sp,16
 4027fb8:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 4027fbc:	e03ffc15 	stw	zero,-16(fp)
  alt_u32 token;
  alt_u8* current_ptr = dev->base;
 4027fc0:	e0bfff17 	ldw	r2,-4(fp)
 4027fc4:	10800a17 	ldw	r2,40(r2)
 4027fc8:	e0bffe15 	stw	r2,-8(fp)

  while(1)
  {
    token = read_word_inc(&current_ptr);
 4027fcc:	e0bffe04 	addi	r2,fp,-8
 4027fd0:	1009883a 	mov	r4,r2
 4027fd4:	4027bc40 	call	4027bc4 <read_word_inc>
 4027fd8:	e0bffd15 	stw	r2,-12(fp)

    switch(token)
 4027fdc:	e0fffd17 	ldw	r3,-12(fp)
 4027fe0:	00808074 	movhi	r2,513
 4027fe4:	1092d404 	addi	r2,r2,19280
 4027fe8:	18800a26 	beq	r3,r2,4028014 <find_directory_entry+0x6c>
 4027fec:	008100f4 	movhi	r2,1027
 4027ff0:	1092d404 	addi	r2,r2,19280
 4027ff4:	18800c1e 	bne	r3,r2,4028028 <find_directory_entry+0x80>
    {
    case ZIP_FILE_RECORD:
      {
        ret_code = check_file_header(&current_ptr);
 4027ff8:	e0bffe04 	addi	r2,fp,-8
 4027ffc:	1009883a 	mov	r4,r2
 4028000:	4027cb00 	call	4027cb0 <check_file_header>
 4028004:	e0bffc15 	stw	r2,-16(fp)
        if(ret_code)
 4028008:	e0bffc17 	ldw	r2,-16(fp)
 402800c:	10000926 	beq	r2,zero,4028034 <find_directory_entry+0x8c>
        {
          goto exit;
 4028010:	00000a06 	br	402803c <find_directory_entry+0x94>
        }
        break;
      }
    case ZIP_DIRECTORY_RECORD:
      {
        dev->directory = current_ptr - 4;
 4028014:	e0bffe17 	ldw	r2,-8(fp)
 4028018:	10ffff04 	addi	r3,r2,-4
 402801c:	e0bfff17 	ldw	r2,-4(fp)
 4028020:	10c00b15 	stw	r3,44(r2)
        goto exit;
 4028024:	00000506 	br	402803c <find_directory_entry+0x94>
      }
    default:
      {
        ret_code = -ENOENT;
 4028028:	00bfff84 	movi	r2,-2
 402802c:	e0bffc15 	stw	r2,-16(fp)
        goto exit;
 4028030:	00000206 	br	402803c <find_directory_entry+0x94>
        ret_code = check_file_header(&current_ptr);
        if(ret_code)
        {
          goto exit;
        }
        break;
 4028034:	0001883a 	nop
      {
        ret_code = -ENOENT;
        goto exit;
      }
    }
  }
 4028038:	003fe406 	br	4027fcc <__alt_data_end+0xfc027fcc>
exit:
  return ret_code;
 402803c:	e0bffc17 	ldw	r2,-16(fp)
}
 4028040:	e037883a 	mov	sp,fp
 4028044:	dfc00117 	ldw	ra,4(sp)
 4028048:	df000017 	ldw	fp,0(sp)
 402804c:	dec00204 	addi	sp,sp,8
 4028050:	f800283a 	ret

04028054 <find_file_entry_by_name>:
*
* returns -ENOENT if fails
*/
static int find_file_entry_by_name( alt_ro_zipfs_dev* dev, alt_fd* fd, 
                                    const alt_u8* name)
{
 4028054:	defff504 	addi	sp,sp,-44
 4028058:	dfc00a15 	stw	ra,40(sp)
 402805c:	df000915 	stw	fp,36(sp)
 4028060:	df000904 	addi	fp,sp,36
 4028064:	e13ffd15 	stw	r4,-12(fp)
 4028068:	e17ffe15 	stw	r5,-8(fp)
 402806c:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = -ENOENT;
 4028070:	00bfff84 	movi	r2,-2
 4028074:	e0bff715 	stw	r2,-36(fp)
  alt_u32 token;
  alt_u8* current_ptr = dev->directory;
 4028078:	e0bffd17 	ldw	r2,-12(fp)
 402807c:	10800b17 	ldw	r2,44(r2)
 4028080:	e0bff815 	stw	r2,-32(fp)
  alt_u16 name_len, extra_len, comment_len, extra_file_len;
  alt_u32 offset;

  current_ptr = dev->directory;
 4028084:	e0bffd17 	ldw	r2,-12(fp)
 4028088:	10800b17 	ldw	r2,44(r2)
 402808c:	e0bff815 	stw	r2,-32(fp)

  while(1)
  {
    token = read_word(current_ptr);
 4028090:	e13ff817 	ldw	r4,-32(fp)
 4028094:	4027b500 	call	4027b50 <read_word>
 4028098:	e0bff915 	stw	r2,-28(fp)

    if(token != ZIP_DIRECTORY_RECORD)
 402809c:	e0fff917 	ldw	r3,-28(fp)
 40280a0:	00808074 	movhi	r2,513
 40280a4:	1092d404 	addi	r2,r2,19280
 40280a8:	1880411e 	bne	r3,r2,40281b0 <find_file_entry_by_name+0x15c>
    {
      break;
    }

    offset = read_word(current_ptr + ZIP_DIR_OFFSET);
 40280ac:	e0bff817 	ldw	r2,-32(fp)
 40280b0:	10800a84 	addi	r2,r2,42
 40280b4:	1009883a 	mov	r4,r2
 40280b8:	4027b500 	call	4027b50 <read_word>
 40280bc:	e0bffa15 	stw	r2,-24(fp)
    name_len = read_half_word(current_ptr + ZIP_DIR_NAME_LEN);
 40280c0:	e0bff817 	ldw	r2,-32(fp)
 40280c4:	10800704 	addi	r2,r2,28
 40280c8:	1009883a 	mov	r4,r2
 40280cc:	4027c180 	call	4027c18 <read_half_word>
 40280d0:	e0bffb0d 	sth	r2,-20(fp)
    extra_len = read_half_word(current_ptr + ZIP_DIR_EXTRA_LEN);
 40280d4:	e0bff817 	ldw	r2,-32(fp)
 40280d8:	10800784 	addi	r2,r2,30
 40280dc:	1009883a 	mov	r4,r2
 40280e0:	4027c180 	call	4027c18 <read_half_word>
 40280e4:	e0bffb8d 	sth	r2,-18(fp)
    comment_len = read_half_word(current_ptr + ZIP_DIR_COMMENT_LEN);
 40280e8:	e0bff817 	ldw	r2,-32(fp)
 40280ec:	10800804 	addi	r2,r2,32
 40280f0:	1009883a 	mov	r4,r2
 40280f4:	4027c180 	call	4027c18 <read_half_word>
 40280f8:	e0bffc0d 	sth	r2,-16(fp)

    if ((strlen((const char *)name) == name_len) && 
 40280fc:	e13fff17 	ldw	r4,-4(fp)
 4028100:	40195540 	call	4019554 <strlen>
 4028104:	1007883a 	mov	r3,r2
 4028108:	e0bffb0b 	ldhu	r2,-20(fp)
 402810c:	18801d1e 	bne	r3,r2,4028184 <find_file_entry_by_name+0x130>
    (!strncmp((const char *)(current_ptr+ZIP_DIR_HEADER_SIZE), (const char *)name, name_len)))
 4028110:	e0bff817 	ldw	r2,-32(fp)
 4028114:	10800b84 	addi	r2,r2,46
 4028118:	e0fffb0b 	ldhu	r3,-20(fp)
 402811c:	180d883a 	mov	r6,r3
 4028120:	e17fff17 	ldw	r5,-4(fp)
 4028124:	1009883a 	mov	r4,r2
 4028128:	402a5fc0 	call	402a5fc <strncmp>
    offset = read_word(current_ptr + ZIP_DIR_OFFSET);
    name_len = read_half_word(current_ptr + ZIP_DIR_NAME_LEN);
    extra_len = read_half_word(current_ptr + ZIP_DIR_EXTRA_LEN);
    comment_len = read_half_word(current_ptr + ZIP_DIR_COMMENT_LEN);

    if ((strlen((const char *)name) == name_len) && 
 402812c:	1000151e 	bne	r2,zero,4028184 <find_file_entry_by_name+0x130>
    (!strncmp((const char *)(current_ptr+ZIP_DIR_HEADER_SIZE), (const char *)name, name_len)))
    {
      extra_file_len = read_half_word(dev->base + offset + ZIP_FILE_EXTRA_LEN); 
 4028130:	e0bffd17 	ldw	r2,-12(fp)
 4028134:	10c00a17 	ldw	r3,40(r2)
 4028138:	e0bffa17 	ldw	r2,-24(fp)
 402813c:	10800704 	addi	r2,r2,28
 4028140:	1885883a 	add	r2,r3,r2
 4028144:	1009883a 	mov	r4,r2
 4028148:	4027c180 	call	4027c18 <read_half_word>
 402814c:	e0bffc8d 	sth	r2,-14(fp)
      fd->priv = dev->base + ZIP_FILE_HEADER_SIZE 
 4028150:	e0bffd17 	ldw	r2,-12(fp)
 4028154:	10c00a17 	ldw	r3,40(r2)
                  + offset + extra_file_len + name_len;
 4028158:	e13ffc8b 	ldhu	r4,-14(fp)
 402815c:	e0bffa17 	ldw	r2,-24(fp)
 4028160:	2089883a 	add	r4,r4,r2
 4028164:	e0bffb0b 	ldhu	r2,-20(fp)
 4028168:	2085883a 	add	r2,r4,r2
 402816c:	10800784 	addi	r2,r2,30
 4028170:	1887883a 	add	r3,r3,r2

    if ((strlen((const char *)name) == name_len) && 
    (!strncmp((const char *)(current_ptr+ZIP_DIR_HEADER_SIZE), (const char *)name, name_len)))
    {
      extra_file_len = read_half_word(dev->base + offset + ZIP_FILE_EXTRA_LEN); 
      fd->priv = dev->base + ZIP_FILE_HEADER_SIZE 
 4028174:	e0bffe17 	ldw	r2,-8(fp)
 4028178:	10c00115 	stw	r3,4(r2)
                  + offset + extra_file_len + name_len;
      ret_code = 0;
 402817c:	e03ff715 	stw	zero,-36(fp)
      break;
 4028180:	00000c06 	br	40281b4 <find_file_entry_by_name+0x160>
    }
    current_ptr += ZIP_DIR_HEADER_SIZE + name_len + extra_len + comment_len;
 4028184:	e0bffb0b 	ldhu	r2,-20(fp)
 4028188:	10c00b84 	addi	r3,r2,46
 402818c:	e0bffb8b 	ldhu	r2,-18(fp)
 4028190:	1887883a 	add	r3,r3,r2
 4028194:	e0bffc0b 	ldhu	r2,-16(fp)
 4028198:	1885883a 	add	r2,r3,r2
 402819c:	1007883a 	mov	r3,r2
 40281a0:	e0bff817 	ldw	r2,-32(fp)
 40281a4:	10c5883a 	add	r2,r2,r3
 40281a8:	e0bff815 	stw	r2,-32(fp)
  }
 40281ac:	003fb806 	br	4028090 <__alt_data_end+0xfc028090>
  {
    token = read_word(current_ptr);

    if(token != ZIP_DIRECTORY_RECORD)
    {
      break;
 40281b0:	0001883a 	nop
      break;
    }
    current_ptr += ZIP_DIR_HEADER_SIZE + name_len + extra_len + comment_len;
  }

  return ret_code;
 40281b4:	e0bff717 	ldw	r2,-36(fp)
}
 40281b8:	e037883a 	mov	sp,fp
 40281bc:	dfc00117 	ldw	ra,4(sp)
 40281c0:	df000017 	ldw	fp,0(sp)
 40281c4:	dec00204 	addi	sp,sp,8
 40281c8:	f800283a 	ret

040281cc <find_file_entry>:
*
* returns -EBADF if fails
*/
static int find_file_entry( alt_ro_zipfs_dev* dev, alt_fd* fd, 
                            alt_u8** start, alt_u32* len)
{
 40281cc:	defff304 	addi	sp,sp,-52
 40281d0:	dfc00c15 	stw	ra,48(sp)
 40281d4:	df000b15 	stw	fp,44(sp)
 40281d8:	df000b04 	addi	fp,sp,44
 40281dc:	e13ffc15 	stw	r4,-16(fp)
 40281e0:	e17ffd15 	stw	r5,-12(fp)
 40281e4:	e1bffe15 	stw	r6,-8(fp)
 40281e8:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = -EBADF;
 40281ec:	00bffdc4 	movi	r2,-9
 40281f0:	e0bff515 	stw	r2,-44(fp)
  alt_u32 token;
  alt_u8* current_ptr = (alt_u8*)dev->directory;
 40281f4:	e0bffc17 	ldw	r2,-16(fp)
 40281f8:	10800b17 	ldw	r2,44(r2)
 40281fc:	e0bff615 	stw	r2,-40(fp)
  alt_u8* end;
  alt_u16 name_len, extra_len, comment_len, extra_file_len;
  alt_u32 offset;

  current_ptr = dev->directory;
 4028200:	e0bffc17 	ldw	r2,-16(fp)
 4028204:	10800b17 	ldw	r2,44(r2)
 4028208:	e0bff615 	stw	r2,-40(fp)

  while(1)
  {
    token = read_word(current_ptr);
 402820c:	e13ff617 	ldw	r4,-40(fp)
 4028210:	4027b500 	call	4027b50 <read_word>
 4028214:	e0bff715 	stw	r2,-36(fp)

    if(token != ZIP_DIRECTORY_RECORD)
 4028218:	e0fff717 	ldw	r3,-36(fp)
 402821c:	00808074 	movhi	r2,513
 4028220:	1092d404 	addi	r2,r2,19280
 4028224:	1880491e 	bne	r3,r2,402834c <find_file_entry+0x180>
    {
      break;
    }
    
    *len = read_word(current_ptr + ZIP_DIR_UNCOMPRESSED_LEN);
 4028228:	e0bff617 	ldw	r2,-40(fp)
 402822c:	10800604 	addi	r2,r2,24
 4028230:	1009883a 	mov	r4,r2
 4028234:	4027b500 	call	4027b50 <read_word>
 4028238:	1007883a 	mov	r3,r2
 402823c:	e0bfff17 	ldw	r2,-4(fp)
 4028240:	10c00015 	stw	r3,0(r2)
    offset = read_word(current_ptr + ZIP_DIR_OFFSET);
 4028244:	e0bff617 	ldw	r2,-40(fp)
 4028248:	10800a84 	addi	r2,r2,42
 402824c:	1009883a 	mov	r4,r2
 4028250:	4027b500 	call	4027b50 <read_word>
 4028254:	e0bff815 	stw	r2,-32(fp)
    name_len = read_half_word(current_ptr + ZIP_DIR_NAME_LEN);
 4028258:	e0bff617 	ldw	r2,-40(fp)
 402825c:	10800704 	addi	r2,r2,28
 4028260:	1009883a 	mov	r4,r2
 4028264:	4027c180 	call	4027c18 <read_half_word>
 4028268:	e0bff90d 	sth	r2,-28(fp)
    extra_len = read_half_word(current_ptr + ZIP_DIR_EXTRA_LEN);
 402826c:	e0bff617 	ldw	r2,-40(fp)
 4028270:	10800784 	addi	r2,r2,30
 4028274:	1009883a 	mov	r4,r2
 4028278:	4027c180 	call	4027c18 <read_half_word>
 402827c:	e0bff98d 	sth	r2,-26(fp)
    comment_len = read_half_word(current_ptr + ZIP_DIR_COMMENT_LEN);
 4028280:	e0bff617 	ldw	r2,-40(fp)
 4028284:	10800804 	addi	r2,r2,32
 4028288:	1009883a 	mov	r4,r2
 402828c:	4027c180 	call	4027c18 <read_half_word>
 4028290:	e0bffa0d 	sth	r2,-24(fp)
    current_ptr += ZIP_DIR_HEADER_SIZE + name_len + extra_len + comment_len;
 4028294:	e0bff90b 	ldhu	r2,-28(fp)
 4028298:	10c00b84 	addi	r3,r2,46
 402829c:	e0bff98b 	ldhu	r2,-26(fp)
 40282a0:	1887883a 	add	r3,r3,r2
 40282a4:	e0bffa0b 	ldhu	r2,-24(fp)
 40282a8:	1885883a 	add	r2,r3,r2
 40282ac:	1007883a 	mov	r3,r2
 40282b0:	e0bff617 	ldw	r2,-40(fp)
 40282b4:	10c5883a 	add	r2,r2,r3
 40282b8:	e0bff615 	stw	r2,-40(fp)

    extra_file_len = read_half_word(dev->base + offset + ZIP_FILE_EXTRA_LEN); 
 40282bc:	e0bffc17 	ldw	r2,-16(fp)
 40282c0:	10c00a17 	ldw	r3,40(r2)
 40282c4:	e0bff817 	ldw	r2,-32(fp)
 40282c8:	10800704 	addi	r2,r2,28
 40282cc:	1885883a 	add	r2,r3,r2
 40282d0:	1009883a 	mov	r4,r2
 40282d4:	4027c180 	call	4027c18 <read_half_word>
 40282d8:	e0bffa8d 	sth	r2,-22(fp)

    *start = dev->base + ZIP_FILE_HEADER_SIZE + offset + extra_file_len + name_len;
 40282dc:	e0bffc17 	ldw	r2,-16(fp)
 40282e0:	10c00a17 	ldw	r3,40(r2)
 40282e4:	e13ffa8b 	ldhu	r4,-22(fp)
 40282e8:	e0bff817 	ldw	r2,-32(fp)
 40282ec:	2089883a 	add	r4,r4,r2
 40282f0:	e0bff90b 	ldhu	r2,-28(fp)
 40282f4:	2085883a 	add	r2,r4,r2
 40282f8:	10800784 	addi	r2,r2,30
 40282fc:	1887883a 	add	r3,r3,r2
 4028300:	e0bffe17 	ldw	r2,-8(fp)
 4028304:	10c00015 	stw	r3,0(r2)

    /* The plus 1 is for the End of file condition */
    end = *start + *len;
 4028308:	e0bffe17 	ldw	r2,-8(fp)
 402830c:	10c00017 	ldw	r3,0(r2)
 4028310:	e0bfff17 	ldw	r2,-4(fp)
 4028314:	10800017 	ldw	r2,0(r2)
 4028318:	1885883a 	add	r2,r3,r2
 402831c:	e0bffb15 	stw	r2,-20(fp)
    if ((fd->priv >= *start ) &&
 4028320:	e0bffd17 	ldw	r2,-12(fp)
 4028324:	10c00117 	ldw	r3,4(r2)
 4028328:	e0bffe17 	ldw	r2,-8(fp)
 402832c:	10800017 	ldw	r2,0(r2)
 4028330:	18bfb636 	bltu	r3,r2,402820c <__alt_data_end+0xfc02820c>
        (fd->priv <= end))
 4028334:	e0bffd17 	ldw	r2,-12(fp)
 4028338:	10800117 	ldw	r2,4(r2)

    *start = dev->base + ZIP_FILE_HEADER_SIZE + offset + extra_file_len + name_len;

    /* The plus 1 is for the End of file condition */
    end = *start + *len;
    if ((fd->priv >= *start ) &&
 402833c:	e0fffb17 	ldw	r3,-20(fp)
 4028340:	18bfb236 	bltu	r3,r2,402820c <__alt_data_end+0xfc02820c>
        (fd->priv <= end))
    {
      ret_code = 0;
 4028344:	e03ff515 	stw	zero,-44(fp)
      break;
 4028348:	00000106 	br	4028350 <find_file_entry+0x184>
  {
    token = read_word(current_ptr);

    if(token != ZIP_DIRECTORY_RECORD)
    {
      break;
 402834c:	0001883a 	nop
      ret_code = 0;
      break;
    }
  }

  return ret_code;
 4028350:	e0bff517 	ldw	r2,-44(fp)
}
 4028354:	e037883a 	mov	sp,fp
 4028358:	dfc00117 	ldw	ra,4(sp)
 402835c:	df000017 	ldw	fp,0(sp)
 4028360:	dec00204 	addi	sp,sp,8
 4028364:	f800283a 	ret

04028368 <alt_ro_zipfs_open>:
* Find the Central dircetory and then find the pointer to this file
* from that.
*
*/
int alt_ro_zipfs_open(alt_fd* fd, const char* name, int flags, int mode)
{
 4028368:	defff804 	addi	sp,sp,-32
 402836c:	dfc00715 	stw	ra,28(sp)
 4028370:	df000615 	stw	fp,24(sp)
 4028374:	df000604 	addi	fp,sp,24
 4028378:	e13ffc15 	stw	r4,-16(fp)
 402837c:	e17ffd15 	stw	r5,-12(fp)
 4028380:	e1bffe15 	stw	r6,-8(fp)
 4028384:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = -EROFS;
 4028388:	00bff884 	movi	r2,-30
 402838c:	e0bffa15 	stw	r2,-24(fp)
  alt_ro_zipfs_dev* dev= (alt_ro_zipfs_dev*)fd->dev;
 4028390:	e0bffc17 	ldw	r2,-16(fp)
 4028394:	10800017 	ldw	r2,0(r2)
 4028398:	e0bffb15 	stw	r2,-20(fp)

#ifdef ALT_USE_DIRECT_DRIVERS
  ALT_LINK_ERROR("Error: Read-only ZIP filesystem not supported when direct drivers are used.");
#endif

  if (flags == O_RDONLY )
 402839c:	e0bffe17 	ldw	r2,-8(fp)
 40283a0:	10000f1e 	bne	r2,zero,40283e0 <alt_ro_zipfs_open+0x78>
  {
    if (dev->directory != NULL)
 40283a4:	e0bffb17 	ldw	r2,-20(fp)
 40283a8:	10800b17 	ldw	r2,44(r2)
 40283ac:	10000c26 	beq	r2,zero,40283e0 <alt_ro_zipfs_open+0x78>
    {
      ret_code = find_file_entry_by_name( dev, fd, 
                                          (const alt_u8*)(name+strlen(dev->fs_dev.name)+1));
 40283b0:	e0bffb17 	ldw	r2,-20(fp)
 40283b4:	10800217 	ldw	r2,8(r2)
 40283b8:	1009883a 	mov	r4,r2
 40283bc:	40195540 	call	4019554 <strlen>
 40283c0:	10800044 	addi	r2,r2,1
 40283c4:	e0fffd17 	ldw	r3,-12(fp)
 40283c8:	1885883a 	add	r2,r3,r2

  if (flags == O_RDONLY )
  {
    if (dev->directory != NULL)
    {
      ret_code = find_file_entry_by_name( dev, fd, 
 40283cc:	100d883a 	mov	r6,r2
 40283d0:	e17ffc17 	ldw	r5,-16(fp)
 40283d4:	e13ffb17 	ldw	r4,-20(fp)
 40283d8:	40280540 	call	4028054 <find_file_entry_by_name>
 40283dc:	e0bffa15 	stw	r2,-24(fp)
                                          (const alt_u8*)(name+strlen(dev->fs_dev.name)+1));
    }
  }

  return ret_code;
 40283e0:	e0bffa17 	ldw	r2,-24(fp)
}
 40283e4:	e037883a 	mov	sp,fp
 40283e8:	dfc00117 	ldw	ra,4(sp)
 40283ec:	df000017 	ldw	fp,0(sp)
 40283f0:	dec00204 	addi	sp,sp,8
 40283f4:	f800283a 	ret

040283f8 <alt_ro_zipfs_read>:
* alt_ro_zipfs_read
*
* Read the file
*/
int alt_ro_zipfs_read(alt_fd* fd, char* ptr, int len)
{
 40283f8:	defff304 	addi	sp,sp,-52
 40283fc:	dfc00c15 	stw	ra,48(sp)
 4028400:	df000b15 	stw	fp,44(sp)
 4028404:	df000b04 	addi	fp,sp,44
 4028408:	e13ffd15 	stw	r4,-12(fp)
 402840c:	e17ffe15 	stw	r5,-8(fp)
 4028410:	e1bfff15 	stw	r6,-4(fp)
  alt_ro_zipfs_dev* dev= (alt_ro_zipfs_dev*)fd->dev;
 4028414:	e0bffd17 	ldw	r2,-12(fp)
 4028418:	10800017 	ldw	r2,0(r2)
 402841c:	e0bff515 	stw	r2,-44(fp)
  alt_u8 *start, *current;
  alt_u32 file_len;
  int amount_to_copy;
  alt_irq_context context;

  find_file_entry(dev, fd, &start, &file_len);
 4028420:	e0fffc04 	addi	r3,fp,-16
 4028424:	e0bffb04 	addi	r2,fp,-20
 4028428:	180f883a 	mov	r7,r3
 402842c:	100d883a 	mov	r6,r2
 4028430:	e17ffd17 	ldw	r5,-12(fp)
 4028434:	e13ff517 	ldw	r4,-44(fp)
 4028438:	40281cc0 	call	40281cc <find_file_entry>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402843c:	0005303a 	rdctl	r2,status
 4028440:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4028444:	e0fff917 	ldw	r3,-28(fp)
 4028448:	00bfff84 	movi	r2,-2
 402844c:	1884703a 	and	r2,r3,r2
 4028450:	1001703a 	wrctl	status,r2
  
  return context;
 4028454:	e0bff917 	ldw	r2,-28(fp)
  *
  * We could use a Mutex or a binary semaphore, but those would have 
  * a much bigger code footprint and disable interrupts for as many 
  * instructions anyway
  */
  context = alt_irq_disable_all();
 4028458:	e0bff615 	stw	r2,-40(fp)
  current = fd->priv;
 402845c:	e0bffd17 	ldw	r2,-12(fp)
 4028460:	10800117 	ldw	r2,4(r2)
 4028464:	e0bff715 	stw	r2,-36(fp)
  amount_to_copy = MIN(len, file_len - (current - start));
 4028468:	e0bffc17 	ldw	r2,-16(fp)
 402846c:	e0fff717 	ldw	r3,-36(fp)
 4028470:	e13ffb17 	ldw	r4,-20(fp)
 4028474:	1907c83a 	sub	r3,r3,r4
 4028478:	10c5c83a 	sub	r2,r2,r3
 402847c:	e0ffff17 	ldw	r3,-4(fp)
 4028480:	1880012e 	bgeu	r3,r2,4028488 <alt_ro_zipfs_read+0x90>
 4028484:	1805883a 	mov	r2,r3
 4028488:	e0bff815 	stw	r2,-32(fp)
  fd->priv += amount_to_copy;
 402848c:	e0bffd17 	ldw	r2,-12(fp)
 4028490:	10c00117 	ldw	r3,4(r2)
 4028494:	e0bff817 	ldw	r2,-32(fp)
 4028498:	1887883a 	add	r3,r3,r2
 402849c:	e0bffd17 	ldw	r2,-12(fp)
 40284a0:	10c00115 	stw	r3,4(r2)
 40284a4:	e0bff617 	ldw	r2,-40(fp)
 40284a8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40284ac:	e0bffa17 	ldw	r2,-24(fp)
 40284b0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(context);

  memcpy(ptr, current, amount_to_copy);
 40284b4:	e0bff817 	ldw	r2,-32(fp)
 40284b8:	100d883a 	mov	r6,r2
 40284bc:	e17ff717 	ldw	r5,-36(fp)
 40284c0:	e13ffe17 	ldw	r4,-8(fp)
 40284c4:	40191280 	call	4019128 <memcpy>
  
  return amount_to_copy;
 40284c8:	e0bff817 	ldw	r2,-32(fp)
}
 40284cc:	e037883a 	mov	sp,fp
 40284d0:	dfc00117 	ldw	ra,4(sp)
 40284d4:	df000017 	ldw	fp,0(sp)
 40284d8:	dec00204 	addi	sp,sp,8
 40284dc:	f800283a 	ret

040284e0 <alt_ro_zipfs_seek>:
* Move around within a file
*
* returns -EROFS for a seek beyond the end of the file
*/
int alt_ro_zipfs_seek(alt_fd* fd, int ptr, int dir)
{
 40284e0:	defff704 	addi	sp,sp,-36
 40284e4:	dfc00815 	stw	ra,32(sp)
 40284e8:	df000715 	stw	fp,28(sp)
 40284ec:	df000704 	addi	fp,sp,28
 40284f0:	e13ffd15 	stw	r4,-12(fp)
 40284f4:	e17ffe15 	stw	r5,-8(fp)
 40284f8:	e1bfff15 	stw	r6,-4(fp)
  int ret_code;
  alt_ro_zipfs_dev* dev= (alt_ro_zipfs_dev*)fd->dev;
 40284fc:	e0bffd17 	ldw	r2,-12(fp)
 4028500:	10800017 	ldw	r2,0(r2)
 4028504:	e0bffa15 	stw	r2,-24(fp)
  alt_u8* start;
  alt_u32 len;

  find_file_entry(dev, fd, &start, &len);
 4028508:	e0fffc04 	addi	r3,fp,-16
 402850c:	e0bffb04 	addi	r2,fp,-20
 4028510:	180f883a 	mov	r7,r3
 4028514:	100d883a 	mov	r6,r2
 4028518:	e17ffd17 	ldw	r5,-12(fp)
 402851c:	e13ffa17 	ldw	r4,-24(fp)
 4028520:	40281cc0 	call	40281cc <find_file_entry>

  switch(dir)
 4028524:	e0bfff17 	ldw	r2,-4(fp)
 4028528:	10c00060 	cmpeqi	r3,r2,1
 402852c:	1800041e 	bne	r3,zero,4028540 <alt_ro_zipfs_seek+0x60>
 4028530:	10c000a0 	cmpeqi	r3,r2,2
 4028534:	1800201e 	bne	r3,zero,40285b8 <alt_ro_zipfs_seek+0xd8>
 4028538:	10001326 	beq	r2,zero,4028588 <alt_ro_zipfs_seek+0xa8>
 402853c:	00002b06 	br	40285ec <alt_ro_zipfs_seek+0x10c>
  {

  case SEEK_CUR:
    {
      /* Seek from current position */
      if ((fd->priv + ptr) > (start +len))
 4028540:	e0bffd17 	ldw	r2,-12(fp)
 4028544:	10c00117 	ldw	r3,4(r2)
 4028548:	e0bffe17 	ldw	r2,-8(fp)
 402854c:	1885883a 	add	r2,r3,r2
 4028550:	e13ffb17 	ldw	r4,-20(fp)
 4028554:	e0fffc17 	ldw	r3,-16(fp)
 4028558:	20c7883a 	add	r3,r4,r3
 402855c:	1880032e 	bgeu	r3,r2,402856c <alt_ro_zipfs_seek+0x8c>
      {
        ret_code = -EINVAL;
 4028560:	00bffa84 	movi	r2,-22
 4028564:	e0bff915 	stw	r2,-28(fp)
        goto exit;
 4028568:	00002606 	br	4028604 <alt_ro_zipfs_seek+0x124>
      }

      fd->priv += ptr;
 402856c:	e0bffd17 	ldw	r2,-12(fp)
 4028570:	10c00117 	ldw	r3,4(r2)
 4028574:	e0bffe17 	ldw	r2,-8(fp)
 4028578:	1887883a 	add	r3,r3,r2
 402857c:	e0bffd17 	ldw	r2,-12(fp)
 4028580:	10c00115 	stw	r3,4(r2)
      break;
 4028584:	00001906 	br	40285ec <alt_ro_zipfs_seek+0x10c>
    }
  case SEEK_SET:
    {
      /* Seek from the beginning */
      if (ptr > len)
 4028588:	e0bffe17 	ldw	r2,-8(fp)
 402858c:	e0fffc17 	ldw	r3,-16(fp)
 4028590:	1880032e 	bgeu	r3,r2,40285a0 <alt_ro_zipfs_seek+0xc0>
      {
        ret_code = -EINVAL;
 4028594:	00bffa84 	movi	r2,-22
 4028598:	e0bff915 	stw	r2,-28(fp)
        goto exit;
 402859c:	00001906 	br	4028604 <alt_ro_zipfs_seek+0x124>
      }

      fd->priv = start + ptr;
 40285a0:	e0fffb17 	ldw	r3,-20(fp)
 40285a4:	e0bffe17 	ldw	r2,-8(fp)
 40285a8:	1887883a 	add	r3,r3,r2
 40285ac:	e0bffd17 	ldw	r2,-12(fp)
 40285b0:	10c00115 	stw	r3,4(r2)
      break;
 40285b4:	00000d06 	br	40285ec <alt_ro_zipfs_seek+0x10c>
    }
  case SEEK_END:
    {
      if(ptr > 0)
 40285b8:	e0bffe17 	ldw	r2,-8(fp)
 40285bc:	0080030e 	bge	zero,r2,40285cc <alt_ro_zipfs_seek+0xec>
      {
        ret_code = -EINVAL;
 40285c0:	00bffa84 	movi	r2,-22
 40285c4:	e0bff915 	stw	r2,-28(fp)
        goto exit;
 40285c8:	00000e06 	br	4028604 <alt_ro_zipfs_seek+0x124>
      }

      fd->priv = start + ptr + len;
 40285cc:	e0fffb17 	ldw	r3,-20(fp)
 40285d0:	e13ffe17 	ldw	r4,-8(fp)
 40285d4:	e0bffc17 	ldw	r2,-16(fp)
 40285d8:	2085883a 	add	r2,r4,r2
 40285dc:	1887883a 	add	r3,r3,r2
 40285e0:	e0bffd17 	ldw	r2,-12(fp)
 40285e4:	10c00115 	stw	r3,4(r2)
      break;
 40285e8:	0001883a 	nop
    }
  }
  ret_code = (int)(fd->priv - start);
 40285ec:	e0bffd17 	ldw	r2,-12(fp)
 40285f0:	10800117 	ldw	r2,4(r2)
 40285f4:	1007883a 	mov	r3,r2
 40285f8:	e0bffb17 	ldw	r2,-20(fp)
 40285fc:	1885c83a 	sub	r2,r3,r2
 4028600:	e0bff915 	stw	r2,-28(fp)

exit:
  return ret_code;
 4028604:	e0bff917 	ldw	r2,-28(fp)
}
 4028608:	e037883a 	mov	sp,fp
 402860c:	dfc00117 	ldw	ra,4(sp)
 4028610:	df000017 	ldw	fp,0(sp)
 4028614:	dec00204 	addi	sp,sp,8
 4028618:	f800283a 	ret

0402861c <alt_ro_zipfs_fstat>:
* 
* Return the file status information, the only fields we fill in are
* the size and that this really is a file, not a device
*/
int alt_ro_zipfs_fstat(alt_fd* fd, struct stat* buf)
{
 402861c:	defff804 	addi	sp,sp,-32
 4028620:	dfc00715 	stw	ra,28(sp)
 4028624:	df000615 	stw	fp,24(sp)
 4028628:	df000604 	addi	fp,sp,24
 402862c:	e13ffe15 	stw	r4,-8(fp)
 4028630:	e17fff15 	stw	r5,-4(fp)
  alt_ro_zipfs_dev* dev= (alt_ro_zipfs_dev*)fd->dev;
 4028634:	e0bffe17 	ldw	r2,-8(fp)
 4028638:	10800017 	ldw	r2,0(r2)
 402863c:	e0bffa15 	stw	r2,-24(fp)
  alt_u8* start;
  alt_u32 len;
  int ret_code = 0;
 4028640:	e03ffb15 	stw	zero,-20(fp)

  find_file_entry(dev, fd, &start, &len);
 4028644:	e0fffd04 	addi	r3,fp,-12
 4028648:	e0bffc04 	addi	r2,fp,-16
 402864c:	180f883a 	mov	r7,r3
 4028650:	100d883a 	mov	r6,r2
 4028654:	e17ffe17 	ldw	r5,-8(fp)
 4028658:	e13ffa17 	ldw	r4,-24(fp)
 402865c:	40281cc0 	call	40281cc <find_file_entry>
  buf->st_mode = S_IFREG;
 4028660:	e0bfff17 	ldw	r2,-4(fp)
 4028664:	00e00014 	movui	r3,32768
 4028668:	10c00115 	stw	r3,4(r2)
  buf->st_size = (off_t)len;
 402866c:	e0bffd17 	ldw	r2,-12(fp)
 4028670:	1007883a 	mov	r3,r2
 4028674:	e0bfff17 	ldw	r2,-4(fp)
 4028678:	10c00415 	stw	r3,16(r2)

  return ret_code;
 402867c:	e0bffb17 	ldw	r2,-20(fp)
}
 4028680:	e037883a 	mov	sp,fp
 4028684:	dfc00117 	ldw	ra,4(sp)
 4028688:	df000017 	ldw	fp,0(sp)
 402868c:	dec00204 	addi	sp,sp,8
 4028690:	f800283a 	ret

04028694 <alt_ro_zipfs_check_valid>:
* check that the file system is a valid zip file
* if so return 1
*
*/
int alt_ro_zipfs_check_valid(alt_ro_zipfs_dev* dev)
{
 4028694:	defffc04 	addi	sp,sp,-16
 4028698:	dfc00315 	stw	ra,12(sp)
 402869c:	df000215 	stw	fp,8(sp)
 40286a0:	df000204 	addi	fp,sp,8
 40286a4:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 40286a8:	e03ffe15 	stw	zero,-8(fp)
  if (find_directory_entry(dev) != -ENOENT)
 40286ac:	e13fff17 	ldw	r4,-4(fp)
 40286b0:	4027fa80 	call	4027fa8 <find_directory_entry>
 40286b4:	10bfffa0 	cmpeqi	r2,r2,-2
 40286b8:	1000061e 	bne	r2,zero,40286d4 <alt_ro_zipfs_check_valid+0x40>
  {
    if (check_directory_table(dev) != -ENOENT)
 40286bc:	e13fff17 	ldw	r4,-4(fp)
 40286c0:	4027f040 	call	4027f04 <check_directory_table>
 40286c4:	10bfffa0 	cmpeqi	r2,r2,-2
 40286c8:	1000021e 	bne	r2,zero,40286d4 <alt_ro_zipfs_check_valid+0x40>
    {
      ret_code = 1;
 40286cc:	00800044 	movi	r2,1
 40286d0:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  return ret_code;
 40286d4:	e0bffe17 	ldw	r2,-8(fp)
}
 40286d8:	e037883a 	mov	sp,fp
 40286dc:	dfc00117 	ldw	ra,4(sp)
 40286e0:	df000017 	ldw	fp,0(sp)
 40286e4:	dec00204 	addi	sp,sp,8
 40286e8:	f800283a 	ret

040286ec <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 40286ec:	defffc04 	addi	sp,sp,-16
 40286f0:	dfc00315 	stw	ra,12(sp)
 40286f4:	df000215 	stw	fp,8(sp)
 40286f8:	df000204 	addi	fp,sp,8
 40286fc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 4028700:	d1600804 	addi	r5,gp,-32736
 4028704:	e13fff17 	ldw	r4,-4(fp)
 4028708:	40299500 	call	4029950 <alt_find_dev>
 402870c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 4028710:	e0bffe17 	ldw	r2,-8(fp)
}
 4028714:	e037883a 	mov	sp,fp
 4028718:	dfc00117 	ldw	ra,4(sp)
 402871c:	df000017 	ldw	fp,0(sp)
 4028720:	dec00204 	addi	sp,sp,8
 4028724:	f800283a 	ret

04028728 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 4028728:	defff904 	addi	sp,sp,-28
 402872c:	dfc00615 	stw	ra,24(sp)
 4028730:	df000515 	stw	fp,20(sp)
 4028734:	df000504 	addi	fp,sp,20
 4028738:	e13ffc15 	stw	r4,-16(fp)
 402873c:	e17ffd15 	stw	r5,-12(fp)
 4028740:	e1bffe15 	stw	r6,-8(fp)
 4028744:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 4028748:	e0bffc17 	ldw	r2,-16(fp)
 402874c:	10800f17 	ldw	r2,60(r2)
 4028750:	e0fffe17 	ldw	r3,-8(fp)
 4028754:	1880042e 	bgeu	r3,r2,4028768 <alt_up_pixel_buffer_dma_draw+0x40>
 4028758:	e0bffc17 	ldw	r2,-16(fp)
 402875c:	10801017 	ldw	r2,64(r2)
 4028760:	e0ffff17 	ldw	r3,-4(fp)
 4028764:	18800236 	bltu	r3,r2,4028770 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
 4028768:	00bfffc4 	movi	r2,-1
 402876c:	00005306 	br	40288bc <alt_up_pixel_buffer_dma_draw+0x194>

	unsigned int addr = 0;
 4028770:	e03ffb15 	stw	zero,-20(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 4028774:	e0bffc17 	ldw	r2,-16(fp)
 4028778:	10800d17 	ldw	r2,52(r2)
 402877c:	1000151e 	bne	r2,zero,40287d4 <alt_up_pixel_buffer_dma_draw+0xac>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 4028780:	e0bffc17 	ldw	r2,-16(fp)
 4028784:	10c01217 	ldw	r3,72(r2)
 4028788:	e0bffe17 	ldw	r2,-8(fp)
 402878c:	1886703a 	and	r3,r3,r2
 4028790:	e0bffc17 	ldw	r2,-16(fp)
 4028794:	10801117 	ldw	r2,68(r2)
 4028798:	1884983a 	sll	r2,r3,r2
 402879c:	e0fffb17 	ldw	r3,-20(fp)
 40287a0:	1885883a 	add	r2,r3,r2
 40287a4:	e0bffb15 	stw	r2,-20(fp)
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 40287a8:	e0bffc17 	ldw	r2,-16(fp)
 40287ac:	10c01417 	ldw	r3,80(r2)
 40287b0:	e0bfff17 	ldw	r2,-4(fp)
 40287b4:	1886703a 	and	r3,r3,r2
 40287b8:	e0bffc17 	ldw	r2,-16(fp)
 40287bc:	10801317 	ldw	r2,76(r2)
 40287c0:	1884983a 	sll	r2,r3,r2
 40287c4:	e0fffb17 	ldw	r3,-20(fp)
 40287c8:	1885883a 	add	r2,r3,r2
 40287cc:	e0bffb15 	stw	r2,-20(fp)
 40287d0:	00001a06 	br	402883c <alt_up_pixel_buffer_dma_draw+0x114>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 40287d4:	e0bffc17 	ldw	r2,-16(fp)
 40287d8:	10c01217 	ldw	r3,72(r2)
 40287dc:	e0bffe17 	ldw	r2,-8(fp)
 40287e0:	1886703a 	and	r3,r3,r2
 40287e4:	e0bffc17 	ldw	r2,-16(fp)
 40287e8:	10801117 	ldw	r2,68(r2)
 40287ec:	1884983a 	sll	r2,r3,r2
 40287f0:	e0fffb17 	ldw	r3,-20(fp)
 40287f4:	1885883a 	add	r2,r3,r2
 40287f8:	e0bffb15 	stw	r2,-20(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 40287fc:	e0bffc17 	ldw	r2,-16(fp)
 4028800:	10c01417 	ldw	r3,80(r2)
 4028804:	e0bfff17 	ldw	r2,-4(fp)
 4028808:	1886703a 	and	r3,r3,r2
 402880c:	e0bffc17 	ldw	r2,-16(fp)
 4028810:	10800f17 	ldw	r2,60(r2)
 4028814:	100b883a 	mov	r5,r2
 4028818:	1809883a 	mov	r4,r3
 402881c:	40191000 	call	4019100 <__mulsi3>
 4028820:	1007883a 	mov	r3,r2
 4028824:	e0bffc17 	ldw	r2,-16(fp)
 4028828:	10801117 	ldw	r2,68(r2)
 402882c:	1884983a 	sll	r2,r3,r2
 4028830:	e0fffb17 	ldw	r3,-20(fp)
 4028834:	1885883a 	add	r2,r3,r2
 4028838:	e0bffb15 	stw	r2,-20(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 402883c:	e0bffc17 	ldw	r2,-16(fp)
 4028840:	10800e17 	ldw	r2,56(r2)
 4028844:	10800058 	cmpnei	r2,r2,1
 4028848:	1000081e 	bne	r2,zero,402886c <alt_up_pixel_buffer_dma_draw+0x144>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 402884c:	e0bffc17 	ldw	r2,-16(fp)
 4028850:	10c00c17 	ldw	r3,48(r2)
 4028854:	e0bffb17 	ldw	r2,-20(fp)
 4028858:	1885883a 	add	r2,r3,r2
 402885c:	1007883a 	mov	r3,r2
 4028860:	e0bffd17 	ldw	r2,-12(fp)
 4028864:	18800025 	stbio	r2,0(r3)
 4028868:	00001306 	br	40288b8 <alt_up_pixel_buffer_dma_draw+0x190>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 402886c:	e0bffc17 	ldw	r2,-16(fp)
 4028870:	10800e17 	ldw	r2,56(r2)
 4028874:	10800098 	cmpnei	r2,r2,2
 4028878:	1000081e 	bne	r2,zero,402889c <alt_up_pixel_buffer_dma_draw+0x174>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 402887c:	e0bffc17 	ldw	r2,-16(fp)
 4028880:	10c00c17 	ldw	r3,48(r2)
 4028884:	e0bffb17 	ldw	r2,-20(fp)
 4028888:	1885883a 	add	r2,r3,r2
 402888c:	1007883a 	mov	r3,r2
 4028890:	e0bffd17 	ldw	r2,-12(fp)
 4028894:	1880002d 	sthio	r2,0(r3)
 4028898:	00000706 	br	40288b8 <alt_up_pixel_buffer_dma_draw+0x190>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 402889c:	e0bffc17 	ldw	r2,-16(fp)
 40288a0:	10c00c17 	ldw	r3,48(r2)
 40288a4:	e0bffb17 	ldw	r2,-20(fp)
 40288a8:	1885883a 	add	r2,r3,r2
 40288ac:	1007883a 	mov	r3,r2
 40288b0:	e0bffd17 	ldw	r2,-12(fp)
 40288b4:	18800035 	stwio	r2,0(r3)
	}

	return 0;
 40288b8:	0005883a 	mov	r2,zero
}
 40288bc:	e037883a 	mov	sp,fp
 40288c0:	dfc00117 	ldw	ra,4(sp)
 40288c4:	df000017 	ldw	fp,0(sp)
 40288c8:	dec00204 	addi	sp,sp,8
 40288cc:	f800283a 	ret

040288d0 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 40288d0:	defffd04 	addi	sp,sp,-12
 40288d4:	df000215 	stw	fp,8(sp)
 40288d8:	df000204 	addi	fp,sp,8
 40288dc:	e13ffe15 	stw	r4,-8(fp)
 40288e0:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 40288e4:	e0bffe17 	ldw	r2,-8(fp)
 40288e8:	10800a17 	ldw	r2,40(r2)
 40288ec:	10800104 	addi	r2,r2,4
 40288f0:	1007883a 	mov	r3,r2
 40288f4:	e0bfff17 	ldw	r2,-4(fp)
 40288f8:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 40288fc:	e0bffe17 	ldw	r2,-8(fp)
 4028900:	10800a17 	ldw	r2,40(r2)
 4028904:	10800104 	addi	r2,r2,4
 4028908:	10800037 	ldwio	r2,0(r2)
 402890c:	1007883a 	mov	r3,r2
 4028910:	e0bffe17 	ldw	r2,-8(fp)
 4028914:	10c00c15 	stw	r3,48(r2)
	return 0;
 4028918:	0005883a 	mov	r2,zero
}
 402891c:	e037883a 	mov	sp,fp
 4028920:	df000017 	ldw	fp,0(sp)
 4028924:	dec00104 	addi	sp,sp,4
 4028928:	f800283a 	ret

0402892c <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 402892c:	defffd04 	addi	sp,sp,-12
 4028930:	df000215 	stw	fp,8(sp)
 4028934:	dc000115 	stw	r16,4(sp)
 4028938:	df000204 	addi	fp,sp,8
 402893c:	e13ffe15 	stw	r4,-8(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 4028940:	e0bffe17 	ldw	r2,-8(fp)
 4028944:	14000c17 	ldw	r16,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 4028948:	e0bffe17 	ldw	r2,-8(fp)
 402894c:	10800a17 	ldw	r2,40(r2)
 4028950:	1007883a 	mov	r3,r2
 4028954:	00800044 	movi	r2,1
 4028958:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 402895c:	e0bffe17 	ldw	r2,-8(fp)
 4028960:	10c00b17 	ldw	r3,44(r2)
 4028964:	e0bffe17 	ldw	r2,-8(fp)
 4028968:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 402896c:	e0bffe17 	ldw	r2,-8(fp)
 4028970:	14000b15 	stw	r16,44(r2)
	return 0;
 4028974:	0005883a 	mov	r2,zero
}
 4028978:	e6ffff04 	addi	sp,fp,-4
 402897c:	df000117 	ldw	fp,4(sp)
 4028980:	dc000017 	ldw	r16,0(sp)
 4028984:	dec00204 	addi	sp,sp,8
 4028988:	f800283a 	ret

0402898c <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 402898c:	defffe04 	addi	sp,sp,-8
 4028990:	df000115 	stw	fp,4(sp)
 4028994:	df000104 	addi	fp,sp,4
 4028998:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 402899c:	e0bfff17 	ldw	r2,-4(fp)
 40289a0:	10800a17 	ldw	r2,40(r2)
 40289a4:	10800304 	addi	r2,r2,12
 40289a8:	10800037 	ldwio	r2,0(r2)
 40289ac:	1080004c 	andi	r2,r2,1
}
 40289b0:	e037883a 	mov	sp,fp
 40289b4:	df000017 	ldw	fp,0(sp)
 40289b8:	dec00104 	addi	sp,sp,4
 40289bc:	f800283a 	ret

040289c0 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 40289c0:	defff604 	addi	sp,sp,-40
 40289c4:	dfc00915 	stw	ra,36(sp)
 40289c8:	df000815 	stw	fp,32(sp)
 40289cc:	dd400715 	stw	r21,28(sp)
 40289d0:	dd000615 	stw	r20,24(sp)
 40289d4:	dcc00515 	stw	r19,20(sp)
 40289d8:	dc800415 	stw	r18,16(sp)
 40289dc:	dc400315 	stw	r17,12(sp)
 40289e0:	dc000215 	stw	r16,8(sp)
 40289e4:	df000804 	addi	fp,sp,32
 40289e8:	e13ff815 	stw	r4,-32(fp)
 40289ec:	e17ff915 	stw	r5,-28(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 40289f0:	e0bff917 	ldw	r2,-28(fp)
 40289f4:	10800058 	cmpnei	r2,r2,1
 40289f8:	1000031e 	bne	r2,zero,4028a08 <alt_up_pixel_buffer_dma_clear_screen+0x48>
		addr = pixel_buffer->back_buffer_start_address;
 40289fc:	e0bff817 	ldw	r2,-32(fp)
 4028a00:	14400c17 	ldw	r17,48(r2)
 4028a04:	00000206 	br	4028a10 <alt_up_pixel_buffer_dma_clear_screen+0x50>
	else
		addr = pixel_buffer->buffer_start_address;
 4028a08:	e0bff817 	ldw	r2,-32(fp)
 4028a0c:	14400b17 	ldw	r17,44(r2)
	limit_x = pixel_buffer->x_resolution;
 4028a10:	e0bff817 	ldw	r2,-32(fp)
 4028a14:	14000f17 	ldw	r16,60(r2)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4028a18:	e0bff817 	ldw	r2,-32(fp)
 4028a1c:	10800e17 	ldw	r2,56(r2)
 4028a20:	10800098 	cmpnei	r2,r2,2
 4028a24:	1000031e 	bne	r2,zero,4028a34 <alt_up_pixel_buffer_dma_clear_screen+0x74>
		limit_x = limit_x << 1;
 4028a28:	8405883a 	add	r2,r16,r16
 4028a2c:	1021883a 	mov	r16,r2
 4028a30:	00000306 	br	4028a40 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
 4028a34:	8405883a 	add	r2,r16,r16
 4028a38:	1085883a 	add	r2,r2,r2
 4028a3c:	1021883a 	mov	r16,r2
	}	
	limit_y = pixel_buffer->y_resolution;
 4028a40:	e0bff817 	ldw	r2,-32(fp)
 4028a44:	14c01017 	ldw	r19,64(r2)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 4028a48:	e0bff817 	ldw	r2,-32(fp)
 4028a4c:	10800d17 	ldw	r2,52(r2)
 4028a50:	1000111e 	bne	r2,zero,4028a98 <alt_up_pixel_buffer_dma_clear_screen+0xd8>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 4028a54:	e0bff817 	ldw	r2,-32(fp)
 4028a58:	15401317 	ldw	r21,76(r2)

		for (y = 0; y < limit_y; y++)
 4028a5c:	0029883a 	mov	r20,zero
 4028a60:	00000b06 	br	4028a90 <alt_up_pixel_buffer_dma_clear_screen+0xd0>
		{
			for (x = 0; x < limit_x; x = x + 4)
 4028a64:	0025883a 	mov	r18,zero
 4028a68:	00000406 	br	4028a7c <alt_up_pixel_buffer_dma_clear_screen+0xbc>
			{
				IOWR_32DIRECT(addr, x, 0);
 4028a6c:	9445883a 	add	r2,r18,r17
 4028a70:	0007883a 	mov	r3,zero
 4028a74:	10c00035 	stwio	r3,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 4028a78:	94800104 	addi	r18,r18,4
 4028a7c:	943ffb36 	bltu	r18,r16,4028a6c <__alt_data_end+0xfc028a6c>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 4028a80:	00800044 	movi	r2,1
 4028a84:	1544983a 	sll	r2,r2,r21
 4028a88:	88a3883a 	add	r17,r17,r2
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 4028a8c:	a5000044 	addi	r20,r20,1
 4028a90:	a4fff436 	bltu	r20,r19,4028a64 <__alt_data_end+0xfc028a64>
		for (x = 0; x < limit_y; x = x + 4)
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 4028a94:	00000d06 	br	4028acc <alt_up_pixel_buffer_dma_clear_screen+0x10c>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 4028a98:	800b883a 	mov	r5,r16
 4028a9c:	9809883a 	mov	r4,r19
 4028aa0:	40191000 	call	4019100 <__mulsi3>
 4028aa4:	1027883a 	mov	r19,r2

		for (x = 0; x < limit_y; x = x + 4)
 4028aa8:	0021883a 	mov	r16,zero
 4028aac:	00000506 	br	4028ac4 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			IOWR_32DIRECT(addr, x, 0);
 4028ab0:	8005883a 	mov	r2,r16
 4028ab4:	1445883a 	add	r2,r2,r17
 4028ab8:	0007883a 	mov	r3,zero
 4028abc:	10c00035 	stwio	r3,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 4028ac0:	84000104 	addi	r16,r16,4
 4028ac4:	8005883a 	mov	r2,r16
 4028ac8:	14fff936 	bltu	r2,r19,4028ab0 <__alt_data_end+0xfc028ab0>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 4028acc:	0001883a 	nop
 4028ad0:	e6fffa04 	addi	sp,fp,-24
 4028ad4:	dfc00717 	ldw	ra,28(sp)
 4028ad8:	df000617 	ldw	fp,24(sp)
 4028adc:	dd400517 	ldw	r21,20(sp)
 4028ae0:	dd000417 	ldw	r20,16(sp)
 4028ae4:	dcc00317 	ldw	r19,12(sp)
 4028ae8:	dc800217 	ldw	r18,8(sp)
 4028aec:	dc400117 	ldw	r17,4(sp)
 4028af0:	dc000017 	ldw	r16,0(sp)
 4028af4:	dec00804 	addi	sp,sp,32
 4028af8:	f800283a 	ret

04028afc <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 4028afc:	defff204 	addi	sp,sp,-56
 4028b00:	dfc00d15 	stw	ra,52(sp)
 4028b04:	df000c15 	stw	fp,48(sp)
 4028b08:	ddc00b15 	stw	r23,44(sp)
 4028b0c:	dd800a15 	stw	r22,40(sp)
 4028b10:	dd400915 	stw	r21,36(sp)
 4028b14:	dd000815 	stw	r20,32(sp)
 4028b18:	dcc00715 	stw	r19,28(sp)
 4028b1c:	dc800615 	stw	r18,24(sp)
 4028b20:	dc400515 	stw	r17,20(sp)
 4028b24:	dc000415 	stw	r16,16(sp)
 4028b28:	df000c04 	addi	fp,sp,48
 4028b2c:	e13ff415 	stw	r4,-48(fp)
 4028b30:	e17ff515 	stw	r5,-44(fp)
 4028b34:	e1bff615 	stw	r6,-40(fp)
 4028b38:	e1fff715 	stw	r7,-36(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 4028b3c:	e0bff417 	ldw	r2,-48(fp)
 4028b40:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 4028b44:	e0bff417 	ldw	r2,-48(fp)
 4028b48:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 4028b4c:	e5bff517 	ldw	r22,-44(fp)
	register unsigned int r_x = x1;
 4028b50:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int t_y = y0;
 4028b54:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int b_y = y1;
 4028b58:	e4c00217 	ldw	r19,8(fp)
	register unsigned int local_color = color;
 4028b5c:	e5c00317 	ldw	r23,12(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 4028b60:	a580032e 	bgeu	r20,r22,4028b70 <alt_up_pixel_buffer_dma_draw_box+0x74>
	{
		temp = l_x;
 4028b64:	b02b883a 	mov	r21,r22
		l_x = r_x;
 4028b68:	a02d883a 	mov	r22,r20
		r_x = temp;
 4028b6c:	a829883a 	mov	r20,r21
	}
	if (t_y > b_y)
 4028b70:	9c40032e 	bgeu	r19,r17,4028b80 <alt_up_pixel_buffer_dma_draw_box+0x84>
	{
		temp = t_y;
 4028b74:	882b883a 	mov	r21,r17
		t_y = b_y;
 4028b78:	9823883a 	mov	r17,r19
		b_y = temp;
 4028b7c:	a827883a 	mov	r19,r21
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 4028b80:	b4808f2e 	bgeu	r22,r18,4028dc0 <alt_up_pixel_buffer_dma_draw_box+0x2c4>
 4028b84:	8c008e2e 	bgeu	r17,r16,4028dc0 <alt_up_pixel_buffer_dma_draw_box+0x2c4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 4028b88:	a4800136 	bltu	r20,r18,4028b90 <alt_up_pixel_buffer_dma_draw_box+0x94>
	{
		r_x = limit_x - 1;
 4028b8c:	953fffc4 	addi	r20,r18,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 4028b90:	9c000136 	bltu	r19,r16,4028b98 <alt_up_pixel_buffer_dma_draw_box+0x9c>
	{
		b_y = limit_y - 1;
 4028b94:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 4028b98:	e0800417 	ldw	r2,16(fp)
 4028b9c:	10800058 	cmpnei	r2,r2,1
 4028ba0:	1000031e 	bne	r2,zero,4028bb0 <alt_up_pixel_buffer_dma_draw_box+0xb4>
		addr = pixel_buffer->back_buffer_start_address;
 4028ba4:	e0bff417 	ldw	r2,-48(fp)
 4028ba8:	14000c17 	ldw	r16,48(r2)
 4028bac:	00000206 	br	4028bb8 <alt_up_pixel_buffer_dma_draw_box+0xbc>
	else
		addr = pixel_buffer->buffer_start_address;
 4028bb0:	e0bff417 	ldw	r2,-48(fp)
 4028bb4:	14000b17 	ldw	r16,44(r2)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 4028bb8:	e0bff417 	ldw	r2,-48(fp)
 4028bbc:	10800d17 	ldw	r2,52(r2)
 4028bc0:	10003c1e 	bne	r2,zero,4028cb4 <alt_up_pixel_buffer_dma_draw_box+0x1b8>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 4028bc4:	e0bff417 	ldw	r2,-48(fp)
 4028bc8:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
 4028bcc:	8d44983a 	sll	r2,r17,r21
 4028bd0:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4028bd4:	e0bff417 	ldw	r2,-48(fp)
 4028bd8:	10800e17 	ldw	r2,56(r2)
 4028bdc:	10800058 	cmpnei	r2,r2,1
 4028be0:	10000f1e 	bne	r2,zero,4028c20 <alt_up_pixel_buffer_dma_draw_box+0x124>
			for (y = t_y; y <= b_y; y++)
 4028be4:	8825883a 	mov	r18,r17
 4028be8:	00000b06 	br	4028c18 <alt_up_pixel_buffer_dma_draw_box+0x11c>
			{
				for (x = l_x; x <= r_x; x++)
 4028bec:	b023883a 	mov	r17,r22
 4028bf0:	00000406 	br	4028c04 <alt_up_pixel_buffer_dma_draw_box+0x108>
				{
					IOWR_8DIRECT(addr, x, local_color);
 4028bf4:	8c05883a 	add	r2,r17,r16
 4028bf8:	b807883a 	mov	r3,r23
 4028bfc:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4028c00:	8c400044 	addi	r17,r17,1
 4028c04:	a47ffb2e 	bgeu	r20,r17,4028bf4 <__alt_data_end+0xfc028bf4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 4028c08:	00800044 	movi	r2,1
 4028c0c:	1544983a 	sll	r2,r2,r21
 4028c10:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 4028c14:	94800044 	addi	r18,r18,1
 4028c18:	9cbff42e 	bgeu	r19,r18,4028bec <__alt_data_end+0xfc028bec>
 4028c1c:	00006906 	br	4028dc4 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4028c20:	e0bff417 	ldw	r2,-48(fp)
 4028c24:	10800e17 	ldw	r2,56(r2)
 4028c28:	10800098 	cmpnei	r2,r2,2
 4028c2c:	1000101e 	bne	r2,zero,4028c70 <alt_up_pixel_buffer_dma_draw_box+0x174>
			for (y = t_y; y <= b_y; y++)
 4028c30:	8825883a 	mov	r18,r17
 4028c34:	00000c06 	br	4028c68 <alt_up_pixel_buffer_dma_draw_box+0x16c>
			{
				for (x = l_x; x <= r_x; x++)
 4028c38:	b023883a 	mov	r17,r22
 4028c3c:	00000506 	br	4028c54 <alt_up_pixel_buffer_dma_draw_box+0x158>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 4028c40:	8c45883a 	add	r2,r17,r17
 4028c44:	1405883a 	add	r2,r2,r16
 4028c48:	b807883a 	mov	r3,r23
 4028c4c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4028c50:	8c400044 	addi	r17,r17,1
 4028c54:	a47ffa2e 	bgeu	r20,r17,4028c40 <__alt_data_end+0xfc028c40>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 4028c58:	00800044 	movi	r2,1
 4028c5c:	1544983a 	sll	r2,r2,r21
 4028c60:	80a1883a 	add	r16,r16,r2
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 4028c64:	94800044 	addi	r18,r18,1
 4028c68:	9cbff32e 	bgeu	r19,r18,4028c38 <__alt_data_end+0xfc028c38>
 4028c6c:	00005506 	br	4028dc4 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 4028c70:	8825883a 	mov	r18,r17
 4028c74:	00000d06 	br	4028cac <alt_up_pixel_buffer_dma_draw_box+0x1b0>
			{
				for (x = l_x; x <= r_x; x++)
 4028c78:	b023883a 	mov	r17,r22
 4028c7c:	00000606 	br	4028c98 <alt_up_pixel_buffer_dma_draw_box+0x19c>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 4028c80:	8c45883a 	add	r2,r17,r17
 4028c84:	1085883a 	add	r2,r2,r2
 4028c88:	1405883a 	add	r2,r2,r16
 4028c8c:	b807883a 	mov	r3,r23
 4028c90:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4028c94:	8c400044 	addi	r17,r17,1
 4028c98:	a47ff92e 	bgeu	r20,r17,4028c80 <__alt_data_end+0xfc028c80>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 4028c9c:	00800044 	movi	r2,1
 4028ca0:	1544983a 	sll	r2,r2,r21
 4028ca4:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 4028ca8:	94800044 	addi	r18,r18,1
 4028cac:	9cbff22e 	bgeu	r19,r18,4028c78 <__alt_data_end+0xfc028c78>
 4028cb0:	00004406 	br	4028dc4 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4028cb4:	e0bff417 	ldw	r2,-48(fp)
 4028cb8:	10800e17 	ldw	r2,56(r2)
 4028cbc:	10800058 	cmpnei	r2,r2,1
 4028cc0:	1000111e 	bne	r2,zero,4028d08 <alt_up_pixel_buffer_dma_draw_box+0x20c>
			addr = addr + t_y * limit_x;
 4028cc4:	900b883a 	mov	r5,r18
 4028cc8:	8809883a 	mov	r4,r17
 4028ccc:	40191000 	call	4019100 <__mulsi3>
 4028cd0:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 4028cd4:	882b883a 	mov	r21,r17
 4028cd8:	00000906 	br	4028d00 <alt_up_pixel_buffer_dma_draw_box+0x204>
			{
				for (x = l_x; x <= r_x; x++)
 4028cdc:	b023883a 	mov	r17,r22
 4028ce0:	00000406 	br	4028cf4 <alt_up_pixel_buffer_dma_draw_box+0x1f8>
				{
					IOWR_8DIRECT(addr, x, local_color);
 4028ce4:	8c05883a 	add	r2,r17,r16
 4028ce8:	b807883a 	mov	r3,r23
 4028cec:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4028cf0:	8c400044 	addi	r17,r17,1
 4028cf4:	a47ffb2e 	bgeu	r20,r17,4028ce4 <__alt_data_end+0xfc028ce4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 4028cf8:	84a1883a 	add	r16,r16,r18
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4028cfc:	ad400044 	addi	r21,r21,1
 4028d00:	9d7ff62e 	bgeu	r19,r21,4028cdc <__alt_data_end+0xfc028cdc>
 4028d04:	00002f06 	br	4028dc4 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4028d08:	e0bff417 	ldw	r2,-48(fp)
 4028d0c:	10800e17 	ldw	r2,56(r2)
 4028d10:	10800098 	cmpnei	r2,r2,2
 4028d14:	1000141e 	bne	r2,zero,4028d68 <alt_up_pixel_buffer_dma_draw_box+0x26c>
			limit_x = limit_x << 1;
 4028d18:	9485883a 	add	r2,r18,r18
 4028d1c:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 4028d20:	900b883a 	mov	r5,r18
 4028d24:	8809883a 	mov	r4,r17
 4028d28:	40191000 	call	4019100 <__mulsi3>
 4028d2c:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 4028d30:	882b883a 	mov	r21,r17
 4028d34:	00000a06 	br	4028d60 <alt_up_pixel_buffer_dma_draw_box+0x264>
			{
				for (x = l_x; x <= r_x; x++)
 4028d38:	b023883a 	mov	r17,r22
 4028d3c:	00000506 	br	4028d54 <alt_up_pixel_buffer_dma_draw_box+0x258>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 4028d40:	8c45883a 	add	r2,r17,r17
 4028d44:	1405883a 	add	r2,r2,r16
 4028d48:	b807883a 	mov	r3,r23
 4028d4c:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4028d50:	8c400044 	addi	r17,r17,1
 4028d54:	a47ffa2e 	bgeu	r20,r17,4028d40 <__alt_data_end+0xfc028d40>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 4028d58:	84a1883a 	add	r16,r16,r18
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4028d5c:	ad400044 	addi	r21,r21,1
 4028d60:	9d7ff52e 	bgeu	r19,r21,4028d38 <__alt_data_end+0xfc028d38>
 4028d64:	00001706 	br	4028dc4 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 4028d68:	9485883a 	add	r2,r18,r18
 4028d6c:	1085883a 	add	r2,r2,r2
 4028d70:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 4028d74:	900b883a 	mov	r5,r18
 4028d78:	8809883a 	mov	r4,r17
 4028d7c:	40191000 	call	4019100 <__mulsi3>
 4028d80:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 4028d84:	882b883a 	mov	r21,r17
 4028d88:	00000b06 	br	4028db8 <alt_up_pixel_buffer_dma_draw_box+0x2bc>
			{
				for (x = l_x; x <= r_x; x++)
 4028d8c:	b023883a 	mov	r17,r22
 4028d90:	00000606 	br	4028dac <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 4028d94:	8c45883a 	add	r2,r17,r17
 4028d98:	1085883a 	add	r2,r2,r2
 4028d9c:	1405883a 	add	r2,r2,r16
 4028da0:	b807883a 	mov	r3,r23
 4028da4:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4028da8:	8c400044 	addi	r17,r17,1
 4028dac:	a47ff92e 	bgeu	r20,r17,4028d94 <__alt_data_end+0xfc028d94>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 4028db0:	84a1883a 	add	r16,r16,r18
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4028db4:	ad400044 	addi	r21,r21,1
 4028db8:	9d7ff42e 	bgeu	r19,r21,4028d8c <__alt_data_end+0xfc028d8c>
 4028dbc:	00000106 	br	4028dc4 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 4028dc0:	0001883a 	nop
				}
				addr = addr + limit_x;
			}
		}
	}
}
 4028dc4:	e6fff804 	addi	sp,fp,-32
 4028dc8:	dfc00917 	ldw	ra,36(sp)
 4028dcc:	df000817 	ldw	fp,32(sp)
 4028dd0:	ddc00717 	ldw	r23,28(sp)
 4028dd4:	dd800617 	ldw	r22,24(sp)
 4028dd8:	dd400517 	ldw	r21,20(sp)
 4028ddc:	dd000417 	ldw	r20,16(sp)
 4028de0:	dcc00317 	ldw	r19,12(sp)
 4028de4:	dc800217 	ldw	r18,8(sp)
 4028de8:	dc400117 	ldw	r17,4(sp)
 4028dec:	dc000017 	ldw	r16,0(sp)
 4028df0:	dec00a04 	addi	sp,sp,40
 4028df4:	f800283a 	ret

04028df8 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 4028df8:	defff304 	addi	sp,sp,-52
 4028dfc:	dfc00c15 	stw	ra,48(sp)
 4028e00:	df000b15 	stw	fp,44(sp)
 4028e04:	dd800a15 	stw	r22,40(sp)
 4028e08:	dd400915 	stw	r21,36(sp)
 4028e0c:	dd000815 	stw	r20,32(sp)
 4028e10:	dcc00715 	stw	r19,28(sp)
 4028e14:	dc800615 	stw	r18,24(sp)
 4028e18:	dc400515 	stw	r17,20(sp)
 4028e1c:	dc000415 	stw	r16,16(sp)
 4028e20:	df000b04 	addi	fp,sp,44
 4028e24:	e13ff515 	stw	r4,-44(fp)
 4028e28:	e17ff615 	stw	r5,-40(fp)
 4028e2c:	e1bff715 	stw	r6,-36(fp)
 4028e30:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 4028e34:	e0bff517 	ldw	r2,-44(fp)
 4028e38:	14c00f17 	ldw	r19,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 4028e3c:	e0bff517 	ldw	r2,-44(fp)
 4028e40:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 4028e44:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int r_x = x1;
 4028e48:	e4bff717 	ldw	r18,-36(fp)
	register unsigned int line_y = y;
 4028e4c:	e53ff817 	ldw	r20,-32(fp)
	register unsigned int local_color = color;
 4028e50:	e5400217 	ldw	r21,8(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 4028e54:	9440032e 	bgeu	r18,r17,4028e64 <alt_up_pixel_buffer_dma_draw_hline+0x6c>
	{
		temp = l_x;
 4028e58:	882d883a 	mov	r22,r17
		l_x = r_x;
 4028e5c:	9023883a 	mov	r17,r18
		r_x = temp;
 4028e60:	b025883a 	mov	r18,r22
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 4028e64:	8cc0632e 	bgeu	r17,r19,4028ff4 <alt_up_pixel_buffer_dma_draw_hline+0x1fc>
 4028e68:	a400622e 	bgeu	r20,r16,4028ff4 <alt_up_pixel_buffer_dma_draw_hline+0x1fc>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 4028e6c:	94c00136 	bltu	r18,r19,4028e74 <alt_up_pixel_buffer_dma_draw_hline+0x7c>
	{
		r_x = limit_x - 1;
 4028e70:	9cbfffc4 	addi	r18,r19,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 4028e74:	e0800317 	ldw	r2,12(fp)
 4028e78:	10800058 	cmpnei	r2,r2,1
 4028e7c:	1000031e 	bne	r2,zero,4028e8c <alt_up_pixel_buffer_dma_draw_hline+0x94>
		addr = pixel_buffer->back_buffer_start_address;
 4028e80:	e0bff517 	ldw	r2,-44(fp)
 4028e84:	14000c17 	ldw	r16,48(r2)
 4028e88:	00000206 	br	4028e94 <alt_up_pixel_buffer_dma_draw_hline+0x9c>
	else
		addr = pixel_buffer->buffer_start_address;
 4028e8c:	e0bff517 	ldw	r2,-44(fp)
 4028e90:	14000b17 	ldw	r16,44(r2)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 4028e94:	e0bff517 	ldw	r2,-44(fp)
 4028e98:	10800d17 	ldw	r2,52(r2)
 4028e9c:	1000231e 	bne	r2,zero,4028f2c <alt_up_pixel_buffer_dma_draw_hline+0x134>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 4028ea0:	e0bff517 	ldw	r2,-44(fp)
 4028ea4:	14c01317 	ldw	r19,76(r2)
		addr = addr + (line_y << offset_y);
 4028ea8:	a4c4983a 	sll	r2,r20,r19
 4028eac:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4028eb0:	e0bff517 	ldw	r2,-44(fp)
 4028eb4:	10800e17 	ldw	r2,56(r2)
 4028eb8:	10800058 	cmpnei	r2,r2,1
 4028ebc:	1000071e 	bne	r2,zero,4028edc <alt_up_pixel_buffer_dma_draw_hline+0xe4>
			for (x = l_x; x <= r_x; x++)
 4028ec0:	00000406 	br	4028ed4 <alt_up_pixel_buffer_dma_draw_hline+0xdc>
			{
				IOWR_8DIRECT(addr, x, local_color);
 4028ec4:	8c05883a 	add	r2,r17,r16
 4028ec8:	a807883a 	mov	r3,r21
 4028ecc:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 4028ed0:	8c400044 	addi	r17,r17,1
 4028ed4:	947ffb2e 	bgeu	r18,r17,4028ec4 <__alt_data_end+0xfc028ec4>
 4028ed8:	00004706 	br	4028ff8 <alt_up_pixel_buffer_dma_draw_hline+0x200>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4028edc:	e0bff517 	ldw	r2,-44(fp)
 4028ee0:	10800e17 	ldw	r2,56(r2)
 4028ee4:	10800098 	cmpnei	r2,r2,2
 4028ee8:	10000e1e 	bne	r2,zero,4028f24 <alt_up_pixel_buffer_dma_draw_hline+0x12c>
			for (x = l_x; x <= r_x; x++)
 4028eec:	00000506 	br	4028f04 <alt_up_pixel_buffer_dma_draw_hline+0x10c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 4028ef0:	8c45883a 	add	r2,r17,r17
 4028ef4:	1405883a 	add	r2,r2,r16
 4028ef8:	a807883a 	mov	r3,r21
 4028efc:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 4028f00:	8c400044 	addi	r17,r17,1
 4028f04:	947ffa2e 	bgeu	r18,r17,4028ef0 <__alt_data_end+0xfc028ef0>
 4028f08:	00003b06 	br	4028ff8 <alt_up_pixel_buffer_dma_draw_hline+0x200>
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 4028f0c:	8c45883a 	add	r2,r17,r17
 4028f10:	1085883a 	add	r2,r2,r2
 4028f14:	1405883a 	add	r2,r2,r16
 4028f18:	a807883a 	mov	r3,r21
 4028f1c:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 4028f20:	8c400044 	addi	r17,r17,1
 4028f24:	947ff92e 	bgeu	r18,r17,4028f0c <__alt_data_end+0xfc028f0c>
 4028f28:	00003306 	br	4028ff8 <alt_up_pixel_buffer_dma_draw_hline+0x200>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4028f2c:	e0bff517 	ldw	r2,-44(fp)
 4028f30:	10800e17 	ldw	r2,56(r2)
 4028f34:	10800058 	cmpnei	r2,r2,1
 4028f38:	10000b1e 	bne	r2,zero,4028f68 <alt_up_pixel_buffer_dma_draw_hline+0x170>
			addr = addr + line_y * limit_x;
 4028f3c:	980b883a 	mov	r5,r19
 4028f40:	a009883a 	mov	r4,r20
 4028f44:	40191000 	call	4019100 <__mulsi3>
 4028f48:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 4028f4c:	00000406 	br	4028f60 <alt_up_pixel_buffer_dma_draw_hline+0x168>
			{
				IOWR_8DIRECT(addr, x, local_color);
 4028f50:	8c05883a 	add	r2,r17,r16
 4028f54:	a807883a 	mov	r3,r21
 4028f58:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 4028f5c:	8c400044 	addi	r17,r17,1
 4028f60:	947ffb2e 	bgeu	r18,r17,4028f50 <__alt_data_end+0xfc028f50>
 4028f64:	00002406 	br	4028ff8 <alt_up_pixel_buffer_dma_draw_hline+0x200>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4028f68:	e0bff517 	ldw	r2,-44(fp)
 4028f6c:	10800e17 	ldw	r2,56(r2)
 4028f70:	10800098 	cmpnei	r2,r2,2
 4028f74:	10000e1e 	bne	r2,zero,4028fb0 <alt_up_pixel_buffer_dma_draw_hline+0x1b8>
			limit_x = limit_x << 1;
 4028f78:	9cc5883a 	add	r2,r19,r19
 4028f7c:	1027883a 	mov	r19,r2
			addr = addr + line_y * limit_x;
 4028f80:	980b883a 	mov	r5,r19
 4028f84:	a009883a 	mov	r4,r20
 4028f88:	40191000 	call	4019100 <__mulsi3>
 4028f8c:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 4028f90:	00000506 	br	4028fa8 <alt_up_pixel_buffer_dma_draw_hline+0x1b0>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 4028f94:	8c45883a 	add	r2,r17,r17
 4028f98:	1405883a 	add	r2,r2,r16
 4028f9c:	a807883a 	mov	r3,r21
 4028fa0:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 4028fa4:	8c400044 	addi	r17,r17,1
 4028fa8:	947ffa2e 	bgeu	r18,r17,4028f94 <__alt_data_end+0xfc028f94>
 4028fac:	00001206 	br	4028ff8 <alt_up_pixel_buffer_dma_draw_hline+0x200>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 4028fb0:	9cc5883a 	add	r2,r19,r19
 4028fb4:	1085883a 	add	r2,r2,r2
 4028fb8:	1027883a 	mov	r19,r2
			addr = addr + line_y * limit_x;
 4028fbc:	980b883a 	mov	r5,r19
 4028fc0:	a009883a 	mov	r4,r20
 4028fc4:	40191000 	call	4019100 <__mulsi3>
 4028fc8:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 4028fcc:	00000606 	br	4028fe8 <alt_up_pixel_buffer_dma_draw_hline+0x1f0>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 4028fd0:	8c45883a 	add	r2,r17,r17
 4028fd4:	1085883a 	add	r2,r2,r2
 4028fd8:	1405883a 	add	r2,r2,r16
 4028fdc:	a807883a 	mov	r3,r21
 4028fe0:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 4028fe4:	8c400044 	addi	r17,r17,1
 4028fe8:	947ff92e 	bgeu	r18,r17,4028fd0 <__alt_data_end+0xfc028fd0>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
 4028fec:	84e1883a 	add	r16,r16,r19
 4028ff0:	00000106 	br	4028ff8 <alt_up_pixel_buffer_dma_draw_hline+0x200>
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 4028ff4:	0001883a 	nop
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
 4028ff8:	e6fff904 	addi	sp,fp,-28
 4028ffc:	dfc00817 	ldw	ra,32(sp)
 4029000:	df000717 	ldw	fp,28(sp)
 4029004:	dd800617 	ldw	r22,24(sp)
 4029008:	dd400517 	ldw	r21,20(sp)
 402900c:	dd000417 	ldw	r20,16(sp)
 4029010:	dcc00317 	ldw	r19,12(sp)
 4029014:	dc800217 	ldw	r18,8(sp)
 4029018:	dc400117 	ldw	r17,4(sp)
 402901c:	dc000017 	ldw	r16,0(sp)
 4029020:	dec00904 	addi	sp,sp,36
 4029024:	f800283a 	ret

04029028 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 4029028:	defff304 	addi	sp,sp,-52
 402902c:	dfc00c15 	stw	ra,48(sp)
 4029030:	df000b15 	stw	fp,44(sp)
 4029034:	dd800a15 	stw	r22,40(sp)
 4029038:	dd400915 	stw	r21,36(sp)
 402903c:	dd000815 	stw	r20,32(sp)
 4029040:	dcc00715 	stw	r19,28(sp)
 4029044:	dc800615 	stw	r18,24(sp)
 4029048:	dc400515 	stw	r17,20(sp)
 402904c:	dc000415 	stw	r16,16(sp)
 4029050:	df000b04 	addi	fp,sp,44
 4029054:	e13ff515 	stw	r4,-44(fp)
 4029058:	e17ff615 	stw	r5,-40(fp)
 402905c:	e1bff715 	stw	r6,-36(fp)
 4029060:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 4029064:	e0bff517 	ldw	r2,-44(fp)
 4029068:	14c00f17 	ldw	r19,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 402906c:	e0bff517 	ldw	r2,-44(fp)
 4029070:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int line_x = x;
 4029074:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int t_y = y0;
 4029078:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int b_y = y1;
 402907c:	e4bff817 	ldw	r18,-32(fp)
	register unsigned int local_color = color;
 4029080:	e5800217 	ldw	r22,8(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 4029084:	9500032e 	bgeu	r18,r20,4029094 <alt_up_pixel_buffer_dma_draw_vline+0x6c>
	{
		temp = t_y;
 4029088:	a02b883a 	mov	r21,r20
		t_y = b_y;
 402908c:	9029883a 	mov	r20,r18
		b_y = temp;
 4029090:	a825883a 	mov	r18,r21
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 4029094:	8cc0722e 	bgeu	r17,r19,4029260 <alt_up_pixel_buffer_dma_draw_vline+0x238>
 4029098:	a400712e 	bgeu	r20,r16,4029260 <alt_up_pixel_buffer_dma_draw_vline+0x238>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 402909c:	94000136 	bltu	r18,r16,40290a4 <alt_up_pixel_buffer_dma_draw_vline+0x7c>
	{
		b_y = limit_y - 1;
 40290a0:	84bfffc4 	addi	r18,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 40290a4:	e0800317 	ldw	r2,12(fp)
 40290a8:	10800058 	cmpnei	r2,r2,1
 40290ac:	1000031e 	bne	r2,zero,40290bc <alt_up_pixel_buffer_dma_draw_vline+0x94>
		addr = pixel_buffer->back_buffer_start_address;
 40290b0:	e0bff517 	ldw	r2,-44(fp)
 40290b4:	14000c17 	ldw	r16,48(r2)
 40290b8:	00000206 	br	40290c4 <alt_up_pixel_buffer_dma_draw_vline+0x9c>
	else
		addr = pixel_buffer->buffer_start_address;
 40290bc:	e0bff517 	ldw	r2,-44(fp)
 40290c0:	14000b17 	ldw	r16,44(r2)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 40290c4:	e0bff517 	ldw	r2,-44(fp)
 40290c8:	10800d17 	ldw	r2,52(r2)
 40290cc:	1000301e 	bne	r2,zero,4029190 <alt_up_pixel_buffer_dma_draw_vline+0x168>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 40290d0:	e0bff517 	ldw	r2,-44(fp)
 40290d4:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
 40290d8:	a544983a 	sll	r2,r20,r21
 40290dc:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 40290e0:	e0bff517 	ldw	r2,-44(fp)
 40290e4:	10800e17 	ldw	r2,56(r2)
 40290e8:	10800058 	cmpnei	r2,r2,1
 40290ec:	10000b1e 	bne	r2,zero,402911c <alt_up_pixel_buffer_dma_draw_vline+0xf4>
			for (y = t_y; y <= b_y; y++)
 40290f0:	a027883a 	mov	r19,r20
 40290f4:	00000706 	br	4029114 <alt_up_pixel_buffer_dma_draw_vline+0xec>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 40290f8:	8c05883a 	add	r2,r17,r16
 40290fc:	b007883a 	mov	r3,r22
 4029100:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 4029104:	00800044 	movi	r2,1
 4029108:	1544983a 	sll	r2,r2,r21
 402910c:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 4029110:	9cc00044 	addi	r19,r19,1
 4029114:	94fff82e 	bgeu	r18,r19,40290f8 <__alt_data_end+0xfc0290f8>
 4029118:	00005206 	br	4029264 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 402911c:	e0bff517 	ldw	r2,-44(fp)
 4029120:	10800e17 	ldw	r2,56(r2)
 4029124:	10800098 	cmpnei	r2,r2,2
 4029128:	10000c1e 	bne	r2,zero,402915c <alt_up_pixel_buffer_dma_draw_vline+0x134>
			for (y = t_y; y <= b_y; y++)
 402912c:	a027883a 	mov	r19,r20
 4029130:	00000806 	br	4029154 <alt_up_pixel_buffer_dma_draw_vline+0x12c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 4029134:	8c45883a 	add	r2,r17,r17
 4029138:	1405883a 	add	r2,r2,r16
 402913c:	b007883a 	mov	r3,r22
 4029140:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 4029144:	00800044 	movi	r2,1
 4029148:	1544983a 	sll	r2,r2,r21
 402914c:	80a1883a 	add	r16,r16,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 4029150:	9cc00044 	addi	r19,r19,1
 4029154:	94fff72e 	bgeu	r18,r19,4029134 <__alt_data_end+0xfc029134>
 4029158:	00004206 	br	4029264 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 402915c:	a027883a 	mov	r19,r20
 4029160:	00000906 	br	4029188 <alt_up_pixel_buffer_dma_draw_vline+0x160>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 4029164:	8c45883a 	add	r2,r17,r17
 4029168:	1085883a 	add	r2,r2,r2
 402916c:	1405883a 	add	r2,r2,r16
 4029170:	b007883a 	mov	r3,r22
 4029174:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 4029178:	00800044 	movi	r2,1
 402917c:	1544983a 	sll	r2,r2,r21
 4029180:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 4029184:	9cc00044 	addi	r19,r19,1
 4029188:	94fff62e 	bgeu	r18,r19,4029164 <__alt_data_end+0xfc029164>
 402918c:	00003506 	br	4029264 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4029190:	e0bff517 	ldw	r2,-44(fp)
 4029194:	10800e17 	ldw	r2,56(r2)
 4029198:	10800058 	cmpnei	r2,r2,1
 402919c:	10000c1e 	bne	r2,zero,40291d0 <alt_up_pixel_buffer_dma_draw_vline+0x1a8>
			addr = addr + t_y * limit_x;
 40291a0:	980b883a 	mov	r5,r19
 40291a4:	a009883a 	mov	r4,r20
 40291a8:	40191000 	call	4019100 <__mulsi3>
 40291ac:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 40291b0:	00000506 	br	40291c8 <alt_up_pixel_buffer_dma_draw_vline+0x1a0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 40291b4:	8c05883a 	add	r2,r17,r16
 40291b8:	b007883a 	mov	r3,r22
 40291bc:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 40291c0:	84e1883a 	add	r16,r16,r19
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 40291c4:	a5000044 	addi	r20,r20,1
 40291c8:	953ffa2e 	bgeu	r18,r20,40291b4 <__alt_data_end+0xfc0291b4>
 40291cc:	00002506 	br	4029264 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 40291d0:	e0bff517 	ldw	r2,-44(fp)
 40291d4:	10800e17 	ldw	r2,56(r2)
 40291d8:	10800098 	cmpnei	r2,r2,2
 40291dc:	10000f1e 	bne	r2,zero,402921c <alt_up_pixel_buffer_dma_draw_vline+0x1f4>
			limit_x = limit_x << 1;
 40291e0:	9cc5883a 	add	r2,r19,r19
 40291e4:	1027883a 	mov	r19,r2
			addr = addr + t_y * limit_x;
 40291e8:	980b883a 	mov	r5,r19
 40291ec:	a009883a 	mov	r4,r20
 40291f0:	40191000 	call	4019100 <__mulsi3>
 40291f4:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 40291f8:	00000606 	br	4029214 <alt_up_pixel_buffer_dma_draw_vline+0x1ec>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 40291fc:	8c45883a 	add	r2,r17,r17
 4029200:	1405883a 	add	r2,r2,r16
 4029204:	b007883a 	mov	r3,r22
 4029208:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 402920c:	84e1883a 	add	r16,r16,r19
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4029210:	a5000044 	addi	r20,r20,1
 4029214:	953ff92e 	bgeu	r18,r20,40291fc <__alt_data_end+0xfc0291fc>
 4029218:	00001206 	br	4029264 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 402921c:	9cc5883a 	add	r2,r19,r19
 4029220:	1085883a 	add	r2,r2,r2
 4029224:	1027883a 	mov	r19,r2
			addr = addr + t_y * limit_x;
 4029228:	980b883a 	mov	r5,r19
 402922c:	a009883a 	mov	r4,r20
 4029230:	40191000 	call	4019100 <__mulsi3>
 4029234:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 4029238:	00000706 	br	4029258 <alt_up_pixel_buffer_dma_draw_vline+0x230>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 402923c:	8c45883a 	add	r2,r17,r17
 4029240:	1085883a 	add	r2,r2,r2
 4029244:	1405883a 	add	r2,r2,r16
 4029248:	b007883a 	mov	r3,r22
 402924c:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 4029250:	84e1883a 	add	r16,r16,r19
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4029254:	a5000044 	addi	r20,r20,1
 4029258:	953ff82e 	bgeu	r18,r20,402923c <__alt_data_end+0xfc02923c>
 402925c:	00000106 	br	4029264 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 4029260:	0001883a 	nop
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 4029264:	e6fff904 	addi	sp,fp,-28
 4029268:	dfc00817 	ldw	ra,32(sp)
 402926c:	df000717 	ldw	fp,28(sp)
 4029270:	dd800617 	ldw	r22,24(sp)
 4029274:	dd400517 	ldw	r21,20(sp)
 4029278:	dd000417 	ldw	r20,16(sp)
 402927c:	dcc00317 	ldw	r19,12(sp)
 4029280:	dc800217 	ldw	r18,8(sp)
 4029284:	dc400117 	ldw	r17,4(sp)
 4029288:	dc000017 	ldw	r16,0(sp)
 402928c:	dec00904 	addi	sp,sp,36
 4029290:	f800283a 	ret

04029294 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 4029294:	defff804 	addi	sp,sp,-32
 4029298:	dfc00715 	stw	ra,28(sp)
 402929c:	df000615 	stw	fp,24(sp)
 40292a0:	df000604 	addi	fp,sp,24
 40292a4:	e13ffc15 	stw	r4,-16(fp)
 40292a8:	e17ffd15 	stw	r5,-12(fp)
 40292ac:	e1bffe15 	stw	r6,-8(fp)
 40292b0:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 40292b4:	e0800417 	ldw	r2,16(fp)
 40292b8:	d8800115 	stw	r2,4(sp)
 40292bc:	e0800317 	ldw	r2,12(fp)
 40292c0:	d8800015 	stw	r2,0(sp)
 40292c4:	e1fffe17 	ldw	r7,-8(fp)
 40292c8:	e1bfff17 	ldw	r6,-4(fp)
 40292cc:	e17ffd17 	ldw	r5,-12(fp)
 40292d0:	e13ffc17 	ldw	r4,-16(fp)
 40292d4:	4028df80 	call	4028df8 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 40292d8:	e0800417 	ldw	r2,16(fp)
 40292dc:	d8800115 	stw	r2,4(sp)
 40292e0:	e0800317 	ldw	r2,12(fp)
 40292e4:	d8800015 	stw	r2,0(sp)
 40292e8:	e1c00217 	ldw	r7,8(fp)
 40292ec:	e1bfff17 	ldw	r6,-4(fp)
 40292f0:	e17ffd17 	ldw	r5,-12(fp)
 40292f4:	e13ffc17 	ldw	r4,-16(fp)
 40292f8:	4028df80 	call	4028df8 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 40292fc:	e0800417 	ldw	r2,16(fp)
 4029300:	d8800115 	stw	r2,4(sp)
 4029304:	e0800317 	ldw	r2,12(fp)
 4029308:	d8800015 	stw	r2,0(sp)
 402930c:	e1c00217 	ldw	r7,8(fp)
 4029310:	e1bffe17 	ldw	r6,-8(fp)
 4029314:	e17ffd17 	ldw	r5,-12(fp)
 4029318:	e13ffc17 	ldw	r4,-16(fp)
 402931c:	40290280 	call	4029028 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 4029320:	e0800417 	ldw	r2,16(fp)
 4029324:	d8800115 	stw	r2,4(sp)
 4029328:	e0800317 	ldw	r2,12(fp)
 402932c:	d8800015 	stw	r2,0(sp)
 4029330:	e1c00217 	ldw	r7,8(fp)
 4029334:	e1bffe17 	ldw	r6,-8(fp)
 4029338:	e17fff17 	ldw	r5,-4(fp)
 402933c:	e13ffc17 	ldw	r4,-16(fp)
 4029340:	40290280 	call	4029028 <alt_up_pixel_buffer_dma_draw_vline>
}
 4029344:	0001883a 	nop
 4029348:	e037883a 	mov	sp,fp
 402934c:	dfc00117 	ldw	ra,4(sp)
 4029350:	df000017 	ldw	fp,0(sp)
 4029354:	dec00204 	addi	sp,sp,8
 4029358:	f800283a 	ret

0402935c <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 402935c:	defffb04 	addi	sp,sp,-20
 4029360:	dfc00415 	stw	ra,16(sp)
 4029364:	df000315 	stw	fp,12(sp)
 4029368:	dc800215 	stw	r18,8(sp)
 402936c:	dc400115 	stw	r17,4(sp)
 4029370:	dc000015 	stw	r16,0(sp)
 4029374:	df000304 	addi	fp,sp,12
 4029378:	2021883a 	mov	r16,r4
 402937c:	2807883a 	mov	r3,r5
 4029380:	3023883a 	mov	r17,r6
 4029384:	3809883a 	mov	r4,r7
 4029388:	e4800217 	ldw	r18,8(fp)
 402938c:	e0800317 	ldw	r2,12(fp)
	if (mode == 0)
 4029390:	1000071e 	bne	r2,zero,40293b0 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 4029394:	200b883a 	mov	r5,r4
 4029398:	1809883a 	mov	r4,r3
 402939c:	40191000 	call	4019100 <__mulsi3>
 40293a0:	1445883a 	add	r2,r2,r17
 40293a4:	1405883a 	add	r2,r2,r16
 40293a8:	14800025 	stbio	r18,0(r2)
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
 40293ac:	00001206 	br	40293f8 <helper_plot_pixel+0x9c>
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
 40293b0:	10800058 	cmpnei	r2,r2,1
 40293b4:	1000081e 	bne	r2,zero,40293d8 <helper_plot_pixel+0x7c>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 40293b8:	200b883a 	mov	r5,r4
 40293bc:	1809883a 	mov	r4,r3
 40293c0:	40191000 	call	4019100 <__mulsi3>
 40293c4:	1445883a 	add	r2,r2,r17
 40293c8:	1085883a 	add	r2,r2,r2
 40293cc:	1405883a 	add	r2,r2,r16
 40293d0:	1480002d 	sthio	r18,0(r2)
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
 40293d4:	00000806 	br	40293f8 <helper_plot_pixel+0x9c>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 40293d8:	200b883a 	mov	r5,r4
 40293dc:	1809883a 	mov	r4,r3
 40293e0:	40191000 	call	4019100 <__mulsi3>
 40293e4:	1445883a 	add	r2,r2,r17
 40293e8:	1085883a 	add	r2,r2,r2
 40293ec:	1085883a 	add	r2,r2,r2
 40293f0:	1405883a 	add	r2,r2,r16
 40293f4:	14800035 	stwio	r18,0(r2)
}
 40293f8:	0001883a 	nop
 40293fc:	e6fffd04 	addi	sp,fp,-12
 4029400:	dfc00417 	ldw	ra,16(sp)
 4029404:	df000317 	ldw	fp,12(sp)
 4029408:	dc800217 	ldw	r18,8(sp)
 402940c:	dc400117 	ldw	r17,4(sp)
 4029410:	dc000017 	ldw	r16,0(sp)
 4029414:	dec00504 	addi	sp,sp,20
 4029418:	f800283a 	ret

0402941c <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 402941c:	deffeb04 	addi	sp,sp,-84
 4029420:	dfc01415 	stw	ra,80(sp)
 4029424:	df001315 	stw	fp,76(sp)
 4029428:	ddc01215 	stw	r23,72(sp)
 402942c:	dd801115 	stw	r22,68(sp)
 4029430:	dd401015 	stw	r21,64(sp)
 4029434:	dd000f15 	stw	r20,60(sp)
 4029438:	dcc00e15 	stw	r19,56(sp)
 402943c:	dc800d15 	stw	r18,52(sp)
 4029440:	dc400c15 	stw	r17,48(sp)
 4029444:	dc000b15 	stw	r16,44(sp)
 4029448:	df001304 	addi	fp,sp,76
 402944c:	e13fef15 	stw	r4,-68(fp)
 4029450:	e17ff015 	stw	r5,-64(fp)
 4029454:	e1bff115 	stw	r6,-60(fp)
 4029458:	e1fff215 	stw	r7,-56(fp)
	register int x_0 = x0;
 402945c:	e47ff017 	ldw	r17,-64(fp)
	register int y_0 = y0;
 4029460:	e4fff117 	ldw	r19,-60(fp)
	register int x_1 = x1;
 4029464:	e4bff217 	ldw	r18,-56(fp)
	register int y_1 = y1;
 4029468:	e5000217 	ldw	r20,8(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 402946c:	a4c5c83a 	sub	r2,r20,r19
 4029470:	1000010e 	bge	r2,zero,4029478 <alt_up_pixel_buffer_dma_draw_line+0x5c>
 4029474:	0085c83a 	sub	r2,zero,r2
 4029478:	1007883a 	mov	r3,r2
 402947c:	9445c83a 	sub	r2,r18,r17
 4029480:	1000010e 	bge	r2,zero,4029488 <alt_up_pixel_buffer_dma_draw_line+0x6c>
 4029484:	0085c83a 	sub	r2,zero,r2
 4029488:	10c4803a 	cmplt	r2,r2,r3
 402948c:	e0bff305 	stb	r2,-52(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 4029490:	e0bfef17 	ldw	r2,-68(fp)
 4029494:	10800e17 	ldw	r2,56(r2)
 4029498:	10800060 	cmpeqi	r2,r2,1
 402949c:	1000081e 	bne	r2,zero,40294c0 <alt_up_pixel_buffer_dma_draw_line+0xa4>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 40294a0:	e0bfef17 	ldw	r2,-68(fp)
 40294a4:	10800e17 	ldw	r2,56(r2)
 40294a8:	10800098 	cmpnei	r2,r2,2
 40294ac:	1000021e 	bne	r2,zero,40294b8 <alt_up_pixel_buffer_dma_draw_line+0x9c>
 40294b0:	00800044 	movi	r2,1
 40294b4:	00000306 	br	40294c4 <alt_up_pixel_buffer_dma_draw_line+0xa8>
 40294b8:	00800084 	movi	r2,2
 40294bc:	00000106 	br	40294c4 <alt_up_pixel_buffer_dma_draw_line+0xa8>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 40294c0:	0005883a 	mov	r2,zero
 40294c4:	e0bff415 	stw	r2,-48(fp)
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
 40294c8:	e0800317 	ldw	r2,12(fp)
 40294cc:	e0bff515 	stw	r2,-44(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 40294d0:	e0bfef17 	ldw	r2,-68(fp)
 40294d4:	10800d17 	ldw	r2,52(r2)
 40294d8:	1000071e 	bne	r2,zero,40294f8 <alt_up_pixel_buffer_dma_draw_line+0xdc>
 40294dc:	e0bfef17 	ldw	r2,-68(fp)
 40294e0:	10801317 	ldw	r2,76(r2)
 40294e4:	e0fff417 	ldw	r3,-48(fp)
 40294e8:	10c5c83a 	sub	r2,r2,r3
 40294ec:	00c00044 	movi	r3,1
 40294f0:	1884983a 	sll	r2,r3,r2
 40294f4:	00000206 	br	4029500 <alt_up_pixel_buffer_dma_draw_line+0xe4>
 40294f8:	e0bfef17 	ldw	r2,-68(fp)
 40294fc:	10800f17 	ldw	r2,60(r2)
 4029500:	e0bff615 	stw	r2,-40(fp)

	if (backbuffer == 1)
 4029504:	e0800417 	ldw	r2,16(fp)
 4029508:	10800058 	cmpnei	r2,r2,1
 402950c:	1000031e 	bne	r2,zero,402951c <alt_up_pixel_buffer_dma_draw_line+0x100>
		buffer_start = pixel_buffer->back_buffer_start_address;
 4029510:	e0bfef17 	ldw	r2,-68(fp)
 4029514:	15c00c17 	ldw	r23,48(r2)
 4029518:	00000206 	br	4029524 <alt_up_pixel_buffer_dma_draw_line+0x108>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 402951c:	e0bfef17 	ldw	r2,-68(fp)
 4029520:	15c00b17 	ldw	r23,44(r2)

	/* Preprocessing inputs */
	if (steep > 0) {
 4029524:	e0bff307 	ldb	r2,-52(fp)
 4029528:	0080060e 	bge	zero,r2,4029544 <alt_up_pixel_buffer_dma_draw_line+0x128>
		// Swap x_0 and y_0
		error = x_0;
 402952c:	8821883a 	mov	r16,r17
		x_0 = y_0;
 4029530:	9823883a 	mov	r17,r19
		y_0 = error;
 4029534:	8027883a 	mov	r19,r16
		// Swap x_1 and y_1
		error = x_1;
 4029538:	9021883a 	mov	r16,r18
		x_1 = y_1;
 402953c:	a025883a 	mov	r18,r20
		y_1 = error;
 4029540:	8029883a 	mov	r20,r16
	}
	if (x_0 > x_1) {
 4029544:	9440060e 	bge	r18,r17,4029560 <alt_up_pixel_buffer_dma_draw_line+0x144>
		// Swap x_0 and x_1
		error = x_0;
 4029548:	8821883a 	mov	r16,r17
		x_0 = x_1;
 402954c:	9023883a 	mov	r17,r18
		x_1 = error;
 4029550:	8025883a 	mov	r18,r16
		// Swap y_0 and y_1
		error = y_0;
 4029554:	9821883a 	mov	r16,r19
		y_0 = y_1;
 4029558:	a027883a 	mov	r19,r20
		y_1 = error;
 402955c:	8029883a 	mov	r20,r16
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 4029560:	946bc83a 	sub	r21,r18,r17
	deltay = ABS(y_1 - y_0);
 4029564:	a4c5c83a 	sub	r2,r20,r19
 4029568:	1000010e 	bge	r2,zero,4029570 <alt_up_pixel_buffer_dma_draw_line+0x154>
 402956c:	0085c83a 	sub	r2,zero,r2
 4029570:	e0bff715 	stw	r2,-36(fp)
	error = -(deltax / 2); 
 4029574:	a804d7fa 	srli	r2,r21,31
 4029578:	1545883a 	add	r2,r2,r21
 402957c:	1005d07a 	srai	r2,r2,1
 4029580:	00a1c83a 	sub	r16,zero,r2
	y = y_0;
 4029584:	982d883a 	mov	r22,r19
	if (y_0 < y_1)
 4029588:	9d00020e 	bge	r19,r20,4029594 <alt_up_pixel_buffer_dma_draw_line+0x178>
		ystep = 1;
 402958c:	04c00044 	movi	r19,1
 4029590:	00000106 	br	4029598 <alt_up_pixel_buffer_dma_draw_line+0x17c>
	else
		ystep = -1;
 4029594:	04ffffc4 	movi	r19,-1

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 4029598:	e0bff307 	ldb	r2,-52(fp)
 402959c:	10800058 	cmpnei	r2,r2,1
 40295a0:	1000211e 	bne	r2,zero,4029628 <alt_up_pixel_buffer_dma_draw_line+0x20c>
	{
		for (x=x_0; x <= x_1; x++) {
 40295a4:	00000f06 	br	40295e4 <alt_up_pixel_buffer_dma_draw_line+0x1c8>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 40295a8:	e0bff417 	ldw	r2,-48(fp)
 40295ac:	d8800115 	stw	r2,4(sp)
 40295b0:	e0bff517 	ldw	r2,-44(fp)
 40295b4:	d8800015 	stw	r2,0(sp)
 40295b8:	880f883a 	mov	r7,r17
 40295bc:	b00d883a 	mov	r6,r22
 40295c0:	e17ff617 	ldw	r5,-40(fp)
 40295c4:	b809883a 	mov	r4,r23
 40295c8:	402935c0 	call	402935c <helper_plot_pixel>
			error = error + deltay;
 40295cc:	e0bff717 	ldw	r2,-36(fp)
 40295d0:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 40295d4:	0400020e 	bge	zero,r16,40295e0 <alt_up_pixel_buffer_dma_draw_line+0x1c4>
				y = y + ystep;
 40295d8:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
 40295dc:	8561c83a 	sub	r16,r16,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 40295e0:	8c400044 	addi	r17,r17,1
 40295e4:	947ff00e 	bge	r18,r17,40295a8 <__alt_data_end+0xfc0295a8>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 40295e8:	00001006 	br	402962c <alt_up_pixel_buffer_dma_draw_line+0x210>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 40295ec:	e0bff417 	ldw	r2,-48(fp)
 40295f0:	d8800115 	stw	r2,4(sp)
 40295f4:	e0bff517 	ldw	r2,-44(fp)
 40295f8:	d8800015 	stw	r2,0(sp)
 40295fc:	b00f883a 	mov	r7,r22
 4029600:	880d883a 	mov	r6,r17
 4029604:	e17ff617 	ldw	r5,-40(fp)
 4029608:	b809883a 	mov	r4,r23
 402960c:	402935c0 	call	402935c <helper_plot_pixel>
			error = error + deltay;
 4029610:	e0bff717 	ldw	r2,-36(fp)
 4029614:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 4029618:	0400020e 	bge	zero,r16,4029624 <alt_up_pixel_buffer_dma_draw_line+0x208>
				y = y + ystep;
 402961c:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
 4029620:	8561c83a 	sub	r16,r16,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 4029624:	8c400044 	addi	r17,r17,1
 4029628:	947ff00e 	bge	r18,r17,40295ec <__alt_data_end+0xfc0295ec>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 402962c:	0001883a 	nop
 4029630:	e6fff804 	addi	sp,fp,-32
 4029634:	dfc00917 	ldw	ra,36(sp)
 4029638:	df000817 	ldw	fp,32(sp)
 402963c:	ddc00717 	ldw	r23,28(sp)
 4029640:	dd800617 	ldw	r22,24(sp)
 4029644:	dd400517 	ldw	r21,20(sp)
 4029648:	dd000417 	ldw	r20,16(sp)
 402964c:	dcc00317 	ldw	r19,12(sp)
 4029650:	dc800217 	ldw	r18,8(sp)
 4029654:	dc400117 	ldw	r17,4(sp)
 4029658:	dc000017 	ldw	r16,0(sp)
 402965c:	dec00a04 	addi	sp,sp,40
 4029660:	f800283a 	ret

04029664 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4029664:	defff504 	addi	sp,sp,-44
 4029668:	df000a15 	stw	fp,40(sp)
 402966c:	df000a04 	addi	fp,sp,40
 4029670:	e13ffc15 	stw	r4,-16(fp)
 4029674:	e17ffd15 	stw	r5,-12(fp)
 4029678:	e1bffe15 	stw	r6,-8(fp)
 402967c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4029680:	e03ff615 	stw	zero,-40(fp)
 4029684:	d09ea517 	ldw	r2,31380(gp)
  
  if (alt_ticks_per_second ())
 4029688:	10003c26 	beq	r2,zero,402977c <alt_alarm_start+0x118>
  {
    if (alarm)
 402968c:	e0bffc17 	ldw	r2,-16(fp)
 4029690:	10003826 	beq	r2,zero,4029774 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 4029694:	e0bffc17 	ldw	r2,-16(fp)
 4029698:	e0fffe17 	ldw	r3,-8(fp)
 402969c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 40296a0:	e0bffc17 	ldw	r2,-16(fp)
 40296a4:	e0ffff17 	ldw	r3,-4(fp)
 40296a8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40296ac:	0005303a 	rdctl	r2,status
 40296b0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40296b4:	e0fff917 	ldw	r3,-28(fp)
 40296b8:	00bfff84 	movi	r2,-2
 40296bc:	1884703a 	and	r2,r3,r2
 40296c0:	1001703a 	wrctl	status,r2
  
  return context;
 40296c4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 40296c8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 40296cc:	d09ea617 	ldw	r2,31384(gp)
      
      current_nticks = alt_nticks();
 40296d0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 40296d4:	e0fffd17 	ldw	r3,-12(fp)
 40296d8:	e0bff617 	ldw	r2,-40(fp)
 40296dc:	1885883a 	add	r2,r3,r2
 40296e0:	10c00044 	addi	r3,r2,1
 40296e4:	e0bffc17 	ldw	r2,-16(fp)
 40296e8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 40296ec:	e0bffc17 	ldw	r2,-16(fp)
 40296f0:	10c00217 	ldw	r3,8(r2)
 40296f4:	e0bff617 	ldw	r2,-40(fp)
 40296f8:	1880042e 	bgeu	r3,r2,402970c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 40296fc:	e0bffc17 	ldw	r2,-16(fp)
 4029700:	00c00044 	movi	r3,1
 4029704:	10c00405 	stb	r3,16(r2)
 4029708:	00000206 	br	4029714 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 402970c:	e0bffc17 	ldw	r2,-16(fp)
 4029710:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4029714:	e0bffc17 	ldw	r2,-16(fp)
 4029718:	d0e02004 	addi	r3,gp,-32640
 402971c:	e0fffa15 	stw	r3,-24(fp)
 4029720:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4029724:	e0bffb17 	ldw	r2,-20(fp)
 4029728:	e0fffa17 	ldw	r3,-24(fp)
 402972c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4029730:	e0bffa17 	ldw	r2,-24(fp)
 4029734:	10c00017 	ldw	r3,0(r2)
 4029738:	e0bffb17 	ldw	r2,-20(fp)
 402973c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4029740:	e0bffa17 	ldw	r2,-24(fp)
 4029744:	10800017 	ldw	r2,0(r2)
 4029748:	e0fffb17 	ldw	r3,-20(fp)
 402974c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4029750:	e0bffa17 	ldw	r2,-24(fp)
 4029754:	e0fffb17 	ldw	r3,-20(fp)
 4029758:	10c00015 	stw	r3,0(r2)
 402975c:	e0bff817 	ldw	r2,-32(fp)
 4029760:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4029764:	e0bff717 	ldw	r2,-36(fp)
 4029768:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 402976c:	0005883a 	mov	r2,zero
 4029770:	00000306 	br	4029780 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 4029774:	00bffa84 	movi	r2,-22
 4029778:	00000106 	br	4029780 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 402977c:	00bfde84 	movi	r2,-134
  }
}
 4029780:	e037883a 	mov	sp,fp
 4029784:	df000017 	ldw	fp,0(sp)
 4029788:	dec00104 	addi	sp,sp,4
 402978c:	f800283a 	ret

04029790 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4029790:	deffff04 	addi	sp,sp,-4
 4029794:	df000015 	stw	fp,0(sp)
 4029798:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 402979c:	0001883a 	nop
 40297a0:	e037883a 	mov	sp,fp
 40297a4:	df000017 	ldw	fp,0(sp)
 40297a8:	dec00104 	addi	sp,sp,4
 40297ac:	f800283a 	ret

040297b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40297b0:	defffe04 	addi	sp,sp,-8
 40297b4:	dfc00115 	stw	ra,4(sp)
 40297b8:	df000015 	stw	fp,0(sp)
 40297bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40297c0:	d0a00b17 	ldw	r2,-32724(gp)
 40297c4:	10000326 	beq	r2,zero,40297d4 <alt_get_errno+0x24>
 40297c8:	d0a00b17 	ldw	r2,-32724(gp)
 40297cc:	103ee83a 	callr	r2
 40297d0:	00000106 	br	40297d8 <alt_get_errno+0x28>
 40297d4:	d09ea004 	addi	r2,gp,31360
}
 40297d8:	e037883a 	mov	sp,fp
 40297dc:	dfc00117 	ldw	ra,4(sp)
 40297e0:	df000017 	ldw	fp,0(sp)
 40297e4:	dec00204 	addi	sp,sp,8
 40297e8:	f800283a 	ret

040297ec <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 40297ec:	defffa04 	addi	sp,sp,-24
 40297f0:	dfc00515 	stw	ra,20(sp)
 40297f4:	df000415 	stw	fp,16(sp)
 40297f8:	df000404 	addi	fp,sp,16
 40297fc:	e13ffe15 	stw	r4,-8(fp)
 4029800:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4029804:	e0bffe17 	ldw	r2,-8(fp)
 4029808:	10000326 	beq	r2,zero,4029818 <alt_dev_llist_insert+0x2c>
 402980c:	e0bffe17 	ldw	r2,-8(fp)
 4029810:	10800217 	ldw	r2,8(r2)
 4029814:	1000061e 	bne	r2,zero,4029830 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4029818:	40297b00 	call	40297b0 <alt_get_errno>
 402981c:	1007883a 	mov	r3,r2
 4029820:	00800584 	movi	r2,22
 4029824:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4029828:	00bffa84 	movi	r2,-22
 402982c:	00001306 	br	402987c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4029830:	e0bffe17 	ldw	r2,-8(fp)
 4029834:	e0ffff17 	ldw	r3,-4(fp)
 4029838:	e0fffc15 	stw	r3,-16(fp)
 402983c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4029840:	e0bffd17 	ldw	r2,-12(fp)
 4029844:	e0fffc17 	ldw	r3,-16(fp)
 4029848:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 402984c:	e0bffc17 	ldw	r2,-16(fp)
 4029850:	10c00017 	ldw	r3,0(r2)
 4029854:	e0bffd17 	ldw	r2,-12(fp)
 4029858:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 402985c:	e0bffc17 	ldw	r2,-16(fp)
 4029860:	10800017 	ldw	r2,0(r2)
 4029864:	e0fffd17 	ldw	r3,-12(fp)
 4029868:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 402986c:	e0bffc17 	ldw	r2,-16(fp)
 4029870:	e0fffd17 	ldw	r3,-12(fp)
 4029874:	10c00015 	stw	r3,0(r2)

  return 0;  
 4029878:	0005883a 	mov	r2,zero
}
 402987c:	e037883a 	mov	sp,fp
 4029880:	dfc00117 	ldw	ra,4(sp)
 4029884:	df000017 	ldw	fp,0(sp)
 4029888:	dec00204 	addi	sp,sp,8
 402988c:	f800283a 	ret

04029890 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4029890:	defffd04 	addi	sp,sp,-12
 4029894:	dfc00215 	stw	ra,8(sp)
 4029898:	df000115 	stw	fp,4(sp)
 402989c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 40298a0:	008100f4 	movhi	r2,1027
 40298a4:	10aa6504 	addi	r2,r2,-22124
 40298a8:	e0bfff15 	stw	r2,-4(fp)
 40298ac:	00000606 	br	40298c8 <_do_ctors+0x38>
        (*ctor) (); 
 40298b0:	e0bfff17 	ldw	r2,-4(fp)
 40298b4:	10800017 	ldw	r2,0(r2)
 40298b8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 40298bc:	e0bfff17 	ldw	r2,-4(fp)
 40298c0:	10bfff04 	addi	r2,r2,-4
 40298c4:	e0bfff15 	stw	r2,-4(fp)
 40298c8:	e0ffff17 	ldw	r3,-4(fp)
 40298cc:	008100f4 	movhi	r2,1027
 40298d0:	10aa6604 	addi	r2,r2,-22120
 40298d4:	18bff62e 	bgeu	r3,r2,40298b0 <__alt_data_end+0xfc0298b0>
        (*ctor) (); 
}
 40298d8:	0001883a 	nop
 40298dc:	e037883a 	mov	sp,fp
 40298e0:	dfc00117 	ldw	ra,4(sp)
 40298e4:	df000017 	ldw	fp,0(sp)
 40298e8:	dec00204 	addi	sp,sp,8
 40298ec:	f800283a 	ret

040298f0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 40298f0:	defffd04 	addi	sp,sp,-12
 40298f4:	dfc00215 	stw	ra,8(sp)
 40298f8:	df000115 	stw	fp,4(sp)
 40298fc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4029900:	008100f4 	movhi	r2,1027
 4029904:	10aa6504 	addi	r2,r2,-22124
 4029908:	e0bfff15 	stw	r2,-4(fp)
 402990c:	00000606 	br	4029928 <_do_dtors+0x38>
        (*dtor) (); 
 4029910:	e0bfff17 	ldw	r2,-4(fp)
 4029914:	10800017 	ldw	r2,0(r2)
 4029918:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 402991c:	e0bfff17 	ldw	r2,-4(fp)
 4029920:	10bfff04 	addi	r2,r2,-4
 4029924:	e0bfff15 	stw	r2,-4(fp)
 4029928:	e0ffff17 	ldw	r3,-4(fp)
 402992c:	008100f4 	movhi	r2,1027
 4029930:	10aa6604 	addi	r2,r2,-22120
 4029934:	18bff62e 	bgeu	r3,r2,4029910 <__alt_data_end+0xfc029910>
        (*dtor) (); 
}
 4029938:	0001883a 	nop
 402993c:	e037883a 	mov	sp,fp
 4029940:	dfc00117 	ldw	ra,4(sp)
 4029944:	df000017 	ldw	fp,0(sp)
 4029948:	dec00204 	addi	sp,sp,8
 402994c:	f800283a 	ret

04029950 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4029950:	defffa04 	addi	sp,sp,-24
 4029954:	dfc00515 	stw	ra,20(sp)
 4029958:	df000415 	stw	fp,16(sp)
 402995c:	df000404 	addi	fp,sp,16
 4029960:	e13ffe15 	stw	r4,-8(fp)
 4029964:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4029968:	e0bfff17 	ldw	r2,-4(fp)
 402996c:	10800017 	ldw	r2,0(r2)
 4029970:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4029974:	e13ffe17 	ldw	r4,-8(fp)
 4029978:	40195540 	call	4019554 <strlen>
 402997c:	10800044 	addi	r2,r2,1
 4029980:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4029984:	00000d06 	br	40299bc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4029988:	e0bffc17 	ldw	r2,-16(fp)
 402998c:	10800217 	ldw	r2,8(r2)
 4029990:	e0fffd17 	ldw	r3,-12(fp)
 4029994:	180d883a 	mov	r6,r3
 4029998:	e17ffe17 	ldw	r5,-8(fp)
 402999c:	1009883a 	mov	r4,r2
 40299a0:	402a5800 	call	402a580 <memcmp>
 40299a4:	1000021e 	bne	r2,zero,40299b0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 40299a8:	e0bffc17 	ldw	r2,-16(fp)
 40299ac:	00000706 	br	40299cc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 40299b0:	e0bffc17 	ldw	r2,-16(fp)
 40299b4:	10800017 	ldw	r2,0(r2)
 40299b8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40299bc:	e0fffc17 	ldw	r3,-16(fp)
 40299c0:	e0bfff17 	ldw	r2,-4(fp)
 40299c4:	18bff01e 	bne	r3,r2,4029988 <__alt_data_end+0xfc029988>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 40299c8:	0005883a 	mov	r2,zero
}
 40299cc:	e037883a 	mov	sp,fp
 40299d0:	dfc00117 	ldw	ra,4(sp)
 40299d4:	df000017 	ldw	fp,0(sp)
 40299d8:	dec00204 	addi	sp,sp,8
 40299dc:	f800283a 	ret

040299e0 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
 40299e0:	defffc04 	addi	sp,sp,-16
 40299e4:	df000315 	stw	fp,12(sp)
 40299e8:	df000304 	addi	fp,sp,12
 40299ec:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
 40299f0:	e0bfff17 	ldw	r2,-4(fp)
 40299f4:	10800217 	ldw	r2,8(r2)
 40299f8:	1000021e 	bne	r2,zero,4029a04 <alt_fs_reg+0x24>
  {
    return -ENODEV;
 40299fc:	00bffb44 	movi	r2,-19
 4029a00:	00001306 	br	4029a50 <alt_fs_reg+0x70>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
 4029a04:	e0bfff17 	ldw	r2,-4(fp)
 4029a08:	d0e00604 	addi	r3,gp,-32744
 4029a0c:	e0fffd15 	stw	r3,-12(fp)
 4029a10:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4029a14:	e0bffe17 	ldw	r2,-8(fp)
 4029a18:	e0fffd17 	ldw	r3,-12(fp)
 4029a1c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4029a20:	e0bffd17 	ldw	r2,-12(fp)
 4029a24:	10c00017 	ldw	r3,0(r2)
 4029a28:	e0bffe17 	ldw	r2,-8(fp)
 4029a2c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4029a30:	e0bffd17 	ldw	r2,-12(fp)
 4029a34:	10800017 	ldw	r2,0(r2)
 4029a38:	e0fffe17 	ldw	r3,-8(fp)
 4029a3c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4029a40:	e0bffd17 	ldw	r2,-12(fp)
 4029a44:	e0fffe17 	ldw	r3,-8(fp)
 4029a48:	10c00015 	stw	r3,0(r2)

  return 0;
 4029a4c:	0005883a 	mov	r2,zero
} 
 4029a50:	e037883a 	mov	sp,fp
 4029a54:	df000017 	ldw	fp,0(sp)
 4029a58:	dec00104 	addi	sp,sp,4
 4029a5c:	f800283a 	ret

04029a60 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4029a60:	deffff04 	addi	sp,sp,-4
 4029a64:	df000015 	stw	fp,0(sp)
 4029a68:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 4029a6c:	0001883a 	nop
 4029a70:	e037883a 	mov	sp,fp
 4029a74:	df000017 	ldw	fp,0(sp)
 4029a78:	dec00104 	addi	sp,sp,4
 4029a7c:	f800283a 	ret

04029a80 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4029a80:	defff904 	addi	sp,sp,-28
 4029a84:	dfc00615 	stw	ra,24(sp)
 4029a88:	df000515 	stw	fp,20(sp)
 4029a8c:	df000504 	addi	fp,sp,20
 4029a90:	e13ffc15 	stw	r4,-16(fp)
 4029a94:	e17ffd15 	stw	r5,-12(fp)
 4029a98:	e1bffe15 	stw	r6,-8(fp)
 4029a9c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4029aa0:	e0800217 	ldw	r2,8(fp)
 4029aa4:	d8800015 	stw	r2,0(sp)
 4029aa8:	e1ffff17 	ldw	r7,-4(fp)
 4029aac:	e1bffe17 	ldw	r6,-8(fp)
 4029ab0:	e17ffd17 	ldw	r5,-12(fp)
 4029ab4:	e13ffc17 	ldw	r4,-16(fp)
 4029ab8:	4029c300 	call	4029c30 <alt_iic_isr_register>
}  
 4029abc:	e037883a 	mov	sp,fp
 4029ac0:	dfc00117 	ldw	ra,4(sp)
 4029ac4:	df000017 	ldw	fp,0(sp)
 4029ac8:	dec00204 	addi	sp,sp,8
 4029acc:	f800283a 	ret

04029ad0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4029ad0:	defff904 	addi	sp,sp,-28
 4029ad4:	df000615 	stw	fp,24(sp)
 4029ad8:	df000604 	addi	fp,sp,24
 4029adc:	e13ffe15 	stw	r4,-8(fp)
 4029ae0:	e17fff15 	stw	r5,-4(fp)
 4029ae4:	e0bfff17 	ldw	r2,-4(fp)
 4029ae8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4029aec:	0005303a 	rdctl	r2,status
 4029af0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4029af4:	e0fffb17 	ldw	r3,-20(fp)
 4029af8:	00bfff84 	movi	r2,-2
 4029afc:	1884703a 	and	r2,r3,r2
 4029b00:	1001703a 	wrctl	status,r2
  
  return context;
 4029b04:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4029b08:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4029b0c:	00c00044 	movi	r3,1
 4029b10:	e0bffa17 	ldw	r2,-24(fp)
 4029b14:	1884983a 	sll	r2,r3,r2
 4029b18:	1007883a 	mov	r3,r2
 4029b1c:	d09ea417 	ldw	r2,31376(gp)
 4029b20:	1884b03a 	or	r2,r3,r2
 4029b24:	d09ea415 	stw	r2,31376(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4029b28:	d09ea417 	ldw	r2,31376(gp)
 4029b2c:	100170fa 	wrctl	ienable,r2
 4029b30:	e0bffc17 	ldw	r2,-16(fp)
 4029b34:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4029b38:	e0bffd17 	ldw	r2,-12(fp)
 4029b3c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4029b40:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 4029b44:	0001883a 	nop
}
 4029b48:	e037883a 	mov	sp,fp
 4029b4c:	df000017 	ldw	fp,0(sp)
 4029b50:	dec00104 	addi	sp,sp,4
 4029b54:	f800283a 	ret

04029b58 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4029b58:	defff904 	addi	sp,sp,-28
 4029b5c:	df000615 	stw	fp,24(sp)
 4029b60:	df000604 	addi	fp,sp,24
 4029b64:	e13ffe15 	stw	r4,-8(fp)
 4029b68:	e17fff15 	stw	r5,-4(fp)
 4029b6c:	e0bfff17 	ldw	r2,-4(fp)
 4029b70:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4029b74:	0005303a 	rdctl	r2,status
 4029b78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4029b7c:	e0fffb17 	ldw	r3,-20(fp)
 4029b80:	00bfff84 	movi	r2,-2
 4029b84:	1884703a 	and	r2,r3,r2
 4029b88:	1001703a 	wrctl	status,r2
  
  return context;
 4029b8c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4029b90:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 4029b94:	00c00044 	movi	r3,1
 4029b98:	e0bffa17 	ldw	r2,-24(fp)
 4029b9c:	1884983a 	sll	r2,r3,r2
 4029ba0:	0084303a 	nor	r2,zero,r2
 4029ba4:	1007883a 	mov	r3,r2
 4029ba8:	d09ea417 	ldw	r2,31376(gp)
 4029bac:	1884703a 	and	r2,r3,r2
 4029bb0:	d09ea415 	stw	r2,31376(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4029bb4:	d09ea417 	ldw	r2,31376(gp)
 4029bb8:	100170fa 	wrctl	ienable,r2
 4029bbc:	e0bffc17 	ldw	r2,-16(fp)
 4029bc0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4029bc4:	e0bffd17 	ldw	r2,-12(fp)
 4029bc8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4029bcc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 4029bd0:	0001883a 	nop
}
 4029bd4:	e037883a 	mov	sp,fp
 4029bd8:	df000017 	ldw	fp,0(sp)
 4029bdc:	dec00104 	addi	sp,sp,4
 4029be0:	f800283a 	ret

04029be4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4029be4:	defffc04 	addi	sp,sp,-16
 4029be8:	df000315 	stw	fp,12(sp)
 4029bec:	df000304 	addi	fp,sp,12
 4029bf0:	e13ffe15 	stw	r4,-8(fp)
 4029bf4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4029bf8:	000530fa 	rdctl	r2,ienable
 4029bfc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4029c00:	00c00044 	movi	r3,1
 4029c04:	e0bfff17 	ldw	r2,-4(fp)
 4029c08:	1884983a 	sll	r2,r3,r2
 4029c0c:	1007883a 	mov	r3,r2
 4029c10:	e0bffd17 	ldw	r2,-12(fp)
 4029c14:	1884703a 	and	r2,r3,r2
 4029c18:	1004c03a 	cmpne	r2,r2,zero
 4029c1c:	10803fcc 	andi	r2,r2,255
}
 4029c20:	e037883a 	mov	sp,fp
 4029c24:	df000017 	ldw	fp,0(sp)
 4029c28:	dec00104 	addi	sp,sp,4
 4029c2c:	f800283a 	ret

04029c30 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4029c30:	defff504 	addi	sp,sp,-44
 4029c34:	dfc00a15 	stw	ra,40(sp)
 4029c38:	df000915 	stw	fp,36(sp)
 4029c3c:	df000904 	addi	fp,sp,36
 4029c40:	e13ffc15 	stw	r4,-16(fp)
 4029c44:	e17ffd15 	stw	r5,-12(fp)
 4029c48:	e1bffe15 	stw	r6,-8(fp)
 4029c4c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 4029c50:	00bffa84 	movi	r2,-22
 4029c54:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4029c58:	e0bffd17 	ldw	r2,-12(fp)
 4029c5c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4029c60:	e0bff817 	ldw	r2,-32(fp)
 4029c64:	10800808 	cmpgei	r2,r2,32
 4029c68:	1000271e 	bne	r2,zero,4029d08 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4029c6c:	0005303a 	rdctl	r2,status
 4029c70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4029c74:	e0fffb17 	ldw	r3,-20(fp)
 4029c78:	00bfff84 	movi	r2,-2
 4029c7c:	1884703a 	and	r2,r3,r2
 4029c80:	1001703a 	wrctl	status,r2
  
  return context;
 4029c84:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4029c88:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 4029c8c:	00810174 	movhi	r2,1029
 4029c90:	10ae3204 	addi	r2,r2,-18232
 4029c94:	e0fff817 	ldw	r3,-32(fp)
 4029c98:	180690fa 	slli	r3,r3,3
 4029c9c:	10c5883a 	add	r2,r2,r3
 4029ca0:	e0fffe17 	ldw	r3,-8(fp)
 4029ca4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 4029ca8:	00810174 	movhi	r2,1029
 4029cac:	10ae3204 	addi	r2,r2,-18232
 4029cb0:	e0fff817 	ldw	r3,-32(fp)
 4029cb4:	180690fa 	slli	r3,r3,3
 4029cb8:	10c5883a 	add	r2,r2,r3
 4029cbc:	10800104 	addi	r2,r2,4
 4029cc0:	e0ffff17 	ldw	r3,-4(fp)
 4029cc4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4029cc8:	e0bffe17 	ldw	r2,-8(fp)
 4029ccc:	10000526 	beq	r2,zero,4029ce4 <alt_iic_isr_register+0xb4>
 4029cd0:	e0bff817 	ldw	r2,-32(fp)
 4029cd4:	100b883a 	mov	r5,r2
 4029cd8:	e13ffc17 	ldw	r4,-16(fp)
 4029cdc:	4029ad00 	call	4029ad0 <alt_ic_irq_enable>
 4029ce0:	00000406 	br	4029cf4 <alt_iic_isr_register+0xc4>
 4029ce4:	e0bff817 	ldw	r2,-32(fp)
 4029ce8:	100b883a 	mov	r5,r2
 4029cec:	e13ffc17 	ldw	r4,-16(fp)
 4029cf0:	4029b580 	call	4029b58 <alt_ic_irq_disable>
 4029cf4:	e0bff715 	stw	r2,-36(fp)
 4029cf8:	e0bffa17 	ldw	r2,-24(fp)
 4029cfc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4029d00:	e0bff917 	ldw	r2,-28(fp)
 4029d04:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4029d08:	e0bff717 	ldw	r2,-36(fp)
}
 4029d0c:	e037883a 	mov	sp,fp
 4029d10:	dfc00117 	ldw	ra,4(sp)
 4029d14:	df000017 	ldw	fp,0(sp)
 4029d18:	dec00204 	addi	sp,sp,8
 4029d1c:	f800283a 	ret

04029d20 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4029d20:	defff804 	addi	sp,sp,-32
 4029d24:	dfc00715 	stw	ra,28(sp)
 4029d28:	df000615 	stw	fp,24(sp)
 4029d2c:	dc000515 	stw	r16,20(sp)
 4029d30:	df000604 	addi	fp,sp,24
 4029d34:	e13ffb15 	stw	r4,-20(fp)
 4029d38:	e17ffc15 	stw	r5,-16(fp)
 4029d3c:	e1bffd15 	stw	r6,-12(fp)
 4029d40:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 4029d44:	e1bffe17 	ldw	r6,-8(fp)
 4029d48:	e17ffd17 	ldw	r5,-12(fp)
 4029d4c:	e13ffc17 	ldw	r4,-16(fp)
 4029d50:	4029fa80 	call	4029fa8 <open>
 4029d54:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 4029d58:	e0bffa17 	ldw	r2,-24(fp)
 4029d5c:	10002216 	blt	r2,zero,4029de8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 4029d60:	04010134 	movhi	r16,1028
 4029d64:	842add04 	addi	r16,r16,-21644
 4029d68:	e0bffa17 	ldw	r2,-24(fp)
 4029d6c:	01400304 	movi	r5,12
 4029d70:	1009883a 	mov	r4,r2
 4029d74:	40191000 	call	4019100 <__mulsi3>
 4029d78:	8085883a 	add	r2,r16,r2
 4029d7c:	10c00017 	ldw	r3,0(r2)
 4029d80:	e0bffb17 	ldw	r2,-20(fp)
 4029d84:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4029d88:	04010134 	movhi	r16,1028
 4029d8c:	842add04 	addi	r16,r16,-21644
 4029d90:	e0bffa17 	ldw	r2,-24(fp)
 4029d94:	01400304 	movi	r5,12
 4029d98:	1009883a 	mov	r4,r2
 4029d9c:	40191000 	call	4019100 <__mulsi3>
 4029da0:	8085883a 	add	r2,r16,r2
 4029da4:	10800104 	addi	r2,r2,4
 4029da8:	10c00017 	ldw	r3,0(r2)
 4029dac:	e0bffb17 	ldw	r2,-20(fp)
 4029db0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4029db4:	04010134 	movhi	r16,1028
 4029db8:	842add04 	addi	r16,r16,-21644
 4029dbc:	e0bffa17 	ldw	r2,-24(fp)
 4029dc0:	01400304 	movi	r5,12
 4029dc4:	1009883a 	mov	r4,r2
 4029dc8:	40191000 	call	4019100 <__mulsi3>
 4029dcc:	8085883a 	add	r2,r16,r2
 4029dd0:	10800204 	addi	r2,r2,8
 4029dd4:	10c00017 	ldw	r3,0(r2)
 4029dd8:	e0bffb17 	ldw	r2,-20(fp)
 4029ddc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4029de0:	e13ffa17 	ldw	r4,-24(fp)
 4029de4:	40267380 	call	4026738 <alt_release_fd>
  }
} 
 4029de8:	0001883a 	nop
 4029dec:	e6ffff04 	addi	sp,fp,-4
 4029df0:	dfc00217 	ldw	ra,8(sp)
 4029df4:	df000117 	ldw	fp,4(sp)
 4029df8:	dc000017 	ldw	r16,0(sp)
 4029dfc:	dec00304 	addi	sp,sp,12
 4029e00:	f800283a 	ret

04029e04 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4029e04:	defffb04 	addi	sp,sp,-20
 4029e08:	dfc00415 	stw	ra,16(sp)
 4029e0c:	df000315 	stw	fp,12(sp)
 4029e10:	df000304 	addi	fp,sp,12
 4029e14:	e13ffd15 	stw	r4,-12(fp)
 4029e18:	e17ffe15 	stw	r5,-8(fp)
 4029e1c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4029e20:	01c07fc4 	movi	r7,511
 4029e24:	01800044 	movi	r6,1
 4029e28:	e17ffd17 	ldw	r5,-12(fp)
 4029e2c:	01010134 	movhi	r4,1028
 4029e30:	212ae004 	addi	r4,r4,-21632
 4029e34:	4029d200 	call	4029d20 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4029e38:	01c07fc4 	movi	r7,511
 4029e3c:	000d883a 	mov	r6,zero
 4029e40:	e17ffe17 	ldw	r5,-8(fp)
 4029e44:	01010134 	movhi	r4,1028
 4029e48:	212add04 	addi	r4,r4,-21644
 4029e4c:	4029d200 	call	4029d20 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4029e50:	01c07fc4 	movi	r7,511
 4029e54:	01800044 	movi	r6,1
 4029e58:	e17fff17 	ldw	r5,-4(fp)
 4029e5c:	01010134 	movhi	r4,1028
 4029e60:	212ae304 	addi	r4,r4,-21620
 4029e64:	4029d200 	call	4029d20 <alt_open_fd>
}  
 4029e68:	0001883a 	nop
 4029e6c:	e037883a 	mov	sp,fp
 4029e70:	dfc00117 	ldw	ra,4(sp)
 4029e74:	df000017 	ldw	fp,0(sp)
 4029e78:	dec00204 	addi	sp,sp,8
 4029e7c:	f800283a 	ret

04029e80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4029e80:	defffe04 	addi	sp,sp,-8
 4029e84:	dfc00115 	stw	ra,4(sp)
 4029e88:	df000015 	stw	fp,0(sp)
 4029e8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4029e90:	d0a00b17 	ldw	r2,-32724(gp)
 4029e94:	10000326 	beq	r2,zero,4029ea4 <alt_get_errno+0x24>
 4029e98:	d0a00b17 	ldw	r2,-32724(gp)
 4029e9c:	103ee83a 	callr	r2
 4029ea0:	00000106 	br	4029ea8 <alt_get_errno+0x28>
 4029ea4:	d09ea004 	addi	r2,gp,31360
}
 4029ea8:	e037883a 	mov	sp,fp
 4029eac:	dfc00117 	ldw	ra,4(sp)
 4029eb0:	df000017 	ldw	fp,0(sp)
 4029eb4:	dec00204 	addi	sp,sp,8
 4029eb8:	f800283a 	ret

04029ebc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4029ebc:	defffb04 	addi	sp,sp,-20
 4029ec0:	dfc00415 	stw	ra,16(sp)
 4029ec4:	df000315 	stw	fp,12(sp)
 4029ec8:	dc000215 	stw	r16,8(sp)
 4029ecc:	df000304 	addi	fp,sp,12
 4029ed0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4029ed4:	e0bffe17 	ldw	r2,-8(fp)
 4029ed8:	10800217 	ldw	r2,8(r2)
 4029edc:	10d00034 	orhi	r3,r2,16384
 4029ee0:	e0bffe17 	ldw	r2,-8(fp)
 4029ee4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4029ee8:	e03ffd15 	stw	zero,-12(fp)
 4029eec:	00002306 	br	4029f7c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4029ef0:	04010134 	movhi	r16,1028
 4029ef4:	842add04 	addi	r16,r16,-21644
 4029ef8:	e0bffd17 	ldw	r2,-12(fp)
 4029efc:	01400304 	movi	r5,12
 4029f00:	1009883a 	mov	r4,r2
 4029f04:	40191000 	call	4019100 <__mulsi3>
 4029f08:	8085883a 	add	r2,r16,r2
 4029f0c:	10c00017 	ldw	r3,0(r2)
 4029f10:	e0bffe17 	ldw	r2,-8(fp)
 4029f14:	10800017 	ldw	r2,0(r2)
 4029f18:	1880151e 	bne	r3,r2,4029f70 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4029f1c:	04010134 	movhi	r16,1028
 4029f20:	842add04 	addi	r16,r16,-21644
 4029f24:	e0bffd17 	ldw	r2,-12(fp)
 4029f28:	01400304 	movi	r5,12
 4029f2c:	1009883a 	mov	r4,r2
 4029f30:	40191000 	call	4019100 <__mulsi3>
 4029f34:	8085883a 	add	r2,r16,r2
 4029f38:	10800204 	addi	r2,r2,8
 4029f3c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4029f40:	10000b0e 	bge	r2,zero,4029f70 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4029f44:	01400304 	movi	r5,12
 4029f48:	e13ffd17 	ldw	r4,-12(fp)
 4029f4c:	40191000 	call	4019100 <__mulsi3>
 4029f50:	1007883a 	mov	r3,r2
 4029f54:	00810134 	movhi	r2,1028
 4029f58:	10aadd04 	addi	r2,r2,-21644
 4029f5c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4029f60:	e0bffe17 	ldw	r2,-8(fp)
 4029f64:	18800226 	beq	r3,r2,4029f70 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4029f68:	00bffcc4 	movi	r2,-13
 4029f6c:	00000806 	br	4029f90 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4029f70:	e0bffd17 	ldw	r2,-12(fp)
 4029f74:	10800044 	addi	r2,r2,1
 4029f78:	e0bffd15 	stw	r2,-12(fp)
 4029f7c:	d0a00a17 	ldw	r2,-32728(gp)
 4029f80:	1007883a 	mov	r3,r2
 4029f84:	e0bffd17 	ldw	r2,-12(fp)
 4029f88:	18bfd92e 	bgeu	r3,r2,4029ef0 <__alt_data_end+0xfc029ef0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4029f8c:	0005883a 	mov	r2,zero
}
 4029f90:	e6ffff04 	addi	sp,fp,-4
 4029f94:	dfc00217 	ldw	ra,8(sp)
 4029f98:	df000117 	ldw	fp,4(sp)
 4029f9c:	dc000017 	ldw	r16,0(sp)
 4029fa0:	dec00304 	addi	sp,sp,12
 4029fa4:	f800283a 	ret

04029fa8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4029fa8:	defff604 	addi	sp,sp,-40
 4029fac:	dfc00915 	stw	ra,36(sp)
 4029fb0:	df000815 	stw	fp,32(sp)
 4029fb4:	df000804 	addi	fp,sp,32
 4029fb8:	e13ffd15 	stw	r4,-12(fp)
 4029fbc:	e17ffe15 	stw	r5,-8(fp)
 4029fc0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4029fc4:	00bfffc4 	movi	r2,-1
 4029fc8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4029fcc:	00bffb44 	movi	r2,-19
 4029fd0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4029fd4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4029fd8:	d1600804 	addi	r5,gp,-32736
 4029fdc:	e13ffd17 	ldw	r4,-12(fp)
 4029fe0:	40299500 	call	4029950 <alt_find_dev>
 4029fe4:	e0bff815 	stw	r2,-32(fp)
 4029fe8:	e0bff817 	ldw	r2,-32(fp)
 4029fec:	1000051e 	bne	r2,zero,402a004 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4029ff0:	e13ffd17 	ldw	r4,-12(fp)
 4029ff4:	402a2cc0 	call	402a2cc <alt_find_file>
 4029ff8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4029ffc:	00800044 	movi	r2,1
 402a000:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 402a004:	e0bff817 	ldw	r2,-32(fp)
 402a008:	10002b26 	beq	r2,zero,402a0b8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 402a00c:	e13ff817 	ldw	r4,-32(fp)
 402a010:	402a3d40 	call	402a3d4 <alt_get_fd>
 402a014:	e0bff915 	stw	r2,-28(fp)
 402a018:	e0bff917 	ldw	r2,-28(fp)
 402a01c:	1000030e 	bge	r2,zero,402a02c <open+0x84>
    {
      status = index;
 402a020:	e0bff917 	ldw	r2,-28(fp)
 402a024:	e0bffa15 	stw	r2,-24(fp)
 402a028:	00002506 	br	402a0c0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 402a02c:	01400304 	movi	r5,12
 402a030:	e13ff917 	ldw	r4,-28(fp)
 402a034:	40191000 	call	4019100 <__mulsi3>
 402a038:	1007883a 	mov	r3,r2
 402a03c:	00810134 	movhi	r2,1028
 402a040:	10aadd04 	addi	r2,r2,-21644
 402a044:	1885883a 	add	r2,r3,r2
 402a048:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 402a04c:	e0fffe17 	ldw	r3,-8(fp)
 402a050:	00900034 	movhi	r2,16384
 402a054:	10bfffc4 	addi	r2,r2,-1
 402a058:	1886703a 	and	r3,r3,r2
 402a05c:	e0bffc17 	ldw	r2,-16(fp)
 402a060:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 402a064:	e0bffb17 	ldw	r2,-20(fp)
 402a068:	1000051e 	bne	r2,zero,402a080 <open+0xd8>
 402a06c:	e13ffc17 	ldw	r4,-16(fp)
 402a070:	4029ebc0 	call	4029ebc <alt_file_locked>
 402a074:	e0bffa15 	stw	r2,-24(fp)
 402a078:	e0bffa17 	ldw	r2,-24(fp)
 402a07c:	10001016 	blt	r2,zero,402a0c0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 402a080:	e0bff817 	ldw	r2,-32(fp)
 402a084:	10800317 	ldw	r2,12(r2)
 402a088:	10000826 	beq	r2,zero,402a0ac <open+0x104>
 402a08c:	e0bff817 	ldw	r2,-32(fp)
 402a090:	10800317 	ldw	r2,12(r2)
 402a094:	e1ffff17 	ldw	r7,-4(fp)
 402a098:	e1bffe17 	ldw	r6,-8(fp)
 402a09c:	e17ffd17 	ldw	r5,-12(fp)
 402a0a0:	e13ffc17 	ldw	r4,-16(fp)
 402a0a4:	103ee83a 	callr	r2
 402a0a8:	00000106 	br	402a0b0 <open+0x108>
 402a0ac:	0005883a 	mov	r2,zero
 402a0b0:	e0bffa15 	stw	r2,-24(fp)
 402a0b4:	00000206 	br	402a0c0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 402a0b8:	00bffb44 	movi	r2,-19
 402a0bc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 402a0c0:	e0bffa17 	ldw	r2,-24(fp)
 402a0c4:	1000090e 	bge	r2,zero,402a0ec <open+0x144>
  {
    alt_release_fd (index);  
 402a0c8:	e13ff917 	ldw	r4,-28(fp)
 402a0cc:	40267380 	call	4026738 <alt_release_fd>
    ALT_ERRNO = -status;
 402a0d0:	4029e800 	call	4029e80 <alt_get_errno>
 402a0d4:	1007883a 	mov	r3,r2
 402a0d8:	e0bffa17 	ldw	r2,-24(fp)
 402a0dc:	0085c83a 	sub	r2,zero,r2
 402a0e0:	18800015 	stw	r2,0(r3)
    return -1;
 402a0e4:	00bfffc4 	movi	r2,-1
 402a0e8:	00000106 	br	402a0f0 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 402a0ec:	e0bff917 	ldw	r2,-28(fp)
}
 402a0f0:	e037883a 	mov	sp,fp
 402a0f4:	dfc00117 	ldw	ra,4(sp)
 402a0f8:	df000017 	ldw	fp,0(sp)
 402a0fc:	dec00204 	addi	sp,sp,8
 402a100:	f800283a 	ret

0402a104 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 402a104:	defffa04 	addi	sp,sp,-24
 402a108:	df000515 	stw	fp,20(sp)
 402a10c:	df000504 	addi	fp,sp,20
 402a110:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402a114:	0005303a 	rdctl	r2,status
 402a118:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402a11c:	e0fffc17 	ldw	r3,-16(fp)
 402a120:	00bfff84 	movi	r2,-2
 402a124:	1884703a 	and	r2,r3,r2
 402a128:	1001703a 	wrctl	status,r2
  
  return context;
 402a12c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 402a130:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 402a134:	e0bfff17 	ldw	r2,-4(fp)
 402a138:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 402a13c:	e0bffd17 	ldw	r2,-12(fp)
 402a140:	10800017 	ldw	r2,0(r2)
 402a144:	e0fffd17 	ldw	r3,-12(fp)
 402a148:	18c00117 	ldw	r3,4(r3)
 402a14c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 402a150:	e0bffd17 	ldw	r2,-12(fp)
 402a154:	10800117 	ldw	r2,4(r2)
 402a158:	e0fffd17 	ldw	r3,-12(fp)
 402a15c:	18c00017 	ldw	r3,0(r3)
 402a160:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 402a164:	e0bffd17 	ldw	r2,-12(fp)
 402a168:	e0fffd17 	ldw	r3,-12(fp)
 402a16c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 402a170:	e0bffd17 	ldw	r2,-12(fp)
 402a174:	e0fffd17 	ldw	r3,-12(fp)
 402a178:	10c00015 	stw	r3,0(r2)
 402a17c:	e0bffb17 	ldw	r2,-20(fp)
 402a180:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402a184:	e0bffe17 	ldw	r2,-8(fp)
 402a188:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 402a18c:	0001883a 	nop
 402a190:	e037883a 	mov	sp,fp
 402a194:	df000017 	ldw	fp,0(sp)
 402a198:	dec00104 	addi	sp,sp,4
 402a19c:	f800283a 	ret

0402a1a0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 402a1a0:	defffb04 	addi	sp,sp,-20
 402a1a4:	dfc00415 	stw	ra,16(sp)
 402a1a8:	df000315 	stw	fp,12(sp)
 402a1ac:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 402a1b0:	d0a02017 	ldw	r2,-32640(gp)
 402a1b4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 402a1b8:	d09ea617 	ldw	r2,31384(gp)
 402a1bc:	10800044 	addi	r2,r2,1
 402a1c0:	d09ea615 	stw	r2,31384(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 402a1c4:	00002e06 	br	402a280 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 402a1c8:	e0bffd17 	ldw	r2,-12(fp)
 402a1cc:	10800017 	ldw	r2,0(r2)
 402a1d0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 402a1d4:	e0bffd17 	ldw	r2,-12(fp)
 402a1d8:	10800403 	ldbu	r2,16(r2)
 402a1dc:	10803fcc 	andi	r2,r2,255
 402a1e0:	10000426 	beq	r2,zero,402a1f4 <alt_tick+0x54>
 402a1e4:	d09ea617 	ldw	r2,31384(gp)
 402a1e8:	1000021e 	bne	r2,zero,402a1f4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 402a1ec:	e0bffd17 	ldw	r2,-12(fp)
 402a1f0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 402a1f4:	e0bffd17 	ldw	r2,-12(fp)
 402a1f8:	10800217 	ldw	r2,8(r2)
 402a1fc:	d0dea617 	ldw	r3,31384(gp)
 402a200:	18801d36 	bltu	r3,r2,402a278 <alt_tick+0xd8>
 402a204:	e0bffd17 	ldw	r2,-12(fp)
 402a208:	10800403 	ldbu	r2,16(r2)
 402a20c:	10803fcc 	andi	r2,r2,255
 402a210:	1000191e 	bne	r2,zero,402a278 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 402a214:	e0bffd17 	ldw	r2,-12(fp)
 402a218:	10800317 	ldw	r2,12(r2)
 402a21c:	e0fffd17 	ldw	r3,-12(fp)
 402a220:	18c00517 	ldw	r3,20(r3)
 402a224:	1809883a 	mov	r4,r3
 402a228:	103ee83a 	callr	r2
 402a22c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 402a230:	e0bfff17 	ldw	r2,-4(fp)
 402a234:	1000031e 	bne	r2,zero,402a244 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 402a238:	e13ffd17 	ldw	r4,-12(fp)
 402a23c:	402a1040 	call	402a104 <alt_alarm_stop>
 402a240:	00000d06 	br	402a278 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 402a244:	e0bffd17 	ldw	r2,-12(fp)
 402a248:	10c00217 	ldw	r3,8(r2)
 402a24c:	e0bfff17 	ldw	r2,-4(fp)
 402a250:	1887883a 	add	r3,r3,r2
 402a254:	e0bffd17 	ldw	r2,-12(fp)
 402a258:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 402a25c:	e0bffd17 	ldw	r2,-12(fp)
 402a260:	10c00217 	ldw	r3,8(r2)
 402a264:	d09ea617 	ldw	r2,31384(gp)
 402a268:	1880032e 	bgeu	r3,r2,402a278 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 402a26c:	e0bffd17 	ldw	r2,-12(fp)
 402a270:	00c00044 	movi	r3,1
 402a274:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 402a278:	e0bffe17 	ldw	r2,-8(fp)
 402a27c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 402a280:	e0fffd17 	ldw	r3,-12(fp)
 402a284:	d0a02004 	addi	r2,gp,-32640
 402a288:	18bfcf1e 	bne	r3,r2,402a1c8 <__alt_data_end+0xfc02a1c8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 402a28c:	0001883a 	nop
}
 402a290:	0001883a 	nop
 402a294:	e037883a 	mov	sp,fp
 402a298:	dfc00117 	ldw	ra,4(sp)
 402a29c:	df000017 	ldw	fp,0(sp)
 402a2a0:	dec00204 	addi	sp,sp,8
 402a2a4:	f800283a 	ret

0402a2a8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 402a2a8:	deffff04 	addi	sp,sp,-4
 402a2ac:	df000015 	stw	fp,0(sp)
 402a2b0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 402a2b4:	000170fa 	wrctl	ienable,zero
}
 402a2b8:	0001883a 	nop
 402a2bc:	e037883a 	mov	sp,fp
 402a2c0:	df000017 	ldw	fp,0(sp)
 402a2c4:	dec00104 	addi	sp,sp,4
 402a2c8:	f800283a 	ret

0402a2cc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 402a2cc:	defffb04 	addi	sp,sp,-20
 402a2d0:	dfc00415 	stw	ra,16(sp)
 402a2d4:	df000315 	stw	fp,12(sp)
 402a2d8:	df000304 	addi	fp,sp,12
 402a2dc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 402a2e0:	d0a00617 	ldw	r2,-32744(gp)
 402a2e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 402a2e8:	00003106 	br	402a3b0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 402a2ec:	e0bffd17 	ldw	r2,-12(fp)
 402a2f0:	10800217 	ldw	r2,8(r2)
 402a2f4:	1009883a 	mov	r4,r2
 402a2f8:	40195540 	call	4019554 <strlen>
 402a2fc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 402a300:	e0bffd17 	ldw	r2,-12(fp)
 402a304:	10c00217 	ldw	r3,8(r2)
 402a308:	e0bffe17 	ldw	r2,-8(fp)
 402a30c:	10bfffc4 	addi	r2,r2,-1
 402a310:	1885883a 	add	r2,r3,r2
 402a314:	10800003 	ldbu	r2,0(r2)
 402a318:	10803fcc 	andi	r2,r2,255
 402a31c:	1080201c 	xori	r2,r2,128
 402a320:	10bfe004 	addi	r2,r2,-128
 402a324:	10800bd8 	cmpnei	r2,r2,47
 402a328:	1000031e 	bne	r2,zero,402a338 <alt_find_file+0x6c>
    {
      len -= 1;
 402a32c:	e0bffe17 	ldw	r2,-8(fp)
 402a330:	10bfffc4 	addi	r2,r2,-1
 402a334:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 402a338:	e0bffe17 	ldw	r2,-8(fp)
 402a33c:	e0ffff17 	ldw	r3,-4(fp)
 402a340:	1885883a 	add	r2,r3,r2
 402a344:	10800003 	ldbu	r2,0(r2)
 402a348:	10803fcc 	andi	r2,r2,255
 402a34c:	1080201c 	xori	r2,r2,128
 402a350:	10bfe004 	addi	r2,r2,-128
 402a354:	10800be0 	cmpeqi	r2,r2,47
 402a358:	1000081e 	bne	r2,zero,402a37c <alt_find_file+0xb0>
 402a35c:	e0bffe17 	ldw	r2,-8(fp)
 402a360:	e0ffff17 	ldw	r3,-4(fp)
 402a364:	1885883a 	add	r2,r3,r2
 402a368:	10800003 	ldbu	r2,0(r2)
 402a36c:	10803fcc 	andi	r2,r2,255
 402a370:	1080201c 	xori	r2,r2,128
 402a374:	10bfe004 	addi	r2,r2,-128
 402a378:	10000a1e 	bne	r2,zero,402a3a4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 402a37c:	e0bffd17 	ldw	r2,-12(fp)
 402a380:	10800217 	ldw	r2,8(r2)
 402a384:	e0fffe17 	ldw	r3,-8(fp)
 402a388:	180d883a 	mov	r6,r3
 402a38c:	e17fff17 	ldw	r5,-4(fp)
 402a390:	1009883a 	mov	r4,r2
 402a394:	402a5800 	call	402a580 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 402a398:	1000021e 	bne	r2,zero,402a3a4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 402a39c:	e0bffd17 	ldw	r2,-12(fp)
 402a3a0:	00000706 	br	402a3c0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 402a3a4:	e0bffd17 	ldw	r2,-12(fp)
 402a3a8:	10800017 	ldw	r2,0(r2)
 402a3ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 402a3b0:	e0fffd17 	ldw	r3,-12(fp)
 402a3b4:	d0a00604 	addi	r2,gp,-32744
 402a3b8:	18bfcc1e 	bne	r3,r2,402a2ec <__alt_data_end+0xfc02a2ec>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 402a3bc:	0005883a 	mov	r2,zero
}
 402a3c0:	e037883a 	mov	sp,fp
 402a3c4:	dfc00117 	ldw	ra,4(sp)
 402a3c8:	df000017 	ldw	fp,0(sp)
 402a3cc:	dec00204 	addi	sp,sp,8
 402a3d0:	f800283a 	ret

0402a3d4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 402a3d4:	defffa04 	addi	sp,sp,-24
 402a3d8:	dfc00515 	stw	ra,20(sp)
 402a3dc:	df000415 	stw	fp,16(sp)
 402a3e0:	dc000315 	stw	r16,12(sp)
 402a3e4:	df000404 	addi	fp,sp,16
 402a3e8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 402a3ec:	00bffa04 	movi	r2,-24
 402a3f0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 402a3f4:	e03ffc15 	stw	zero,-16(fp)
 402a3f8:	00001d06 	br	402a470 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 402a3fc:	04010134 	movhi	r16,1028
 402a400:	842add04 	addi	r16,r16,-21644
 402a404:	e0bffc17 	ldw	r2,-16(fp)
 402a408:	01400304 	movi	r5,12
 402a40c:	1009883a 	mov	r4,r2
 402a410:	40191000 	call	4019100 <__mulsi3>
 402a414:	8085883a 	add	r2,r16,r2
 402a418:	10800017 	ldw	r2,0(r2)
 402a41c:	1000111e 	bne	r2,zero,402a464 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 402a420:	04010134 	movhi	r16,1028
 402a424:	842add04 	addi	r16,r16,-21644
 402a428:	e0bffc17 	ldw	r2,-16(fp)
 402a42c:	01400304 	movi	r5,12
 402a430:	1009883a 	mov	r4,r2
 402a434:	40191000 	call	4019100 <__mulsi3>
 402a438:	8085883a 	add	r2,r16,r2
 402a43c:	e0fffe17 	ldw	r3,-8(fp)
 402a440:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 402a444:	d0e00a17 	ldw	r3,-32728(gp)
 402a448:	e0bffc17 	ldw	r2,-16(fp)
 402a44c:	1880020e 	bge	r3,r2,402a458 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 402a450:	e0bffc17 	ldw	r2,-16(fp)
 402a454:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 402a458:	e0bffc17 	ldw	r2,-16(fp)
 402a45c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 402a460:	00000606 	br	402a47c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 402a464:	e0bffc17 	ldw	r2,-16(fp)
 402a468:	10800044 	addi	r2,r2,1
 402a46c:	e0bffc15 	stw	r2,-16(fp)
 402a470:	e0bffc17 	ldw	r2,-16(fp)
 402a474:	10800810 	cmplti	r2,r2,32
 402a478:	103fe01e 	bne	r2,zero,402a3fc <__alt_data_end+0xfc02a3fc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 402a47c:	e0bffd17 	ldw	r2,-12(fp)
}
 402a480:	e6ffff04 	addi	sp,fp,-4
 402a484:	dfc00217 	ldw	ra,8(sp)
 402a488:	df000117 	ldw	fp,4(sp)
 402a48c:	dc000017 	ldw	r16,0(sp)
 402a490:	dec00304 	addi	sp,sp,12
 402a494:	f800283a 	ret

0402a498 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 402a498:	defffe04 	addi	sp,sp,-8
 402a49c:	df000115 	stw	fp,4(sp)
 402a4a0:	df000104 	addi	fp,sp,4
 402a4a4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 402a4a8:	e0bfff17 	ldw	r2,-4(fp)
 402a4ac:	10bffe84 	addi	r2,r2,-6
 402a4b0:	10c00428 	cmpgeui	r3,r2,16
 402a4b4:	18001a1e 	bne	r3,zero,402a520 <alt_exception_cause_generated_bad_addr+0x88>
 402a4b8:	100690ba 	slli	r3,r2,2
 402a4bc:	008100f4 	movhi	r2,1027
 402a4c0:	10a93404 	addi	r2,r2,-23344
 402a4c4:	1885883a 	add	r2,r3,r2
 402a4c8:	10800017 	ldw	r2,0(r2)
 402a4cc:	1000683a 	jmp	r2
 402a4d0:	0402a510 	cmplti	r16,zero,2708
 402a4d4:	0402a510 	cmplti	r16,zero,2708
 402a4d8:	0402a520 	cmpeqi	r16,zero,2708
 402a4dc:	0402a520 	cmpeqi	r16,zero,2708
 402a4e0:	0402a520 	cmpeqi	r16,zero,2708
 402a4e4:	0402a510 	cmplti	r16,zero,2708
 402a4e8:	0402a518 	cmpnei	r16,zero,2708
 402a4ec:	0402a520 	cmpeqi	r16,zero,2708
 402a4f0:	0402a510 	cmplti	r16,zero,2708
 402a4f4:	0402a510 	cmplti	r16,zero,2708
 402a4f8:	0402a520 	cmpeqi	r16,zero,2708
 402a4fc:	0402a510 	cmplti	r16,zero,2708
 402a500:	0402a518 	cmpnei	r16,zero,2708
 402a504:	0402a520 	cmpeqi	r16,zero,2708
 402a508:	0402a520 	cmpeqi	r16,zero,2708
 402a50c:	0402a510 	cmplti	r16,zero,2708
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 402a510:	00800044 	movi	r2,1
 402a514:	00000306 	br	402a524 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 402a518:	0005883a 	mov	r2,zero
 402a51c:	00000106 	br	402a524 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 402a520:	0005883a 	mov	r2,zero
  }
}
 402a524:	e037883a 	mov	sp,fp
 402a528:	df000017 	ldw	fp,0(sp)
 402a52c:	dec00104 	addi	sp,sp,4
 402a530:	f800283a 	ret

0402a534 <atexit>:
 402a534:	200b883a 	mov	r5,r4
 402a538:	000f883a 	mov	r7,zero
 402a53c:	000d883a 	mov	r6,zero
 402a540:	0009883a 	mov	r4,zero
 402a544:	402a6cc1 	jmpi	402a6cc <__register_exitproc>

0402a548 <exit>:
 402a548:	defffe04 	addi	sp,sp,-8
 402a54c:	000b883a 	mov	r5,zero
 402a550:	dc000015 	stw	r16,0(sp)
 402a554:	dfc00115 	stw	ra,4(sp)
 402a558:	2021883a 	mov	r16,r4
 402a55c:	402a7e40 	call	402a7e4 <__call_exitprocs>
 402a560:	00810134 	movhi	r2,1028
 402a564:	10af8004 	addi	r2,r2,-16896
 402a568:	11000017 	ldw	r4,0(r2)
 402a56c:	20800f17 	ldw	r2,60(r4)
 402a570:	10000126 	beq	r2,zero,402a578 <exit+0x30>
 402a574:	103ee83a 	callr	r2
 402a578:	8009883a 	mov	r4,r16
 402a57c:	402a9640 	call	402a964 <_exit>

0402a580 <memcmp>:
 402a580:	01c000c4 	movi	r7,3
 402a584:	3980192e 	bgeu	r7,r6,402a5ec <memcmp+0x6c>
 402a588:	2144b03a 	or	r2,r4,r5
 402a58c:	11c4703a 	and	r2,r2,r7
 402a590:	10000f26 	beq	r2,zero,402a5d0 <memcmp+0x50>
 402a594:	20800003 	ldbu	r2,0(r4)
 402a598:	28c00003 	ldbu	r3,0(r5)
 402a59c:	10c0151e 	bne	r2,r3,402a5f4 <memcmp+0x74>
 402a5a0:	31bfff84 	addi	r6,r6,-2
 402a5a4:	01ffffc4 	movi	r7,-1
 402a5a8:	00000406 	br	402a5bc <memcmp+0x3c>
 402a5ac:	20800003 	ldbu	r2,0(r4)
 402a5b0:	28c00003 	ldbu	r3,0(r5)
 402a5b4:	31bfffc4 	addi	r6,r6,-1
 402a5b8:	10c00e1e 	bne	r2,r3,402a5f4 <memcmp+0x74>
 402a5bc:	21000044 	addi	r4,r4,1
 402a5c0:	29400044 	addi	r5,r5,1
 402a5c4:	31fff91e 	bne	r6,r7,402a5ac <__alt_data_end+0xfc02a5ac>
 402a5c8:	0005883a 	mov	r2,zero
 402a5cc:	f800283a 	ret
 402a5d0:	20c00017 	ldw	r3,0(r4)
 402a5d4:	28800017 	ldw	r2,0(r5)
 402a5d8:	18bfee1e 	bne	r3,r2,402a594 <__alt_data_end+0xfc02a594>
 402a5dc:	31bfff04 	addi	r6,r6,-4
 402a5e0:	21000104 	addi	r4,r4,4
 402a5e4:	29400104 	addi	r5,r5,4
 402a5e8:	39bff936 	bltu	r7,r6,402a5d0 <__alt_data_end+0xfc02a5d0>
 402a5ec:	303fe91e 	bne	r6,zero,402a594 <__alt_data_end+0xfc02a594>
 402a5f0:	003ff506 	br	402a5c8 <__alt_data_end+0xfc02a5c8>
 402a5f4:	10c5c83a 	sub	r2,r2,r3
 402a5f8:	f800283a 	ret

0402a5fc <strncmp>:
 402a5fc:	30003126 	beq	r6,zero,402a6c4 <strncmp+0xc8>
 402a600:	2144b03a 	or	r2,r4,r5
 402a604:	108000cc 	andi	r2,r2,3
 402a608:	10001e1e 	bne	r2,zero,402a684 <strncmp+0x88>
 402a60c:	024000c4 	movi	r9,3
 402a610:	49801c2e 	bgeu	r9,r6,402a684 <strncmp+0x88>
 402a614:	20800017 	ldw	r2,0(r4)
 402a618:	28c00017 	ldw	r3,0(r5)
 402a61c:	10c0191e 	bne	r2,r3,402a684 <strncmp+0x88>
 402a620:	31bfff04 	addi	r6,r6,-4
 402a624:	30002726 	beq	r6,zero,402a6c4 <strncmp+0xc8>
 402a628:	02ffbff4 	movhi	r11,65279
 402a62c:	5affbfc4 	addi	r11,r11,-257
 402a630:	0086303a 	nor	r3,zero,r2
 402a634:	02a02074 	movhi	r10,32897
 402a638:	12c5883a 	add	r2,r2,r11
 402a63c:	52a02004 	addi	r10,r10,-32640
 402a640:	10c4703a 	and	r2,r2,r3
 402a644:	1284703a 	and	r2,r2,r10
 402a648:	10000b26 	beq	r2,zero,402a678 <strncmp+0x7c>
 402a64c:	00001d06 	br	402a6c4 <strncmp+0xc8>
 402a650:	20c00017 	ldw	r3,0(r4)
 402a654:	29c00017 	ldw	r7,0(r5)
 402a658:	1ad1883a 	add	r8,r3,r11
 402a65c:	00c4303a 	nor	r2,zero,r3
 402a660:	4084703a 	and	r2,r8,r2
 402a664:	1284703a 	and	r2,r2,r10
 402a668:	19c0061e 	bne	r3,r7,402a684 <strncmp+0x88>
 402a66c:	31bfff04 	addi	r6,r6,-4
 402a670:	30001426 	beq	r6,zero,402a6c4 <strncmp+0xc8>
 402a674:	1000131e 	bne	r2,zero,402a6c4 <strncmp+0xc8>
 402a678:	21000104 	addi	r4,r4,4
 402a67c:	29400104 	addi	r5,r5,4
 402a680:	49bff336 	bltu	r9,r6,402a650 <__alt_data_end+0xfc02a650>
 402a684:	28800007 	ldb	r2,0(r5)
 402a688:	20c00007 	ldb	r3,0(r4)
 402a68c:	31bfffc4 	addi	r6,r6,-1
 402a690:	10c0081e 	bne	r2,r3,402a6b4 <strncmp+0xb8>
 402a694:	30000b26 	beq	r6,zero,402a6c4 <strncmp+0xc8>
 402a698:	10000a26 	beq	r2,zero,402a6c4 <strncmp+0xc8>
 402a69c:	21000044 	addi	r4,r4,1
 402a6a0:	29400044 	addi	r5,r5,1
 402a6a4:	20800007 	ldb	r2,0(r4)
 402a6a8:	28c00007 	ldb	r3,0(r5)
 402a6ac:	31bfffc4 	addi	r6,r6,-1
 402a6b0:	10fff826 	beq	r2,r3,402a694 <__alt_data_end+0xfc02a694>
 402a6b4:	20800003 	ldbu	r2,0(r4)
 402a6b8:	28c00003 	ldbu	r3,0(r5)
 402a6bc:	10c5c83a 	sub	r2,r2,r3
 402a6c0:	f800283a 	ret
 402a6c4:	0005883a 	mov	r2,zero
 402a6c8:	f800283a 	ret

0402a6cc <__register_exitproc>:
 402a6cc:	defffa04 	addi	sp,sp,-24
 402a6d0:	dc000315 	stw	r16,12(sp)
 402a6d4:	04010134 	movhi	r16,1028
 402a6d8:	842f8004 	addi	r16,r16,-16896
 402a6dc:	80c00017 	ldw	r3,0(r16)
 402a6e0:	dc400415 	stw	r17,16(sp)
 402a6e4:	dfc00515 	stw	ra,20(sp)
 402a6e8:	18805217 	ldw	r2,328(r3)
 402a6ec:	2023883a 	mov	r17,r4
 402a6f0:	10003726 	beq	r2,zero,402a7d0 <__register_exitproc+0x104>
 402a6f4:	10c00117 	ldw	r3,4(r2)
 402a6f8:	010007c4 	movi	r4,31
 402a6fc:	20c00e16 	blt	r4,r3,402a738 <__register_exitproc+0x6c>
 402a700:	1a000044 	addi	r8,r3,1
 402a704:	8800221e 	bne	r17,zero,402a790 <__register_exitproc+0xc4>
 402a708:	18c00084 	addi	r3,r3,2
 402a70c:	18c7883a 	add	r3,r3,r3
 402a710:	18c7883a 	add	r3,r3,r3
 402a714:	12000115 	stw	r8,4(r2)
 402a718:	10c7883a 	add	r3,r2,r3
 402a71c:	19400015 	stw	r5,0(r3)
 402a720:	0005883a 	mov	r2,zero
 402a724:	dfc00517 	ldw	ra,20(sp)
 402a728:	dc400417 	ldw	r17,16(sp)
 402a72c:	dc000317 	ldw	r16,12(sp)
 402a730:	dec00604 	addi	sp,sp,24
 402a734:	f800283a 	ret
 402a738:	00800034 	movhi	r2,0
 402a73c:	10800004 	addi	r2,r2,0
 402a740:	10002626 	beq	r2,zero,402a7dc <__register_exitproc+0x110>
 402a744:	01006404 	movi	r4,400
 402a748:	d9400015 	stw	r5,0(sp)
 402a74c:	d9800115 	stw	r6,4(sp)
 402a750:	d9c00215 	stw	r7,8(sp)
 402a754:	00000000 	call	0 <__alt_mem_SDRAM-0x4000000>
 402a758:	d9400017 	ldw	r5,0(sp)
 402a75c:	d9800117 	ldw	r6,4(sp)
 402a760:	d9c00217 	ldw	r7,8(sp)
 402a764:	10001d26 	beq	r2,zero,402a7dc <__register_exitproc+0x110>
 402a768:	81000017 	ldw	r4,0(r16)
 402a76c:	10000115 	stw	zero,4(r2)
 402a770:	02000044 	movi	r8,1
 402a774:	22405217 	ldw	r9,328(r4)
 402a778:	0007883a 	mov	r3,zero
 402a77c:	12400015 	stw	r9,0(r2)
 402a780:	20805215 	stw	r2,328(r4)
 402a784:	10006215 	stw	zero,392(r2)
 402a788:	10006315 	stw	zero,396(r2)
 402a78c:	883fde26 	beq	r17,zero,402a708 <__alt_data_end+0xfc02a708>
 402a790:	18c9883a 	add	r4,r3,r3
 402a794:	2109883a 	add	r4,r4,r4
 402a798:	1109883a 	add	r4,r2,r4
 402a79c:	21802215 	stw	r6,136(r4)
 402a7a0:	01800044 	movi	r6,1
 402a7a4:	12406217 	ldw	r9,392(r2)
 402a7a8:	30cc983a 	sll	r6,r6,r3
 402a7ac:	4992b03a 	or	r9,r9,r6
 402a7b0:	12406215 	stw	r9,392(r2)
 402a7b4:	21c04215 	stw	r7,264(r4)
 402a7b8:	01000084 	movi	r4,2
 402a7bc:	893fd21e 	bne	r17,r4,402a708 <__alt_data_end+0xfc02a708>
 402a7c0:	11006317 	ldw	r4,396(r2)
 402a7c4:	218cb03a 	or	r6,r4,r6
 402a7c8:	11806315 	stw	r6,396(r2)
 402a7cc:	003fce06 	br	402a708 <__alt_data_end+0xfc02a708>
 402a7d0:	18805304 	addi	r2,r3,332
 402a7d4:	18805215 	stw	r2,328(r3)
 402a7d8:	003fc606 	br	402a6f4 <__alt_data_end+0xfc02a6f4>
 402a7dc:	00bfffc4 	movi	r2,-1
 402a7e0:	003fd006 	br	402a724 <__alt_data_end+0xfc02a724>

0402a7e4 <__call_exitprocs>:
 402a7e4:	defff504 	addi	sp,sp,-44
 402a7e8:	df000915 	stw	fp,36(sp)
 402a7ec:	dd400615 	stw	r21,24(sp)
 402a7f0:	dc800315 	stw	r18,12(sp)
 402a7f4:	dfc00a15 	stw	ra,40(sp)
 402a7f8:	ddc00815 	stw	r23,32(sp)
 402a7fc:	dd800715 	stw	r22,28(sp)
 402a800:	dd000515 	stw	r20,20(sp)
 402a804:	dcc00415 	stw	r19,16(sp)
 402a808:	dc400215 	stw	r17,8(sp)
 402a80c:	dc000115 	stw	r16,4(sp)
 402a810:	d9000015 	stw	r4,0(sp)
 402a814:	2839883a 	mov	fp,r5
 402a818:	04800044 	movi	r18,1
 402a81c:	057fffc4 	movi	r21,-1
 402a820:	00810134 	movhi	r2,1028
 402a824:	10af8004 	addi	r2,r2,-16896
 402a828:	12000017 	ldw	r8,0(r2)
 402a82c:	45005217 	ldw	r20,328(r8)
 402a830:	44c05204 	addi	r19,r8,328
 402a834:	a0001c26 	beq	r20,zero,402a8a8 <__call_exitprocs+0xc4>
 402a838:	a0800117 	ldw	r2,4(r20)
 402a83c:	15ffffc4 	addi	r23,r2,-1
 402a840:	b8000d16 	blt	r23,zero,402a878 <__call_exitprocs+0x94>
 402a844:	14000044 	addi	r16,r2,1
 402a848:	8421883a 	add	r16,r16,r16
 402a84c:	8421883a 	add	r16,r16,r16
 402a850:	84402004 	addi	r17,r16,128
 402a854:	a463883a 	add	r17,r20,r17
 402a858:	a421883a 	add	r16,r20,r16
 402a85c:	e0001e26 	beq	fp,zero,402a8d8 <__call_exitprocs+0xf4>
 402a860:	80804017 	ldw	r2,256(r16)
 402a864:	e0801c26 	beq	fp,r2,402a8d8 <__call_exitprocs+0xf4>
 402a868:	bdffffc4 	addi	r23,r23,-1
 402a86c:	843fff04 	addi	r16,r16,-4
 402a870:	8c7fff04 	addi	r17,r17,-4
 402a874:	bd7ff91e 	bne	r23,r21,402a85c <__alt_data_end+0xfc02a85c>
 402a878:	00800034 	movhi	r2,0
 402a87c:	10800004 	addi	r2,r2,0
 402a880:	10000926 	beq	r2,zero,402a8a8 <__call_exitprocs+0xc4>
 402a884:	a0800117 	ldw	r2,4(r20)
 402a888:	1000301e 	bne	r2,zero,402a94c <__call_exitprocs+0x168>
 402a88c:	a0800017 	ldw	r2,0(r20)
 402a890:	10003226 	beq	r2,zero,402a95c <__call_exitprocs+0x178>
 402a894:	a009883a 	mov	r4,r20
 402a898:	98800015 	stw	r2,0(r19)
 402a89c:	00000000 	call	0 <__alt_mem_SDRAM-0x4000000>
 402a8a0:	9d000017 	ldw	r20,0(r19)
 402a8a4:	a03fe41e 	bne	r20,zero,402a838 <__alt_data_end+0xfc02a838>
 402a8a8:	dfc00a17 	ldw	ra,40(sp)
 402a8ac:	df000917 	ldw	fp,36(sp)
 402a8b0:	ddc00817 	ldw	r23,32(sp)
 402a8b4:	dd800717 	ldw	r22,28(sp)
 402a8b8:	dd400617 	ldw	r21,24(sp)
 402a8bc:	dd000517 	ldw	r20,20(sp)
 402a8c0:	dcc00417 	ldw	r19,16(sp)
 402a8c4:	dc800317 	ldw	r18,12(sp)
 402a8c8:	dc400217 	ldw	r17,8(sp)
 402a8cc:	dc000117 	ldw	r16,4(sp)
 402a8d0:	dec00b04 	addi	sp,sp,44
 402a8d4:	f800283a 	ret
 402a8d8:	a0800117 	ldw	r2,4(r20)
 402a8dc:	80c00017 	ldw	r3,0(r16)
 402a8e0:	10bfffc4 	addi	r2,r2,-1
 402a8e4:	15c01426 	beq	r2,r23,402a938 <__call_exitprocs+0x154>
 402a8e8:	80000015 	stw	zero,0(r16)
 402a8ec:	183fde26 	beq	r3,zero,402a868 <__alt_data_end+0xfc02a868>
 402a8f0:	95c8983a 	sll	r4,r18,r23
 402a8f4:	a0806217 	ldw	r2,392(r20)
 402a8f8:	a5800117 	ldw	r22,4(r20)
 402a8fc:	2084703a 	and	r2,r4,r2
 402a900:	10000b26 	beq	r2,zero,402a930 <__call_exitprocs+0x14c>
 402a904:	a0806317 	ldw	r2,396(r20)
 402a908:	2088703a 	and	r4,r4,r2
 402a90c:	20000c1e 	bne	r4,zero,402a940 <__call_exitprocs+0x15c>
 402a910:	89400017 	ldw	r5,0(r17)
 402a914:	d9000017 	ldw	r4,0(sp)
 402a918:	183ee83a 	callr	r3
 402a91c:	a0800117 	ldw	r2,4(r20)
 402a920:	15bfbf1e 	bne	r2,r22,402a820 <__alt_data_end+0xfc02a820>
 402a924:	98800017 	ldw	r2,0(r19)
 402a928:	153fcf26 	beq	r2,r20,402a868 <__alt_data_end+0xfc02a868>
 402a92c:	003fbc06 	br	402a820 <__alt_data_end+0xfc02a820>
 402a930:	183ee83a 	callr	r3
 402a934:	003ff906 	br	402a91c <__alt_data_end+0xfc02a91c>
 402a938:	a5c00115 	stw	r23,4(r20)
 402a93c:	003feb06 	br	402a8ec <__alt_data_end+0xfc02a8ec>
 402a940:	89000017 	ldw	r4,0(r17)
 402a944:	183ee83a 	callr	r3
 402a948:	003ff406 	br	402a91c <__alt_data_end+0xfc02a91c>
 402a94c:	a0800017 	ldw	r2,0(r20)
 402a950:	a027883a 	mov	r19,r20
 402a954:	1029883a 	mov	r20,r2
 402a958:	003fb606 	br	402a834 <__alt_data_end+0xfc02a834>
 402a95c:	0005883a 	mov	r2,zero
 402a960:	003ffb06 	br	402a950 <__alt_data_end+0xfc02a950>

0402a964 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 402a964:	defffd04 	addi	sp,sp,-12
 402a968:	df000215 	stw	fp,8(sp)
 402a96c:	df000204 	addi	fp,sp,8
 402a970:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 402a974:	0001883a 	nop
 402a978:	e0bfff17 	ldw	r2,-4(fp)
 402a97c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 402a980:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 402a984:	10000226 	beq	r2,zero,402a990 <_exit+0x2c>
    ALT_SIM_FAIL();
 402a988:	002af070 	cmpltui	zero,zero,43969
 402a98c:	00000106 	br	402a994 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 402a990:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 402a994:	003fff06 	br	402a994 <__alt_data_end+0xfc02a994>
